{
    "321": "\t/**\n\t * Returns the pushes lowerbound of this board position.\n\t * \n\t * @return the pushes lowerbound\n\t */\n",
    "323": "\t/**\n\t * Sets the pushes lowerbound of this board position.\n\t * \n\t * @param pushesLowerbound\n\t */\n",
    "324": "\t\t/**\n\t\t * Play a sound.\n\t\t */\n",
    "343": "\t/**\n\t * Returns the influence value between the positions of the passed boxes.\n\t * <p>\n\t * The LOWER the influence value the more influence has the box on the other box.\n\t * \n\t * @param boxNo1  the position of the first  box whose position is considered\n\t * @param boxNo2  the position of the second box whose position is considered\n\t * @return the influence value \n\t */\n",
    "351": "\t/**\n\t * Sets the box positions and the player position.\n\t *     \n\t * @param positions positions of the boxes and the player\n\t */\n",
    "352": "\t/**\n\t * Returns the player position of this board position.\n\t * \n\t * @return the player position\n\t */\n",
    "355": "\t/**\n\t * Returns the number of the moved box.\n\t * \n\t * @return the number of the moved box\n\t */\n",
    "357": "\t/**\n\t * Returns the start position of the pulled box.\n\t * \n\t * @return the position of the box before it was pulled.\n\t */\n",
    "359": "\t/**\n\t * Returns the target position of the pulled box.\n\t * \n\t * @return the position of the box after it was pulled.\n\t */\n",
    "361": "    /**\n     * Returns the preceding board position of this board position.\n     *\n     * @return the preceding board position of this board position\n     */\n",
    "364": "\t/**\n\t * Compares both board positions. Note: lower values means high priority\n\t * in the <code>PriorityQueue</code>.\n\t */\n",
    "373": "\t/**\n\t * Returns whether the push is a forced push, that means a box \n\t * must be pushed from the start position to the target position.\n\t */\n",
    "376": "\t/**\n\t * Sets the status bar text.\n\t * \n\t * @param text\n\t *            the text to be shown in the status bar\n\t */\n",
    "412": "\t/**\n\t * Returns whether the solver has been stopped due to insufficient memory.\n\t * \n\t * @return <code>true</code> if the solver stopped due to insufficient memory, and\n\t *        <code>false</code> otherwise\n\t */\n",
    "428": "\t/**\n\t * Returns the board position with the shortest determined solution path length.\n\t *\n     * @return board position with the shortest determined solution path length.\n     */\n",
    "437": "\t/**\n\t * Returns the preceding board position of this board position.\n\t * \n\t * @return preceding board position\n\t */\n",
    "440": "\t/**\n\t * Returns the direction the box has been pushed.\n\t * \n\t * @return Direction of the push\n\t */\n",
    "442": "\t/**\n\t * Returns the number of the pushed box.\n\t * \n\t * @return Number of the pushed box\n\t */\n",
    "445": "\t/**\n\t * Gives the name of this solver as used to tag new solutions.\n\t * @return the name of this solver\n\t */\n",
    "446": "\t/**\n\t * Return the player position of this board position.\n\t * \n\t * @return the player position\n\t */\n",
    "448": "\t/**\n\t * Sets the box- and the player positions.\n\t *     \n\t * @param positions Positions of the boxes and the player\n\t */\n",
    "450": "\t/**\n\t * An absolute board position usually hasn't a preceding board position. This method is\n\t * implemented for easier working with linked lists.\n\t *\n\t * @return always null\n\t */\n",
    "454": "\t/**\n\t * Sets the searchdirection of the solutionsearch this class is created in.\n\t * \n\t * @param searchDirection Direction of the search\n\t */\n",
    "458": "\t/**\n\t * For avoiding some casts this method is implemented here. Actually, this method\n\t * is only needed for relative board positions.\n\t *\n\t * @return always 0\n\t */\n",
    "459": "\t/** \n\t * Returns the number of pushes of this board position.\n\t * \n\t * @return number of pushes\n\t */\n",
    "461": "\t/**\n\t * Absolute board positions are only created when no box has been pushed. This value is interpreted \n\t * during a search for a solution (no box has been pushed so no tunnel check has to be performed).\n\t *\n\t * @return always <code>NO_BOX_PUSHED</code>\n\t */\n",
    "463": "\t/**\n\t * Sets the maximum solution length. \n\t * This is a value representing the iteration depth during the search for a solution.\n\t * (first all board positions are created that have a maximum solution length of x pushes.\n\t * Then all board positions are created with a maximum solution length of x+1, ...\n\t *  \n\t * @param maximumSolutionLength\tthe maximum solution length to be set\n\t */\n",
    "464": "\t/**\n\t * Return the player position of this board position.\n\t * \n\t * @return the player position\n\t */\n",
    "466": "\t/**\n\t * Returns the maximum solution length (= iteration depth).\n\t * \n\t * @return\tthe maximum solution length stored in this board position\n\t */\n",
    "467": "\t/**\n\t * Returns the number of pushes that were made to reach this board position.\n\t * An absolute board position is only created at the beginning, so this is\n\t * always 0.\n\t * This number is used in the solving methods.\n\t * \n\t * @return always 0\n\t */\n",
    "472": "\t/**\n\t * Returns a string to be attached to a solution, which says that this\n\t * solver did create the solution at the passed point in time.\n\t * \n\t * @param date the creation time point, or <code>null</code> for \"now\"\n\t * @return string identifying the solver as solution creator\n\t * @see Solution#name\n\t */\n",
    "476": "\t/**\n\t * Sets the number of moves.\n\t * \n\t * @param movesCount\tNumber of moves the player has done\n\t */\n",
    "487": "\t/**\n\t * Returns the index in the packing sequence that has already been reached.\n\t * \n\t * @return index in the packing sequence\n\t */\n",
    "489": "\t/**\n\t * Sets the index in the packing sequence that has been reached.\n\t * \n\t * @param indexPackingSequence the index in the packing sequence\n\t */\n",
    "494": "\t/**\n\t * Returns, whether a box is inactive, and therefore a position value 0\n\t * has to be assumed.\n\t *\n\t * @param  boxNo number of the box to be checked for being inactive\n\t * @return <code>true</code> if the box is inactive, and\n\t * \t\t  <code>false</code> if the box is active\n\t */\n",
    "496": "\t/**\n\t *  Returns whether the pushed box has been inactive.\n\t *\n\t * @return <code>true</code> the box is inactive\n\t * \t\t\t<code>false</code> the box is active\n\t */\n",
    "497": "\t/**\n\t * Mark this board position to be a deadlock.\n\t */\n",
    "498": "\t/**\n\t * Mark this board position not to be a deadlock.\n\t * <p>\n\t * Attention: this board position is only for the current\n\t * investigated corral assumed not to be a deadlock.\n\t * Nevertheless it can be a deadlock, because not all\n\t * deadlocks are detected.\n\t */\n",
    "499": "\t\t/**\n\t\t * Retrieves the current value of the debug variable\n\t\t * described by this object, by using reflection.\n\t\t * \n\t\t * @return current value of the described debug variable\n\t\t */\n",
    "500": "\t/**\n\t * Returns a string to be attached to a solution, which says that this\n\t * solver did create the solution \"now\".\n\t * \n\t * @return string identifying the solver as solution creator\n\t * @see Solution#name\n\t */\n",
    "501": "\t/**\n\t * Sets the number of the corral this board position belongs to.\n\t * \n\t * @param corralNo the number of the corral\n\t */\n",
    "503": "\t/**\n\t * Sets the status bar text.\n\t * \n\t * @param text\n\t *            the text to be shown in the status bar\n\t */\n",
    "504": "\t/**\n\t * Returns the number of the corral this board position belongs to.\n\t * \n\t * @return the number of the corral\n\t */\n",
    "506": "\t/**\n\t * Returns whether this board position has been proven to be a corral deadlock.\n\t * \n\t * @return <code>true</code> if this board position is a corral deadlock, and\n\t * \t     <code>false</code> if this board position has not been proven to be a deadlock\n\t */\n",
    "507": "\t/**\n\t * Returns whether this board position is classified not to be a corral deadlock.\n\t * <p>\n\t * This board position can be a corral deadlock, anyhow. For example the corral\n\t * detection could be aborted due to a reached time limit. Nevertheless it would\n\t * be classified as not to be a corral deadlock.\n\t * \n\t * @return <code>true</code> this board position has been classified not to be a corral deadlock\n\t * \t\t  <code>false</code> otherwise\n\t */\n",
    "508": "\t/**\n\t * Returns whether this board position has been classified (deadlock or no deadlock).\n\t * <p>\n\t * This method returns the same value as <code>!isBeeingAnalyzed()</code>\n\t * \n\t * @return <code>true</code> this board position has been classified.\n\t * \t\t<code>false</code> this board position has not been classified yet.\n\t */\n",
    "510": "\t/**\n\t * Returns whether is currently beeing analyzed to be a corral deadlock or not.\n\t * <p>\n\t * Every corral (= board position) not classified counts as \"beeingAnalyzed\". Due to every\n\t * board position occured during the corral detection getting a corral number - even if it\n\t * isn't a corral at all - finally there can be board positions still having the status\n\t * \"isBeeingAnalyzed\".\n\t * \n\t * @return <code>true</code> if the deadlock status of this board position\n\t *                           is currently beeing analyzed, and\n\t * \t\t  <code>false</code> otherwise\n\t */\n",
    "513": "\t/**\n\t * Returns a deep clone of the current board.\n\t * \n\t * @return the clone of this board\n\t */\n",
    "514": "\t\t/**\n\t\t * Sets the value of the debug variable described by this object\n\t\t * by using reflection.\n\t\t * \n\t\t * @param value  to be assigned to the described debug variable\n\t\t */\n",
    "517": "\t/**\n\t * Returns whether the two box configurations are equal.\n\t * \n\t * @param boxConfigurationNumber logical index into our flat data array\n\t * @param boxConfiguration the candidate box configuration to compare with\n\t * @return <code>true</code> if both box configurations are equal, and<br>\n\t *        <code>false</code> otherwise\n\t */\n",
    "523": "\t/**\n\t * Returns the maximal capacity of this storage.\n\t * \n\t * @return the maximal capacity of this storage\n\t */\n",
    "524": "\t/**\n\t * Adds data to the queue.\n\t * \n\t * @param boardPositionIndex the board position to be added\n\t * @param boardPositionPredecessor the predecessor to be added\n\t */\n",
    "531": "\t/**\n\t * Logically removes all board positions from the queue\n\t * until a board position different to the passed one occurs in the queue.\n\t * \n\t * @param boardPosition the board position to be over jumped\n\t */\n",
    "535": "\t/**\n\t * Retrieves and removes the last board position of this queue.\n\t * \n\t * @return the previous board position\n\t */\n",
    "538": "\t/**\n\t * Jumps backwards in the queue by the passed number of board positions.\n\t * \n\t * @param jumpCount number of board positions to be skipped backwards\n\t */\n",
    "542": "\t/**\n\t * Returns whether the queue is empty.\n\t * \n\t * @return <code>true</code> when queue is empty, and<br>\n\t *        <code>false</code> otherwise\n\t */\n",
    "547": "\t/**\n\t * Returns whether all box configurations could be generated. \n\t * \n\t * @return <code>true</code> if all box configurations have been generated,\n\t * \t      <code>false</code> if there is insufficient memory available,\n\t *        and not all box configurations have been generated.\n\t */\n",
    "551": "\t/**\n\t * Every object of this class gets passed a pushes depth. This depth holds\n\t * the number of pushes needed to reach the box configuration passed\n\t * to the constructor. This value is unique because there is only one\n\t * generation Runnable for every box configuration of the solution\n\t * to be optimized. By reading this value the optimizer can identify\n\t * each object of this class.\n\t * \n\t * @return the pushes depth that has been passed to the constructor of this object\n\t */\n",
    "561": "\t/**\n\t * Determine, whether this solution is better than the passed solution,\n\t * with respect to moves and then pushes.\n\t * \n\t * @param other the other solution we compare against\n\t * @return whether this solution is better\n\t */\n",
    "563": "\t/**\n\t * Determine, whether this solution is better than the passed solution,\n\t * with respect to pushes and then moves.\n\t * \n\t * @param other the other solution we compare against\n\t * @return whether this solution is better\n\t */\n",
    "568": "\t/**\n\t * Adds the specified board position into this priority queue.\n\t */\n",
    "570": "\t/**\n\t * Returns the number of stored <code>OptimizerBoardPositions</code>.\n\t * \n\t * @return the number of stored <code>OptimizerBoardPositions</code>\n\t */\n",
    "572": "\t/**\n\t * Removes and returns the board position having the lowest metrics (moves, pushes, ...).\n\t * \n\t * @return  board position having the lowest metrics \n\t */\n",
    "576": "\t/**\n\t * Adds the passed <code>String</code> to the log texts of the optimizer\n\t * to inform the user about the progress of the optimizer,\n\t * or to inform the developer about statistical data.\n\t * \n\t * @param text       text to be added to the log\n\t * @param stylename  registered name of style to be used\n\t */\n",
    "577": "\t /**\n\t  *Inserts the passed board position at the passed position.\n\t  * <p>\n\t  * This method moves the passed board position down until \n\t  * it is less than or equal to its children (or is a leaf).\n\t  *\n\t  * @param position the position to start the search for the correct position to insert into\n\t  * @param boardPosition the board position to be inserted\n\t  */\n",
    "580": "\t/**\n\t * Returns the number of board positions stored in this hash table.\n\t *\n\t * @return  the number of board positions stored in this hash table.\n\t */\n",
    "601": "\t/**\n\t * Removes all markings of squares.  \n\t */\n",
    "608": "\t/**\n\t * Debug method: without {@link Settings#isDebugModeActivated} nothing\n\t * visible happens.\n\t * In debug mode we print the current statistics to the optimizer logging.\n\t */\n",
    "610": "\t/**\n\t * Returns the box configuration index of the passed board position.\n\t * \n\t * @param boardPositionIndex  the index of the board position\n\t * @return the index the box configuration is stored at in the box configuration storage\n\t */\n",
    "613": "\t/**\n\t * Returns whether the second passed box configuration is a subset\n\t * of the first passed box configuration.\n\t * \n\t * @param boxConfiguration1\n\t *            box configuration 1\n\t * @param boxConfigurationArray\n\t *            array which contains the box configuration to be checked for\n\t *            being a subset\n\t * @param indexInArray\n\t *            index of the box configuration in the array\n\t * \n\t * @return <code>true</code> if the second passed box configuration is a subset\n\t *         of the first passed box configuration, and <code>false</code> otherwise\n\t */\n",
    "617": "\t/**\n\t * Returns the player position of the passed board position.\n\t * \n\t * @param boardPositionIndex  the index of the board position\n\t * @return the player position of the passed board position\n\t */\n",
    "619": "\t\t/**\n\t\t * Doubles the tree size.\n\t\t */\n",
    "626": "\t\t/**\n\t\t * Fills the sorted list with the box configurations from the tree.\n\t\t * \n\t\t * @param indexInTree index of the box configuration in the tree\n\t\t * @param last\t\n\t\t * @return \"lowest\" boxConfiguration at the moment in the tree\n\t\t */\n",
    "637": "\t/**\n\t * Returns the number of the currently selected object.\n\t * \n\t * @return number of the currently selected obj\n\t */\n",
    "638": "\t\t/**\n\t\t * Transforms the tree to a binary heap.\n\t\t * This method destroys the tree. That means:\n\t\t * only the binary heap can be used after this method has been called.\n\t\t */\n",
    "641": "\t/**\n\t * Using the mouse wheel is interpreted as a move through the selectable objects. \n\t *\n\t * @param evt the <code>MouseWheelEvent</code> fired\n\t */\n",
    "643": "\t/**\n\t * Sets the \"is already processed\" status of the passed board position.\n\t * \n\t * @param boardPositionIndex  index of the board position in this storage\n\t * @param processedStatus processed status to set\n\t */\n",
    "648": "    /**\n\t * This method is called when the user selects another view.\n\t */\n",
    "651": "\t\t/**\n\t\t * Sets all variables to null for the garbage collection.\n\t\t */\n",
    "653": "    /**\n\t * This method is called when the user selects another view.\n\t */\n",
    "656": "\t/**\n\t * Creates all things this panel needs.\n\t */\n",
    "663": "\t/**\n\t * Use the current value of the check box to enable or disable\n\t * the text field and label components.\n\t */\n",
    "666": "\t/**\n\t * Returns the value of the input field as double.\n\t * \n\t * @return the value of the input field, or {@code null}\n\t */\n",
    "669": "\t/**\n\t * Returns the value of the input field as integer.\n\t * \n\t * @return the value of the input field, or {@code null}\n\t */\n",
    "670": "\t/**\n\t * Convenience function: enters this object as the default table cell\n\t * renderer for type {@link java.util.Date}.\n\t * This is the expected usage for this class.\n\t * \n\t * @param table\n\t */\n",
    "672": "\t/**\n\t * Adds a level to be displayed\n\t * @param level level to be displayed\n\t */\n",
    "675": "\t/**\n\t * Returns whether the field is set \"active\".\n\t * \n\t * @return <code>true</code> if the field is active, and\n\t *        <code>false</code> otherwise\n\t */\n",
    "676": "\t/**\n\t * Adds a collection of levels to be displayed\n\t * @param collection collection of levels\n\t * @param startNumber index of the start level in the collection\n\t * @param endNumber index of the end level in the collection\n\t */\n",
    "677": "\t/**\n\t * Sets a new value for the display field.<br>\n\t * If the value is higher than the maximum or lower than the minimum,\n\t * the maximum or minimum value is used, respectively.\n\t * In any case the effectively used value is returned.\n\t * \n\t * @param value the value to be set\n\t * @return the set value\n\t */\n",
    "684": "\t/**\n\t * Method for closing the window after the ok-button has been clicked\n\t * \n\t * @param actionevent the action event to be analyzed\n\t */\n",
    "685": "\t/**\n\t * Informs all listeners using objects generated by the passed generator.\n\t * While calling the listener method for this notification this\n\t * ListenerSet object is not synchronized, any more.\n\t * Only the initial copying of the listener list is synchronized.\n\t * \n\t * @param eventgen generates the events to be passed to the listeners\n\t *                  ({@code null} is taken to generate {@code nulls})\n\t */\n",
    "687": "\t/**\n\t * Sets up the button for the \"start\" version.\n\t */\n",
    "688": "\t/**\n\t * Sets up the button for the \"stop\" version.\n\t */\n",
    "690": "\t/**\n\t * Sets up the button for the indicated version.\n\t * \n\t * @param forStart whether to set up for the \"start\" version\n\t */\n",
    "693": "\t/**\n\t * Partial setup regarding the border.\n\t * \n\t * @param forStart whether to set up for the \"start\" version\n\t */\n",
    "694": "\t/**\n\t * Partial setup regarding the background color.\n\t * \n\t * @param forStart whether to set up for the \"start\" version\n\t */\n",
    "696": "\t/**\n\t * Create the border for the indicated version.\n\t * Does <em>not</em> look at {@link #useBorder}.\n\t * \n\t * @param forStart whether to create it for the \"start\" version\n\t * @return         border for the indicated version\n\t */\n",
    "697": "\t/**\n\t * Creates and returns a border for the \"start\" version.\n\t * Does <em>not</em> look at {@link #useBorder}.\n\t * \n\t * @return border for a \"start\" version\n\t */\n",
    "699": "\t/**\n\t * Creates and returns a border for the \"stop\" version.\n\t * Does <em>not</em> look at {@link #useBorder}.\n\t * \n\t * @return border for a \"stop\" version\n\t */\n",
    "703": "\t/**\n\t * Does not have effect before the next {@link #setToStart()}\n\t * or {@link #setToStop()}.\n\t * @param useBorder the useBorder to set\n\t */\n"
}
