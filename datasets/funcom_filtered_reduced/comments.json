{
    "321": "\t/**\n\t * Returns the pushes lowerbound of this board position.\n\t * \n\t * @return the pushes lowerbound\n\t */\n",
    "323": "\t/**\n\t * Sets the pushes lowerbound of this board position.\n\t * \n\t * @param pushesLowerbound\n\t */\n",
    "324": "\t\t/**\n\t\t * Play a sound.\n\t\t */\n",
    "343": "\t/**\n\t * Returns the influence value between the positions of the passed boxes.\n\t * <p>\n\t * The LOWER the influence value the more influence has the box on the other box.\n\t * \n\t * @param boxNo1  the position of the first  box whose position is considered\n\t * @param boxNo2  the position of the second box whose position is considered\n\t * @return the influence value \n\t */\n",
    "351": "\t/**\n\t * Sets the box positions and the player position.\n\t *     \n\t * @param positions positions of the boxes and the player\n\t */\n",
    "352": "\t/**\n\t * Returns the player position of this board position.\n\t * \n\t * @return the player position\n\t */\n",
    "355": "\t/**\n\t * Returns the number of the moved box.\n\t * \n\t * @return the number of the moved box\n\t */\n",
    "357": "\t/**\n\t * Returns the start position of the pulled box.\n\t * \n\t * @return the position of the box before it was pulled.\n\t */\n",
    "359": "\t/**\n\t * Returns the target position of the pulled box.\n\t * \n\t * @return the position of the box after it was pulled.\n\t */\n",
    "361": "    /**\n     * Returns the preceding board position of this board position.\n     *\n     * @return the preceding board position of this board position\n     */\n",
    "364": "\t/**\n\t * Compares both board positions. Note: lower values means high priority\n\t * in the <code>PriorityQueue</code>.\n\t */\n",
    "373": "\t/**\n\t * Returns whether the push is a forced push, that means a box \n\t * must be pushed from the start position to the target position.\n\t */\n",
    "376": "\t/**\n\t * Sets the status bar text.\n\t * \n\t * @param text\n\t *            the text to be shown in the status bar\n\t */\n",
    "412": "\t/**\n\t * Returns whether the solver has been stopped due to insufficient memory.\n\t * \n\t * @return <code>true</code> if the solver stopped due to insufficient memory, and\n\t *        <code>false</code> otherwise\n\t */\n",
    "428": "\t/**\n\t * Returns the board position with the shortest determined solution path length.\n\t *\n     * @return board position with the shortest determined solution path length.\n     */\n",
    "437": "\t/**\n\t * Returns the preceding board position of this board position.\n\t * \n\t * @return preceding board position\n\t */\n",
    "440": "\t/**\n\t * Returns the direction the box has been pushed.\n\t * \n\t * @return Direction of the push\n\t */\n",
    "442": "\t/**\n\t * Returns the number of the pushed box.\n\t * \n\t * @return Number of the pushed box\n\t */\n",
    "445": "\t/**\n\t * Gives the name of this solver as used to tag new solutions.\n\t * @return the name of this solver\n\t */\n",
    "446": "\t/**\n\t * Return the player position of this board position.\n\t * \n\t * @return the player position\n\t */\n",
    "448": "\t/**\n\t * Sets the box- and the player positions.\n\t *     \n\t * @param positions Positions of the boxes and the player\n\t */\n",
    "450": "\t/**\n\t * An absolute board position usually hasn't a preceding board position. This method is\n\t * implemented for easier working with linked lists.\n\t *\n\t * @return always null\n\t */\n",
    "454": "\t/**\n\t * Sets the searchdirection of the solutionsearch this class is created in.\n\t * \n\t * @param searchDirection Direction of the search\n\t */\n",
    "458": "\t/**\n\t * For avoiding some casts this method is implemented here. Actually, this method\n\t * is only needed for relative board positions.\n\t *\n\t * @return always 0\n\t */\n",
    "459": "\t/** \n\t * Returns the number of pushes of this board position.\n\t * \n\t * @return number of pushes\n\t */\n",
    "461": "\t/**\n\t * Absolute board positions are only created when no box has been pushed. This value is interpreted \n\t * during a search for a solution (no box has been pushed so no tunnel check has to be performed).\n\t *\n\t * @return always <code>NO_BOX_PUSHED</code>\n\t */\n",
    "463": "\t/**\n\t * Sets the maximum solution length. \n\t * This is a value representing the iteration depth during the search for a solution.\n\t * (first all board positions are created that have a maximum solution length of x pushes.\n\t * Then all board positions are created with a maximum solution length of x+1, ...\n\t *  \n\t * @param maximumSolutionLength\tthe maximum solution length to be set\n\t */\n",
    "464": "\t/**\n\t * Return the player position of this board position.\n\t * \n\t * @return the player position\n\t */\n",
    "466": "\t/**\n\t * Returns the maximum solution length (= iteration depth).\n\t * \n\t * @return\tthe maximum solution length stored in this board position\n\t */\n",
    "467": "\t/**\n\t * Returns the number of pushes that were made to reach this board position.\n\t * An absolute board position is only created at the beginning, so this is\n\t * always 0.\n\t * This number is used in the solving methods.\n\t * \n\t * @return always 0\n\t */\n",
    "472": "\t/**\n\t * Returns a string to be attached to a solution, which says that this\n\t * solver did create the solution at the passed point in time.\n\t * \n\t * @param date the creation time point, or <code>null</code> for \"now\"\n\t * @return string identifying the solver as solution creator\n\t * @see Solution#name\n\t */\n",
    "476": "\t/**\n\t * Sets the number of moves.\n\t * \n\t * @param movesCount\tNumber of moves the player has done\n\t */\n",
    "487": "\t/**\n\t * Returns the index in the packing sequence that has already been reached.\n\t * \n\t * @return index in the packing sequence\n\t */\n",
    "489": "\t/**\n\t * Sets the index in the packing sequence that has been reached.\n\t * \n\t * @param indexPackingSequence the index in the packing sequence\n\t */\n",
    "494": "\t/**\n\t * Returns, whether a box is inactive, and therefore a position value 0\n\t * has to be assumed.\n\t *\n\t * @param  boxNo number of the box to be checked for being inactive\n\t * @return <code>true</code> if the box is inactive, and\n\t * \t\t  <code>false</code> if the box is active\n\t */\n",
    "496": "\t/**\n\t *  Returns whether the pushed box has been inactive.\n\t *\n\t * @return <code>true</code> the box is inactive\n\t * \t\t\t<code>false</code> the box is active\n\t */\n",
    "497": "\t/**\n\t * Mark this board position to be a deadlock.\n\t */\n",
    "498": "\t/**\n\t * Mark this board position not to be a deadlock.\n\t * <p>\n\t * Attention: this board position is only for the current\n\t * investigated corral assumed not to be a deadlock.\n\t * Nevertheless it can be a deadlock, because not all\n\t * deadlocks are detected.\n\t */\n",
    "499": "\t\t/**\n\t\t * Retrieves the current value of the debug variable\n\t\t * described by this object, by using reflection.\n\t\t * \n\t\t * @return current value of the described debug variable\n\t\t */\n",
    "500": "\t/**\n\t * Returns a string to be attached to a solution, which says that this\n\t * solver did create the solution \"now\".\n\t * \n\t * @return string identifying the solver as solution creator\n\t * @see Solution#name\n\t */\n",
    "501": "\t/**\n\t * Sets the number of the corral this board position belongs to.\n\t * \n\t * @param corralNo the number of the corral\n\t */\n",
    "503": "\t/**\n\t * Sets the status bar text.\n\t * \n\t * @param text\n\t *            the text to be shown in the status bar\n\t */\n",
    "504": "\t/**\n\t * Returns the number of the corral this board position belongs to.\n\t * \n\t * @return the number of the corral\n\t */\n",
    "506": "\t/**\n\t * Returns whether this board position has been proven to be a corral deadlock.\n\t * \n\t * @return <code>true</code> if this board position is a corral deadlock, and\n\t * \t     <code>false</code> if this board position has not been proven to be a deadlock\n\t */\n",
    "507": "\t/**\n\t * Returns whether this board position is classified not to be a corral deadlock.\n\t * <p>\n\t * This board position can be a corral deadlock, anyhow. For example the corral\n\t * detection could be aborted due to a reached time limit. Nevertheless it would\n\t * be classified as not to be a corral deadlock.\n\t * \n\t * @return <code>true</code> this board position has been classified not to be a corral deadlock\n\t * \t\t  <code>false</code> otherwise\n\t */\n",
    "508": "\t/**\n\t * Returns whether this board position has been classified (deadlock or no deadlock).\n\t * <p>\n\t * This method returns the same value as <code>!isBeeingAnalyzed()</code>\n\t * \n\t * @return <code>true</code> this board position has been classified.\n\t * \t\t<code>false</code> this board position has not been classified yet.\n\t */\n",
    "510": "\t/**\n\t * Returns whether is currently beeing analyzed to be a corral deadlock or not.\n\t * <p>\n\t * Every corral (= board position) not classified counts as \"beeingAnalyzed\". Due to every\n\t * board position occured during the corral detection getting a corral number - even if it\n\t * isn't a corral at all - finally there can be board positions still having the status\n\t * \"isBeeingAnalyzed\".\n\t * \n\t * @return <code>true</code> if the deadlock status of this board position\n\t *                           is currently beeing analyzed, and\n\t * \t\t  <code>false</code> otherwise\n\t */\n",
    "513": "\t/**\n\t * Returns a deep clone of the current board.\n\t * \n\t * @return the clone of this board\n\t */\n",
    "514": "\t\t/**\n\t\t * Sets the value of the debug variable described by this object\n\t\t * by using reflection.\n\t\t * \n\t\t * @param value  to be assigned to the described debug variable\n\t\t */\n",
    "517": "\t/**\n\t * Returns whether the two box configurations are equal.\n\t * \n\t * @param boxConfigurationNumber logical index into our flat data array\n\t * @param boxConfiguration the candidate box configuration to compare with\n\t * @return <code>true</code> if both box configurations are equal, and<br>\n\t *        <code>false</code> otherwise\n\t */\n",
    "523": "\t/**\n\t * Returns the maximal capacity of this storage.\n\t * \n\t * @return the maximal capacity of this storage\n\t */\n",
    "524": "\t/**\n\t * Adds data to the queue.\n\t * \n\t * @param boardPositionIndex the board position to be added\n\t * @param boardPositionPredecessor the predecessor to be added\n\t */\n",
    "531": "\t/**\n\t * Logically removes all board positions from the queue\n\t * until a board position different to the passed one occurs in the queue.\n\t * \n\t * @param boardPosition the board position to be over jumped\n\t */\n",
    "535": "\t/**\n\t * Retrieves and removes the last board position of this queue.\n\t * \n\t * @return the previous board position\n\t */\n",
    "538": "\t/**\n\t * Jumps backwards in the queue by the passed number of board positions.\n\t * \n\t * @param jumpCount number of board positions to be skipped backwards\n\t */\n",
    "542": "\t/**\n\t * Returns whether the queue is empty.\n\t * \n\t * @return <code>true</code> when queue is empty, and<br>\n\t *        <code>false</code> otherwise\n\t */\n",
    "547": "\t/**\n\t * Returns whether all box configurations could be generated. \n\t * \n\t * @return <code>true</code> if all box configurations have been generated,\n\t * \t      <code>false</code> if there is insufficient memory available,\n\t *        and not all box configurations have been generated.\n\t */\n",
    "551": "\t/**\n\t * Every object of this class gets passed a pushes depth. This depth holds\n\t * the number of pushes needed to reach the box configuration passed\n\t * to the constructor. This value is unique because there is only one\n\t * generation Runnable for every box configuration of the solution\n\t * to be optimized. By reading this value the optimizer can identify\n\t * each object of this class.\n\t * \n\t * @return the pushes depth that has been passed to the constructor of this object\n\t */\n",
    "561": "\t/**\n\t * Determine, whether this solution is better than the passed solution,\n\t * with respect to moves and then pushes.\n\t * \n\t * @param other the other solution we compare against\n\t * @return whether this solution is better\n\t */\n",
    "563": "\t/**\n\t * Determine, whether this solution is better than the passed solution,\n\t * with respect to pushes and then moves.\n\t * \n\t * @param other the other solution we compare against\n\t * @return whether this solution is better\n\t */\n",
    "568": "\t/**\n\t * Adds the specified board position into this priority queue.\n\t */\n",
    "570": "\t/**\n\t * Returns the number of stored <code>OptimizerBoardPositions</code>.\n\t * \n\t * @return the number of stored <code>OptimizerBoardPositions</code>\n\t */\n",
    "572": "\t/**\n\t * Removes and returns the board position having the lowest metrics (moves, pushes, ...).\n\t * \n\t * @return  board position having the lowest metrics \n\t */\n",
    "576": "\t/**\n\t * Adds the passed <code>String</code> to the log texts of the optimizer\n\t * to inform the user about the progress of the optimizer,\n\t * or to inform the developer about statistical data.\n\t * \n\t * @param text       text to be added to the log\n\t * @param stylename  registered name of style to be used\n\t */\n",
    "577": "\t /**\n\t  *Inserts the passed board position at the passed position.\n\t  * <p>\n\t  * This method moves the passed board position down until \n\t  * it is less than or equal to its children (or is a leaf).\n\t  *\n\t  * @param position the position to start the search for the correct position to insert into\n\t  * @param boardPosition the board position to be inserted\n\t  */\n",
    "580": "\t/**\n\t * Returns the number of board positions stored in this hash table.\n\t *\n\t * @return  the number of board positions stored in this hash table.\n\t */\n",
    "601": "\t/**\n\t * Removes all markings of squares.  \n\t */\n",
    "608": "\t/**\n\t * Debug method: without {@link Settings#isDebugModeActivated} nothing\n\t * visible happens.\n\t * In debug mode we print the current statistics to the optimizer logging.\n\t */\n",
    "610": "\t/**\n\t * Returns the box configuration index of the passed board position.\n\t * \n\t * @param boardPositionIndex  the index of the board position\n\t * @return the index the box configuration is stored at in the box configuration storage\n\t */\n",
    "613": "\t/**\n\t * Returns whether the second passed box configuration is a subset\n\t * of the first passed box configuration.\n\t * \n\t * @param boxConfiguration1\n\t *            box configuration 1\n\t * @param boxConfigurationArray\n\t *            array which contains the box configuration to be checked for\n\t *            being a subset\n\t * @param indexInArray\n\t *            index of the box configuration in the array\n\t * \n\t * @return <code>true</code> if the second passed box configuration is a subset\n\t *         of the first passed box configuration, and <code>false</code> otherwise\n\t */\n",
    "617": "\t/**\n\t * Returns the player position of the passed board position.\n\t * \n\t * @param boardPositionIndex  the index of the board position\n\t * @return the player position of the passed board position\n\t */\n",
    "619": "\t\t/**\n\t\t * Doubles the tree size.\n\t\t */\n",
    "626": "\t\t/**\n\t\t * Fills the sorted list with the box configurations from the tree.\n\t\t * \n\t\t * @param indexInTree index of the box configuration in the tree\n\t\t * @param last\t\n\t\t * @return \"lowest\" boxConfiguration at the moment in the tree\n\t\t */\n",
    "637": "\t/**\n\t * Returns the number of the currently selected object.\n\t * \n\t * @return number of the currently selected obj\n\t */\n",
    "638": "\t\t/**\n\t\t * Transforms the tree to a binary heap.\n\t\t * This method destroys the tree. That means:\n\t\t * only the binary heap can be used after this method has been called.\n\t\t */\n",
    "641": "\t/**\n\t * Using the mouse wheel is interpreted as a move through the selectable objects. \n\t *\n\t * @param evt the <code>MouseWheelEvent</code> fired\n\t */\n",
    "643": "\t/**\n\t * Sets the \"is already processed\" status of the passed board position.\n\t * \n\t * @param boardPositionIndex  index of the board position in this storage\n\t * @param processedStatus processed status to set\n\t */\n",
    "648": "    /**\n\t * This method is called when the user selects another view.\n\t */\n",
    "651": "\t\t/**\n\t\t * Sets all variables to null for the garbage collection.\n\t\t */\n",
    "653": "    /**\n\t * This method is called when the user selects another view.\n\t */\n",
    "656": "\t/**\n\t * Creates all things this panel needs.\n\t */\n",
    "663": "\t/**\n\t * Use the current value of the check box to enable or disable\n\t * the text field and label components.\n\t */\n",
    "666": "\t/**\n\t * Returns the value of the input field as double.\n\t * \n\t * @return the value of the input field, or {@code null}\n\t */\n",
    "669": "\t/**\n\t * Returns the value of the input field as integer.\n\t * \n\t * @return the value of the input field, or {@code null}\n\t */\n",
    "670": "\t/**\n\t * Convenience function: enters this object as the default table cell\n\t * renderer for type {@link java.util.Date}.\n\t * This is the expected usage for this class.\n\t * \n\t * @param table\n\t */\n",
    "672": "\t/**\n\t * Adds a level to be displayed\n\t * @param level level to be displayed\n\t */\n",
    "675": "\t/**\n\t * Returns whether the field is set \"active\".\n\t * \n\t * @return <code>true</code> if the field is active, and\n\t *        <code>false</code> otherwise\n\t */\n",
    "676": "\t/**\n\t * Adds a collection of levels to be displayed\n\t * @param collection collection of levels\n\t * @param startNumber index of the start level in the collection\n\t * @param endNumber index of the end level in the collection\n\t */\n",
    "677": "\t/**\n\t * Sets a new value for the display field.<br>\n\t * If the value is higher than the maximum or lower than the minimum,\n\t * the maximum or minimum value is used, respectively.\n\t * In any case the effectively used value is returned.\n\t * \n\t * @param value the value to be set\n\t * @return the set value\n\t */\n",
    "684": "\t/**\n\t * Method for closing the window after the ok-button has been clicked\n\t * \n\t * @param actionevent the action event to be analyzed\n\t */\n",
    "685": "\t/**\n\t * Informs all listeners using objects generated by the passed generator.\n\t * While calling the listener method for this notification this\n\t * ListenerSet object is not synchronized, any more.\n\t * Only the initial copying of the listener list is synchronized.\n\t * \n\t * @param eventgen generates the events to be passed to the listeners\n\t *                  ({@code null} is taken to generate {@code nulls})\n\t */\n",
    "687": "\t/**\n\t * Sets up the button for the \"start\" version.\n\t */\n",
    "688": "\t/**\n\t * Sets up the button for the \"stop\" version.\n\t */\n",
    "690": "\t/**\n\t * Sets up the button for the indicated version.\n\t * \n\t * @param forStart whether to set up for the \"start\" version\n\t */\n",
    "693": "\t/**\n\t * Partial setup regarding the border.\n\t * \n\t * @param forStart whether to set up for the \"start\" version\n\t */\n",
    "694": "\t/**\n\t * Partial setup regarding the background color.\n\t * \n\t * @param forStart whether to set up for the \"start\" version\n\t */\n",
    "696": "\t/**\n\t * Create the border for the indicated version.\n\t * Does <em>not</em> look at {@link #useBorder}.\n\t * \n\t * @param forStart whether to create it for the \"start\" version\n\t * @return         border for the indicated version\n\t */\n",
    "697": "\t/**\n\t * Creates and returns a border for the \"start\" version.\n\t * Does <em>not</em> look at {@link #useBorder}.\n\t * \n\t * @return border for a \"start\" version\n\t */\n",
    "699": "\t/**\n\t * Creates and returns a border for the \"stop\" version.\n\t * Does <em>not</em> look at {@link #useBorder}.\n\t * \n\t * @return border for a \"stop\" version\n\t */\n",
    "703": "\t/**\n\t * Does not have effect before the next {@link #setToStart()}\n\t * or {@link #setToStop()}.\n\t * @param useBorder the useBorder to set\n\t */\n",
    "706": "\t/**\n\t * Does not have effect before the next {@link #setToStart()}\n\t * or {@link #setToStop()}.\n\t * @param useBgColor the useBgColor to set\n\t */\n",
    "710": "\t/**\n\t * Does not have effect before the next {@link #setToStart()}.\n\t * @param borderColorStart the borderColorStart to set\n\t */\n",
    "715": "\t/**\n\t * Does not have effect before the next {@link #setToStop()}.\n\t * @param borderColorStop the borderColorStop to set\n\t */\n",
    "718": "\t/**\n\t * Does not have effect before the next {@link #setToStart()}.\n\t * @param bgColorStart the bgColorStart to set\n\t */\n",
    "721": "\t/**\n\t * Does not have effect before the next {@link #setToStop()}.\n\t * @param bgColorStop the bgColorStop to set\n\t */\n",
    "722": "\t/**\n\t * Computes and returns whether the rectangle given by the left upper corner\n\t * and both dimensions is completely outside the specified clip rectangle.\n\t * When the clip rectangle is missing, it is considered to be arbitrarily large.\n\t * \n\t * @param x    x of upper left corner\n\t * @param y    y of upper left corner\n\t * @param xlen width\n\t * @param ylen height\n\t * @param clip rectangle we compare against\n\t * @return whether (x,y,xlen,ylen) is completely outside of \"clip\"\n\t */\n",
    "741": "\t/**\n\t * Returns whether this shortcut has an alias.\n\t * \n\t * @return <code>true</code> if this shortcut has an alias,\n\t *        <code>false</code> otherwise\n\t */\n",
    "743": "\t/**\n\t * Returns the alias of this shortcut.\n\t * \n\t * @return the alias of this shortcut\n\t */\n",
    "746": "\t/**\n\t * Sets the alias of this shortcut.\n\t * \n\t * @param newAlias the new alias of this shortcut\n\t */\n",
    "747": "\t/**\n\t * Returns the path stored in this shortcut.\n\t * \n\t * @return the path\n\t */\n",
    "750": "\t/**\n\t * Returns the name of this shortcut.\n\t * <p>\n\t * If there is an alias this alias is returned. Otherwise the path is returned.\n\t * \n\t * @return the name of this shortcut\n\t */\n",
    "752": "\t/**\n\t * Returns formatted shortcut's name for display.\n\t *\n\t * @return the display name of this shortcut\n\t */\n",
    "753": "\t/**\n\t * Extracts the graphic specified by the passed name from the passed graphic\n\t * which contains all graphics of the skin.\n\t * <p>\n\t * This method is only used for reducing the lines of code when extracting\n\t * the graphics from the entire graphic containing all skin graphics.\n\t * This method assumes that the position of the graphic to be extracted\n\t * is stored in the settings as \"x, y\" coordinates.\n\t * \n\t * @param entireGraphic  skin graphic containing all skin graphics\n\t * @param graphicName  the name of the graphic to extract\n\t * @return the extracted <code>BufferedImage</code>\n\t */\n",
    "754": "\t/**\n\t * Returns the color of this shortcut.\n\t * \n\t * @return the color of this shortcut\n\t */\n",
    "755": "\t/**\n\t * Sets the color of this shortcut.\n\t * \n\t * @param color color to be set\n\t */\n",
    "756": "\t/**\n\t * Sets the board this GUI shows.\n\t * \n\t * @param board board to be shown\n\t */\n",
    "758": "\t/**\n\t * Returns the <code>String</code> representation of the shortcut's color.\n\t * \n\t * @return color of this shortcut as <code>String</code>\n\t */\n",
    "759": "\t/**\n\t * Extracts the graphic specified by the passed name from the passed graphic\n\t * which contains all graphics of the skin.\n\t * <p>\n\t * This method is only used for reducing the lines of code when extracting\n\t * the graphics from the entire graphic containing all skin graphics.\n\t * This method assumes that only the x-coordinate is relevant for locating\n\t * a sub graphic in the entire graphic. \n\t * \n\t * @param entireGraphic  skin graphic containing all skin graphics\n\t * @param graphicName  the name of the graphic to extract\n\t * @return the extracted <code>BufferedImage</code>\n\t */\n",
    "764": "\t/**\n\t * Erase any comments of the passed property string.\n\t * A comment starts at the first '#' (hash sign).\n\t * Also, blanks and tabs are trimmed from the (right) end of the result.\n\t * \n\t * @param propertyValue value of a property as a String\n\t * @return trimmed value\n\t */\n",
    "772": "\t/**\n\t * Returns the current transformation as String.\n\t * This String is saved into the file of the level as information.\n\t * Note: this string is NOT influenced by any language settings.\n\t * \n\t * @return the transformation as <code>String</code>\n\t * @see #newlevel()\n\t */\n",
    "774": "\t/**\n\t * This default generator implementation just returns the {@link #base}\n\t * object reference.\n\t * That probably works only for immutable types T.\n\t * <p>\n\t * Most implementations should override this method by something that\n\t * clones the {@link #base} or uses it as basis for a constructor.\n\t * E.g. ActionEvents are neither immutable nor do they support cloning.\n\t * \n\t * @return the next generated object\n\t */\n",
    "779": "\t/**\n\t * Creates a button for the tool bar.\n\t * \n\t * @param iconName\t\tthe name of the icon for the button\n\t * @param actionCommand the action command of the button\n\t * @param toolTipText \tthe tool tip text for the button\n\t * @return the created button\n\t * @see #createToolBarButtonByKey(String, String, String)\n\t */\n",
    "781": "\t/**\n\t * Returns the currently used skin.\n\t * \n\t * @return the <code>Skin</code> currently used\n\t */\n",
    "784": "\t/**\n\t * Returns the string corresponding to the passed property name.\n\t * \n\t * @param name name of property\t\n\t * @param defaultValue value to be set if the property value can't be set\n\t * @return value of the property as string or null, if no property is found\n\t */\n",
    "785": "\t/**\n\t * Creates a button for the tool bar.\n\t * \n\t * @param iconName       the name of the icon for the button\n\t * @param actionCommand  the action command of the button\n\t * @param toolTipTextKey the text key for the tool tip text for the button\n\t * @return the created button\n\t * @see #createToolBarButton(String, String, String)\n\t */\n",
    "787": "\t/**\n\t * Sets a new delay for the animations that are shown.\n\t * <p>\n\t * Depending on the skin there may be an animation for a selected box and\n\t * the selected player.\n\t * \n\t * @param delay\n\t *            the delay in milliseconds\n\t */\n",
    "793": "\t/**\n\t * Sets the view direction of the player to the passed direction.\n\t * <p>\n\t * The view direction is important for some skins in order to be able to\n\t * show the correct graphic.\n\t * \n\t * @param viewDirection\n\t *            the view direction of the player\n\t */\n",
    "800": "\t/**\n\t * Sets the maximum factor for scaling the graphics.\n\t * <p>\n\t * Some skins offer bad quality graphics which shouldn't be scaled too much.\n\t * Hence the user can set a maximum scaling factor. This way the graphics\n\t * aren't scaled beyond this factor even if there is enough space for the\n\t * graphics to be drawn.\n\t * \n\t * @param maximumScalingFactor\n\t *            the new factor to be set\n\t */\n",
    "805": "\t/**\n\t * Sets the flag that a recalculation has to be done.\n\t */\n",
    "806": "\t/**\n\t * Transforms the board (rotation and mirroring)\n\t * \n\t * @param transformationValue  kind of transformation\n\t */\n",
    "808": "\t/**\n\t * Sets the passed level as level to be displayed in this Panel.\n\t * \n\t * @param levelToBeDisplayed  the <code>Level</code> to be displayed\n\t */\n",
    "810": "\t/**\n\t * Sets the passed board to be displayed.\n\t * \n\t * @param boardAsString the board data as <code>String</code>\n\t */\n",
    "813": "\t/**\n\t * Sets the flag specifying whether the infobar is to be shown or not.\n\t * \n\t * @param visibleStatus\n\t *            visibility status of the infobar to set\n\t */\n",
    "814": "\t/**\n\t * Sets the passed board to be displayed.\n\t * \n\t * @param board the board to be displayed\n\t */\n",
    "816": "\t/**\n\t * Returns the <code>Board</code> displayed in this class.\n\t * \n\t * @return the <code>Board</code> of this class\n\t */\n",
    "819": "\t/**\n\t * Returns the <code>Level</code> displayed in this class\n\t * \n\t * @return the <code>Level</code> of this class\n\t */\n",
    "821": "\t/**\n\t * Returns the current width of a square from the current scaled skin.\n\t * @return width of a square\n\t */\n",
    "823": "\t/**\n\t * Returns the current height of a square from the current scaled skin.\n\t * @return height of a square\n\t */\n",
    "824": "\t/**\n\t * Sets the flag indication that the sizes must be recalculated.\n\t * If e.g. we switch into editor mode, we have less space for the board,\n\t * since we have to draw some objects for the editor.\n\t */\n",
    "827": "\t/**\n\t * Resets the <code>board</code> and the player position members\n\t * from the <code>boardInitial</code> member.\n\t */\n",
    "835": "\t/**\n\t * Repaints the GUI immediately.\n\t * This is the sledge-hammer method: everything is painted, again.\n\t */\n",
    "840": "\t/**\n\t * Packs the passed unpacked box configuration into a new packed box configuration.\n\t * \n\t * @param newPackedBoxConfiguration\n\t * @param unpackedBoxConfiguration\n\t */\n",
    "856": "\t/**\n\t * Marks the passed board position as visited.\n\t * \n\t * @param boardPositionIndex\n\t *            index of the board position in the visitedData array\n\t */\n",
    "863": "\t/**\n\t * Sets the cursor image to the specified cursor.\n\t * \n\t * @param cursor The value of the cursor to be set\n\t */\n",
    "865": "\t/**\n\t * If the coordinates of the point aren't located on the board\n\t * they are adjusted so they are on the edge of the board.\n\t * \n\t * @param p  <code>Point</code> containing the data which is adjusted\n\t */\n",
    "866": "\t/**\n\t * Repaints part of the GUI immediately.  Only a rectangle inside the board is\n\t * considered to be changed, specified in external board square coordinates.\n\t * But, the number of moves and pushes has also be considered to be changed,\n\t * which implies some more updates.\n\t * \n\t * @param xmin      upper left X of board square rectangle\n\t * @param ymin      upper left Y of board square rectangle\n\t * @param extWidth  width  of rectangle in board squares\n\t * @param extHeight height of rectangle in board squares\n\t */\n",
    "870": "\t/**\n\t * Returns the influence distance between the start and the target square.\n\t * The higher the distance the less influence the target square has\n\t * on the start square.\n\t * \n\t * @param startSquare  position of the start square\n\t * @param targetSquare position of the target square\n\t * \n\t * @return influence distance from the start square to the target square\n\t */\n",
    "871": "\t/**\n\t * This method sets the currently set language in all menu bar\n\t * and tool bar components.\n\t */\n",
    "872": "\t/**\n\t * Returns whether the board position (box + player positions) is marked as\n\t * visited.\n\t * \n\t * @param boardPositionIndex\n\t *            index of the board position in the visitedData array\n\t * @return <code>true</code>board position has already been visited;\n\t *         <code>false</code>otherwise\n\t */\n",
    "874": "\t/**\n\t * Inserts a move of the player into the history.\n\t * \n\t * @param direction\tinto which the player moved\n\t */\n",
    "876": "\t\t/**\n\t\t * Set the collected values back to the initial values,\n\t\t * indicating an empty range.\n\t\t */\n",
    "877": "\t/**\n\t * Returns the next movement from the history,\n\t * and advances the \"current\" pointer to it.\n\t * \n\t * @return <code>null</code>, or the <code>HistoryElement</code> containing the data\n\t *         for the next movement of the history\n\t */\n",
    "878": "\t/**\n\t * Returns the previously executed movement from the history,\n\t * and moves back the \"current\" pointer before it.\n\t * \n\t * @return <code>null</code>, or the <code>HistoryElement</code> containing the data\n\t *         for the previously executed movement \n\t */\n",
    "881": "\t/**\n\t * Returns the movement with the given number.\n\t * \n\t * @param movementNo number of the movement to be returned\n\t * @return  <code>null</code>, or the <code>HistoryElement</code> of the movement\n\t *          with the given number\n\t */\n",
    "882": "\t/**\n\t * Returns the index of the last executed movement.\n\t * That is also the count of the player moves up to now/here. \n\t * \n\t * @return index of the last executed movement\n\t */\n",
    "883": "\t\t/**\n\t\t * Returns whether the collected area is empty.\n\t\t * \n\t\t * @return whether the area is empty\n\t\t */\n",
    "884": "\t/**\n\t * Returns the total count of the stored movements.\n\t * \n\t * @return total count of movements\n\t */\n",
    "885": "\t/**\n\t * Returns the (total) number of pushes contained in the history.\n\t * \n\t * @return number of pushes in the history\n\t */\n",
    "889": "\t/**\n\t * Returns the LURD string of all movements up to the current movement.\n\t * \n\t * @return LURD string till the current movement (inclusive)\n\t * @see #getLURDString(int, int)\n\t */\n",
    "890": "\t\t/**\n\t\t * Adds a point to the area, given by its components.\n\t\t * \n\t\t * @param x\n\t\t * @param y\n\t\t */\n",
    "891": "\t/**\n\t * Returns the complete LURD string of all movements, independent from the\n\t * current point inside of the history.\n\t * \n\t * @return LURD string till the end (inclusive)\n\t * @see #getLURDString(int, int)\n\t */\n",
    "893": "\t/**\n\t * Sets the history to the first movement.\n\t */\n",
    "895": "\t/**\n\t * Sets the \"current\" pointer to the specified index.\n\t * This changes to reference point for further \"undo\" and \"redo\" operations.\n\t * This is the way to quickly jump to an arbitrary point in the history.\n\t *\n\t * @param movementNo the movement number to be set\n\t */\n",
    "897": "\t/**\n\t * Sets the marker which indicates that the next movement will be the start\n\t * of a combined movement.\n\t */\n",
    "898": "\t\t/**\n\t\t * Collect another external position.\n\t\t * External positions are what is handled in the GUI, they reflect screen\n\t\t * positions after any transformation.\n\t\t * \n\t\t * @param externalPos <code>-1</code>. or external position to collect\n\t\t */\n",
    "900": "\t/**\n\t * Sets back the \"current\" pointer to the previous movement.\n\t * This operation is unchecked / unconditional.\n\t */\n",
    "903": "\t/**\n\t * Sets forward the \"current\" pointer to the next movement.\n\t * This operation is unchecked / unconditional.\n\t */\n",
    "904": "\t\t/**\n\t\t * Collect another internal position (from the model).\n\t\t * Before it is collected, it must be translated to an external position\n\t\t * according to the current transformation.\n\t\t * \n\t\t * @param internalPos <code>-1</code>. or internal position to collect\n\t\t */\n",
    "905": "\t/**\n\t * Returns whether there is a preceding movement.\n\t * \n\t * @return <code>true</code>, if there is a  preceding movement,<br>\n\t *   \t  <code>false</code>, if there is no preceding movement\n\t */\n",
    "908": "\t/**\n\t * Returns whether there is a successor movement.\n\t * \n\t * @return <code>true</code> if there is a  successor movement,<br>\n\t * \t\t  <code>false</code> if there is no successor movement\n\t */\n",
    "910": "\t/**\n\t * Repaints part of the GUI.\n\t * Just the number of moves and the number of pushes is considered changed.\n\t */\n",
    "911": "\t/**\n\t * Return the number of steps to the preceding element one can do,\n\t * until the first movement is reached, or one that is marked to be\n\t * the start of a combined movement.\n\t * \n\t * @return length of the last combined movement\n\t */\n",
    "913": "\t/**\n\t * Return the length of the next combined movement, i.e. how many steps\n\t * forward can we do until we find an element which is marked to be\n\t * the start of a combined movement (excluding the current element).\n\t * \n\t * @return length of the next combined movement\n\t */\n",
    "915": "\t/**\n\t * Starting with the current movement, count the number of combined\n\t * segments.  Even when the first (current) movement is not marked\n\t * to be the start of a combined movement, we count it as start\n\t * of such a segment.\n\t * \n\t * @return count of segments starting at current movement\n\t */\n",
    "918": "\t/**\n\t * Starting with the current movement we scan forward and compute the\n\t * average length of combined segments.\n\t * @return average length of movement segments starting at current movement\n\t */\n",
    "932": "\t/**\n\t * Returns if a box has been pushed.\n\t * \n\t * @return true = A box has been pushed, false = no box has been pushed\n\t */\n",
    "939": "\t/**\n\t * Returns the mouse listener for this class.\n\t * \n\t * @return the mouse listener\n\t */\n",
    "941": "\t/**\n\t * Sets whether the editor menu item is enabled.\n\t * @param enabled\n\t */\n",
    "948": "\t/**\n\t * Returns the menu item for saving a level.\n\t * \n\t * @return the <code>JMenuItem</code> for saving a level\n\t */\n",
    "954": "\t/**\n\t * Returns the button for showing info in the menu bar.\n\t * <p>\n\t * The caller can fully access this button.\n\t * \n\t * @return the <code>JMenuItem</code> for saving a level\n\t */\n",
    "960": "\t/**\n\t * Sets the objects enabled or disabled depending on the current mode\n\t * (play or editor mode). \n\t */\n",
    "966": "\t/**\n\t * Displays the passed board position for debug purposes.\n\t * \n\t * @param storage\n\t *            storage the box configuration is stored in\n\t * @param boardPositionIndex\n\t *            index of the board position in the visited data array\n\t * @param graphicOutput\n\t *            flag, indicating whether there should be a graphical display\n\t *            or not\n\t * @param waitForEnter\n\t *            flag, indicating whether the program has to wait for \"enter\"\n\t *            after displaying the box configuration\n\t */\n",
    "969": "\t/**\n\t * Sets a color for the passed <code>Solution</code> in this GUI.\n\t * <p>\n\t * If \"null\" is passed as color the solution is set back to the default color.\n\t * \n\t * @param solution the <code>Solution</code> to be colored\n\t * @param color the <code>Color</code>\n\t */\n",
    "971": "\t/**\n\t * Sets the status of the solver mode dependent objects.\n\t * \n\t * @param enabledStatus <code>true</code>, if the objects are enabled, and\n\t * \t\t\t\t\t\t<code>false</code> if the objects are disabled\n\t */\n",
    "972": "\t\t/**\n\t\t * Returns whether the the current solution type is a valid\n\t\t * and new solution.\n\t\t * @return <code>true</code> if the solution is a valid new solution,\n\t\t *   or<br><code>false</code> otherwise\n\t\t */\n",
    "973": "\t/**\n\t * Sets the background color for all solutions to the default color.\n\t */\n",
    "974": "\t/**\n\t * Makes a single row \"selected\".\n\t * When the passed view row index is negative (e.g. as result of a\n\t * failed conversion) the current selection remains unchanged.\n\t * \n\t * @param viewrowindex the view index of the row to be selected\n\t */\n",
    "976": "\t/**\n\t * Adds the passed {@code ActionListener} to the listeners being informed\n\t * when an action is fired. \n\t * \n\t * @param actionListener  the {@code ActionListener} to be added\n\t */\n",
    "979": "\t/**\n\t * Shows an information dialog with translated title \"note\" and the message text\n\t * for the text key \"solutionList.noSolutionSelected\".\n\t */\n",
    "980": "\t/**\n\t * Removes the passed {@code ActionListener} from the listeners of this object.\n\t * \n\t * @param actionListener  the {@code ActionListener} to be removed\n\t */\n",
    "982": "\t/**\n\t * Displays the passed board position for debug purposes.\n\t * \n\t * @param storage\n\t *            storage the box configuration is stored in\n\t * @param boxConfigurationIndex\n\t *            index of the box configurtaion in the visited data array\n\t * @param playerPosition\n\t * \t\t      position of the player in internal format\n\t * @param graphicOutput\n\t *            flag, indicating whether there should be a graphical display\n\t *            or not\n\t * @param waitForEnter\n\t *            flag, indicating whether the program has to wait for \"enter\"\n\t *            after displaying the box configuration\n\t */\n",
    "984": "\t/**\n\t * Sets the enabled status of the undo buttons.\n\t * \n\t * @param enabledStatus <code>true</code>, if the objects are enabled, and\n\t * \t\t\t\t\t\t<code>false</code> if the objects are disabled\n\t */\n",
    "985": "\t\t/**\n\t\t * Handles the mouse event \"mouseDragged\".\n\t\t * \n\t\t * @param evt  the event that has been fired\n\t\t */\n",
    "987": "\t/**\n\t * This is the kernel of {@link #informListeners(Solution, String)},\n\t * after that method has decided, in which thread we have to work.\n\t * @param solution\n\t * @param action\n\t */\n",
    "989": "\t/**\n\t * Informs all listeners about a change of the stored solutions.\n\t * <p>\n\t * The listeners must know which actions can be caught from this class\n\t * (this avoids an extra interface containing methods for the different actions).\n\t */\n",
    "993": "\t/**\n\t * Sets the visibility of the \"take solution as history\" menu item.\n\t * \n\t * @param isVisible <code>true</code> sets the \"take solution as history\" menu item visible\n\t * \t\t\t\t   <code>false</code> sets the \"take solution as history\" menu item invisible\n\t */\n",
    "996": "\t/**\n\t * Sets the enabled status of the redo buttons.\n\t * \n\t * @param enabledStatus <code>true</code> if the objects are enabled, and\n\t * \t\t\t\t\t   <code>false</code> if the objects are disabled\n\t */\n",
    "1000": "\t\t/**\n\t\t * Add the passed solution as solution to be highlighted.\n\t\t * \n\t\t * @param solution <code>Solution</code> to be highlighted\n\t\t */\n",
    "1002": "\t\t/**\n\t\t * Removes all solutions to be highlighted.\n\t\t */\n",
    "1006": "\t\t/**\n\t\t * Returns the intensity the passed solution is to be highlighted.\n\t\t *\n\t\t * @param solution the <code>Solution</code> whose highlight intensity is returned\n\t\t * @return the highlight intensity or null if the passed solution isn't to be highlighted\n\t\t */\n",
    "1014": "\t/**\n\t * This methods sets the enabled status of specific GUI elements.\n\t * <p>\n\t * If the current loaded level is invalid then some of the GUI elements\n\t * have to be disabled.\n\t * \n\t * @param enabledStatus  whether the GUI elements are to be enabled\n\t */\n",
    "1015": "\t/**\n\t * Tell whether we currently have a valid {@code lastChanged} data.\n\t * \n\t * @return whether the {@code lastChanged} data is valid\n\t */\n",
    "1025": "\t/**\n\t * Sets the debug menu visible or invisible.\n\t * \n\t * @param isToBeVisible <code>true</code>, if the debug menu shall be visible, and\n\t * \t\t\t\t\t\t<code>false</code> if the debug menu shall be invisible\n\t */\n",
    "1035": "\t/**\n\t * Returns the solutions view.\n\t * <p>\n\t * The solutions are shown in an own JPanel at the left of the main GUI.\n\t * \n\t * @return the <code>solutionsGUI</code> displaying the solutions\n\t */\n",
    "1041": "\t/**\n\t * Method used for the SQL commands CREATE, DROP, INSERT and UPDATE\n\t * \n\t * @param expression the SQL command to be executed\n\t */\n",
    "1046": "\t/**\n\t * Wait for the deadlock identification (detection) to be ready.\n\t * This must be done prior to generation of box configurations,\n\t * since the results of deadlock computation are used there\n\t * without any further checks.\n\t */\n",
    "1049": "\t/**\n\t * Saves the passed level using the passed file name.\n\t *\n\t * @param level the <code>Level</code> to save\n\t * @param fileName the file the level is to be saved to\n\t * @throws IOException thrown when the level couldn't be saved\n\t */\n",
    "1055": "\t/**\n\t * Returns the char code of the square at the specified location.\n\t *  \n\t * @param xPosition X coordinate of the square to return a char for\n\t * @param yPosition Y coordinate of the square to return a char for\n\t * @return\t\t\tchar code for the square, or a blank if the position is outside\n\t *                  the implemented part of the board\n\t */\n",
    "1066": "\t/**\n\t * Reload the data of this view from the database.\n\t */\n",
    "1071": "\t\t/**\n\t\t * Return the ID of the stored string.\n\t\t * \n\t\t * @return the ID\n\t\t */\n",
    "1092": "\t/**\n\t * Adds all author names to the author <code>ComboxBox</code>es.\n\t */\n",
    "1097": "\t/**\n     * Close this dialog and return to the caller of this dialog. \n     */\n",
    "1098": "    \t/**\n    \t * Called from the author view when the user has changed data\n    \t * for the authors that is relevant for the other views.\n    \t */\n",
    "1100": "    \t/**\n    \t * Called from collection view when the user has changed something\n    \t * that is relevant for the other views.\n    \t */\n",
    "1102": "    \t/**\n    \t * Called from level assignment view when the user has changed\n    \t * something that is relevant for the other views. \n    \t */\n",
    "1103": "    \t/**\n    \t * Called from level view when the user has changed something that is\n    \t * relevant for the other views.\n    \t */\n",
    "1107": "    \t/**\n    \t * After a view has been refreshed the data is up-to-date again.\n    \t * Hence all update flags for this view can be reset. \n    \t */\n",
    "1108": "    \t/**\n    \t * Marks the passed view for being refreshed because data have changed. \n    \t */\n",
    "1114": "\t/**\n\t * This method is called whenever the additional information of a selected\n\t * level has changed.\n\t * (For example, when a solution has been deleted)\n\t */\n",
    "1115": "\t/**\n\t * Returns the number of board positions in this hash table.\n\t *\n\t * @return  the number of board positions in this hash table.\n\t */\n",
    "1120": "\t/**\n\t * Clears the storage so that it contains no board positions anymore.\n\t */\n",
    "1123": "\t\t/**\n\t\t * Returns the stored board positions.\n\t\t * \n\t\t * @return\tthe board position that is stored in this entry.\n\t\t */\n",
    "1125": "\t/**\n\t * Returns the selected collection.\n\t * \n\t * @return the currently selected collection item\n\t */\n",
    "1127": "\t/** This class has 4 bytes per atom */\n",
    "1129": "\t/** Any multiple of 4 will do, 72 might be common */\n",
    "1135": "\t\t/**\n\t\t * This method should return, if it knows, the number of bytes\n\t\t * that will be decoded. Many formats such as uuencoding provide\n\t\t * this information. By default we return the maximum bytes that\n\t\t * could have been encoded on the line.\n\t\t */\n",
    "1138": "\t\t/**\n\t\t * This method does an actual decode. It takes the decoded bytes and\n\t\t * writes them to the OutputStream. The integer <i>l</i> tells the\n\t\t * method how many bytes are required. This is always <= bytesPerAtom().\n\t\t */\n",
    "1144": "\t\t/**\n\t\t * Alternate decode interface that takes a String containing the encoded\n\t\t * buffer and returns a byte array containing the data.\n\t\t * @exception CEFormatException An error has occurred while decoding\n\t\t */\n",
    "1146": "\t\t/**\n\t\t * Decode the contents of the inputstream into a buffer.\n\t\t */\n",
    "1150": "\t/**\n\t * Sets the basic delay step to be used, in milliseconds.\n\t * \n\t * @param msStep delay time in milliseconds\n\t */\n",
    "1152": "\t/**\n\t * Returns the current delay time in milliseconds.\n\t * \n\t * @return current delay time in milliseconds\n\t */\n",
    "1153": "\t/**\n\t * Sets the intended sequence length of delay steps.\n\t * Positive values are used to somewhat reduce the total time of the\n\t * sequence by reducing the effective single step delay time.\n\t * \n\t * @param len intended sequence length of delay steps\n\t */\n",
    "1155": "\t/**\n\t * Returns the current intended sequence length of delay steps.\n\t * @return the current intended sequence length of delay steps\n\t */\n",
    "1157": "\t/**\n\t * Construct and return a new object for the standard step delay\n\t * from the Settings.\n\t * \n\t * @return new standard <code>Delays</code> object\n\t */\n",
    "1158": "\t/**\n\t * Construct and return a new object for the standard step delay\n\t * from the Settings, and the indicated intended sequence length.\n\t * \n\t * @param seqLength intended length of the sequence\n\t * @return new standard <code>Delays</code> object\n\t */\n",
    "1159": "\t/**\n\t * Construct and return a new object for the undo/redo step delay\n\t * from the Settings, and the indicated intended sequence length.\n\t * \n\t * @return new undo/redo <code>Delays</code> object\n\t */\n",
    "1161": "\t/**\n\t * Handle save button action.\n\t */\n",
    "1162": "\t/**\n\t * Construct and return a new object for the undo/redo step delay\n\t * from the Settings, and the indicated intended sequence length.\n\t * \n\t * @param seqLength intended length of the sequence\n\t * @return new undo/redo <code>Delays</code> object\n\t */\n",
    "1163": "\t/**\n\t * Start the Delay object.  If not yet started, this determines and\n\t * remembers \"now\" as the base time stamp for the next (first) delay.\n\t */\n",
    "1164": "\t/**\n\t * Stops the Delay object.\n\t * This just invalidates the last remembered wall clock time.\n\t */\n",
    "1169": "\t/**\n\t * Based of the mathematical value from {@link #effStep(boolean)}\n\t * we compute a meaningful approximation,\n\t * and return an <code>int</code> value.\n\t * \n\t * @param slowstep whether this delay shall be extra large\n\t * @return integral approximation of current delay in milliseconds\n\t */\n",
    "1172": "\t\t\t/**\n\t\t\t * Starts a new backward search.\n\t\t\t */\n",
    "1173": "\t/**\n\t * The main method of this application.\n\t * <p>\n\t * \n\t * @param argv passed parameters\n\t */\n",
    "1174": "\t/**\n\t * We are going to wait somewhat to create an observable motion.\n\t * If the wait amount is zero, we do not even call {@link Thread#sleep(long)}.\n\t * \n\t * @param reassertIntr whether a possible <code>InterruptedException</code>\n\t *                      is to be reasserted (<em>not</em> rethrown).\n\t *                      Else it is ignored.\n\t */\n",
    "1177": "\t/**\n\t * Decrypts special character regions of the ascii code.\n\t * \n\t * @param c  <code>Character</code> to be decrypted\n\t * @param start minimum ascii value to be used for decrypting\n\t * @param end   maximum ascii value to be used for decrypting\n\t * @param offset  offset the character has to be shifted by\n\t * @return the decrypted <code>Character</code>\n\t */\n",
    "1179": "\t/**\n\t * Restores the last saved properties.\n\t * \n\t * @param evt\n\t */\n",
    "1183": "\t/**\n\t * Inform every listener about the change of the state.\n\t */\n",
    "1186": "\t/**\n\t * Adds the passed listener.\n\t * \n\t * @param listener  listener to be added\n\t */\n",
    "1188": "\t/**\n\t * Returns the value of the spinner as double.\n\t * \n\t * @return the value\n\t */\n",
    "1189": "\t/**\n\t * Returns the value of the spinner as integer.\n\t * \n\t * @return the value\n\t */\n",
    "1193": "\t/**\n\t * If the available memory (RAM) is less than this bound,\n\t * then we are going to remove the eldest entry whenever we add a new one,\n\t * i.e. we do not expand our memory foot print.\n\t * <p>\n\t * Negative values indicate \"no such limit exists\".\n\t * \n\t * @param minRAMinMiB the minRAMinMiB to set\n\t * @see Utilities#getMaxUsableRAMinMiB()\n\t */\n",
    "1194": "\t/**\n\t * Inside this method (we override it) we implement our deletion strategy.\n\t * Either we return {@code true}, indicating the caller shall delete\n\t * that eldest entry, but in that case we are not allowed to change\n\t * the object ourselves.\n\t * <p>\n\t * Or we decide to take our own steps, return {@code false} to hinder\n\t * the caller to take any action, but may have removed one or more\n\t * elements ourselves.\n\t * \n\t * @param eldest   the currently eldest element, deletion candidate\n\t * @return whether the caller shall really remove that eldest entry\n\t */\n",
    "1197": "\t/**\n\t * This is like {@link LinkedHashMap#get(Object)}, but forces the\n\t * correct type of the key.\n\t * \n\t * @param key the key for which we search the mapped value\n\t * @return the mapped value, or {@code null}.\n\t */\n",
    "1199": "\t/**\n\t * Adds a key/value pair to the cache mapping.\n\t * We expect the key to be new, but we do not enforce (or check) that,\n\t * since the typical cache user will first use {@link #getV(Object)},\n\t * anyhow.\n\t * \n\t * @param key   key of the new cache entry\n\t * @param value value of the new cache entry\n\t */\n",
    "1200": "\t/**\n\t * Trim down the memory usage to the currently needed amount.\n\t * This is a user hint, and we need not really take any action,\n\t * e.g. if the implementation does not know how to do that.\n\t * @see ArrayList#trimToSize()\n\t */\n",
    "1215": "\t/**\n\t * Creation of a box data clone.\n\t *\n\t *@return  the cloned box data object\n\t */\n",
    "1216": "\t/**\n\t * Define the initial location (position) of a box.\n\t *\n\t *@param boxNo       number of the box, the location of which is to be set\n\t *@param boxPosition position of the box\n\t */\n",
    "1218": "\t/**\n\t * Change the location (position) of a box.\n\t *\n\t *@param boxNo\t\t number of the box, the location of which is to be set\n\t *@param boxPosition new position of the box\n\t */\n",
    "1219": "\t/**\n\t * Set / change the position of all boxes at once.\n\t * The passed array often contains an additional player position\n\t * (at the end of the array).  We don't care much, the array is\n\t * just one larger than necessary.\n\t *\n\t *@param  newBoxPositions the new box positions to be set\n\t */\n",
    "1221": "\t/**\n\t * Activate a box.\n\t *\n\t *@param  boxNo number of the box that shall be activated\n\t */\n",
    "1223": "\t/**\n\t * Deactivate a box.\n\t * Implies {@link #removeBoxFromCorral(int)}.\n\t *\n\t *@param  boxNo number of the box that shall be set inactive\n\t */\n",
    "1224": "\t/**\n\t * Tell whether a box is active.\n\t *\n\t *@param  boxNo number of the box we want to investigate\n\t *@return state of the box: <code>true</code> = is active\n\t */\n",
    "1225": "\t/**\n\t * Tell whether a box is inactive.\n\t *\n\t *@param  boxNo number of the box we want to investigate\n\t *@return state of the box: <code>true</code> = is inactive\n\t */\n",
    "1226": "\t/**\n\t * Mark a specified box to be frozen.\n\t * <p>\n\t * Such a box can never again be moved (pushed), regardless all other\n\t * possible changes on the board... except for an \"undo\" action.\n\t * <p>\n\t * Only boxes on goals are to be marked as frozen, as otherwise\n\t * it would constitute a deadlock condition.\n\t *\n\t *@param  boxNo number of the box to be marked \"frozen\"\n\t */\n",
    "1227": "\t/**\n\t * Sets a new level for playing.\n\t * \n\t * @param levelNo\n\t *            number of the level to set (first is 1)\n\t */\n",
    "1228": "\t/**\n\t * Tell whether a box is frozen.\n\t * A box can be frozen on a goal, only, since otherwise it would be\n\t * a deadlock condition.\n\t *\n\t *@param  boxNo number of the box we want to investigate\n\t *@return       whether the box is frozen\n\t */\n",
    "1230": "\t/**\n\t * Mark a specified box to not be frozen, anymore\n\t * This method is used for \"undo\" (on a frozen box).\n\t *\n\t *@param  boxNo number of the box to be unmarked\n\t */\n",
    "1231": "\t/**\n\t * Mark a specified box to be part of a corral.\n\t *\n\t *@param  boxNo number of the box which is part of a corral\n\t */\n",
    "1232": "\t/**\n\t * Mark a specified box to not be part of any corral.\n\t *\n\t *@param  boxNo number of the box which is not part of any corral\n\t */\n",
    "1233": "\t/**\n\t * Tell whether a box is part of a corral.\n\t *\n\t *@param  boxNo number of the box we want to investigate\n\t *@return <code>true</code> = box is part of a corral\n\t */\n",
    "1234": "\t/**\n\t * Tell the location of a box by its number.\n\t *\n\t *@param  boxNo number of the box we want to investigate\n\t *@return       position (location) of the box\n\t */\n",
    "1236": "\t/**\n\t * Tells whether all our boxes are on some goal.\n\t *\n\t *@return <code>true</code> if all boxes are on a goal, and\n\t *       <code>false</code> if at least one box is on a non-goal\n\t */\n",
    "1237": "\t/**\n\t * Returns the number of boxes on a goal.\n\t * \n\t * @return number of boxes on a goal\n\t */\n",
    "1238": "\t/**\n\t * Returns whether all active boxes are located on a backward goal.\n\t * \n\t * @return <code>true</code> if all active boxes are on backward goals, and\n\t * <code>false</code> if at least one active box not on a backward goal.\n\t */\n",
    "1239": "\t/**\n\t * Tell whether all corral boxes are located on goals.\n\t *\n\t *@return <code>true</code> if all corral boxes are on goals, and\n\t *\t\t <code>false</code> if at least one corral box is on a non-goal\n\t */\n",
    "1242": "\t/**\n\t * Mark all boxes as not frozen.\n\t */\n",
    "1243": "\t/**\n\t * Tell the overall size of the large index byte array.\n\t * Corresponds to the member of same name of array objects.\n\t * @return size of the array\n\t */\n",
    "1244": "\t/**\n\t * Reads the element value at the passed large index.\n\t * Models the array read access.\n\t * \n\t * @param lax large index of the array member\n\t * @return value of the array member at the index {@code lax}\n\t */\n",
    "1246": "\t/**\n\t * Writes an element value at the passed large index.\n\t * \n\t * @param lax large index of the array member\n\t * @param val the value to store\n\t * @return the just stored value\n\t */\n",
    "1248": "\t/**\n\t * Modifies the byte at the specified large array index\n\t * by \"oring in\" the passed byte value.\n\t * Models the operation {@code (arr[lax] |= val)}.\n\t * \n\t * @param lax large index of the array member to modify\n\t * @param val the value to \"or in\"\n\t * @return the resulting (stored) byte value\n\t */\n",
    "1253": "\t/**\n\t * Fetch a bit sized fragment of a {@code long} from a contiguous series\n\t * of bits from this \"array\".\n\t * The result is presented in unsigned interpretation (except the\n\t * {@code bitcnt} is 64).\n\t * \n\t * @param bitlax index of the first bit (not byte) to fetch\n\t * @param totbits number of bits to fetch (at most 64)\n\t * @return the indicated bits as unsigned value\n\t */\n",
    "1257": "\t/**\n\t * Shows dialog which informs about missing file.\n\t * <p>\n\t * If error is critical (it is when <code>messageType</code> equals\n\t * <code>JOptionPane.ERROR_MESSAGE</code> then application is closed.\n\t *\n\t * @param filePath\tpath of the missing file\n\t * @param messageType\t<code>JOptionPane.WARNING_MESSAGE</code> if missing file is non-critical;\n\t *\t\t\t\t\t\t<code>JOptionPane.ERROR_MESSAGE</code> if missing file is critical\n\t */\n",
    "1258": "\t/**\n\t * Tells, whether the SparseArray does not contain any non-{@code null}\n\t * element.\n\t * <p>\n\t * This is also part of the {@link Map} interface.\n\t * \n\t * @return whether the SparseArray is empty\n\t */\n",
    "1259": "\t/**\n\t * Removes all entries from the object.\n\t * <p>\n\t * This method is also part of the map interface.\n\t */\n",
    "1264": "\t/**\n\t * Load properties from a file.\n\t *\n\t * @param fileName\tname of the file\n\t * @return\t<code>Properties</code> variable containing loaded properties\n\t */\n",
    "1268": "\t/**\n\t * Load the properties corresponding to the passed language code.\n\t *\n\t * @param languageCode code of the language (example: \"en\")\n\t * @return\t<code>Properties</code> variable containing loaded properties\n\t */\n",
    "1275": "\t/**\n\t * Read the array element at the specified index.\n\t * \n\t * @param inx indexes the (sparse) array\n\t * @return {@code null}, or the element at index {@code inx}\n\t */\n",
    "1277": "\t/**\n\t * This is a helper method for {@link #wr(Node, byte, long, Object)}.\n\t * We store a new reference where we fetched the last {@code Node}\n\t * reference during tree path scanning: at {@code Node pa}\n\t * with index {@code painx}.\n\t * If {@code pa} is {@code null}, we must have fetched from the\n\t * {@link #root} and thus we here store to it.\n\t * \n\t * @param pa    the node to which we store a new reference, or {@code null}\n\t * @param painx the index of the store\n\t * @param nref  the new reference to store\n\t */\n",
    "1278": "\t/**\n\t * Reloads all non-static GUI components.\n\t */\n",
    "1279": "\t/**\n\t * Redraws the screen and waits for \"enter\" if needed.\n\t * \n\t * @param waitForEnter  whether the method is to wait for enter after drawing\n\t */\n",
    "1281": "\t/**\n\t * Stores the specified value into the array slot with the specified index,\n\t * and returns the former value of that array slot.\n\t * <p>\n\t * Storing a {@code null} value means to remove any former value\n\t * from the indexed array slot.\n\t * \n\t * @param inx the index of the array slot to write to\n\t * @param val the value to store at index {@code inx}\n\t * @return the former content of the array slot at index {@code inx}\n\t */\n",
    "1283": "\t/**\n\t * Removes a box from the passed position.\n\t * \n\t * @param position the position a box is to be removed from.\n\t */\n",
    "1287": "\t/**\n\t * Debug: Calculates and displays the lower bound for all levels.\n\t */\n",
    "1290": "\t\t\t/**\n\t\t\t * Starts a new forward search.\n\t\t\t */\n",
    "1291": "\t/**\n\t * Removes the box having the passed number.\n\t * \n\t * @param boxNo the number of the box that is to be removed.\n\t */\n",
    "1296": "\t/**\n\t * Returns whether the game is in play mode, just now.\n\t * \n\t * @return <code>true</code>, if the game is in play mode\n\t */\n",
    "1300": "\t/**\n\t * Removes a box from the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x\tthe x-coordinate of the position the box is to be removed from.\n\t * @param y the y-coordinate of the position the box is to be removed from.\n\t */\n",
    "1304": "\t/**\n\t * Returns whether the game is in editor mode, just now.\n\t * \n\t * @return <code>true</code>, iff the game is in editor mode\n\t */\n",
    "1308": "\t/**\n\t * Removes a wall from the passed position.\n\t * \n\t * @param position the position a wall is to be removed from.\n\t */\n",
    "1313": "\t/**\n\t * Sets the \"invalid level\" mode. The current level is invalid. Therefore\n\t * the user isn't allowed to play it. Furthermore the solver and the optimizer are disabled.\n\t */\n",
    "1319": "\t/**\n\t * Removes a wall from the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x\tthe x-coordinate of the position the wall is to be removed from.\n\t * @param y the y-coordinate of the position the wall is to be removed from.\n\t */\n",
    "1344": "\t/**\n\t * Removes a goal from the passed position.\n\t * \n\t * @param position the position a goal is to be removed from.\n\t */\n",
    "1373": "\t/**\n\t * Removes a goal from the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x\tthe x-coordinate of the position the goal is to be removed from.\n\t * @param y the y-coordinate of the position the goal is to be removed from.\n\t */\n",
    "1378": "\t/**\n\t * Determines the first key associated with a non-{@code null} value.\n\t * Sorting order is native: signed.\n\t * @return the first key in the sparse array\n\t * @see SortedMap#firstKey()\n\t */\n",
    "1384": "\t/**\n\t * Determines the last key associated with a non-{@code null} value.\n\t * Sorting order is native: signed.\n\t * @return the last key in the sparse array\n\t * @see SortedMap#lastKey()\n\t */\n",
    "1393": "\t/**\n\t * Removes the player from the board.\n\t */\n",
    "1453": "\t/**\n\t * Sets a box at the passed position.\n\t * \n\t * @param position the position a box is to be set.\n\t */\n",
    "1496": "    /**\n     * Method that is backed to a submit button of a form.\n     */\n",
    "1503": "\t/**\n\t * Sets a box at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position a box is to be set.\n\t * @param y the y-coordinate of the position a box is to be set.\n\t */\n",
    "1518": "\t/**\n\t * Generate an id for a new lock. Uniqueness per cache instance is very \n\t * desirable but not absolutely critical. Must be called from one of the \n\t * synchronized methods of this class.\n\t */\n",
    "1519": "\t/**\n\t * decrement a lock and put it back in the cache\n\t */\n",
    "1534": "    /**\n     * Gets a value of an element which matches the given key.\n     * @param key the key of the element to return.\n     * @return The value placed into the cache with an earlier put, or null if not found or expired\n     * @throws CacheException\n     */\n",
    "1536": "\t/**\n\t * Sets a box with the passed number at the passed position.\n\t * \n\t * @param position the position a box is to be set.\t \n\t * @param boxNo\tthe number of the box to be set\n\t */\n",
    "1537": "    /**\n     * Puts an object into the cache.\n     * @param key a {@link Serializable} key\n     * @param value a {@link Serializable} value\n     * @throws CacheException if the parameters are not {@link Serializable}, the {@link CacheManager}\n     * is shutdown or another {@link Exception} occurs.\n     */\n",
    "1538": "    /**\n     * Removes the element which matches the key.\n     * <p>\n     * If no element matches, nothing is removed and no Exception is thrown.\n     * @param key the key of the element to remove\n     * @throws CacheException\n     */\n",
    "1540": "    /**\n     * Remove all elements in the cache, but leave the cache\n     * in a useable state.\n     * @throws CacheException\n     */\n",
    "1542": "    /**\n     * Remove the cache and make it unuseable.\n     * @throws CacheException\n     */\n",
    "1543": "    /**\n     * Calls to this method should perform there own synchronization.\n     * It is provided for distributed caches. Because EHCache is not distributed\n     * this method does nothing.\n     */\n",
    "1545": "    /**\n     * Calls to this method should perform there own synchronization.\n     * It is provided for distributed caches. Because EHCache is not distributed\n     * this method does nothing.\n     */\n",
    "1546": "\t/**\n\t * Enables or disables the buttons for \"undo\" and \"redo\" by inspection of\n\t * the history, i.e. whether there is something to undo or redo.\n\t */\n",
    "1547": "\t\t/**\n\t\t * The timestamp on the cached data\n\t\t */\n",
    "1548": "    /**\n     * Gets the next timestamp;\n     */\n",
    "1549": "    /**\n     * Returns the lock timeout for this cache.\n     */\n",
    "1550": "\t\t/**\n\t\t * The actual cached data\n\t\t */\n",
    "1552": "\t\t/**\n\t\t * Lock the item\n\t\t */\n",
    "1554": "\t\t/**\n\t\t * Not a lock!\n\t\t */\n",
    "1555": "\t\t/**\n\t\t * Is this item visible to the timestamped\n\t\t * transaction?\n\t\t */\n",
    "1558": "\t\t/**\n\t\t * Don't overwite already cached items\n\t\t */\n",
    "1561": "\t/**\n\t * Sets a box with the passed number at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position a box is to be set.\n\t * @param y the y-coordinate of the position a box is to be set.\n\t * @param boxNo\tthe number of the box to be set\n\t */\n",
    "1563": "\t/**\n\t * Check if this lock mode is more restrictive than the given lock mode.\n\t *\n\t * @param mode LockMode to check\n\t * @return true if this lock mode is more restrictive than given lock mode\n\t */\n",
    "1564": "\t/**\n\t * Check if this lock mode is less restrictive than the given lock mode.\n\t *\n\t * @param mode LockMode to check\n\t * @return true if this lock mode is less restrictive than given lock mode\n\t */\n",
    "1572": "\t\t/**\n\t\t * Increment the lock, setting the\n\t\t * new lock timeout\n\t\t */\n",
    "1579": "\t\t/**\n\t\t * Decrement the lock, setting the unlock\n\t\t * timestamp if now unlocked\n\t\t * @param currentTimestamp\n\t\t */\n",
    "1587": "\t\t/**\n\t\t * Can the timestamped transaction re-cache this\n\t\t * locked item now?\n\t\t */\n",
    "1592": "\t\t/**\n\t\t * Was this lock held concurrently by multiple\n\t\t * transactions?\n\t\t */\n",
    "1599": "\t\t/**\n\t\t * Yes, this is a lock\n\t\t */\n",
    "1605": "\t\t/**\n\t\t * locks are not returned to the client!\n\t\t */\n",
    "1617": "\t/**\n\t * Sets a box and a goal at the passed position.\n\t * \n\t * @param position the position the objects are to be set.\n\t */\n",
    "1634": "\t/**\n     * Defines the mapper to map source to destination files.\n     */\n",
    "1638": "\t/**\n\t * Copies the data of the current level to the clipboard, optionally\n\t * using run length encoding (RLE).\n\t * \n\t * @param withRLE whether to use RLE\n\t * @see #exportLevelToClipboard(boolean, boolean)\n\t */\n",
    "1647": "\t/**\n\t * Sets a box and a goal at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position the objects are to be set.\n\t * @param y the y-coordinate of the position the objects are to be set.\n\t */\n",
    "1665": "\t/**\n\t * Sets a a goal at the passed position.\n\t * \n\t * @param position the position the goal is to be set.\n\t */\n",
    "1680": "\t/**\n\t * Sets a goal at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position a goal is to be set.\n\t * @param y the y-coordinate of the position a goal is to be set.\n\t */\n",
    "1692": "\t/**\n\t * Sets a wall at the passed position.\n\t * \n\t * @param position the position the wall is to be set.\n\t */\n",
    "1704": "\t/**\n\t * Sets a wall at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position a wall is to be set.\n\t * @param y the y-coordinate of the position a wall is to be set.\n\t */\n",
    "1716": "\t/**\n\t * Sets the number of a box at the passed position.\n\t * \n\t * @param boxNo\tthe box number to be set\n\t * @param position the position the box number is to be set.\n\t */\n",
    "1727": "\t/**\n\t * Sets the number of a box at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param boxNo\tthe box number to be set\n\t * @param x the x-coordinate of the position the box number is to be set.\n\t * @param y the y-coordinate of the position the box number is to be set.\n\t */\n",
    "1738": "\t/**\n\t * Sets the square at the the passed position to be an advanced deadlock\n\t * square.\n\t * \n\t * @param position the position of the square\n\t */\n",
    "1761": "\t/**\n\t * Sets the player to the passed position.\n\t * \n\t * @param position Position the player is to be set at.\n\t */\n",
    "1778": "\t/**\n\t * Sets the player to the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position the player is to be set at.\n\t * @param y the y-coordinate of the position the player is to be set at.\n\t */\n",
    "1808": "\t/**\n\t * Returns whether the square at the the passed position is a corral\n\t * forcer square.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a corral forcer square at the\n\t *                           passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't a corral forcer square at the\n\t *                           passed position\n\t */\n",
    "1837": "\t/**\n\t * Returns whether the square at the the passed position is a corral\n\t * forcer square.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is a corral forcer square at the\n\t *                           passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't a corral forcer square at the\n\t *                           passed position\n\t */\n",
    "1865": "\t/**\n\t * Returns whether there is a box at the passed position.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a box at the passed position,\n\t * or<br> <code>false</code> if there isn't a box at the passed position\n\t */\n",
    "1889": "\t/**\n\t * Returns whether there is a box at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is a box at the passed position,\n\t * or<br> <code>false</code> if there isn't a box at the passed position\n\t */\n",
    "1911": "\t/**\n\t * Returns whether there is a wall at the passed position.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a wall at the passed position,\n\t * or<br> <code>false</code> if there isn't a wall at the passed position\n\t */\n",
    "1916": "\t/**\n\t * Returns if a box has been selected.\n\t * \n\t * @return <code>true</code> a box has been selected <code>false</code> no box\n\t *         has been selected\n\t */\n",
    "1931": "\t/**\n\t * Returns whether there is a wall at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is a wall at the passed position,\n\t * or<br> <code>false</code> if there isn't a wall at the passed position\n\t */\n",
    "1946": "\t/**\n\t * Returns whether the player reachable squares are to be highlighted.\n\t * \n\t * @return <code>true</code> if the player reachable squares are to be highlighted,<br>\n\t * \t      <code>false</code> otherwise\n\t */\n",
    "1956": "\t/**\n\t * The location of ant-installer.jar and sysout.jar and possibly jgoodies-edited-1_2_2.jar\n\t * @param antInstallLib The antInstallLib to set.\n\t */\n",
    "1958": "\t/**\n\t * The location of ant.jar and ant-launcher.jar\n\t * @param antLib The antLib to set.\n\t */\n",
    "1959": "\t/**\n\t * Returns whether there is a goal at the passed position.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a goal at the passed position,\n\t * or<br> <code>false</code> if there isn't a goal at the passed position\n\t */\n",
    "1991": "\t/**\n\t * Returns the position of the selected box.\n\t * \n\t * @return the position of the selected box\n\t */\n",
    "2003": "\t/**\n\t * Returns whether there is a goal at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is a goal at the passed position,\n\t * or<br> <code>false</code> if there isn't a goal at the passed position\n\t */\n",
    "2086": "\t/**\n\t * Returns whether the square at the passed position is either a goal\n\t * or a wall.\n\t * \n\t * @param position  the position of the square\n\t * @return <code>true</code> if the square is a goal or a wall, or<br>\n\t * \t\t  <code>false</code> otherwise\n\t */\t\n",
    "2156": "\t/**\n\t * Plays the next movements from the history movements, in an own thread,\n\t * in order to avoid blocking the event dispatcher thread (EDT).\n\t * \n\t * @param redoAllMovements whether all movements have to be redone\n\t */\n",
    "2159": "\t/**\n\t * Returns whether there is a corral forcer at the passed position.\n\t * A corral forcer divides the board into areas the player can reach\n\t * and can't reach.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a corral forcer at the position,\n\t * or<br> <code>false</code> if there isn't a corral forcer at the position \n\t */\n",
    "2165": "    /**\n     * Returns a list of all elements in the cache. Only keys of non-expired\n     * elements are returned.\n     * <p/>\n     * The returned keys are unique and can be considered a set.\n     * <p/>\n     * The List returned is not live. It is a copy.\n     * <p/>\n     * The time taken is O(n), where n is the number of elements in the cache. On\n     * a 1.8Ghz P4, the time taken is approximately 200ms per 1000 entries. This method\n     * is not syncrhonized, because it relies on a non-live list returned from {@link #getKeys()}\n     * , which is synchronised, and which takes 8ms per 1000 entries. This way\n     * cache liveness is preserved, even if this method is very slow to return.\n     * <p/>\n     * Consider whether your usage requires checking for expired keys. Because\n     * this method takes so long, depending on cache settings, the list could be\n     * quite out of date by the time you get it.\n     *\n     * @return a list of {@link Serializable} keys\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2169": "\t/**\n\t * Returns whether there is a backward search goal at the passed position.\n\t * The backward search goals are the positions of the boxes\n\t * at the beginning of a level.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a backward search goal\n\t *                           at the passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't a backward search goal\n\t *                           at the passed position\n\t */\n",
    "2175": "    /**\n     * Returns the number of elements in the memory store.\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2177": "    /**\n     * Returns the number of elements in the disk store.\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2180": "\t/**\n\t * Returns whether there is a backward search goal at the passed position.\n\t * The backward search goals are the positions of the boxes\n\t * at the beginning of a level.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is a backward search goal\n\t *                           at the passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't a backward search goal\n\t *                           at the passed position\n\t */\n",
    "2181": "    /**\n     * Gets the status attribute of the Cache\n     *\n     * @return The status value from the Status enum class\n     */\n",
    "2186": "\t/**\n\t * Undoes the last movement in an own thread,\n\t * in order to avoid blocking the event dispatcher thread (EDT).\n\t */\n",
    "2187": "    /**\n     * Receive a Locator object for document events.\n     */\n",
    "2191": "    /**\n     * Number of times a requested item was found in the Memory Store\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2193": "\t/**\n\t * Returns whether there is an empty square at the passed position.\n\t * NB: a goal is <em>not</em> considered to be empty.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is an empty square\n\t *                           at the passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't an empty square\n\t *                           at the passed position\n\t */\n",
    "2195": "    /**\n     * Number of times a requested item was found in the Disk Store\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2196": "    /**\n     * Finds a creator method.\n     */\n",
    "2197": "    /**\n     * Builds a method name from an element or attribute name.\n     */\n",
    "2198": "    /**\n     * Number of times a requested element was not found in the cache. This\n     * may be because it expired, in which case this will also be recorded in {@link #getMissCountExpired},\n     * or because it was simply not there.\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2203": "    /**\n     * Number of times a requested element was found but was expired\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2205": "\t/**\n\t * Returns whether there is an empty square at the passed position.\n\t * NB: a goal is <em>not</em> considered to be empty.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is an empty square\n\t *                           at the passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't an empty square\n\t *                           at the passed position\n\t */\n",
    "2207": "    /**\n     * Gets the cache name\n     */\n",
    "2208": "    /**\n     * Formats the current document location.\n     */\n",
    "2209": "    /**\n     * Gets timeToIdleSeconds\n     */\n",
    "2211": "    /**\n     * Gets timeToLiveSeconds\n     */\n",
    "2213": "\t/**\n\t * Returns whether the square at the passed is accessible,\n\t * that means: not a box and not a wall.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is accessible, or<br>\n\t * \t\t  <code>false</code> if the square isn't accessible\n\t */\n",
    "2219": "    /**\n     * Does the overflow go to disk\n     */\n",
    "2221": "    /**\n     * Gets the maximum number of elements to hold in memory\n     */\n",
    "2223": "\t/**\n\t * Returns whether the square at the passed is accessible,\n\t * i.e. not a box and not a wall.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is accessible, or<br>\n\t * \t\t  <code>false</code> if the square isn't accessible\n\t */\n",
    "2224": "    /**\n     * The policy used to evict elements from the {@link net.sf.ehcache.store.MemoryStore}.\n     * This can be one of:\n     * <ol>\n     * <li>LRU - least recently used\n     * <li>LFU - least frequently used\n     * <li>FIFO - first in first out, the oldest element by creation time\n     * </ol>\n     * The default value is LRU\n     *\n     * @since 1.2\n     */\n",
    "2225": "    /**\n     * Gets the disk cache path\n     */\n",
    "2227": "    /**\n     * Gets a Map of caches\n     */\n",
    "2229": "    /**\n     * Checks whether this cache element has expired.\n     * <p/>\n     * The element is expired if:\n     * <ol>\n     * <li> the idle time is non-zero and has elapsed, unless the cache is eternal; or\n     * <li> the time to live is non-zero and has elapsed, unless the cache is eternal; or\n     * <li> the value of the element is null.\n     * </ol>\n     *\n     * @return true if it has expired\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     * @throws NullPointerException  if the element is null\n     */\n",
    "2233": "\t/**\n\t * Returns whether the square at the passed position is accessible for\n\t * a box.  A square is accessible for a box if there is neither a wall\n\t * nor a box at this square AND the square is no simple deadlock square.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is accessible for a box, or<br>\n\t * \t\t  <code>false</code> if the square isn't accessible for a box\n\t */\n",
    "2235": "    /**\n     * Clones a cache. This is only legal if the cache has not been\n     * initialized. At that point only primitives have been set and no\n     * {@link net.sf.ehcache.store.LruMemoryStore} or {@link net.sf.ehcache.store.DiskStore} has been created.\n     *\n     * @return an object of type {@link Cache}\n     * @throws CloneNotSupportedException\n     */\n",
    "2238": "        /**\n         * Sets the class name\n         *\n         * @param fullyQualifiedClassPath\n         */\n",
    "2241": "\t/**\n\t * Returns whether the square at the passed position is accessible for\n\t * a box.  A square is accessible for a box if there is neither a wall\n\t * nor a box at this square AND the square is no simple deadlock square.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is accessible for a box, or<br>\n\t * \t\t  <code>false</code> if the square isn't accessible for a box\n\t */\n",
    "2242": "        /**\n         * Sets the name of the cache. This must be unique\n         */\n",
    "2243": "    /**\n     * Use this to access the service in order to register and unregister listeners\n     *\n     * @return the CacheEventNotificationService instance for this cache.\n     */\n",
    "2244": "        /**\n         * Sets the maximum objects to be held in memory\n         */\n",
    "2247": "    /**\n     * Notifies all registered listeners, in no guaranteed order, that an element was removed\n     * @param element\n     * @see CacheEventListener#notifyElementRemoved\n     */\n",
    "2248": "        /**\n         * Sets the eviction policy. An invalid argument will set it to null\n         */\n",
    "2251": "    /**\n     * Notifies all registered listeners, in no guaranteed order, that an element has expired\n     * @param element\n     * @see CacheEventListener#notifyElementExpired\n     */\n",
    "2252": "    /**\n     * Adds a listener to the notification service. No guarantee is made that listeners will be\n     * notified in the order they were added.\n     * @param cacheEventListener\n     * @return true if the listener is being added and was not already added\n     */\n",
    "2253": "    /**\n     * Removes a listener from the notification service.\n     * @param cacheEventListener\n     * @return true if the listener was present\n     */\n",
    "2254": "    /**\n     * Gets a list of the listeners registered to this class\n     * @return a list of type <code>CacheEventListener</code>\n     */\n",
    "2255": "\t/**\n\t * Returns whether the square at the passed position is a wall\n\t * or a simple deadlock square.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock square, or<br>\n\t * \t\t  <code>false</code> if the square is neither a wall nor a simple\n\t *                           deadlock square\n\t */\n",
    "2261": "        /**\n         * Sets whether elements are eternal. If eternal,  timeouts are ignored and the element\n         * is never expired.\n         */\n",
    "2266": "\t/**\n\t * Returns whether the current level is valid.\n\t * <P>\n\t * If the level is invalid an info message is displayed.\n\t * \n\t * @return <code>true</code> if the level is valid, and<br>\n\t *        <code>false</code> if the level is invalid\n\t */\n",
    "2268": "\t/**\n\t * Uses JavaGroups to broadcast the supplied notification message across the\n\t * cluster.\n\t * \n\t * @param message\n\t *            The cluster nofication message to broadcast.\n\t */\n",
    "2270": "        /**\n         * Sets the time to idle for an element before it expires. Is only used\n         * if the element is not eternal.\n         */\n",
    "2272": "\t/**\n\t * We are not using the caching, so we just return something that identifies\n\t * us. This method should never be called directly.\n\t */\n",
    "2273": "\t/**\n\t * A callback that is fired when a new member joins the cluster. This method\n\t * should never be called directly.\n\t * \n\t * @param address\n\t *            The address of the member who just joined.\n\t */\n",
    "2274": "\t/**\n\t * A callback that is fired when an existing member leaves the cluster. This\n\t * method should never be called directly.\n\t * \n\t * @param address\n\t *            The address of the member who left.\n\t */\n",
    "2278": "        /**\n         * Sets the time to idle for an element before it expires. Is only used\n         * if the element is not eternal.\n         */\n",
    "2280": "\t/**\n\t * Returns whether the square at the passed position is a wall\n\t * or a simple deadlock square.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock square, or<br>\n\t * \t\t  <code>false</code> if the square is neither a wall nor a simple\n\t *                           deadlock square\n\t */\n",
    "2281": "    /**\n     * Shuts down the CacheManager.\n     * <p/>\n     * If the shutdown occurs on the singleton, then the singleton is removed, so that if a singleton access method\n     * is called, a new singleton will be created.\n     */\n",
    "2283": "        /**\n         * Sets whether elements can overflow to disk when the in-memory cache\n         * has reached the set limit.\n         */\n",
    "2285": "        /**\n         * Sets whether, for caches that overflow to disk,\n         * the disk cache persist between CacheManager instances\n         */\n",
    "2288": "        /**\n         * Sets the interval in seconds between runs of the disk expiry thread.\n         * <p/>\n         * 2 minutes is the default.\n         * This is not the same thing as time to live or time to idle. When the thread runs it checks\n         * these things. So this value is how often we check for expiry.\n         */\n",
    "2291": "\t/**\n\t * Returns whether the passed position is an outer square or a wall.\n\t * An outer square is a square which is outside the reachable area\n\t * of the player even if there weren't any boxes on the board.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is an outer square or a wall,\n\t * or<br> <code>false</code> if the square isn't an outer square or a wall \n\t */\n",
    "2311": "\t/**\n\t * Returns whether the square at the passed position is a simple\n\t * deadlock square.\n\t * <p>\n\t * The search direction doesn't matter, because the simple deadlock squares\n\t * of the other direction can never be reached from a specific direction.\n\t * Therefore both the forward and the backward simple deadlock squares\n\t * are checked.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is a simple deadlock square,\n\t * or<br> <code>false</code> if the square isn't a simple deadlock square\n\t */\n",
    "2329": "\t/**\n\t * This method is called upon plug-in activation\n\t */\n",
    "2331": "\t/**\n\t * This method is called when the plug-in is stopped\n\t */\n",
    "2338": "    /**\n     *\tSet the current input focus to self's destination entry field\n     */\n",
    "2351": "\t/**\n\t * Returns whether the square at the passed position is a simple\n\t * deadlock square.\n\t * <p>\n\t * The search direction doesn't matter, because the simple deadlock squares\n\t * of the other direction can never be reached from a specific direction.\n\t * Therefore both the forward and the backward simple deadlock squares\n\t * are checked.\n\t * <p>\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is a simple deadlock square,\n\t * or<br> <code>false</code> if the square isn't a simple deadlock square\n\t */\n",
    "2362": "\t/**\n\t * Sets a new collection for playing.\n\t * \n\t * @param levelCollection\n\t *            the level collection to be set\n\t */\n",
    "2377": "\t/**\n\t * Uses the standard container selection fileDialog to choose the new value\n\t * for the container field.\n\t */\n",
    "2378": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is\n\t * a simple deadlock forward square.\n\t *  \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock forward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a simple\n\t *                           deadlock forward square\n\t */\n",
    "2418": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is\n\t * a simple deadlock forward square.\n\t *  \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock forward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a simple\n\t *                           deadlock forward square\n\t */\n",
    "2441": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is\n\t * a simple deadlock backward square.\n\t *  \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock backward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a simple\n\t *                           deadlock backward square\n\t */\n",
    "2449": "\t/**\n\t * If the current level collection contains the level with the\n\t * specified data base ID, we return the title of that current collection.\n\t * Otherwise we return null.\n\t * <p>\n\t * NOTE: There may be other collections containing that levelID.\n\t * \n\t * @param levelID ID of the level to search for\n\t * @return the title of the collection containing the levelID\n\t */\n",
    "2455": "    /**\n     * Save a transient object.\n     * An id is generated, assigned to the given object and returned.\n     */\n",
    "2463": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is a simple deadlock backward square.\n\t *  \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock backward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a simple\n\t *                           deadlock backward square\n\t */\n",
    "2478": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is\n\t * an advanced simple deadlock forward square.\n\t *  \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is a wall or an advanced\n\t *                           simple deadlock forward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a advanced\n\t *                           simple deadlock forward square\n\t */\n",
    "2488": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is a advanced simple deadlock forward square.\n\t *  \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is a wall or an advanced\n\t *                           simple deadlock forward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a advanced\n\t *                           simple deadlock forward square\n\t */\n",
    "2500": "\t/**\n\t * Returns whether there is a box and a goal at the passed position.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a box and a goal\n\t *                           at the passed position,\n\t * or<br> <code>false</code> if there isn't a box and a goal\n\t *                           at the passed position\n\t */\n",
    "2512": "\t/**\n\t * Returns whether there is a box and a goal at the passed position.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a box and a goal\n\t *                           at the passed position,\n\t * or<br> <code>false</code> if there isn't a box and a goal\n\t *                           at the passed position\n\t */\n",
    "2521": "\t/**\n\t * Returns whether there is a player in the level.\n\t * <p>\n\t * Usually there is a player in every level. This method is just used for\n\t * determining \"special\" squares for displaying them correctly. \n\t * \n\t * @return <code>true</code> if there is a player in the level,\n\t * or<br> <code>false</code> if there isn't a player in the level\n\t */\n",
    "2528": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the passed position is marked.\n\t * <p>\n\t * Marked positions are displayed with a little square.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the passed position is marked,\n\t * or<br> <code>false</code> if the passed position is not marked\n\t */\n",
    "2543": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the passed position is marked.\n\t * <p>\n\t * Marked positions are displayed with a little square graphic.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the passed position is marked,\n\t * or<br> <code>false</code> if the passed position is not marked\n\t */\n",
    "2552": "\t/**\n\t * Removes a marking from the passed position.\n\t * \n\t * @param position the position a marking is to be removed from.\n\t */\n",
    "2561": "\t/**\n\t * Removes a marking from the passed position.\n\t * \n\t * @param x\tthe x-coordinate of the position the marking is to be removed from.\n\t * @param y the y-coordinate of the position the marking is to be removed from.\n\t */\n",
    "2569": "\t/**\n\t * Removes all marking from the board.\n\t */\n",
    "2576": "\t/**\n\t * Sets a marking at the passed position.\n\t * \n\t * @param position the position the marking is to be set.\n\t */\n",
    "2580": "    /**\n     * associate a proxy that was instantiated by another session with this session\n     */\n",
    "2583": "\t/**\n\t * Sets a marking at the passed position.\n\t * \n\t * @param x the x-coordinate of the position a marking is to be set.\n\t * @param y the y-coordinate of the position a marking is to be set.\n\t */\n",
    "2591": "\t/**\n\t * Marks the passed position with the passed value.\n\t * \n\t * @param position  what position is to be marked\n\t * @param markValue with what value the position id to be marked\n\t */\n",
    "2600": "\t/**\n\t * Changes the making status of the passed position.\n\t * \n\t * @param position the position is to be changed\n\t */\n",
    "2608": "\t/**\n\t * Returns the number of the box located at the passed position.\n\t * For positions without a box the return value is undefined.\n\t * \n\t * @param position the position of the square\t \n\t * @return\tthe number of the box\n\t */\n",
    "2616": "\t/**\n\t * Returns the number of the goal located at the passed position.\n\t * For positions without a goal the return value is undefined.\n\t * \n\t * @param position the position of the square\t \n\t * @return\tthe number of the goal\n\t */\n",
    "2625": "\t/**\n\t * Returns the position of the goal with the passed goal number.\n\t * \n\t * @param goalNo the number of the goal\n\t * @return the position of the goal\n\t */\n",
    "2633": "\t/**\n\t * Returns the distance which the player has to walk,\n\t * starting from one square in order to reach a second square.\n\t * \n\t * @param fromSquare player start position\n\t * @param toSquare\t player walk destination\n\t * @return number of steps the player needs to walk\n\t */\n",
    "2641": "\t/**\n\t * Sets a new board position.\n\t * \n\t * @param position Board position to be set.\n\t */\n",
    "2650": "\t/**\n\t * Sets a new board position.\n\t * \n\t * @param positions box and player positions to be set.\n\t */\n",
    "2659": "\t/**\n\t * Removes all boxes from the board.\n\t */\n",
    "2668": "\t/**\n\t * The goals of the backward search are the box positions at search start.\n\t * Here we set the goals for the backward search from the current box\n\t * positions.\n\t */\n",
    "2683": "    /**\n     * Retrieve a list of persistent objects using a hibernate query\n     */\n",
    "2781": "\t\t/**\n\t\t * Returns the push distance of a specific box to a specific goal.\n\t\t * <p>\n\t\t * The distance is calculated under the assumption that:\n\t\t * <ol>\n\t\t *  <li> the box is the only one on the whole board\n\t\t *  <li> the player can reach every side of the box at the moment\n\t\t * </ol>\n\t\t *  \n\t\t * @param boxNo number of the relevant box\n\t\t * @param goalNo number of the relevant goal\n\t\t * @return push distance\n\t\t */\n",
    "2880": "\t/**\n\t * The action has been activated. The argument of the\n\t * method represents the 'real' action sitting\n\t * in the workbench UI.\n\t * @see IWorkbenchWindowActionDelegate#run\n\t */\n",
    "2881": "\t/**\n\t * Selection in the workbench has been changed. We \n\t * can change the state of the 'real' action here\n\t * if we want, but this can only happen after \n\t * the delegate has been created.\n\t * @see IWorkbenchWindowActionDelegate#selectionChanged\n\t */\n",
    "2882": "\t/**\n\t * We can use this method to dispose of any system\n\t * resources we previously allocated.\n\t * @see IWorkbenchWindowActionDelegate#dispose\n\t */\n",
    "2883": "\t/**\n\t * We will cache window object in order to\n\t * be able to provide parent shell for the message dialog.\n\t * @see IWorkbenchWindowActionDelegate#init\n\t */\n",
    "2930": "    /**\n     * The <code>addToHierarchyToCheckedStore</code> implementation of this \n     * <code>WizardDataTransferPage</code> method returns <code>false</code>. \n     * Subclasses may override this method.\n     */\n",
    "2961": "    /**\n     * This method must be called just before this window becomes visible.\n     */\n",
    "2963": "    /**\n     *\tAdd the passed listener to self's collection of clients\n     *\tthat listen for changes to element checked states\n     *\n     *\t@param listener ICheckStateListener\n     */\n",
    "2964": "    /**\n     * Returns a content provider for <code>IResource</code>s that returns \n     * only children of the given resource type.\n     */\n",
    "2965": "    /**\n     *\tReturn a boolean indicating whether all children of the passed tree element\n     *\tare currently white-checked\n     *\n     *\t@return boolean\n     *\t@param treeElement java.lang.Object\n     */\n",
    "2970": "    /**\n     *\tReturn a boolean indicating whether all list elements associated with\n     *\tthe passed tree element are currently checked\n     *\n     *\t@return boolean\n     *\t@param treeElement java.lang.Object\n     */\n",
    "2971": "    /**\n     *\tIterate through the passed elements which are being realized for the first\n     *\ttime and check each one in the tree viewer as appropriate\n     */\n",
    "2972": "    /**\n     * Returns this page's collection of currently-specified resources to be \n     * exported. This is the primary resource selection facility accessor for \n     * subclasses.\n     *\n     * @return an iterator over the collection of resources currently selected \n     * for export (element type: <code>IResource</code>). This will include\n     * white checked folders and individually checked files.\n     */\n",
    "2974": "    /**\n     *\tAn item was checked in one of self's two views.  Determine which\n     *\tview this occurred in and delegate appropriately\n     *\n     *\t@param event CheckStateChangedEvent\n     */\n",
    "2975": "    /**\n     * Returns the resource extensions currently specified to be exported.\n     *\n     * @return the resource extensions currently specified to be exported (element \n     *   type: <code>String</code>)\n     */\n",
    "2980": "    /**\n     * Returns this page's collection of currently-specified resources to be \n     * exported. This returns both folders and files - for just the files use\n     * getSelectedResources.\n     *\n     * @return a collection of resources currently selected \n     * for export (element type: <code>IResource</code>)\n     */\n",
    "2981": "    /**\n     *\tCreate this group's tree viewer.\n     */\n",
    "2986": "    /**\n     * Returns whether the extension of the given resource name is an extension that\n     * has been specified for export by the user.\n     *\n     * @param resourceName the resource name\n     * @return <code>true</code> if the resource name is suitable for export based \n     *   upon its extension\n     */\n",
    "2987": "    /**\n     * Returns a boolean indicating whether the passed tree item should be\n     * white-checked.\n     *\n     * @return boolean\n     * @param treeElement java.lang.Object\n     */\n",
    "2990": "    /**\n     *\tRecursively add appropriate tree elements to the collection of\n     *\tknown white-checked tree elements.\n     *\n     *\t@param treeElement java.lang.Object\n     */\n",
    "2991": "    /**\n     * Persists resource specification control setting that are to be restored\n     * in the next instance of this page. Subclasses wishing to persist additional\n     * setting for their controls should extend hook method \n     * <code>internalSaveWidgetValues</code>.\n     */\n",
    "2992": "    /**\n     * Cause the tree viewer to expand all its items\n     */\n",
    "2993": "    /**\n     * Set the initial selections in the resource group.\n     */\n",
    "2995": "\t\t/**\n\t\t * Returns whether the player can reach the passed position.\n\t\t * \n\t\t * @param position the position to be tested for reachability\n\t\t * \n\t\t * @return <code>true</code> the position is reachable by the player\n\t\t * \t\t\t<code>false</code> the position isn't reachable by the player\n\t\t */\n",
    "3005": "    /**\n     * Save any editors that the user wants to save before export.\n     * @return boolean if the save was successful.\n     */\n",
    "3008": "    /**\n     *\tReturns a flat list of all of the leaf elements which are checked.\n     *\n     *\t@return all of the leaf elements which are checked. This API does not\n     * \treturn null in order to keep backwards compatibility.\n     */\n",
    "3009": "    /**\n     * Check if widgets are enabled or disabled by a change in the dialog.\n     */\n",
    "3010": "\t\t/**\n\t\t * Returns a clone of the current object.\n\t\t * \n\t\t * @return a PlayersReachableSquares object identical to this object\n\t\t */\n",
    "3012": "    /**\n     * give the interceptor an opportunity to override the default instantiation\n     */\n",
    "3013": "    /**\n     *\tAdd the passed value to self's destination widget's history\n     *\n     *\t@param value java.lang.String\n     */\n",
    "3017": "    /**\n     *\tReturns a list of all of the items that are white checked.\n     * \tAny folders that are white checked are added and then any files\n     *  from white checked folders are added. \n     *\n     *\t@return the list of all of the items that are white checked\n     */\n",
    "3018": "    /**\n     *\tAnswer the number of elements that have been checked by the\n     *\tuser.\n     *\n     *\t@return int\n     */\n",
    "3022": "    /**\n     * Create the buttons for the group that determine if the entire or\n     * selected directory structure should be created.\n     * @param optionsGroup\n     * @param font\n     */\n",
    "3024": "\t\t/**\n\t\t * Returns the position reachable of the player that is\n\t\t * the most top left one.\n\t\t * This is a normalization of the player position, used, where the\n\t\t * exact player position is not relevant, but its reachable area is.\n\t\t * \n\t\t * @return the position top left\n\t\t */\n",
    "3028": "    /**\n     *\tSet the checked state of self and all ancestors appropriately. Do not white check anyone - this is\n     *  only done down a hierarchy.\n     */\n",
    "3029": "    /**\n     * Set the initial checked state of the passed element to true,\n     * as well as to all of its children and associated list elements\n     * @param element\n     */\n",
    "3030": "    /**\n     * Attempts to ensure that the specified directory exists on the local file system.\n     * Answers a boolean indicating success.\n     *\n     * @return boolean\n     * @param directory java.io.File\n     */\n",
    "3032": "    /**\n     *\tIf the target for export does not exist then attempt to create it.\n     *\tAnswer a boolean indicating whether the target exists (ie.- if it\n     *\teither pre-existed or this method was able to create it)\n     *\n     *\t@return boolean\n     */\n",
    "3035": "    /**\n     *  Set up and execute the passed Operation.  Answer a boolean indicating success.\n     *\n     *  @return boolean\n     */\n",
    "3038": "\t\t/**\n\t\t * Returns a (deep) clone of this object.\n\t\t * \n\t\t * @return a (deep) clone of this object\n\t\t */\n",
    "3043": "    /**\n     *\tAnswer the string to display in self as the destination type\n     *\n     *\t@return java.lang.String\n     */\n",
    "3044": "    /**\n     *\tRemove the passed listener from self's collection of clients\n     *\tthat listen for changes to element checked states\n     *\n     *\t@param listener ICheckStateListener\n     */\n",
    "3046": "    /**\n     *\tAnswer the contents of self's destination specification widget\n     *\n     *\t@return java.lang.String\n     */\n",
    "3050": "    /**\n     *\tSet the current input focus to self's destination entry field\n     */\n",
    "3053": "\t\t/**\n\t\t * Returns whether a specific Square is reachable by the player. \n\t\t * \n\t\t * @param position Position which is checked for being reachable by the player\n\t\t * @return true = Square is reachable; false = Square is not reachable\n\t\t */\n",
    "3054": "    /**\n     *\tOpen an appropriate destination browser so that the user can specify a source\n     *\tto import from\n     */\n",
    "3055": "     /**\n     * Set the root of the widget to be new Root. Regenerate all of the tables and lists from this\n     * value.\n     * @param newRoot \n     */\n",
    "3056": "    /**\n     * Handle all events and enablements for widgets in this page\n     * @param e Event\n     */\n",
    "3057": "    /**\n     *\tSet the checked state of the passed tree element appropriately, and\n     *\tdo so recursively to all of its child tree elements as well\n     */\n",
    "3060": "    /**\n     * Persists additional setting that are to be restored in the next instance of\n     * this page.\n     * <p> \n     * The <code>WizardImportPage</code> implementation of this method does\n     * nothing. Subclasses may extend to persist additional settings.\n     * </p>\n     */\n",
    "3061": "    /**\n     * If the existing proxy is insufficiently \"narrow\" (derived), instantiate a new proxy\n     * and overwrite the registration of the old one. This breaks == and occurs only for\n     * \"class\" proxies rather than \"interface\" proxies.\n     */\n",
    "3062": "    /**\n     * Set the sorter that is to be applied to self's tree viewer\n     * @param sorter\n     */\n",
    "3063": "    /**\n     *\tHook method for restoring widget values to the values that they held\n     *\tlast time this wizard was used to completion.\n     */\n",
    "3066": "\t\t/**\n\t\t * Returns if a specific Square is reachable by the player.\n\t\t * \n\t\t * @param x xPosition of square which is checked for being reachable by the player\n\t\t * @param y yPosition of square which is checked for being reachable by the player\n\t\t * @return true = Square is reachable; false = Square is not reachable\n\t\t */\n",
    "3067": "    /**\n     *\tHandle the collapsing of an element in a tree viewer\n     */\n",
    "3068": "    /**\n     *\tSet the contents of the receivers destination specification widget to\n     *\tthe passed value\n     *\n     */\n",
    "3069": "    /**\n     *\tHandle the expansionsion of an element in a tree viewer\n     */\n",
    "3070": "    /**\n     *\tAnswer a boolean indicating whether the receivers destination specification\n     *\twidgets currently all contain valid values.\n     */\n",
    "3072": "    /**\n     * Grab the existing proxy for an instance, if\n     * one exists. (otherwise return the instance)\n     */\n",
    "3073": "    /**\n     *  Callback that's invoked when the checked status of an item in the tree\n     *  is changed by the user.\n     */\n",
    "3075": "    /**\n     *\tLogically un-gray-check all ancestors of treeItem iff appropriate.\n     */\n",
    "3077": "    /**\n     *\tSet the checked state of self and all ancestors appropriately\n     */\n",
    "3078": "\t/**\n     * Get the message used to denote an empty destination.\n     */\n",
    "3081": "    /**\n     * Returns the name of a container with a location that encompasses targetDirectory.\n     * Returns null if there is no conflict.\n     * \n     * @param targetDirectory the path of the directory to check.\n     * @return the conflicting container name or <code>null</code>\n     */\n",
    "3082": "    /** \n     * Set the focus on to the list widget.\n     */\n",
    "3095": "    /**\n     *\tAnswer a boolean indicating the number of file resources that were\n     *\tspecified for export\n     *\n     *\t@return int\n     */\n",
    "3096": "    /**\n     *  Create the directories required for exporting the passed resource,\n     *  based upon its container hierarchy\n     *\n     *  @param childResource org.eclipse.core.resources.IResource\n     */\n",
    "3098": "    /**\n     *  Create the directories required for exporting the passed resource,\n     *  based upon its container hierarchy\n     *\n     *  @param childResource org.eclipse.core.resources.IResource\n     */\n",
    "3100": "    /**\n     * Create the directories tree\n     * @param tree\n     */\n",
    "3107": "    /**\n     * Create a \"temporary\" entry for a newly instantiated entity. The entity is uninitialized,\n     * but we need the mapping from id to instance in order to guarantee uniqueness.\n     */\n",
    "3116": "    /**\n     *  Answer a boolean indicating whether the passed child is a descendent\n     *  of one or more members of the passed resources collection\n     *\n     *  @return boolean\n     *  @param resources java.util.List\n     *  @param child org.eclipse.core.resources.IResource\n     */\n",
    "3122": "    /**\n     *\tSet this boolean indicating whether a directory should be created for\n     *\tFolder resources that are explicitly passed for export\n     *\n     *\t@param value boolean\n     */\n",
    "3124": "    /**\n     *\tSet this boolean indicating whether each exported resource's complete path should\n     *\tinclude containment hierarchies as dictated by its parents\n     *\n     *\t@param value boolean\n     */\n",
    "3126": "    /**\n     *\tSet this boolean indicating whether exported resources should automatically\n     *\toverwrite existing files when a conflict occurs. If not\n     *\tquery the user.\n     *\n     *\t@param value boolean\n     */\n",
    "3127": "    /**\n     * Add the \"hydrated state\" (an array) of an uninitialized entity to the session. We don't try\n     * to resolve any associations yet, because there might be other entities waiting to be\n     * read from the JDBC result set we are currently processing\n     */\n",
    "3129": "\t\t/**\n\t\t * Returns whether the given position has been marked as reachable.\n\t\t * \n\t\t * @param position  Position to be checked to be reachable.\n\t\t * @return\t<code>true</code> if position is reachable,\n\t\t *         <code>false</code> if position isn't reachable\n\t\t */\n",
    "3135": "    /**\n     *\tAnswer a handle to the zip file currently specified as being the source.\n     *\tReturn null if this file does not exist or is not of valid format.\n     */\n",
    "3137": "    /**\n     * Attempts to close the passed zip file, and answers a boolean indicating success.\n     */\n",
    "3189": "\t/**\n\t * Initializes states of the controls from the preference store.\n\t */\n",
    "3200": "   /**\n\t* Returns preference store that belongs to the our plugin.\n\t* This is important because we want to store\n\t* our preferences separately from the desktop.\n\t*\n\t* @return the preference store for this plugin\n\t*/\n",
    "3201": "\t/**\n\t * Creates an image and places it in the image registry.\n\t */\n",
    "3205": "\t/**\n\t * Sets the file transfer compression level. (if supported)\n\t * Valid levels are: 0 (disabled), 1 (worst/fastest) - 9 (best/slowest)\n\t */\n",
    "3207": "\t/**\n\t * Gets the file transfer compression level.\n\t */\n",
    "3209": "\t/**\n\t * Returns the image descriptor for the given image ID.\n\t * Returns null if there is no such image.\n\t */\n",
    "3211": "\t/**\n\t * Sets the default keyword substitution mode for text files.\n\t */\n",
    "3214": "\t/**\n\t * Gets the default keyword substitution mode for text files.\n\t */\n",
    "3215": "\t/**\n\t * Get the bug id (if exists) from the previous comment\n\t * @author keren\n\t * \n\t */\n",
    "3217": "\t/**\n\t * Should the CVS adapter prune empty directories\n\t */\n",
    "3218": "\t/**\n\t * Get the comment string (without the bug id text) from the previous comment\n\t * @author keren\n\t * \n\t */\n",
    "3221": "\t/**\n\t * Set whether the CVS adapter should prune empty directories\n\t */\n",
    "3226": "\t/**\n\t * Get the communications timeout value in seconds\n\t */\n",
    "3230": "\t/**\n\t * Set the timeout value for communications to a value in seconds.\n\t * The value must be greater than or equal 0. If is it 0, there is no timeout.\n\t */\n",
    "3231": "\t/**\n\t * Utility method that creates a label instance\n\t * and sets the default layout data.\n\t *\n\t * @param parent  the parent for the new label\n\t * @param text  the text for the new label\n\t * @return the new label\n\t */\n",
    "3232": "\t/**\n\t * Creates an new checkbox instance and sets the default\n\t * layout data.\n\t *\n\t * @param group  the composite in which to create the checkbox\n\t * @param label  the string to set into the checkbox\n\t * @return the new checkbox\n\t */\n",
    "3233": "\t/**\n\t * Set the quietness option to use with cvs commands.\n\t * Can be \"\", \"-q\" or \"-Q\"\n\t */\n",
    "3237": "\t/**\n\t * Get the quietness option for commands\n\t */\n",
    "3243": "\t/**\n\t * Set the console listener for commands.\n\t * @param consoleListener the listener\n\t */\n",
    "3253": "\t/**\n\t * Defaults was clicked. Restore the SVN preferences to\n\t * their default values\n\t */\n",
    "3254": "\t/**\n\t * Gets the cvsRshCommand.\n\t * @return Returns a String\n\t */\n",
    "3258": "\t/**\n\t * Sets the cvsRshCommand.\n\t * @param cvsRshCommand The cvsRshCommand to set\n\t */\n",
    "3260": "\t/**\n\t * Helper method which access the preference store to determine if the \n\t * project name from the project description file (.project) should be used\n\t * as the project name on checkout.\n\t */\n",
    "3262": "\t/**\n\t * Returns the cvsRshParameters.\n\t * @return String\n\t */\n",
    "3265": "\t/**\n\t * Sets the cvsRshParameters.\n\t * @param cvsRshParameters The cvsRshParameters to set\n\t */\n",
    "3270": "\t/**\n\t * Gets the cvsServer.\n\t * @return Returns a String\n\t */\n",
    "3271": "\t/**\n\t * Method initializeValues.\n\t */\n",
    "3275": "\t/**\n\t * Sets the cvsServer.\n\t * @param cvsServer The cvsServer to set\n\t */\n",
    "3277": "\t/**\n\t * Method signalCtrlEnter.\n\t */\n",
    "3278": "\t/**\n\t * Returns the comment.\n\t * @return String\n\t */\n",
    "3280": "\t/**\n\t * Gets the etchAbsentDirectories.\n\t * @return Returns a boolean\n\t */\n",
    "3288": "\t/**\n\t * Sets the fetchAbsentDirectories.\n\t * @param etchAbsentDirectories The etchAbsentDirectories to set\n\t */\n",
    "3296": "    /**\n     * set the svn client interface\n     * @param clientInterface\n     */\n",
    "3297": "    /**\n     * set the svn client config dir\n     * @param configDir\n     */\n",
    "3305": "\t\t/**\n\t\t * Gets the project.\n\t\t * @return Returns a IProject\n\t\t */\n",
    "3306": "\t\t/**\n\t\t * Sets the project.\n\t\t * @param project The project to set\n\t\t */\n",
    "3308": "\t/**\n\t * Gets the replaceUnmanaged.\n\t * @return Returns a boolean\n\t */\n",
    "3313": "\t/**\n\t * Sets the replaceUnmanaged.\n\t * @param replaceUnmanaged The replaceUnmanaged to set\n\t */\n",
    "3321": "\t/**\n\t * Register to receive notification of repository creation and disposal\n\t */\n",
    "3327": "\t\t/**\n\t\t * Return a InstallerProject if this javaProject has the tikal Installer nature\n\t\t * Return null if Project has not Tikal Installer nature\n\t\t */\n",
    "3329": "\t/**\n\t * Register to receive notification of enablement of sync info decoration requirements. This\n\t * can be useful for providing lazy initialization of caches that are only required for decorating\n\t * resource with CVS information.\n\t */\n",
    "3332": "\t\t/**\n\t\t * Return a InstallerProject if this javaProject has the tikal Installer nature\n\t\t * Return null if Project has not Tikal Installer nature\n\t\t */\n",
    "3350": "    /**\n     * Load the data for the object with the specified id into the supplied\n     * instance. A new key will be assigned to the object. If there is an\n     * existing uninitialized proxy, this will break identity equals as far\n     * as the application is concerned.\n     */\n",
    "3370": "\t/**\n\t * Gets the determineVersionEnabled.\n\t * @return boolean\n\t */\n",
    "3377": "\t/**\n\t * Sets the determineVersionEnabled.\n\t * @param determineVersionEnabled The determineVersionEnabled to set\n\t */\n",
    "3379": "    /**\n\t * Returns the comment.\n\t * @return String\n\t */\n",
    "3383": "\t/**\n\t * Returns the fileModificationManager.\n\t * @return FileModificationManager\n\t */\n",
    "3475": "\t/**\n\t * Sets the excludesDirs.\n\t * \n\t * @param excludesDirs\n\t *            The excludesDirs to set\n\t */\n",
    "3478": "\t/**\n\t * Sets the includesDirs.\n\t * \n\t * @param includesDirs\n\t *            The includesDirs to set\n\t */\n",
    "3498": "\t/**\n\t * Compares source files to destination files to see if they should be\n\t * copied.\n\t * \n\t */\n",
    "3520": "\t/**\n\t * Compares source files to destination files to see if they should be\n\t * copied.\n\t */\n",
    "3543": "\t/**\n\t * Compares source files to destination files to see if they should be\n\t * copied.\n\t */\n",
    "3589": "    /**\n     * sets the optional attribute\n     *\n     * @param optional if true ignore files that are not present,\n     *                 default is false\n     */\n",
    "3590": "    /**\n     * the name of the file to import. How relative paths are resolved is still\n     * in flux: use absolute paths for safety.\n     * @param file the name of the file\n     */\n",
    "3597": "    /**\n     * The classpath to use when looking up a resource.\n     * @param classpath to add to any existing classpath\n     */\n",
    "3599": "    /**\n     * The classpath to use when looking up a resource.\n     */\n",
    "3600": "    /**\n     * the classpath to use when looking up a resource,\n     * given as reference to a &lt;path&gt; defined elsewhere\n     */\n",
    "3611": "\t/**\n\t * Finds a resource with a given name. This method returns null if no\n\t * resource with this name is found. The rules for searching resources\n\t * are implemented by the provided\n\t * {@link com.tikal.util.ClassLoadersIterationPolicy}.\n\t *\n\t * @param resourceName the name of the resource to find.\n\t * @return a <tt>java.net.URL</tt> instance pointing to the resource, or\n\t *         null if the resource wasn't found.\n\t */\n",
    "3612": "\t/**\n\t * Loads the class with the specified name.  This method searches for\n\t * classes while iterating the class-loaders that are provided by the\n\t * {@link com.tikal.util.ClassLoadersIterationPolicy}.\n\t *\n\t * @param className the name of the class to load.\n\t * @return an instance of the request class.\n\t * @throws ClassNotFoundException if the class wasn't found.\n\t */\n",
    "3613": "\t/**\n\t * Indicates whether or not there is a next class-loader to iterate.\n\t *\n\t * @return true if there's another class-loader to iterate; false otherwise.\n\t */\n",
    "3614": "\t/**\n\t * The next class-loader in the iteration.\n\t *\n\t * @return the next class-loader in the iteration.\n\t * @throws java.util.NoSuchElementException\n\t *          for no more elements.\n\t */\n",
    "3615": "\t/**\n\t * Resets the iterator to start from the beginning.\n\t */\n",
    "3648": "\t/**\n\t * Check if DEBUG level is enabled for this logger.\n\t * @return true if a {@link #debug(Object)} method invocation would pass\n\t *         the msg to the configured appenders; false otherwise.\n\t */\n",
    "3651": "\t/**\n\t * Add a log entry with DEBUG level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t */\n",
    "3653": "\t/**\n\t * Add a log entry with DEBUG level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t * @param t a cause to append to the message\n\t */\n",
    "3655": "\t/**\n\t * Check if INFO level is enabled for this logger.\n\t * @return true if a {@link #info(Object)} method invocation would pass\n\t *         the msg to the configured appenders; false otherwise.\n\t */\n",
    "3659": "\t/**\n\t * Add a log entry with INFO level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t */\n",
    "3665": "\t/**\n\t * Add a log entry with INFO level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t * @param t a cause to append to the message\n\t */\n",
    "3670": "\t/**\n\t * Add a log entry with WARN level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t */\n",
    "3674": "\t/**\n\t * Add a log entry with WARN level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t * @param t a cause to append to the message\n\t */\n",
    "3679": "\t/**\n\t * Add a log entry with ERROR level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t */\n",
    "3685": "\t/**\n\t * Add a log entry with ERROR level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t * @param t a cause to append to the message\n\t */\n",
    "3689": "\t/**\n\t * Add a log entry with FATAL level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t */\n",
    "3695": "\t/**\n\t * Add a log entry with FATAL level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t * @param t a cause to append to the message\n\t */\n",
    "3701": "\t/**\n\t * Add a log entry with the given level.\n\t */\n",
    "3704": "    /**\n     * Tack the definition and return a popup definition string\n     * @param target The target URL\n     * @return The resulting popup text.\n     */\n",
    "3705": "\t/**\n\t * Add a log entry with the given level and caus.\n\t */\n",
    "3708": "   /** Get the project name.\n    * @return The project name.\n    */ \n",
    "3709": "    /**\n     * Create a &lt;param&gt; line\n     * @param name The param name\n     * @param value The param value\n     * @return String representation of the string\n     */\n",
    "3711": "    /**\n     * Set the media location for the player.\n     * \n     */\n",
    "3712": "    /**\n     * Get the source folder.\n     * @return The source folder.\n     */\n",
    "3715": "    /**\n     * Set the source folder.\n     * @param sourceFolder The new source folder.\n     */\n",
    "3716": "    /** \n     * Get the parent part of the url\n     * @param url The URL to work on\n     * @return The parent, including the last /\n     */\n",
    "3717": "    /**\n     * Get the project name.\n     * @return The name of the project.\n     */\n",
    "3720": "    /**\n     * Overide of setView so we can get information about the view.\n     */\n",
    "3721": "    /**\n     * Get the source name.\n     * @return The name of the source file.\n     */\n",
    "3722": "    /**\n     * Create a temporary object.\n     * @param url URL to create object for.\n     */\n",
    "3723": "    /**\n     * Set the name of the new source file.\n     * @param sourceName The name of the source file.  This is the absolute file path.\n     */\n",
    "3724": "    /** \n     * Called when item is clicked \n     * @param event The calling event.\n     */\n",
    "3726": "    /**\n     * Is file acceptable.\n     * @param f The file.\n     * @return True if acceptable.\n     */\n",
    "3727": "    /**\n     * Get a description string.\n     * @return The description\n     */\n",
    "3729": "    /**\n     * Build the presentation dialog\n     */\n",
    "3736": "    /**\n     * Centre the frame.\n     */\n",
    "3737": "        /**\n         * Handle the realizeComplete event.\n         * @param event The state change event.\n         */\n",
    "3738": "    /**\n     * Set the text in the licence area\n     */\n",
    "3742": "    /**\n     * Display the window.\n     */\n",
    "3743": "        /**\n         * Stop the player when closing the window and reset the error stream.\n         */\n",
    "3745": "    /**\n     * Initialise the application and show the main window.\n     */\n",
    "3746": "    /**\n     * Used to close the Appender and called by the log4J framework.\n     */\n",
    "3747": "    /** Get the default source file\n     * @return The default helpset file name.\n     */\n",
    "3748": "        /**\n         * Will be called every time a namespace is reached.\n         * It'll verify if the ns was processed, and if not load the task\n         * definitions.\n         * @param uri The namespace uri.\n         */\n",
    "3749": "    /**\n     * Tell the log4J framework whether or not a Layout is required.\n     * @return Always true\n     */\n",
    "3750": "    /** Set the default source file\n     * @param defaultSource The name iof the Helpset file.\n     */\n",
    "3751": "    /**\n     * Append the text to the text area.\n     * @param event The Logging event from the log4J framework.\n     */\n",
    "3753": "    /**\n     * Get the default target as set in the configuration properties.\n     * @return The default target.\n     */\n",
    "3754": "    /**\n     * Set the JTextArea to be used to receive the logging commands.\n     * @param argTextArea The JTextArea used by the appender.\n     */\n",
    "3756": "    /** Save the default configurations to the property file.\n     */\n",
    "3760": "    /**\n      * Copy file routine.  \n      * Original source from R\ufffdal Gagnon http://64.18.163.122/rgagnon/howto.html\n      * @param in Input file\n      * @param out Destination file\n      * @throws java.lang.Exception Exeption thrown on IO error\n      */ \n",
    "3764": "        /**\n         * Returns the current ant handler object.\n         * @return the current ant handler.\n         */\n",
    "3765": "     /**\n      * Make sure the path is absolute.\n      * If the path is absolute, just returns it unchanged.\n      * If it's relative, then it is combined with the default directory.\n      * @param defaultDir the default directory,\n      * @param currentPath the path to check.\n      * @return the absolute path.\n      */\n",
    "3768": "     /**\n      * Build a path from the path, filename and extension.\n      * @param dir Directory\n      * @param fileName The file name\n      * @param ext the extension\n      * @return The complete path\n      */\n",
    "3769": "    /** Get the language code for XMML type files.\n     * @param encType the encoding type\n     * @return language. Empty string if not found\n     */\n",
    "3770": "    /**\n     * Change directory of an absolute file path.\n     * @param path The path to amend.\n     * @param newDir The directory to change the path to.\n     * @return The new path.\n     */\n",
    "3772": "    /**\n     * Get the directory part of the name\n     * @param path The path to analyse.\n     * @return The path's directory.\n     */\n",
    "3773": "    /** Get the input encoding type. \n     * @param encType the type of encoding\n     * @return the encoding to use\n     */\n",
    "3774": "    /**\n     * Get the file name of the path.\n     * @param path The absolute path.\n     * @return The file name part.\n     */\n",
    "3777": "    /** Convert JTidy encoding to the JTidy R7 code.\n     * @param enc the name\n     * @return the R7 code\n     */\n",
    "3778": "    /**\n     * Get the file extension.\n     * @param f The file.\n     * @return The extension including the decimal point.\n     */\n",
    "3780": "    /**\n     * Get the file extension.\n     * @param path The file.\n     * @return The extension including the decimal point.\n     */\n",
    "3782": "    /**\n     * Take a full path and change the extension\n     * @param path The path.\n     * @param newExtension The new extension\n     * @return The new path.\n     */\n",
    "3787": "    /** \n     * Check whether the path name exists and is a directory\n     * @param name The path.\n     * @return true if okay\n     */\n",
    "3788": "    /** create a buffered file reader suitable for the requested encoding. \n     * @param inname The file name.\n     * @param encType the type of encoding to use\n     * @return the buffered writer\n     */\n",
    "3791": "    /** \n     * Check whether the path name exists and is a file\n     * @param name The path.\n     * @return true if okay\n     */\n",
    "3792": "    /** create a buffered stream reader suitable for the requested encoding. \n     * @param in The input stream.\n     * @param encType the type of encoding to use\n     * @return the buffered writer\n     */\n",
    "3793": "    /**\n     * Parse the node\n     * Only actually handles <a> or <script> nodes.\n     * @param doc The calling document\n     * @param node The node to parse\n     * @return null if not handled, else replacement text.\n     */               \n",
    "3794": "    /** Convert a file name to a url string.\n     * @param name the file name\n     * @return the string representation of a uri.\n     */\n",
    "3796": "    /**\n     * Perform the parsing task.\n     * @return True if okay.\n     */\n",
    "3798": "   /**\n    * Create a header using Logger.info.\n    * @param header Text to put in the header.\n    */\n",
    "3800": "    /**\n     * Create a footer using the Logger.info.\n     */\n",
    "3801": "        /**\n         * Sets the locator in the project helper for future reference.\n         *\n         * @param locator The locator used by the parser.\n         *                Will not be <code>null</code>.\n         */\n",
    "3802": "    /**\n     * Write the HTML for the popup to a file\n     * @return true if okay\n     * @param targetName The target file.\n     * @param text The popup text\n     * @param source The source file.\n     */ \n",
    "3803": "    /**\n     * Create a Logger.info message including the current \n     * line number of the parsed file.\n     * @param message Message to write.\n     */\n",
    "3805": "    /**\n     * Create a Logger.warn message including the current \n     * line number of the parsed file.\n     * @param message The message to write.\n     */\n",
    "3806": "    /**\n     * Extract the popup id name from the string\n     * @param text The string to search\n     * @return The id name.  Null if not found              \n     */     \n",
    "3807": "    /**\n     * Start the fie parse.  Creates a reader to access\n     * the file.\n     * @param encType the type of input encoding\n     * @return True if okay.\n     */\n",
    "3809": "    /**\n     * Process the source file creating a list of popup ids\n     * @param name The source file\n     */\n",
    "3810": "    /**\n     * Read the next line from the source.\n     * @return The line.  Null if EOF.\n     */\n",
    "3814": "    /**\n     * Handle assignments,i.e lines of the form \n     * key=value\n     * @param line The line to assess.\n     */\n",
    "3816": "    /**\n     * Set the map used for resolving IDs and urls.\n     * @param argMap The map to use.  URL is key, id is the value.\n     */\n",
    "3818": "    /**\n     * Get the name of the index file.\n     * @return The index name.\n     */\n",
    "3819": "        /**\n         * Handles the end of an element. Any required clean-up is performed\n         * by the onEndElement() method and then the original handler\n         * is restored to the parser.\n         *\n         * @param uri  The namespace URI for this element.\n         * @param name The name of the element which is ending.\n         *             Will not be <code>null</code>.\n         * @param qName The qualified name for this element.\n         *\n         * @exception SAXException in case of error (not thrown in\n         *                         this implementation)\n         *\n         */\n",
    "3821": "    /**\n     * Build the map section\n     * @param doc The document to contain the map section.\n     */\n",
    "3822": "    /**\n     * Get the first quoted element of text.\n     * The quotes are removed.\n     * @return The text in the quotes.  Escape sequences are unescaped.\n     * @param text The text to handle.\n     * @param toHTML if true then escape sequences are converted to HTML else to characters\n     */\n",
    "3823": "    /**\n     * Get the name of the contents file.\n     * @return The contents name.\n     */\n",
    "3824": "    /**\n     * Unescape special javascript characters\n     * @return The text.  Null on error.\n     * @param esc The character that was found after the escape character.\n     * @param toHTML If true then unescape to HTML equivalent else just to ascii equivalent.\n     */\n",
    "3825": "    /**\n     * Create a view section.\n     * @param doc The document to contain the view.\n     * @param merge The mergetype attribute.\n     * @param name The name attribute.\n     * @param label The label attribute.\n     * @param typeName The type attribute.\n     * @param data The data attribute.\n     */\n",
    "3826": "    /**\n     * Get the title of the help.\n     * @return The title.\n     */\n",
    "3829": "    /**\n     * Get a map of the links in the html files.\n     * @return The map of links.\n     */\n",
    "3831": "    /**\n     * Get the default topic url.\n     * @return The url.\n     */\n",
    "3833": "    /**\n     * Set the default topic.\n     * @param id The topic id.\n     */\n",
    "3835": "    /**\n     * Get the default topic id.\n     * @return The default topic id.\n     */\n",
    "3837": "    /**\n     * Get a map of the parsed HTML files.\n     * @return The parsed HTML files.\n     */\n",
    "3838": "    /**\n     * Write the document to the writer.\n     * @param writer The Buffered writer to which the output is sent.\n     * @throws java.io.IOException IOExceptions thrown.\n     * @return True if successfully written.  False if the document has not been parsed.\n     */\n",
    "3839": "    /**\n     * Sets the map that contains the target references.\n     * Note the key is the url and the value is the id.\n     * @param argLinks The map containing targets to ids.\n     */\n",
    "3840": "    /**\n     * Get the file name of the helpset.\n     * @return The file name.\n     */\n",
    "3844": "     /**\n      * Perform the actual build of the document.\n      * @param doc The document to build.\n      */\n",
    "3845": "    /**\n     * Perform parsing on the input source.\n     * The source is taken as the parser's source file\n     * @return True if successful\n     */\n",
    "3846": "     /**\n      * Add a mpaID to the document.\n      * @param doc The XMLDoc to which the ID should be added.\n      * @param target The value of the target attribute.\n      * @param url The value of the url attribute.\n      */\n",
    "3848": "        /**\n         * Start a namespace prefix to uri mapping\n         *\n         * @param prefix the namespace prefix\n         * @param uri the namespace uri\n         */\n",
    "3851": "    /**\n     * Perform parsing on the input source.\n     * The source is taken as the parser's source file\n     * @return True if successful\n     */\n",
    "3852": "    /**\n     * Replace quotation marks with &quote;\n     * @param str The string in which to replace the quotes.\n     * @return The string with the quotes replaced.\n     */\n",
    "3853": "    /**\n     * Copy a image file to the target.\n     * @param image The name of the image.\n     */\n",
    "3856": "    /**\n     * Replace an element with the text found in the replaceElements Properties.\n     * @param node The current node of the element.\n     * @return The replacement string.  Null if not found.\n     */\n",
    "3857": "    /**\n     * Create an index item in the xml document.\n     * @param parentIndexItem The item to which this node belongs.\n     */\n",
    "3859": "        /**\n         * End a namepace prefix to uri mapping\n         *\n         * @param prefix the prefix that is not mapped anymore\n         */\n",
    "3860": "    /**\n     * Handle the situation where the target url is not found\n     * @param url The target that couldn't be found.\n     * @return The mapID.  Null if none.\n     */\n",
    "3862": "    /** \n     * Replace text in the string using replacements found in the replaceText Properties.\n     * @param str The string to be processed.\n     * @return The string with all the replacements made.\n     */\n",
    "3864": "    /**\n     * Create a targetless index item in the xml document.\n     * @param parentIndexItem The item to which this node belongs.\n     */\n",
    "3865": "    /** \n     * Handle the embed tag which contains the source.\n     * Note if not in an object, this is ignored\n     * @param doc The html dom.\n     * @param node The current node\n     */\n",
    "3866": "    /**\n     * Extract link and popup text using the classID\n     * @param classID The classID attribute of the object\n     * @return Get the text that should be used for the link that replaces the object.\n     */\n",
    "3867": "    /**\n     * Called before converting any element to a string.\n     * Determines whether the element and it children need to be wrapped in an enclosing element.\n     * Outputs tags to wrap the element and determines the necessary tag to finish the wrapping.\n     * @param node The element to process.\n     * @param nodeStr The buffer to which the wrapping tag is appended.\n     * @return The end of the wrapper which the caller is responsible for adding to the output after\n     * processing the element.\n     */\n",
    "3869": "    /** Get a string representation of the DocType.\n     * @return The doctype string.\n     */\n",
    "3870": "    /** Provides a string representation of additional children for a node.\n     * @param node the node for which there might be special children\n     * @return html for the extra children\n     */\n",
    "3871": "    /**\n     * Check to see if this is a duplicated node.\n     * This is used because of the difference in structure of the HMTL index and JavaHelp\n     * index. If the text attribute of this node is the same as the text attribute of the \n     * previous node, it should be skipped.\n     * @returns True if the previous elements text attibute equals text.\n     * @param prev The previous element.\n     * @param text The current elements text attribute\n     * @return True if the element and its children should be skipped.\n     */\n",
    "3872": "    /**\n     * Write the document to an output writer.\n     * @param writer The destination.\n     * @param tag the xml start line to write\n     * @throws java.io.IOException Exception thrown on io error.\n     * @return True if okay.\n     */\n",
    "3881": "    /**\n     * Get the map.\n     * @return The map used for resolving targets.\n     */\n",
    "3883": "    /**\n     * Replace quotes in the string.\n     * @param str The string to replace the quotes./\n     * @return String with quotes replaced with &amp;quote;  If str is null an empty string is returned.\n     */\n",
    "3971": "        /**\n         * Handle the end of the project, sets the current target of the\n         * context to be the implicit target.\n         *\n         * @param uri The namespace URI of the element.\n         * @param tag The name of the element.\n         * @param context The current context.\n         */\n",
    "4041": "        /**\n         * Handles the end of the element. This pops the wrapper from\n         * the context.\n         *\n         * @param uri The namespace URI for the element.\n         * @param tag The name of the element.\n         * @param context The current context.\n         */\n",
    "4413": "\t/**\n\t * Used to check if the file the correct file. The acceptable files are directories or\n\t * files of extension .weights\n\t * \n\t * @param f The file that is to be check if its a Performance Test Weights file\n\t * @return Returns true if the file is a directory or of type .weights\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4415": "\t/**\n\t * This method returns the description of the type of file being selected\n\t * @return Returns the description of the weights file\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4417": "\t/**\n\t * Used to check if the file the correct file. The acceptable files are directories or\n\t * files of extension .lsf\n\t * \n\t * @param f The file that is to be check if its a Log file\n\t * @return Returns true if the file is a directory or of type .lsf\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4419": "\t/**\n\t * This method returns the description of the type of file being selected\n\t * @return Returns the description of the Log file\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4421": "\t/**\n\t * Used to check if the file the correct file. The acceptable files are directories or\n\t * files of extension .ptconfig\n\t * \n\t * @param f The file that is to be check if its a Performance Test configuration file\n\t * @return Returns true if the file is a directory or of type ptconfig\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4422": "\t/**\n\t * This method returns the description of the type of file being selected\n\t * @return Returns the description of the performance configuration file\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4437": "\t/**\n\t * Used to check if the file the correct file. The acceptable files are directories or\n\t * files of extension .cb\n\t * \n\t * @param f The file that is to be check if its a Case Base file\n\t * @return Returns true if the file is a directory or of type .cb\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4438": "\t/**\n\t * This method returns the description of the type of file being selected\n\t * @return Returns the description of the case base file\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4448": "    /** CaseEventListener method called when we don't know the team name.\n     *\n     * @param ce the CaseEvent.\n     *\n     * @author Edgar Acosta\n     * @since 0.4\n     *\n     */\n",
    "4451": "    /** CaseEventListener method called when the Case Inputs have been parsed.\n     *\n     * @param ce the CaseEvent. It contains the Case Inputs\n     *\n     * @author Edgar Acosta\n     * @since 0.4\n     *\n     */\n",
    "4453": "    /** CaseEventListener method called when the Case Outputs have been parsed.\n     *\n     * @param ce the CaseEvent. It contains the Case Outputs\n     *\n     * @author Edgar Acosta\n     * @since 0.4\n     *\n     */\n",
    "4459": "    /** Returns a copy of the case base created from the\n     * log file.\n     * \n     * @return The case base\n     *\n     * @author Michael W. Floyd\n     * @since 0.2\n     */\n",
    "4462": "    /** Saves the case base into the specified file\n     * \n     *\n     * @author Michael W. Floyd\n     * @since 0.2\n     */\n",
    "4464": "\t/** Sets the horizonal position of the flag. Valid values\n\t * are the c_LEFT, c_RIGHT and c_CENTER constants.\n\t * \n\t * @param pos The horizontal position of the flag.\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4467": "\t/** Returns the horizontal position of the flag. This\n\t * will be one of the following constants: c_LEFT, \n\t * c_RIGHT, c_CENTER or c_UNKNOWN_POSITION\n\t * \n\t * @return The horizontal position\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4471": "\t/** Sets the vertical position of the flag. Valid values\n\t * are the c_TOP, c_BOTTOM and c_CENTER constants.\n\t * \n\t * @param pos The vertical position of the flag.\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4472": "\t/** Returns the vertical position of the flag. This\n\t * will be one of the following constants: c_TOP, \n\t * c_BOTTOM, c_CENTER or c_UNKNOWN_POSITION\n\t * \n\t * @return The horizontal position\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4473": "        /** Returns a string representation of the object\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4476": "        /** Returns a copy of this object\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4477": "\t/** Sets if the flag is located out of bounds.\n\t * \n\t * @param out True if the flag is out of bounds.\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4478": "\t/** Set the distance changed\n\t * \n\t * @param distChange The distance changed\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4479": "\t/** Returns true if the flag is out of bounds.\n\t * \n\t * @return If the flag is out of bounds.\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4480": "\t/** Set the direction changed.\n\t *  \n\t * @param dirChange The direction changed\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4481": "\t/** Sets the number of the flag.\n\t * \n\t * @param num The number of the flag\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4483": "\t/** Get the distance changed\n\t * \n\t * @return The distance changed\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4485": "\t/** Get the direction changed\n\t * \n\t * @return\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4486": "\t/** Returns the number of the flag.\n\t * \n\t * @return The flag number\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4488": "\t/** Sets the location of the line. Acceptable locations are\n\t * 'l' (left), 'r' (right), 't' (top) and 'b' (bottom).\n\t * \n\t * @param s The location of the line\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4489": "\t/**\n\t * Opens a dialog to find a file that contains a case base.\n\t * \n     * @return the path of a file (hopefully a CaseBase)\n     * \n\t * @author Mark Kelly\n\t * @since 0.5\n\t */\n",
    "4490": "\t/** Sets the box the flag is on. Valid values\n\t * are the c_GOAL_BOX or c_PENALTY_BOX.\n\t * \n\t * @param pos The box the flag is on.\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4491": "\t/** Return the location of the line\n\t * \n\t * @return The location of the line\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4494": "\t/** Returns the body direction of the player\n\t * \n\t * @return body direction of player\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4495": "\t/** Returns the box the flag is on. This\n\t * will be one of the following constants: c_GOAL_BOX, \n\t * c_PENALTY_BOX or c_NO_BOX\n\t * \n\t * @return The box the flag is on\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4496": "\t/** Sets the body direction of the player\n\t * \n\t * @param direction The body direction\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4498": "\t/** Gets the head direction of the player\n\t * \n\t * @return head direction\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4500": "\t/** Set the head direction of the player\n\t * \n\t * @param direction The head direction\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4501": "\t/** Returns true if the player is a goalie.\n\t * \n\t * @return True if player is a goalie\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4502": "\t/** Set the side to either \"l\" (left) or \"r\" (right).\n\t * \n\t * @param side The side the net is on\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4503": "\t/** Sets if the player is a goalie.\n\t * \n\t * @param goalie True if the player is a goalie\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4505": "\t/** Return the side the GoalFeature is on\n\t * \n\t * @return The side the GoalFeature is on\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4506": "\t/** Returns the uniform number of the player.\n\t * \n\t * @return The uniform number\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4509": "\t/** Sets the uniform number of the player\n\t * \n\t * @param number The uniform number\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4511": "        /** Returns a copy of this TurnNeckAction\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4512": "        /** Returns a copy of this Dash Action\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4513": "\t/** Returns the power of the dash.\n\t * \n\t * @return The power of the dash\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4515": "\t/** Returns the angle of the neck turn.\n\t * \n\t * @return The angle of the turn\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4516": "        /** Returns the value of an attribute\n\t *\n\t * @param attrib the attribute name\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4517": "        /** Returns a copy of this CatchAction\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4518": "        /** Returns the value of an attribute\n\t *\n\t * @param attrib the attribute name\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4520": "\t/** Returns the angle of the catch.\n\t * \n\t * @return The angle of the catch\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4521": "        /** Returns a copy of this KickAction\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4523": "\t/** Used to run the Log2CaseBase program.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t * \n\t */\n",
    "4525": "\t/** Returns the power of the kick.\n\t * \n\t * @return The power of the kick\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4527": "        /** Returns a copy of this TurnAction\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4528": "\t/** Returns the angle of the kick.\n\t * \n\t * @return The angle of the kick\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4530": "        /** Returns the value of an attribute\n\t *\n\t * @param attrib the attribute name\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4531": "\t/** Returns the angle of the turn.\n\t * \n\t * @return The angle of the turn\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4533": "\t/** Used to store a new input to the agent to be processed.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4535": "\t/** Used to tell the brain that the game is over.\n\t * \n\t * @param b True if the game is over, false otherwise\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4539": "\t/** Displays the desired message when user clicks \"About\" \n\t * menu item from the menu bar.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t * \n\t */\n",
    "4541": "    /** Used to run the agent thread\n     * \n     * @Override\n     */\n",
    "4542": "    /**\n     * Initialize the Agent that will be used for testing.\n     * \n     * @param cb the CaseBase that the agent will use\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4546": "    /**\n     * Initializes the Weights object that will be used by the Agent during testing.\n     * \n     * @param weightsFile the file that contains the weights\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4547": "\t/** Displays the desired message when user clicks \"Help\"->\"Log2CaseBase\" \n\t * menu item from the menu bar.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t * \n\t */\n",
    "4548": "    /** Used to move an agent to a specified location\n     * \n     * @param x The x coordinate\n     * @param y The y coordinate\n     *\n     * @since 0.3\n     */\n",
    "4549": "    /** Registers a new CaseEventListener.\n     *\n     * @param cel The CaseEventListener\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4550": "    /** Turns the agent by a specified moment\n     * \n     * @param moment The amount to turn\n     *\n     * @since 0.3\n     */\n",
    "4552": "    /** Registers a CaseEventListener.\n     *\n     * @param cel The CaseEventListener\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4553": "    /** Turns the agent's neck by a specified moment\n     * \n     * @param moment The amount to turn\n     *\n     * @since 0.3\n     */\n",
    "4555": "    /**\n     * Run a set of tests.\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4556": "    /** ParsingEvent that occurs when the client sends an init message.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4557": "    /** The agent will dash with a specified power (speed)\n     * \n     * @param power The dashing power\n     *\n     * @since 0.3\n     */\n",
    "4558": "    /** ParsingEvent that occurs when the server acknowledges an init message.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4559": "    /** The agent will kick with a specified power and direction\n     * \n     * @param power The kicking power\n     * @param direction The direction to kick\n     *\n     * @since 0.3\n     */\n",
    "4561": "    /**\n     * Outputs results of the running the performance test to a text file\n     * \n     * @author Caleb Chan\n     * @since 0.5\n     */\n",
    "4562": "    /** The agent will say something.\n     * \n     * @param message The message to say\n     *\n     * @since 0.3\n     */\n",
    "4563": "    /** Parsing Event that occurs when the agent start receiving sensor\n     * messages after being sending control messages.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4565": "    /**\n     * Outputs the expected and actual to a file \n     * \n     * @author Caleb Chan\n     * @since 0.5\n     */\n",
    "4566": "    /** Use to change the focus of the agent's view of the world.\n     * \n     * @param angle The view angle (size of vision field)\n     * @param quality The quality of view\n     *\n     * @since 0.3\n     */\n",
    "4567": "    /** Parsing Event that occurs when a see message has been received\n     * (before parsing it). Other events will process the objects in\n     * the field.\n     *\n     *  For this parser, since we only care about see messages, the\n     *  inputs is resetted in order to avoid a previous see message in\n     *  the same group of inputs.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4569": "    /** Used by a goalie to catch the soccer ball.\n     * \n     * @param direction The direction to catch\n     *\n     * @author Michael W. Floyd\n     * @since 0.3\n     */\n",
    "4571": "    /**\n     * Apply the preprocessing that was specified whan this instance was created.\n     * \n     * @param cb the CaseBase to apply preprocessing to\n     * \n     * @author Mark Kelly\n     * @author 0.5\n     */\n",
    "4573": "    /** Used to send the initialization command to the server.\n     * \n     * @since 0.3\n     */\n",
    "4574": "    /**\n     * Execute all SQL and second-level cache updates, in a\n     * special order so that foreign-key constraints cannot\n     * be violated:\n     * <ol>\n     * <li> Inserts, in the order they were performed\n     * <li> Updates\n     * <li> Deletion of collection elements\n     * <li> Insertion of collection elements\n     * <li> Deletes, in the order they were performed\n     * </ol>\n     */\n",
    "4575": "    /** Parsing Event that occurs when the agent start sending control\n     * messages after being receiving sensor messages.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4576": "    /** Parsing Event that occurs when the agent start receiving sensor\n     * messages after being sending control messages.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4577": "    /** Used to sent the specified message to the server.\n     * \n     * @param message The message to send\n     *\n     * @author Michael W. Floyd\n     * @since 0.3\n     */\n",
    "4578": "    /**\n     * Removes cases with no associated action from the case base.\n     * \t\n     * @param cb the CaseBase to apply preprocessing to\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4579": "    /** Generic method to get feature values from a Parsing Event and\n     * copy them to a RoboCupSimulation2DSpatialObject.\n     *\n     * @param so the 2D Spatial Object receiving the feature values\n     * @param pe the Parsing Event containing the feature values\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4580": "    /** Parsing Event that occurs when a see message has been received\n     * (before parsing it). Other events will process the objects in\n     * the field.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4581": "    /** Used to receive the next message from the server.\n     * \n     * @return The message received\n     *\n     * @author Michael W. Floyd\n     * @since 0.3\n     */\n",
    "4586": "    /** Parsing Event that occurs when a see message has been parsed.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4588": "    /** Parsing Event that occurs when a goal has been sensed\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4589": "    /**\n     * Uses a rough set theory to determine weights for features.\n     * \n     * @param cb the CaseBase to apply preprocessing to\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4592": "    /** Parsing Event that occurs when a ball has been sensed\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4593": "    /**\n     * Uses a backward sequential search to determine weights for features.\n     * \n     * @param cb the CaseBase to apply preprocessing to\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4596": "    /** Parsing Event that occurs when a Flag has been sensed\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4599": "\t/**\n\t * Removes unused features from a case base.\n     * \n     * @param cb the CaseBase to apply preprocessing to\n     * \n\t * @author Mark Kelly\n\t * @since 0.5\n\t */\n",
    "4600": "    /** Parsing Event that occurs when a line has been sensed\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4601": "    /** CaseEvent method used to stop the agent\n     * \n     * @param ce the Case Event.\n     *\n     * @author Edgar Acosta\n     * @since 0.4\n     */\n",
    "4604": "    /** Parsing Event that occurs when a catch action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4605": "    /**\n     * Sets certain values in classes\n     * \n     * @param w the Weights object that will be used by the agent\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4609": "    /** Parsing Event that occurs when a dash action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4615": "    /** Parsing Event that occurs when a kick action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4616": "    /** Parsing Event that occurs when a catch action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4620": "    /** Parsing Event that occurs when a turn action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4621": "    /** Parsing Event that occurs when a dash action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4623": "    /**\n     * Show the results from the most recent run of the tests.\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4625": "    /** Parsing Event that occurs when a kick action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4626": "    /** Parsing Event that occurs when a turn neck action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4628": "    /** Parsing Event that occurs when a turn action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4629": "    /** Parsing Event that occurs when a hear action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4772": "\t/** Returns the Case portion of the pairing.\n\t * \n\t * @return the Case portion of the pairing\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.4\n\t */\n",
    "4773": "\t/** Returns the AgentAction portion of the pairing.\n\t * \n\t * @return the AgentAction portion of the pairing\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.4\n\t */\n",
    "4776": "\t/** Stores the time it takes the Agent to select an\n\t * AgentAction to perform.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4778": "\t/** Returns the mean execution time of the Agent being\n\t * monitored (in milliseconds).\n\t * \n\t * @return mean execution time\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4785": "        /** Returns a copy of this Agent Action\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.5\n\t */\n",
    "4787": "\t/** Returns the name of the action\n\t * \n\t * @return The name of the actions\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.1 \n\t */\n",
    "4788": "    /** Returns the current size of the casebase.\n     * \n     * @return The current size of the case base\n     * \n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4789": "        /** Returns a string representation of this object\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.5\n\t */\n",
    "4790": "        /** Returns attribute value\n\t *\n\t * @param attrib the attribute name\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.5\n\t */\n",
    "4793": "    /** Adds a Case to the CaseBase\n     * \n     * @param ca The Case to add to the CaseBase\n     * \n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4794": "         /** Returns a copy of this object\n\t  *\n\t  * @author Edgar Acosta\n\t  * @since 0.5\n\t  */\n",
    "4795": "    /**\n     * This returns the string representation of the AgentAction class\n     * \n     * @author Caleb Chan\n     * @since 0.5\n     */\n",
    "4796": "    /** Sets the list of Cases in the CaseBase\n     * \n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4798": "\t/** Set the distance to the feature.\n\t * \n\t * @param dist Distance to the feature\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4800": "\t/** Sets the value of this feature.\n\t * \n\t * @param value The value to set it to.\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t *\n\t */\n",
    "4802": "\t/** Set the direction to the feature.\n\t * \n\t * @param dir Direction to the feature\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4803": "\t/** Returns the value of this feature.\n\t * \n\t * @return the feature value\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t *\n\t */\n",
    "4806": "\t/** Returns the AgentAction associated with the most similar Case.\n\t * If the most similar Case has no associated action, null is returned.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4807": "\t/** Returns the last AgentAction in the list. If there is no\n\t * associated action, null is returned.\n\t * \n\t * @see org.JIFSA.reasoning.actionselection.actionestimation.ActionEstimation\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4808": "\t/** The distance to the feature.\n\t * \n\t * @return The distance to the feature\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4811": "\t/** Returns the penalty value specified in the constructor.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t * \n\t */\n",
    "4813": "\t/** Sets the filters that will be applied to each new Case the Agent\n\t * encounters in the senseEnvironment method.\n\t * \n\t * @param filters The filters to use\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4814": "\t/** The direction to the feature.\n\t * \n\t * @return The direction to the feature\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4816": "\t/** Sets the feature weights to the given weights.\n\t * \n\t * @param newWeights The weights to use\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4817": "\t/** Used to change the CaseBase used by the Agent\n\t * \n\t * @param cb the new CaseBase\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4819": "\t/** Gets the feature weights currently used by the global distance\n\t * measure\n\t * \n\t * @return The feature weights\n\t * @since 0.3\n\t */\n",
    "4821": "\t/** Based on the weights of each type of feature, a complete distance\n\t * will be produced.\n\t * \n\t * @param distances The distance of each type of feature\n\t * @return The weighted distance\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4822": "\t/** Sets the weight for the given type of item\n\t * to the designated value. The weight value must\n\t * be between 0.0 and 1.0 (inclusive).\n\t * \n\t * @param itemName The name of the item type\n\t * @param weight The weight for that item type\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4824": "\t/** Returns the weight for the given type\n\t * of item. If that weight has not been\n\t * set using the setWeight function then\n\t * the default weight value given by\n\t * the constructor will be used.\n\t * \n\t * @param itemName The type of item\n\t * @return The weight of the item\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4825": "    /** Sets the table of sensory items\n     *\n     * @param a table of sensory times, a list of the per feature type\n     *\n     */\n",
    "4826": "    /** Sets the AgentActions associated with this Case\n     * \n     * @return The associated action in this Case\n     *\n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4831": "    /** Returns the AgentInputs associated with this Case\n     * \n     * @return The associated inputs in this Case\n     *\n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4832": "\t/** Sets the sample size. Supplied values must\n\t * be greater than zero. This determines how\n\t * many Cases of each action type are put\n\t * into the output CaseBase.\n\t * \n\t * @param The currently set sample size.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4834": "\t/** Returns the currently set sample size.\n\t * \n\t * @param The currently set sample size.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4836": "    /** Sets the AgentInputs associated with this Case\n     * \n     * @return The associated inputs in this Case\n     *\n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4837": "    /** Checks to see if any features of a specific type exist\n     * in the AgentInputs object.\n     * \n     * @param featureName The name of the feature type of check for\n     * \n     * @return true if at least one feature of that type is in the AgentInputs\n     * \n     * @author Michael W. Floyd\n     * @since 0.1\n     * \n     */\n",
    "4842": "    /** Returns the number of features in the AgentInputs\n     * of a particular type.\n     * \n     * @param featureName The name of the feature type\n     * \n     * @return The number of features in the AgentInputs of a given type\n     *\n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4844": "    /**\n     * Returns a string representation of a case class\n     * \n     * @return A string representation of the case class\n     * \n     * @author Caleb Chan\n     * @since 0.5\n     */\n",
    "4847": "    /** Returns the total number of features in the AgentInputs\n     * \n     * @return The number of features in the AgentInputs\n     *\n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4850": "\t/** Resets the lists and best results so that a new weight search can\n\t * be performed.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4851": "    /** Adds a Case to the Cluster\n     * \n     * @param c The Case to add to the Cluster\n     * \n     * @author Michael W. Floyd\n     * @since 0.5\n     */\n",
    "4853": "    /** Removes all features of a specific type from the AgentVision\n     * \n     * @param featureName The feature type to remove\n     *\n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4855": "\t/** Used to get the identifier for the point\n\t * \n\t * @return The identifier\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4856": "\t/** Calculates the error associated with the current clustering.\n\t * \n\t * @param clusters The current clusters\n\t * @param newCentroids The current centroids\n\t * @return The error of this clustering\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4857": "\t/** Goes through the entire supplied CaseBase and removes\n\t * any Cases that do not have an associated AgentAction.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4860": "\t/** Performs the sorting.\n\t * \n\t * @param initialCB The initial case base\n\t * @return The case base with sorted Spatial2DFeatures\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4861": "\t/** Adds a decision class, keeping consistency state.\n\t *\n\t * If decision class is the same used to initialize the class, the condition class is consistent.\n\t *\n\t * @params decClass a decision class\n\t *\n\t * @since 0.5\n\t */\n",
    "4864": "\t/** Computes the Euclidean distance between the point\n\t * and another point\n\t * \n\t * @param otherPoint The second point\n\t * @return The distance between the points\n\t *  \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4865": "\t/** Sorts a list of Spatial2DObjects by their distance to the\n\t * agent.\n\t * \n\t * @param sensoryItemList A list of Spatial2DFeatures\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4868": "\t/** Returns the size of the decision class. O if inconsistent.\n\t *\n\t * @since 0.5\n\t */\n",
    "4871": "\t/**\n\t * This will save a CaseBase object in the protocol buffer format\n\t * \n\t * @param s A CaseBase object to be saved\n\t * @return SensoryItemProtocol Returns the object that incases the CaseBase object for saving\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4872": "\t/**\n\t * This will save a Case object in the protocol buffer format\n\t * \n\t * @param s A Case object to be saved\n\t * @return SensoryItemProtocol Returns the object that incases the Case object for saving\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4873": "\t/** Returns the decision class. Null if inconsistent.\n\t *\n\t * @since 0.5\n\t */\n",
    "4875": "\t/**\n\t * This will save a AgentInputs object in the protocol buffer format\n\t * \n\t * @param s A AgentInputs object to be saved\n\t * @return SensoryItemProtocol Returns the object that incases the AgentInputs object for saving\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4876": "\t/** After a CaseBase has been processed this method\n\t * will return the maximum occurrences, of a given sensory item\n\t * type, in a Case.\n\t * \n\t * @param item The name of the sensory item\n\t * @return The maximum number of occurrences\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4877": "\t/**\n\t * This will save a SensoryItem object in the protocol buffer format\n\t * \n\t * @param s A SensoryItem object to be saved\n\t * @return SensoryItemProtocol Returns the object that incases the SensoryItem object for saving\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4879": "\t/** After a CaseBase has been processed this method\n\t * will return the minimum occurrences, of a given sensory item\n\t * type, in a Case.\n\t * \n\t * @param item The name of the sensory item\n\t * @return The minimum number of occurrences\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4880": "\t/**\n\t * This will save an AgentAction object in the protocol buffer format\n\t * \n\t * @param a An AgentAction object to be saved\n\t * @return AgentActionProtocol Returns the object that incases the AgentAction object for saving\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4881": "\t/** After a CaseBase has been processed this method\n\t * will return the average occurrences, of a given sensory item\n\t * type, in a Case.\n\t * \n\t * @param item The name of the sensory item\n\t * @return The average number of occurrences\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4882": "    /** Agent Inputs getter\n     *\n     * @return the Agent Inputs\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4885": "    /** Team Name getter\n     *\n     * @return the Agent Team Name\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4886": "\t/** Returns the name of the feature\n\t * \n\t * @return The name of the feature\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.1\n\t */\n",
    "4890": "        /** Returns a copy of this sensory item\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.5\n\t */\n",
    "4893": "       /** returns the feature name\n\t*\n\t* @author Edgar Acosta\n\t* @since 0.5\n\t*/\n",
    "4894": "\t/** Calculates the distance between two features. The distance calculation algorithm\n\t * used must be set using the SensoryItem.setDistanceCalculation(DistanceCalculation) method\n\t * or else an exception will be thrown.\n\t * \n\t * @param f The other feature\n\t * @return the distance betweent the two features\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t *\n\t */\n",
    "4898": "\t/** Calculates the distance penalty for the feature. This is\n\t * usually used when a SensoryItem has no matching feature in another\n\t * case (unequal number of features).\n\t * \n\t * @return The penalty\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4899": "\t/** Returns an XML representation of the SensoryItem\n\t * \n\t * @return The SensoryItem in XML format\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "5030": "\t/** Tests the method when no action of several types have been \n\t * logged and all match perfectly.\n\t * \n\t * @author Michael W. Floyd\n\t * @throws Exception \n\t * @since 0.3\n\t */\n",
    "5143": "    /**\n     * process cascade save/update at the start of a flush to discover\n     * any newly referenced entity that must be passed to saveOrUpdate(),\n     * and also apply orphan delete\n     */\n",
    "5203": "\t/** This method is just a hack so we can directly call our private\n\t * method and avoid the high overhead of actually simulating these\n\t * events. While this is fairly \"dirty\", it was done because testing\n\t * time was limited, and a quick and dirty approach covered more code\n\t * than the clean approach.\n\t * \n\t * @return the addPair method that can be directly called.\n\t * @throws Exception\n\t */\n",
    "5380": "    /** Checks whether the ParsedLine enclosed contains a value for\n     * certain key.\n     *\n     * It is used to test for information about the event.\n     *\n     * @param paramName the key name\n     * @return true if there is a value associated with the key.\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "5419": "    /** Parses match options sent by the server\n     *\n     * @param message the option message\n     * @param params a string containing the parameters of this message\n     *\n     * @author Edgar Acosta\n     * @since 0.2\n     *\n     */\n",
    "5423": "    /** Parses errors sent by the server\n     *\n     * @param message the error message\n     * @param params a string containing the parameters of this message\n     *\n     * @author Edgar Acosta\n     * @since 0.2\n     *\n     */\n",
    "5521": "    /**\n     * Initialize the flags of the CollectionEntry, including the\n     * dirty check.\n     */\n",
    "5654": "    /**\n     * Sets new page size for table model to display.\n     * @param pageSize\n     *        Number of records to display on\n     *        one page.\n     */\n",
    "5658": "    /**\n     * Returns selected page sie of model.\n     * @return\n     *        Number of records that are currently displayed on page.\n     */\n",
    "5660": "    /**\n     * Set the page of data to display in table.\n     * @param pageNumber\n     *        Zero-based number of page.\n     */\n",
    "5665": "    /**\n     * Set the check values array.\n     * @param checkValues\n     *        Array containing correct values for cells in table.\n     */\n",
    "5666": "    /**\n     * Display page previous to current.\n     */\n",
    "5668": "    /**\n     * Returns renderer for table cells depending on\n     * it's loacation and status.\n     */\n",
    "5669": "    /**\n     * Returns number of pages for current data array. Value is calculated from specified\n     * page size and cannot be set by user.\n     * @return\n     *        Number of pages in table model.\n     *         \n     */\n",
    "5672": "    /**\n     * Gets number of the current page in model.\n     * @return\n     *        Zero-based number of currently displayed page.\n     */\n",
    "5677": "    /**\n     * Fills table model with data to display.\n     * @param data\n     *        Array of data to display in table.\n     * @param columnNames\n     *        Array holding column names for table.\n     * @param pageSize\n     *        New page size to use.\n     */\n",
    "5679": "    /**\n     * Simple warning handler.\n     * @param e\n     *        Parsing exception to handle.\n     * @throws SAXException\n     *         if SAX exception occurs.\n     */\n",
    "5683": "       /**\n        * Return number of columns in table model.\n        * @return\n        *        A number of columns in input data array.\n        */\n",
    "5693": "    /**\n     * Switches validation check for column in table.\n     * \n     * @param columnIndex\n     *        Index of column in table.\n     * @param state\n     *        State of validation. True if validation is set, false otherwise.\n     */\n",
    "5697": "    /**\n     * Returns validation status for first row( boolean value, enabled or disabled),\n     * Otherwise returns value of data stored in cell.\n     * @param rowIndex\n     *        Index of the row to find.\n     * @param columnIndex\n     *        Index of the column to find.\n     * @return\n     *        Object stored in the cell.\n     */\n",
    "5700": "    /**\n     * Adds validator object to column. If validation for column will be enabled,\n     * this object will check if value is valid.\n     * @param columnIndex\n     *        Index of the column to assign validator. \n     * @param validator\n     *        {@link ru.chsu.dupedetector.base.Validator Validator} object to assign.\n     * @return\n     *        True if validator assigned successfully, false otherwise.\n     */\n",
    "5708": "    /**\n     * Adds editor object to column. If value is incorrect it will be corrected by editor.\n     *\n     * @param columnName\n     *        Name of the column to assign validator.\n     * @param editor\n     *        {@link ru.chsu.dupedetector.base.Editor Editor} object to assign.\n     * @return\n     *        True if editor assigned successfully, false otherwise.\n     */\n",
    "5709": "    /**\n     * Resize component for displaying specified maximum number.\n     * @param maxNumber\n     *        Maximum number to display.\n     */\n",
    "5710": "    /**\n     * Gets validator object assigned for column.\n     * @param columnIndex\n     *        Index of column in table.\n     * @return\n     *        Validator object.\n     */\n",
    "5766": "    /** Copy used in createTransferable.\n     * Keeps info about UserObject linked to the node.\n     * @param node\n     *        TreeNode to copy.\n     *@return\n     *        Copy of TreeNode.\n     * */\n",
    "5776": "    /**\n     * Refreshes table contents using specified charset, start line and splitting regular expression.\n     */\n",
    "5779": "    /**\n     * Open file and count lines in it.\n     * @throws IOException\n     *         if any I/O error occurs.\n     */\n",
    "5782": "    /**\n     * Sets new regular expression to split rows.\n     * @param splitRegexp\n     *        New regular expression to use.\n     */\n",
    "5784": "    /**\n     * Getter method for split regular expression.\n     * @return\n     *        Regexp used to split lines of input file by this model.\n     */\n",
    "5785": "    /**\n     * Returns the row count.\n     */\n",
    "5786": "    /**\n     * Returns row count of the table\n     * @return\n     *        Number of lines read from input file.\n     */\n",
    "5787": "    /**\n     * Returns the column count.\n     */\n",
    "5788": "    /**\n     * Returns column count of the table as\n     * maximum column count for all rows.\n     *\n     */\n",
    "5789": "    /**\n     * Returns the value at.\n     */\n",
    "5792": "    /**\n     * Returns the column name.\n     */\n",
    "5794": "    /**\n     * Sets the column names.\n     */\n",
    "5796": "    /**\n     * Returns the map.\n     */\n",
    "5797": "    /**\n     * Get character which start the range.\n     * @return\n     *        First character in range\n     *\n     *\n     */\n",
    "5798": "    /**\n     * Returns length of the range.\n     * @return\n     *        Amount of characters in range.\n     */\n",
    "5799": "    /**\n     * Sets the map.\n     */\n",
    "5805": "    /**\n     * Returns a reference to the current WizardModel for this Wizard component.\n     * @return The current WizardModel for this Wizard component.\n     */    \n",
    "5812": "    /**\n     * Override this method to provide functionality that will be performed just before\n     * the panel is to be displayed.\n     */    \n",
    "5813": "    /**\n     * Override this method to perform functionality when the panel itself is displayed.\n     */    \n",
    "5815": "    /**\n     * Override this method to perform functionality just before the panel is to be\n     * hidden.\n     */    \n",
    "5851": "    /**\n     * Returns an instance of the JDialog that this class created. This is useful in\n     * the event that you want to change any of the JDialog parameters manually.\n     * @return The JDialog instance that this class created.\n     */    \n",
    "5859": "    /**\n     * Returns the owner of the generated javax.swing.JDialog.\n     * @return The owner (java.awt.Frame or java.awt.Dialog) of the javax.swing.JDialog generated\n     * by this class.\n     */    \n",
    "5861": "    /**\n     * Sets DateFormat of input fields.\n     * @param format\n     *        New SimpleDateFormat to use.\n     */\n",
    "5864": "    /**\n     * Reaction to mapping table change event. Preview window should be updated\n     * to reflect mapping changes\n     * @param e\n     *        Tablee change event.\n     */\n",
    "5865": "    /**\n     * Sets the title of the generated javax.swing.JDialog.\n     * @param s The title of the dialog.\n     */    \n",
    "5867": "    /**\n     * Makes new preview sample and displays it in browser TextArea.\n     */\n",
    "5871": "    /**\n     * Returns the current title of the generated dialog.\n     * @return The String-based title of the generated dialog.\n     */    \n",
    "5875": "    /**\n     * Fills the destination array from source array. If source is shorter\n     * it will be copied to destination untill it filled completely.\n     * @param source\n     *        Source array to copy data.\n     * @param dest\n     *        Destination array where objects should be copied to.\n     */\n",
    "5877": "    /**\n     * Sets the modality of the generated javax.swing.JDialog.\n     * @param b the modality of the dialog\n     */    \n",
    "5881": "    /**\n     * Check if file name is valid.\n     * @param fileName\n     *        Name of the file to check.\n     */\n",
    "5884": "    /**\n     * Returns the modality of the dialog.\n     * @return A boolean indicating whether or not the generated javax.swing.JDialog is modal.\n     */    \n",
    "5890": "    /**\n     * Convienence method that displays a modal wizard dialog and blocks until the dialog\n     * has completed.\n     * @return Indicates how the dialog was closed. Compare this value against the RETURN_CODE\n     * constants at the beginning of the class.\n     */    \n",
    "5897": "    /**\n     * Returns the current model of the wizard dialog.\n     * @return A WizardModel instance, which serves as the model for the wizard dialog.\n     */    \n",
    "5898": "    /**\n     * Getter for field containing output file name.\n     * @return\n     *       JTextArea used to keep output file name.\n     */\n",
    "5900": "    /**\n     * Getter for preview text area component.\n     * @return\n     *        JTextArea used to make preview of .xml file.\n     */\n",
    "5901": "    /**\n     * Getter for mapping table.\n     * @return\n     *        Table containing mapping pairs of .xml attributes and MappingResult columns.\n     */\n",
    "5902": "    /**\n     * Getter for field containing output file name.\n     * @return\n     *       JTextArea used to keep output file name.\n     */\n",
    "5903": "    /**\n     * Content panel getter panel.\n     * @return\n     *        Dialog window containing all gui components.\n     *        @see ru.chsu.writer.XMLwriter.gui.XMLWriterGUI\n     */\n",
    "5904": "    /**\n     * Getter for preview text area component.\n     * @return\n     *        JTextArea used to make preview of .xml file.\n     */\n",
    "5907": "    /**\n     * Add a Component as a panel for the wizard dialog by registering its\n     * WizardPanelDescriptor object. Each panel is identified by a unique Object-based\n     * identifier (often a String), which can be used by the setCurrentPanel()\n     * method to display the panel at runtime.\n     * @param id An Object-based identifier used to identify the WizardPanelDescriptor object.\n     * @param panel The WizardPanelDescriptor object which contains helpful information about the panel.\n     */    \n",
    "5909": "    /**\n     * Mapping setup method. Every attribute in xml schema\n     * is associated with column in mpping output.\n     * @param columnNames\n     *        Array containing column names from mapping output.\n     * @param attributes\n     *        Array containing names of columns that should be mapped on every .xml attribute.\n     *\n     */\n",
    "5913": "    /**\n     * Displays the panel identified by the object passed in. This is the same Object-based\n     * identified used when registering the panel.\n     * @param id The Object-based identifier of the panel to be displayed.\n     */    \n",
    "5914": "    /**\n     * Clears generated user list.\n     */\n",
    "5918": "    /**\n     * Generates record for one user only. It can be used to make preview of .xml file contents.\n     * @param fields\n     *        Row of mapping output to create sample.\n     * @param out\n     *        Output stream to marshall data.\n     */\n",
    "5921": "    /**\n     * Opens file output streeam with given file name.\n     * @param fileName\n     *        String containing name of output file.\n     * @throws IOException\n     *         if any I/O error occurs.\n     */\n",
    "5922": "    /**\n     * Close file and close associated resources.\n     * @throws IOException\n     *         if any i/o error occurs.\n     */\n",
    "5923": "    /**\n     * Marshall mapping output to file.\n     * @param result\n     *        Mapping result as two-dimensional array of strings.\n     * @throws IOException\n     */\n",
    "5926": "    /**\n     * Retrieves the last return code set by the dialog.\n     * @return An integer that identifies how the dialog was closed. See the *_RETURN_CODE\n     * constants of this class for possible values.\n     */    \n",
    "5933": "   /**\n     * Mirrors the WizardModel method of the same name.\n     * @return A boolean indicating if the button is enabled.\n     */  \n",
    "5935": "    /**\n     * If fileName is updated it must be validated\n     * @param e\n     *        Update event.\n     */\n",
    "5936": "    /**\n     * If file name is changed it must be validated\n     * @param e\n     *        Remove event\n     */\n",
    "5939": "   /**\n     * Mirrors the WizardModel method of the same name.\n     * @param newValue The new enabled status of the button.\n     */ \n",
    "5945": "   /**\n     * Mirrors the WizardModel method of the same name.\n     * @return A boolean indicating if the button is enabled.\n     */ \n",
    "5951": "   /**\n     * Mirrors the WizardModel method of the same name.\n     * @param newValue The new enabled status of the button.\n     */ \n",
    "5958": "   /**\n     * Mirrors the WizardModel method of the same name.\n     * @return A boolean indicating if the button is enabled.\n     */ \n",
    "5963": "    /**\n     * Mirrors the WizardModel method of the same name.\n     * @param newValue The new enabled status of the button.\n     */ \n",
    "5972": "    /**\n     * Dialog initialization method. Constructs organizational unit tree from mapping\n     * result and draws it in JTree component.\n     * @param result\n     *        Mapping output result.\n     */\n",
    "5974": "    /**\n     * Resets the tree creating only default root node.\n     */\n",
    "5975": "    /**\n     * Opens file for output. Buffered writer is used for output.\n     * @param fileName\n     *        String containing name of output file.\n     * @throws IOException\n     */\n",
    "5978": "    /**\n     * Close file and free all allocated resources\n     * @throws IOException\n     *         If any I|O error occured\n     */\n",
    "5980": "    /**\n     * Generates LDIF script string from mapping output.\n     * @param result\n     *        MappingResult object containing mapping output data.\n     * @return\n     *        Generated LDIF script.\n     */\n",
    "5983": "    /**\n     * Writes mapping result to an output LDIF file.\n     * @param result\n     *        Mapping result as two-dimensional array of strings.\n     * @throws IOException\n     *         if any I|o error happens.\n     */\n",
    "5984": "    /**\n     * Stores indexes of user attributes columns in mapping output.\n     * \n     * @param result\n     *        Object holding all mapping output data.\n     */\n",
    "5988": "    /**\n     * Generates attribute-values specification section for LDIFCLass object\n     *\n     * Attributes are written\n     * {@code\n     * attrval-spec             = AttributeDescription value-spec SEP\n     * AttributeDescription     = AttributeType [\";\" options]\n     * value-spec               = \":\" (    FILL 0*1(SAFE-STRING) /\n     * \":\" FILL (BASE64-STRING) /\n     * \"<\" FILL url)\n     * }\n     * @param object\n     *        LDIFClass object which will be marshalled to output file.\n     * @return\n     *        generated section as a StringBuilder.\n     */\n",
    "5989": "    /**\n     * Creates LDIF user class from mapping output row.\n     * @param data\n     *        String array containing values of attributes from one row of mapping output.\n     * @return\n     *        new LDIF user class object\n     */\n",
    "5991": "    /**\n     * Creates ldif add statement for LDIFClass statement\n     * {@code\n     * ldif-change-record = dn-spec SEP *control changerecord\n     * dn-spec = \"dn:\" (FILL distinguishedName /\n     * \":\" FILL base64-distinguishedName)\n     * change-add = \"add\" SEP 1*attrval-spec\n     * }\n     * @param object\n     *        LDIFClass object containing dn value and attributes specification.\n     * @return\n     *        Generated LDIF record for object.\n     *\n     */\n",
    "5992": "    /**\n     * Sets specified sheet name for output sheet in workbook\n     * @param sheetName\n     *        Name specified for the sheet\n     */\n",
    "5993": "    /**\n     *  Setter for selectedColumns array\n     * @param selectedColumns\n     *        First array contains indexes of columns, that should be exported to output\n     *        file. Second array contains column names.\n     * @param columnNames\n              Array containing column names data.\n     */\n",
    "6000": "    /**\n     * Saves all modifications in the workbook and closes associated file.\n     * @throws IOException\n     *         if any I?o error occurs.\n     */\n",
    "6003": "    /**\n     * Writes one row of values to the specified sheet in workbook.\n     * Only values for selected columns will be written.\n     * @param data\n     *        Array of values\n     * @throws IOException\n     *         if I/O exception occured while this operation.\n     */\n",
    "6005": "    /**\n     * Writes all mapping results to the .xls workshhet\n     * @param result\n     *        Mapping result as two-dimensional array of strings.\n     * @throws IOException\n     */\n",
    "6008": "    /**\n     * Getter for content holding object.\n     * @return\n     *        reference to object holding all GUI data.\n     */\n",
    "6013": "    /**\n     * Charset getter method.\n     * @return\n     *     Charset used for reading input file.\n     */\n",
    "6015": "    /**\n     * Charset setter method.\n     * \n     * @param charset\n     *        New charset to use.\n     *        @see java.nio.charset.Charset\n     */\n",
    "6020": "    /**\n     * Getter for starting line number.\n     * @return\n     *        Zero based line number.\n     */\n",
    "6022": "    /**\n     * Sets new start line number of the file. All lines before this line will be skipped.\n     * @param startLine\n     *        New start line number.\n     */\n",
    "6024": "    /**\n     * Refreshes preview when import settings are changed\n     * @param e\n     *        Change event to handle.\n     */\n",
    "6027": "    /**\n     * Refreshes preview when import settings are changed\n     * @param e\n     *        Action event to handle.\n     */\n",
    "6029": "    /**\n     * Sets split regexp for input file.\n     * @param splitRegexp\n     *          String new splitting regexp.\n     */\n",
    "6032": "    /**\n     * Sets names for attributes read from input file.\n     * @param columns\n     *          Array containing names of attributes.\n     */\n",
    "6040": "    /**\n     * Updates preview window where separator symbol is changed.\n     * @param e\n     *        ActionEvent to process.\n     */\n",
    "6043": "    /**\n     * Skips all lines before start line.\n     *\n     * @throws FileNotFoundException\n     *          if file not found.\n     * @throws NoSuchElementException\n     *          if file is empty.\n     *\n     */\n",
    "6050": "    /**\n     * Getter method for content panel.\n     * @return\n     *        Panel containing all gui components related to text reader setup.\n     */\n",
    "6051": "    /**\n     * Getter for content panel.\n     * @return\n     *       Panel with all visual components for this wizard page.\n     */\n",
    "6052": "    /**\n     * Returns JSpinner holding the starting line number of the input file.\n     */\n",
    "6053": "    /**\n     * Returns preview table.\n     * @return\n     *      JTable containing text file split into rows according to selected separator symbol.\n     */\n",
    "6055": "    /**\n     * Returns selected charset.\n     * @return\n     *        Returns charset object currently selected in charset combo box.\n     */\n",
    "6057": "    /**\n     * Returns file preview table.\n     */\n",
    "6059": "    /**\n     * Returns input file associated with reader.\n     * @return\n     *        Input file.\n     *        @see java.io.File\n     */\n",
    "6060": "    /**\n     * Sets checkbox action listner for all checkboxes on panel\n     * @param a\n     *         Action listener to set.\n     */\n",
    "6061": "    /**\n     * Set the file used as input for reader.\n     * @param file\n     *        New input file.\n     */\n",
    "6063": "    /**\n     * Set the table model for preview JTable.\n     * @param fileViewModel\n     *        New table model to set.\n     */\n",
    "6064": "    /**\n     * Set selected worksheet to import data.\n     * @param sheetIndex\n     *        New  index of sheet. \n     */\n",
    "6065": "    /**\n     * Returns the current index of sheet in workbook.\n     * @return\n     *        Index of selected sheet in the workbook.\n     */\n",
    "6066": "    /**\n     * Returns panel containing all gui-components on this dialog ppage.\n     * @return\n     *        COntent panel.\n     */\n",
    "6067": "    /**\n     * Get the name of current sheet.\n     * @return\n     *        String containing sheet name.  \n     */\n",
    "6068": "    /**\n     * Updates table model where selected separator is changed.\n     */\n",
    "6070": "    /**\n     * Return the number of sheets in workbook.\n     * @return\n     *        Number of sheets in opened workbook.\n     * */\n",
    "6071": "    /**\n     * Set selected columns indexes.\n     * @param selectedColumns\n     *        Array containing selected columns indexes.\n     * @param columnNames\n     *        Names of columns to use for this columns.\n     * @throws IndexOutOfBoundsException\n     *         If column index is not within sheet column range.\n     */\n",
    "6076": "    /**\n     * Selects all the columns on sheet and get column names as headers\n     * @throws IndexOutOfBoundsException\n     *         If column index is not within sheet column range.\n     */\n",
    "6084": "    /**\n     * Getter for preview table\n     * @return\n     *        JTable displaying .xls data.\n     */\n",
    "6086": "    /**\n     * Getter for label containing sheet name.\n     * @return\n     *       JLabel component used to display sheet name.\n     */\n",
    "6088": "    /**\n     * Get spinner used to display selected sheet index.\n     * @return\n     *          JSpinner object used to change sheet index.\n     */\n",
    "6090": "    /**\n     * Get content panel with all GUI - components.\n     * @return\n     *        Panel with all content related to Xls-reader.\n     */\n",
    "6096": "    /**\n     * Set number of sheet in workbook to display.\n     * @param sheetNumber\n     *        New sheet number.\n     */\n",
    "6099": "    /**\n     * Get name of selected worksheet.\n     */\n",
    "6106": "    /**\n     * Returns file displayed by the model.\n     * @return\n     *        File object describing input file.\n     *        @see java.io.File\n     */\n",
    "6107": "    /**\n     * Updates preview table when selected sheet is changed\n     * @param e\n     *        Change event to handle.\n     */\n",
    "6113": "    /**\n     * Get rowCount from the worksheet.\n     * @return\n     *        Number of rows in current worksheet.\n     */\n",
    "6114": "    /**\n     * Action handler for line amount change. If number of lines on the page is changed\n     * number of available pages is changed too.\n     * @param e\n     *        Aaction event to handle.\n     */\n",
    "6115": "    /**\n     * Get colCount from worksheet.\n     * @return\n     *        Number of columns in current worksheet.\n     */\n",
    "6118": "    /**\n     * Get value of specified cell in worksheet.\n     * @param rowIndex\n     *        Row for cell.\n     * @param columnIndex\n     *        Column for cell.\n     * @return\n     *        Cell value.\n     */\n",
    "6122": "    /**\n     * Refreshes table contents when page number is changed.\n     * @param e\n     *        JSpinner change event to handle.\n     */\n",
    "6129": "    /**\n     * Updates available pages counter when number of records in table or\n     * to display on one page is changed.\n     *\n     */\n",
    "6135": "    /**\n     * Changes the way how mapping output is stored in memory.\n     *\n     */\n",
    "6144": "    /**\n     * Get content panel holding all gui elements on panel.\n     * @return\n     *        JPanel with all content.\n     */\n",
    "6154": "    /**\n     * Searches for plugin class in list of available plugins.\n     * @param mapperClass\n     *        Mapper class to search.\n     * @return\n     *        Zero-based list index, -1 if class is not found.\n     */\n",
    "6158": "    /**\n     * Getter for page amount label.\n     * @return\n     *        JLabel component used to display number of pages in table model.\n     */\n",
    "6159": "    /**\n     * Get amount of records to display on one page.\n     * @return\n     *        Amount of records to display.\n     */\n",
    "6161": "    /**\n     * Get combo box used to display records count.\n     * @return\n     *        JComboBox component used to display records count.\n     */\n",
    "6163": "    /**\n     * Getter for spinner component containing record number.\n     * @return\n     *        JSpinner used for record number display.\n     */\n",
    "6165": "    /**\n     * Preview JTable getter.\n     * @return\n     *       Returns JTable component used to display preview data.\n     */\n",
    "6166": "            /**\n             * Selection handler for plugin list. Changes sekected plugin specific settings panel.\n             * @param e\n             *        Selection event to handle.\n             */\n",
    "6168": "    /**\n     * Custom GUI components initialization procedure\n     */\n",
    "6170": "    /**\n     * Set up available attributes list for plugins to use.\n     * @param collection\n     *        Collection of AttributeBean objects containing attribute info.\n     */\n",
    "6173": "    /**\n     * Setup and shows add mapper dialog.\n     * @param bean\n     *        AttributeBean to display in add mapper dialog\n     *\n     */\n",
    "6176": "    /**\n     * Creates new plugin object based on it's class.\n     * @param mapperClass\n     *        Actual class of the plugin.\n     * @return\n     *         New instance of plugin with default settings.\n     * @throws PluginConfigurationException\n     *         if such mapper class is not found.\n     */\n",
    "6181": "    /**\n     * Returns true if tree contains specified string value.\n     * @param value\n     *        value to search.\n     * @return\n     *        True if tree contains value, false otherwise.\n     */\n",
    "6183": "    /**\n     * Custom UI initialization procedure.\n     */\n",
    "6184": "    /**\n     * Adds child to tree checking for cyclic dependence.\n     * @param value\n     *        Value to store in child node.\n     * @throws DependencyException\n     *         If value is already found in tree.\n     */\n",
    "6186": "    /**\n     * Adds array of values to tree.\n     * @param values\n     *        Values to add.\n     * @throws DependencyException\n     *         if value is found in tree.\n     */\n",
    "6191": "    /**\n     * Checks if attribute is cyclic dependent form itself, e.g.\n     * attribute that used for it's generation uses this attribute as base attribute.\n     * @param attributeName\n     *        Name of attribute to check.\n     * @param parent\n     *        Constructed Dependency tree for this attribute.\n     *        @see ru.chsu.mapper.dependence.DependencyTree\n     * @throws ru.chsu.mapper.dependence.DependencyException\n     *         if attribute is self-dependent,\n     */\n",
    "6196": "    /**\n     * Checks all available attributes for cyclic dependency.\n     * @param attributes\n     *        Collection of attributes to check.\n     * @throws ru.chsu.mapper.dependence.DependencyException\n     *         if cyclic dependency is found.\n     */\n",
    "6201": "    /**\n     * Input attributes map setter.\n     */\n",
    "6212": "    /**\n     * Configures mapper using specified file name.\n     * @throws DependencyException\n     *         If some cyclic dependency is found in configuration file.\n     * @throws PluginConfigurationException\n     *         If configuration file is invalid or cannot be read.\n     *\n     * @param configFileName\n     *        Name of the file to use.\n     */\n",
    "6229": "    /**\n     * Sets specified mapper configuration to use for attribute.\n     * @param field\n     *        Name of attribute.\n     * @param mapperBean\n     *        Attribute bean describing attribute generation settings.\n     */\n",
    "6540": "    /**\n     * Replaces method parameters with TRMI stubs as needed. See {@link\n     * trmi.Naming#getParameterStubIfNeeded(Object, Class)} for more details.\n     */\n",
    "6650": "    /**\n     * add a collection we just loaded up (still needs initializing)\n     */\n",
    "6717": "    /**\n     * add a detached uninitialized collection\n     */\n",
    "6852": "    /**\n     * associate a holder with an array - called after loading array\n     */\n",
    "6868": "\t/**\n\t *\tDragSourceListener interface\n\t *  @param e event\n\t */\n",
    "7190": "\t/**\n\t *  KeyReleased Listener (nop)\n\t * \t@param e event\n\t */\n",
    "7463": "    /**\n     * Just in case user forgot to commit()/cancel() or close()\n     */\n",
    "7571": "    /**\n     * Get the collection entry for a collection passed to filter,\n     * which might be a collection wrapper, an array, or an unwrapped\n     * collection. Return null if there is no entry.\n     */\n",
    "7828": "    /**\n     * remove any hard references to the entity that are held by the infrastructure\n     * (references held by application or other persistant instances are okay)\n     */\n",
    "7938": "    /**\n     * Evict collections from the factory-level cache\n     */\n",
    "12961": "\t/**\n\t * Default create method\n\t * \n\t * @throws CreateException\n\t * @ejb.create-method\n\t */\n",
    "29877": "    /**\n     * This sets the codeset for this document\n     *\n     * @param codeset - String representation of codeset for this\n     *                  document\n     */\n",
    "29883": "    /** \n     * This gets the codeset for this document\n     *\n     * @return String the codeset for this document\n     */\n",
    "29887": "    /**\n     * This adds a stylesheet to the XML document.\n     *\n     * @param href - String reference to stylesheet\n     * @param type - String type of stylesheet\n     */\n",
    "29892": "    /**\n     * This adds a stylesheet to the XML document, and assumes\n     *   the default <code>text/xsl</code> type.\n     *\n     * @param href = String reference to stylesheet\n     */\n",
    "29897": "    /**\n     * This adds the specified element to the prolog of the document\n     *\n     * @param element - Element to add\n     */\n",
    "29900": "    /**\n     * This adds an element to the XML document.  If the\n     *   document is empty, it sets the passed in element\n     *   as the root element.\n     *\n     * @param element - XML Element to add\n     * @return XMLDocument - modified document\n     */\n",
    "29906": "    /**\n     * Write the document to the OutputStream\n     *\n     * @param out - OutputStream to write to\n     */\n",
    "29909": "    /**\n     * Add an additional instruction (which works like an XML\n     *   attribute) to the PI\n     *\n     * @param name - Name of instruction (e.g. standalone)\n     * @param value - value of instruction (e.g. \"no\")\n     */\n",
    "29916": "    /**\n     * Clone this document\n     *\n     * @return Object - cloned XMLDocument\n     */\n",
    "29941": "    /**\n        this method actually performs the filtering.\n    */\n",
    "30502": "\t/**\n\t * Creates an initially unselected toggle button\n\t * without setting the text or image.\n\t */\n",
    "30504": "\t/**\n\t * Creates an unselected toggle button with the specified text.\n\t *\n\t * @param text  the string displayed on the toggle button\n\t */\n",
    "30508": "\t/**\n\t * Creates a toggle button with the specified text\n\t * and selection state.\n\t *\n\t * @param text  the string displayed on the toggle button\n\t * @param selected  if true, the button is initially selected;\n\t *                  otherwise, the button is initially unselected\n\t */\n",
    "42686": "\t/**\n\t * \tConstructor get TableNAme from Table\n\t * \t@param AD_Table_ID Table_ID\n\t */\n",
    "63167": "\t/** Null means no checks\n\t  */\n",
    "64598": "    /**\n     * This method initializes the provided baseimplementation \n     * of the model properly.<p>\n     * This is not done in the constructor because there might\n     * be cases where some base data is set in the constructor \n     * and must be present for properly working model getter methods.<p>\n     * <b>MUST BE CALLED BY ANY SUBCLASS!</b>\n     */\n",
    "64614": "    /**\n     * Implement to specify the height of the first row.\n     * This value might be overwritten when setFirstRowHeight() is called.\n     * @return Should return the height of the first row in the table.\n     * @see #setFirstRowHeight(int);\n     * @deprecated Implement getInitialRowHeight(0) instead!\n     */\n",
    "64625": "    /**\n     * Sets the row height for the first row.\n     * @deprecated Use setRowHeight(0, value) instead.\n     */\n",
    "64630": "    /**\n     * Delegates the real content retrieval to the method\n     * <code>doGetContentAt(int, int)</code>.\n     * @see de.kupzog.ktable.KTableModel#getContentAt(int, int)\n     */\n",
    "64634": "    /**\n     * Returns the tooltip for the given cell. <p>\n     * Simply calls the method <code>doGetTooltipAt()</code>.\n     * @see de.kupzog.ktable.KTableModel#getTooltipAt(int, int)\n     */\n",
    "64639": "    /**\n     * Returns the tooltip text for the given cell. Implement this\n     * method rather than <code>getTooltipAt()</code>.\n     * @param col The column index.\n     * @param row The row index.\n     * @return Returns the tooltip text for the cell. Default: None.\n     */\n",
    "64645": "    /**\n     * Delegates the real editor retrieval to the method\n     * <code>doGetCellEditor(int, int)</code>.\n     * @see de.kupzog.ktable.KTableModel#getCellEditor(int, int)\n     */\n",
    "64662": "    /**\n     * Calls the method <code>doSetContentAt(int, int, Object)</code>\n     * to actually set the content of a table cell to the model.\n     * @see de.kupzog.ktable.KTableModel#setContentAt(int, int, java.lang.Object)\n     */\n",
    "64674": "    /**\n     * Returns wether a given cell is fixed.\n     * @param col The column index\n     * @param row the row index\n     * @return returns true if the cell is fixed, false otherwise. \n     */\n",
    "64698": "\t/**\n\t * Implement In-Textfield navigation with the keys... \n\t * @see de.kupzog.ktable.KTableCellEditor#onTraverse(org.eclipse.swt.events.TraverseEvent)\n\t */\n",
    "64712": "    /**\n     * Checks wether the given horizontal alignment parameter is valid.\n     * @param align The alignment to check\n     * @return True if the alignment value is valid.\n     */\n",
    "64715": "    /**\n     * Checks wether the given vertical alignment parameter is valid.\n     * @param align The alignment to check\n     * @return True if the alignment value is valid.\n     */\n",
    "64719": "\t/**\n\t * Called when the open-method returns.\n\t */\n",
    "64722": "    /** \n     * Calls doBelongsToCell to get the cell span.\n     * Never overwrite this method, but implement doBelongsToCell().\n     * @see de.kupzog.ktable.KTableModel#belongsToCell(int, int)\n     */\n",
    "64723": "\t/**\n\t * Sets the bounds of the dialog to the cell bounds.\n\t * DEFAULT: Ignored. Set the required shell properties by\n\t * overwriting the method <code>setupShellProperties(Shell)</code>.\n\t */\n",
    "64727": "    /**\n     * Ignored, since it is no longer in use. We use a dialog instead \n     * of a control!\n     */\n",
    "64733": "    /**\n     * Return (0,0) if cell should stay in its own area,\n     * or return the cell that should overlap this cell.<br>\n     * Overwrite this rather than belongsToCell()!<p>\n     * Defaults to no spanning.  \n     * @see de.kupzog.ktable.KTableModel#belongsToCell(int, int).\n     */\n",
    "64735": "    /**\n\t * Activates the editor at the given position.\n\t * Instantly closes the editor and switch the boolean content value.\n\t * @param row\n\t * @param col\n\t * @param rect\n\t */\n",
    "64737": "\t/**\n\t * Simply switches the boolean value in the model!\n\t */\n",
    "64743": "    /**\n     * This implementation does nothing!\n     * @see de.kupzog.ktable.KTableCellEditor#setContent(java.lang.Object)\n     */\n",
    "64744": "    /**\n     * Maps the given row index that references a visible row, to one \n     * that is internally used in the tablemodel.<br>\n     * This allows different tablemodels (such as the sorted table model) \n     * to rearrange rows flexibly. This visual rearrangement leads\n     * to changed shown row indices, but using this method, the model-internal\n     * row indices stay the same. \n     * @param shownRow The row index as displayed by the KTable.\n     * @return Returns the row index as used in the model. This stays unchanged\n     * even if the visual arrangement is changed (e.g. when sorting the talbe).\n     */\n",
    "64749": "    /**\n     * Sets the column index this comparator operates on.\n     * @param column the column index to use.\n     */\n",
    "64752": "    /**\n     * Maps the given row index from a model-internal to one that references\n     * visualized table rows. This is usually used to do something with the\n     * KTable from within the tablemodel. \n     * @param modelRow The row index as used in the model.\n     * @return Returns the row index as needed/used by the KTable to display the data.\n     */\n",
    "64754": "\t/**\n\t * Is called if a non-fixed cell is selected (gets the focus).\n\t * @see KTable for an explanation of the term \"fixed cells\".\n\t * @param col\n\t * the column of the cell\n\t * @param row\n\t * the row of the cell\n\t * @param statemask\n\t * the modifier keys that where pressed when the selection happened.\n\t */\n",
    "64757": "\t/**\n\t * Is called if a fixed cell is selected (is clicked).\n\t * @see KTable for an explanation of the term \"fixed cells\".\n\t * @param col\n\t * the column of the cell\n\t * @param row\n\t * the row of the cell\n\t * @param statemask\n\t * the modifier keys that where pressed when the selection happened.\n\t */\n",
    "64759": "    /**\n     * Sets the sorting direction.\n     * @param direction The sort direction, either\n     * SORT_NONE, SORT_UP or SORT_DOWN.\n     */\n",
    "64763": "\t/**\n\t * disposes the editor and its components\n\t */\n",
    "64768": "    /**\n     * Sets the tablemodel to work on.\n     * @param model The <class>KTableSortedModel</class> to work with.\n     */\n",
    "64775": "\t/**\n\t * Deactivates the editor.\n\t * @param save\n\t * If true, the content is saved to the underlying table.\n\t */\n",
    "64776": "    /**\n     * Sorts the model elements so that the retrieval\n     * methods by index (e.g. of type <code>method(int col, int row)</code>)\n     * return the content ordered in the given direction.<p>\n     * Note: To make the table reflect this sorting, it must be refreshed/redrawn!<p>\n     * Note: Often it is desired that there is some visual sign of how the sorting is.\n     * \n     * @param comparator The KTableSortComparator that knows how to sort the rows!\n     */\n",
    "64777": "\t/**\n\t * Returns true if the editor has the focus.\n\t * @return boolean\n\t */\n",
    "64780": "\t/**\n\t * Sets the editor's position and size\n\t * @param rect\n\t */\n",
    "64784": "    /**\n     * Overwrites the style bits with the given one.\n     * @see getStyle() for accessing the style bits.\n     * @param style The styles to AND with the current style bits.\n     */\n",
    "64786": "    /**\n     * Maps between the KTable row index and the model row index!<p>\n     * Accesses the sorted model accordingly.\n     * Delegates the real content retrieval to the method\n     * <code>doGetContentAt(int, int)</code>.\n     * @see de.kupzog.ktable.KTableModel#getContentAt(int, int)\n     */\n",
    "64789": "    /**\n     * Returns the tooltip for the given cell. <p>\n     * Calls the method <code>doGetTooltipAt()</code> to retrieve\n     * content.\n     * @see de.kupzog.ktable.KTableModel#getTooltipAt(int, int)\n     */\n",
    "64794": "    /**\n     * Maps between the KTable row index and the model row index!<p>\n     * Delegates the real editor retrieval to the method\n     * <code>doGetCellEditor(int, int)</code>.\n     * @see de.kupzog.ktable.KTableModel#getCellEditor(int, int)\n     */\n",
    "64796": "    /**\n     * Maps between the KTable row index and the model row index!<p>\n     * Calls the method <code>doSetContentAt(int, int, Object)</code>\n     * to actually set the content of a table cell to the model.\n     * @see de.kupzog.ktable.KTableModel#setContentAt(int, int, java.lang.Object)\n     */\n",
    "64800": "    /**\n     * Maps between the KTable row index and the model row index!<p>\n     * Calls the method <code>doGetCellRenderer(int, int)</code>\n     * to retrieve the cell renderer for a cell.\n     * @see de.kupzog.ktable.KTableModel#getCellRenderer(int, int)\n     */\n",
    "64803": "    /** \n     * Sorting disables all cell spanning. The behavior is:\n     * spanned cells are spittet, but all cells originally spanned\n     * get the content of the spanned cell. \n     * @see de.kupzog.ktable.KTableModel#belongsToCell(int, int)\n     */\n",
    "64810": "    /**\n     * Draws the cell as a button. It is visibly clickable and contains a button text.\n     * All line borders of the cell are overpainted - there will not be any border between buttons. \n     * @param gc The GC to use when painting.\n     * @param rect The cell area as given by KTable. (contains 1px bottom & right offset)\n     * @param text The text to paint on the button. \n     * @param pressed Wether the button should be painted as clicked/pressed or not. \n     */\n",
    "64839": "    /**\n     * Mirrors the given image. Note that the returned image must be disposed after rendering!\n     * @param source The source image. Gets disposed in this method.\n     * @return Returns a new image with mirrored content. The caller is responsible for disposing this image!\n     */\n",
    "64840": "\t/**\n\t * Is called if a non-fixed cell is selected (gets the focus). \n\t * @see KTable for an explanation of the term \"fixed cells\".\n\t * @param col\n\t * the column of the cell\n\t * @param row\n\t * the row of the cell\n\t * @param statemask\n\t * the modifier keys that where pressed when the selection happened.\n\t */\n",
    "64841": "\t/**\n\t * Is called if a fixed cell is selected (is clicked). \n\t * @see KTable for an explanation of the term \"fixed cells\".\n\t * @param col\n\t * the column of the cell\n\t * @param row\n\t * the row of the cell\n\t * @param statemask\n\t * the modifier keys that where pressed when the selection happened.\n\t */\n",
    "64848": "    /**\n     * Draws the default border by invoking the relevant method in BorderPainter.\n     * <p>\n     * Overwrite this method if you desire another border style.\n     * @param gc The GC to use.\n     * @param rect The cell bounds. Note that this method returns the new cell bounds\n     * that exlude the border area.\n     * @param vBorderColor The vertical border color.\n     * @param hBorderColor The horizontal border color.\n     * @return Returns the new bounds of the cell that should be filled with content.\n     */\n",
    "64860": "    /**\n     * Sets the alignment of the cell content.\n     * @param style The OR-ed alignment constants for\n     * vertical and horizontal alignment as defined in\n     * SWTX.\n     * @see SWTX#ALIGN_HORIZONTAL_CENTER\n     * @see SWTX#ALIGN_HORIZONTAL_LEFT\n     * @see SWTX#ALIGN_HORIZONTAL_RIGHT\n     * @see SWTX#ALIGN_VERTICAL_CENTER\n     * @see SWTX#ALIGN_VERTICAL_TOP\n     * @see SWTX#ALIGN_VERTICAL_BOTTOM\n     */\n",
    "64885": "    /**\n     * Set the foreground color used to paint text et al.\n     * @param fgcolor The color or <code>null</code> to\n     * reset to default (black). Note that also the default color can be set using <code>setDefaultForeground(Color)</code>\n     * @see #setDefaultForeground(Color)\n     */\n",
    "64898": "    /**\n     * Changes the default foreground color that will be used\n     * when no other foreground color is set. \n     * (for example when <code>setForeground(null)</code> is called)\n     * @param fgcolor The foreground color to use.\n     * @see #setForeground(Color)\n     */\n",
    "64900": "    /** \n     * Implement also cell spans so that it can be demonstrated how\n     * the sorting algorithm works in this case: \n     * @see de.kupzog.ktable.KTableDefaultModel#doBelongsToCell(int, int)\n     */\n",
    "64907": "    /**\n     * Set the background color that should be used when \n     * painting the cell background.<p>\n     * If the <code>null</code> value is given, the default \n     * color will be used. The default color is settable using \n     * <code>setDefaultBacktround(Color)</code>\n     * @param bgcolor The color or <code>null</code> to\n     * reset to default.\n     * @see #setDefaultBackground(Color)\n     */\n",
    "64917": "    /**\n     * Changes the default background color that will be used when\n     * no background color is set via setBackground().\n     * @param bgcolor The color for the background.\n     * @see #setBackground(Color)\n     */\n",
    "64943": "    /**\n     * Sets the font the renderer will use for drawing\n     * its content.\n     * @param font The font to use. Be aware that\n     * you must dispose fonts you have created.\n     */\n",
    "64959": "    /**\n     * Applies the font style of the renderer to the\n     * gc that will draw the content.<p>\n     * <b>To be called by implementors</b>\n     * @param gc The gc that will draw the \n     * renderers content.\n     */\n",
    "64969": "    /**\n     * Resets the given GC's font parameters to the\n     * original state.\n     * @param gc The gc to draw with.\n     */\n",
    "64989": "\t/**\n\t * Return the collection of tasks\n\t */\n",
    "64991": "\t/**\n\t * Add a new task to the collection of tasks\n\t */\n",
    "65013": "\t/**\n\t * Set the 'completed' property\n\t * \n\t * @param b\n\t */\n",
    "65014": "\t/**\n\t * Set the 'description' property\n\t * \n\t * @param string\n\t */\n",
    "65017": "\t/**\n\t * Set the 'owner' property\n\t * \n\t * @param string\n\t */\n",
    "65018": "\t/**\n\t * Set the 'percentComplete' property\n\t * \n\t * @param i\n\t */\n",
    "65052": "\t/**\n\t * This method initializes sashForm\t\n\t *\n\t */\n",
    "65053": "\t/**\n\t * This method initializes trifonTextModelExample\t\n\t * \t\n\t * @return net.comap.table.example.viewmodel.TrifonTextModelExample\t\n\t */\n",
    "65055": "\t/**\n\t * This method initializes topComposite\t\n\t *\n\t */\n",
    "65057": "\t/**\n\t * This method initializes bottomComposite\t\n\t *\n\t */\n",
    "65059": "\t/**\n\t * This method initializes composite\t\n\t *\n\t */\n",
    "65060": "\t/**\n\t * This method initializes kTable\t\n\t *\n\t */\n",
    "65063": "\t/**\n\t * This method initializes composite1\t\n\t *\n\t */\n",
    "65066": "\t/**\n\t * This method initializes kTable\t\n\t *\n\t */\n",
    "65070": "\t/**\n\t * This method initializes bottomCTabFolder\t\n\t *\n\t */\n",
    "65108": "\t/**\n\t * Check if this user is surveyant.\n\t * \n\t * @return true, if surveyant\n\t */\n",
    "65110": "\t/**\n\t * Liefert die Nachbedingung zu dieser Content-Gruppe.\n\t * \n\t * @return Condition\n\t * @hibernate.many-to-one\n\t */\n",
    "65112": "\t/**\n\t * Set the content of this container.\n\t * \n\t * @param list the content\n\t */\n",
    "65113": "\t/**\n\t * This method initializes tabFolder\t\n\t *\n\t */\n",
    "65115": "\t/**\n\t * Get the filename of this image.\n\t * \n\t * @return die URL\n\t * @hibernate.property not-null=\"true\"\n\t */\n",
    "65117": "\t/**\n\t * Set the filename.\n\t * \n\t * @param string the filename\n\t */\n",
    "65118": "\t/**\n\t * Set the image.\n\t * \n\t * @param image the image\n\t */\n",
    "65119": "\t/**\n\t * Cehck if this user is \"user\".\n\t * \n\t * @return true, if user\n\t */\n",
    "65128": "\t/**\n\t * Check if this user is admin.\n\t * \n\t * @return true, if admin\n\t */\n",
    "65132": "\t/**\n\t * Get the text.\n\t * \n\t * @return the text\n\t * @hibernate.property type=\"text\"\n\t */\n",
    "65135": "\t/**\n\t * Get the layout.\n\t * \n\t * @return the layout\n\t * @hibernate.property\n\t */\n",
    "65138": "\t/**\n\t * Set the text.\n\t * \n\t * @param string the text\n\t */\n",
    "65141": "\t/**\n\t * Set the layout.\n\t * \n\t * @param theLayout the layout\n\t */\n",
    "65144": "\t/**\n\t * Get abstract of this text. If the text is more than 120 characters long, the first and last 60 chars concatenated\n\t * with \"...\" are returned.\n\t * \n\t * @return abstract\n\t */\n",
    "65147": "\t/**\n\t * Get the creation date.\n\t * \n\t * @return the date\n\t * @hibernate.property column=\"TAN_CDATE\" not-null=\"true\"\n\t */\n",
    "65150": "\t/**\n\t * Get the end date.\n\t * \n\t * @return the date\n\t * @hibernate.property column=\"TAN_EDATE\"\n\t */\n",
    "65151": "\t/**\n\t * Get the start date.\n\t * \n\t * @return the start date\n\t * @hibernate.property column=\"TAN_SDATE\"\n\t */\n",
    "65155": "\t/**\n\t * Get the state.\n\t * \n\t * @return the state\n\t * @hibernate.property column=\"TAN_STATUS\" not-null=\"true\"\n\t */\n",
    "65158": "\t/**\n\t * Get the survey.\n\t * \n\t * @return the survey\n\t * @hibernate.many-to-one column=\"TAN_SURVEY_ID\" not-null=\"true\"\n\t */\n",
    "65162": "\t/**\n\t * Set the creation date.\n\t * \n\t * @param date the date\n\t */\n",
    "65165": "\t/**\n\t * Set the end date.\n\t * \n\t * @param date the date\n\t */\n",
    "65168": "\t/**\n\t * Set the start date.\n\t * \n\t * @param date the date\n\t */\n",
    "65171": "\t/**\n\t * Set the state.\n\t * \n\t * @param state the tate\n\t */\n",
    "65175": "\t/**\n\t * Set the survey.\n\t * \n\t * @param theSurvey the survey\n\t */\n",
    "65212": "\t/**\n\t * Liefert das Layout des Fragetextes.\n\t * \n\t * @return das Layout\n\t * @hibernate.property\n\t */\n",
    "65220": "\t/**\n\t * Liefert das Layout der Antwortm&ouml;glichkeiten.\n\t * \n\t * @return das Layout\n\t * @hibernate.property\n\t */\n",
    "65353": "    /**\n     * <p>Compares this {@link InternalGroupPrincipal} to the provided group principal\n     * and check if they are equal.</p>\n     * return Whether the {@link InternalGroupPrincipal} are equal.\n     */\n",
    "65370": "    /**\n     * <p>Compares this {@link InternalRolePrincipal} to the provided role principal\n     * and check if they are equal.</p>\n     * return Whether the {@link InternalRolePrincipal} are equal.\n     */\n",
    "65394": "    /**\n     * <p>Compares this {@link InternalUserPrincipal} to the provided user principal\n     * and check if they are equal.</p>\n     * return Whether the {@link InternalUserPrincipal} are equal.\n     */\n",
    "65424": "    /**\n     * <p>Compares this {@link InternalCredential} to the provided credential\n     * and check if they are equal.</p>\n     * return Whether the {@link InternalCredential} are equal.\n     */\n",
    "65427": "    /**\n     * For this implementation, always returns \"/\"\n     */\n",
    "65555": "    /**\n     * Forward the <code>retrieveOptions</code> call to the target\n     * <code>ChainedOption</code> if the <code>refreshProperty</code> property\n     * on the target command is true.\n     * \n     * @param command\n     *            Command object to use when extracting values that the\n     *            <code>ChainedOption</code> depends on.\n     * @param context\n     *            may contain any context that might be interesting for\n     *            retreiving valid options. E.g. a\n     *            <code>HttpServletRequest</code> object can be supplied as\n     *            context for a Strategy to perform filtering based on user\n     *            access.\n     * \n     * @return the result of retrieveOptions on the target ChainedOption if we are\n     *         to forward, an empty <code>LinkedList</code> otherwise.\n     * \n     * @see net.sf.chainedoptions.ChainedOption#retrieveOptions(java.lang.Object, java.lang.Object)\n     */\n",
    "65556": "    /**\n     * Create a <code>LabelValueBean</code> with name and value as the\n     * supplied String.\n     * \n     * @param object\n     *            <code>String</code> to convert.\n     * @return a new <code>LabelValueBean</code>\n     * @throws ClassCastException\n     *             if the supplied <code>object</code> is not a\n     *             <code>String</code>.\n     */\n",
    "65558": "    /**\n     * Do nothing, just return the supplied list.\n     * \n     * @param options\n     *            the list to return.\n     * @param context\n     *            ignored for this implementation.\n     * @return the supplied list, unmodified.\n     */\n",
    "65559": "    /**\n     * Forward the <code>updateValue</code> call to the target\n     * <code>ChainedOption</code if the <code>refreshProperty</code> property on the target command is true.\n     * @param command\n     *            The command object that may be updated.\n     * @param options\n     *            A list of {@link LabelValueBean}objects to choose from.\n     * @param context\n     *            may contain any context that might be interesting for\n     *            retreiving valid options. E.g. a\n     *            <code>HttpServletRequest</code> object can be supplied as\n     *            context for a Strategy to perform filtering based on user\n     *            access.\n     * \n     * @see net.sf.chainedoptions.ChainedOption#updateValue(java.lang.Object, java.util.List, java.lang.Object)\n     */\n",
    "65561": "    /**\n     * Returns the value of the first item in the list.\n     * \n     * @param options\n     *            the list of options.\n     * @param context\n     *            ignored for this implementation.\n     * @return the value of the first item in the List if the List is not empty,\n     *         empty String otherwise.\n     */\n",
    "65569": "    /**\n     * Extra items are items that signify special values, like ANY, EMPTY,\n     * NOCHANGE etc.\n     * \n     * @param extraItems\n     *            The extra items to set as a list of LabelValueBean objects.\n     */\n",
    "65570": "    /**\n     * Forward the call to the target <code>ChainedOption</code>\n     * \n     * @return the result from the target ChainedOption.\n     */\n",
    "65574": "    /**\n     * Set the <code>ChainedOption</code> that this decorator wraps.\n     * \n     * @param chainedOption\n     *            the <code>ChainedOption</code> to forward calls to.\n     */\n",
    "65581": "    /**\n     * Set the name of the property to inspect on the <code>command</code>\n     * object to determine whether {@link #retrieveOptions(Object, Object)}and\n     * {@link #updateValue(Object, List, Object)}should forward the call to the\n     * target <code>ChainedOption</code>.\n     * \n     * @param refreshProperty\n     *            name of the property.\n     */\n",
    "65582": "    /**\n     * Set the options to display in this OptionValue. Needs to be a list of\n     * LabelValueBeans.\n     * \n     * @param options\n     */\n",
    "65584": "    /**\n     * Just sort the options for this implementation.\n     * \n     * @param options\n     *            the options to sort.\n     * @param context\n     *            ignored for this implementation.\n     * \n     * @return a new Sorted list containing the options.\n     */\n",
    "65588": "    /**\n     * Default implementation that loops through the supplied list of beans and\n     * calls {@link #convertBean(Object)}on each one of them.\n     * \n     * @param beans\n     *            list of beans of any kind.\n     * @return a new List containing the corresponding\n     *         <code>LabelValueBean</code> objects.\n     */\n",
    "65589": "    /**\n     * Iterate through the collection of <code>ChainedOption</code> objects and\n     * call <code>retrieveOptions</code> and <code>updateValue</code>. Put\n     * the option Lists in the map with keys retrieved from the ChainedOption\n     * objects.\n     * \n     * @param model\n     *            the map to store option Lists in.\n     * @param command\n     *            the command to operate on.\n     * @param context\n     *            the context.\n     */\n",
    "65590": "    /**\n     * Forward the call to the target <code>ChainedOption</code>.\n     * \n     * @param command\n     *            the <code>command</code> to operate on.\n     * @return the value returned from the target <code>ChainedOption</code>.\n     */\n",
    "65600": "    /**\n     * Default implementation of <code>updateValue</code>, which loops\n     * through the list of available options and compares them to the current\n     * value of the managed attribute in the <code>command</code> object.\n     * <p />\n     * If the selected value is present in the list, no modifications are done\n     * in the <code>command</code>, otherwise a default value is retrieved by\n     * calling {@link ChainedOptionStrategy#getDefaultValue(List, Object)}, and\n     * the <code>commandProperty</code> in the <code>command</code> is set\n     * to this value.\n     * \n     * @param command\n     *            the object which will possibly be updated with a new object.\n     * @param options\n     *            the list of options with which the managed value in the\n     *            <code>command</code> will be compared.\n     * @param context\n     *            a context that will be supplied to the\n     *            <code>ChainedOptionStrategy</code> for selecting an\n     *            appropriate default value.\n     * @see ChainedOptionStrategy#getDefaultValue(List, Object)\n     */\n",
    "65607": "    /**\n     * Utility method that matches the value of the given <code>bean</code>\n     * with the specified <code>value</code>.\n     * \n     * @param bean\n     *            The {@link LabelValueBean}to match the value against.\n     * @param value\n     *            The value to match.\n     * @return <code>true</code> if the values match.\n     */\n",
    "65615": "    /**\n     * Template method that subclasses may implement to ensure proper\n     * initialization. This method is called after all properties has been set.\n     */\n",
    "65625": "    /**\n     * Utility method that sets a named property on a given object.\n     * \n     * @param bean\n     *            The object to set the property on.\n     * @param propertyName\n     *            The name of the property to set.\n     * @param value\n     *            The value that the property will be set to.\n     */\n",
    "65640": "    /**\n     * Set the property on the target <code>command</code> object managed by\n     * this instance.\n     * \n     * @param commandProperty\n     *            The commandProperty to set.\n     */\n",
    "65653": "    /**\n     * Set the key that should identify the option list managed by this\n     * instance.\n     * \n     * @param optionsKey\n     *            The optionsKey to set.\n     */\n",
    "65665": "    /**\n     * Set the <code>BeanConverter</code> that should be used for translating\n     * to LabelValueBeans.\n     * \n     * @param converter\n     *            The converter to set.\n     */\n",
    "65667": "    /**\n     * Tests that matches is called with an object contained in the supplied\n     * list, and that when matches returns <code>true</code>, no\n     * modifications are made to the command.\n     */\n",
    "65674": "    /**\n     * Override this if the implementation has several strategies.\n     * \n     * @return this implementation returns the <code>defaultStrategy</code>.\n     */\n",
    "65683": "    /**\n     * Set the default strategy to use.\n     * \n     * @param defaultStrategy\n     *            the default strategy to set.\n     */\n",
    "65802": "    /**\n     * At startup create and show the main frame of the application.\n     */\n",
    "65803": "    /**\n     * This method is to initialize the specified window by injecting resources.\n     * Windows shown in our application come fully initialized from the GUI\n     * builder, so this additional configuration is not needed.\n     */\n",
    "65809": "    /**\n     * Returns project's database.\n     * @return The database of the project.\n     * @see com.jb.project.Database\n     */\n",
    "65811": "    /**\n     * Sets project's database.\n     * @param database The database of the project.\n     * @see com.jb.project.Database\n     */\n",
    "65812": "    /**\n     * Returns the table object (among the choosen tables) referenced by name.\n     * @param name The table name as a String.\n     * @return the table object, or null if no table named name is found in\n     * choosen tables list.\n     * @see com.jb.project.Table\n     * @see com.jb.project.Database\n     */\n",
    "65813": "    /**\n     * There are the so called head-lines relationship.\n     * This can be used in code generation, as in JSF page generation.\n     * given a 1 to many relationship between two tables, instead of\n     * visually implement it by a menu (combo, etc) in the many side,\n     * This is meant to be visually represented by a set of data from\n     * a object (head) followed by a dataTable of objects (lines).\n     * @param table\n     * @return the table object (among choosen tables) with name equals\n     * to registered head for the HLS relationship. Returns null case\n     * thre is no head registered of if there is no table with the name.\n     * @see com.jb.project.Table\n     * @see com.jb.project.Database\n     */\n",
    "65815": "    /**\n     * There are the so called head-lines relationship.\n     * This can be used in code generation, as in JSF page generation.\n     * given a 1 to many relationship between two tables, instead of\n     * visually implement it by a menu (combo, etc) in the many side,\n     * This is meant to be visually represented by a set of data from\n     * a object (head) followed by a dataTable of objects (lines).\n     * @param table\n     * @return the table object (among choosen tables) with name equals\n     * to registered lines for the HLS relationship. Returns null case\n     * there is no lines table registered of if there is no table\n     * with that name.\n     * @see com.jb.project.Table\n     * @see com.jb.project.Database\n     */\n",
    "65817": "    /**\n     * Returns the object table with name equals to the foreign table name\n     * registered in a table column object field fkTable.\n     * @param column the column object of the table that is a foreign key.\n     * @return the table object with name equals to the foreign table name,\n     * or null if not found among the choosen tables of the project database.\n     * @see com.jb.project.Column\n     * @see com.jb.project.Table\n     * @see com.jb.project.Database\n     */\n",
    "65844": "    /**\n     * Get the value of securityPath\n     *\n     * @return the value of securityPath\n     */\n",
    "65845": "    /**\n     * Set the value of securityPath\n     *\n     * @param securityPath new value of securityPath\n     */\n",
    "65874": "    /**\n     * Returns the area that is occupied by the given cell. Does not\n     * take into account any cell span.\n     * @param col\n     * @param row\n     * @return Rectangle\n     */\n",
    "65967": "    /**\n     * Get the value of tableName\n     *\n     * @return the value of tableName\n     */\n",
    "65968": "    /**\n     * Get the value of menuVJB\n     *\n     * @return the value of menuVJB\n     */\n",
    "65969": "    /**\n     * Set the value of tableName\n     *\n     * @param tableName new value of tableName\n     */\n",
    "65970": "    /**\n     * Set the value of menuVJB\n     *\n     * @param menuVJB new value of menuVJB\n     */\n",
    "65975": "    /**\n     * Get the value of titleOfMenuOfItemsVJB\n     *\n     * @return the value of titleOfMenuOfItemsVJB\n     */\n",
    "65977": "    /**\n     * Set the value of titleOfMenuOfItemsVJB\n     *\n     * @param titleOfMenuOfItemsVJB new value of titleOfMenuOfItemsVJB\n     */\n",
    "65978": "    /**\n     * Get the value of menuOfItemsSetted\n     *\n     * @return the value of menuOfItemsSetted\n     */\n",
    "65980": "    /**\n     * Set the value of menuOfItemsSetted\n     *\n     * @param menuOfItemsSetted new value of menuOfItemsSetted\n     */\n",
    "65981": "    /**\n     * Get the value of menuBarVJB\n     *\n     * @return the value of menuBarVJB\n     */\n",
    "65983": "    /**\n     * Set the value of menuBarVJB\n     *\n     * @param menuBarVJB new value of menuBarVJB\n     */\n",
    "65987": "    /**\n     * Get the value of addNewMenuBar\n     *\n     * @return the value of addNewMenuBar\n     */\n",
    "65990": "    /**\n     * Set the value of addNewMenuBar\n     *\n     * @param addNewMenuBar new value of addNewMenuBar\n     */\n",
    "66004": "    /**\n     * Get the value of selectedTable\n     *\n     * @return the value of selectedTable\n     */\n",
    "66005": "    /**\n     * Get the value of menuOfBarVJB\n     *\n     * @return the value of menuOfBarVJB\n     */\n",
    "66006": "    /**\n     * Set the value of selectedTable\n     *\n     * @param selectedTable new value of selectedTable\n     */\n",
    "66007": "    /**\n     * Set the value of menuOfBarVJB\n     *\n     * @param menuOfBarVJB new value of menuOfBarVJB\n     */\n",
    "66008": "    /**\n     * Get the value of targetClassSelected\n     *\n     * @return the value of targetClassSelected\n     */\n",
    "66010": "    /**\n     * Set the value of targetClassSelected\n     *\n     * @param targetClassSelected new value of targetClassSelected\n     */\n",
    "66022": "    /**\n     * Get the value of menuTitle\n     *\n     * @return the value of menuTitle\n     */\n",
    "66026": "    /**\n     * Set the value of menuTitle\n     *\n     * @param menuTitle new value of menuTitle\n     */\n",
    "66028": "    /**\n     * Get the value of menuVJBType\n     *\n     * @return the value of menuVJBType\n     */\n",
    "66030": "    /**\n     * Set the value of menuVJBType\n     *\n     * @param menuVJBType new value of menuVJBType\n     */\n",
    "66031": "    /**\n     * Get the value of createNewMenuBar\n     *\n     * @return the value of createNewMenuBar\n     */\n",
    "66032": "    /**\n     * Get the value of selected\n     *\n     * @return the value of selected\n     */\n",
    "66033": "    /**\n     * Set the value of createNewMenuBar\n     *\n     * @param createNewMenuBar new value of createNewMenuBar\n     */\n",
    "66035": "    /**\n     * Set the value of selected\n     *\n     * @param selected new value of selected\n     */\n",
    "66041": "    /**\n     * Get the value of menuBarVJBName\n     *\n     * @return the value of menuBarVJBName\n     */\n",
    "66042": "    /**\n     * Set the value of menuBarVJBName\n     *\n     * @param menuBarVJBName new value of menuBarVJBName\n     */\n",
    "66048": "    /**\n     * Set the value of menuItemVJBList\n     *\n     * @param menuItemVJBList new value of menuItemVJBList\n     */\n",
    "66053": "    /**\n     * Set the value of menuVJBList\n     *\n     * @param menuVJBList new value of menuVJBList\n     */\n",
    "66063": "    /**\n     * Set the value of menusBarVJB\n     *\n     * @param menusBarVJB new value of menusBarVJB\n     */\n",
    "66132": "    /** Convenience method to test whether drop location is valid\n    @param destination The destination path \n    @param dropper The path for the node to be dropped\n    @return null if no problems, otherwise an explanation\n     */\n",
    "66171": "    /**\n     * Redraws the the cells only in the given area.\n     * \n     * @param cellsToRedraw\n     *            Defines the area to redraw. The rectangles elements are not\n     *            pixels but cell numbers.\n     */\n",
    "66199": "    /**\n     * Call when a manual redraw on a cell should be performed.\n     * In case headers should be updated to reflect a focus change, this is performed.\n     * @param gc\n     * @param col\n     * @param row\n     */\n",
    "66227": "    /**\n     * Get the value of dateMask\n     *\n     * @return the value of dateMask\n     */\n",
    "66229": "    /**\n     * Set the value of dateMask\n     *\n     * @param dateMask new value of dateMask\n     */\n",
    "66231": "    /**\n     * Interface method to update the content of a cell.<p>\n     * Don't forget to map the row index if a sorted model is used.\n     * @param col The column index\n     * @param row The row index.\n     * @see KTableSortedModel#mapRowIndexToTable(int)\n     */\n",
    "66237": "    /**\n     * Get the value of selectedPanel\n     *\n     * @return the value of selectedPanel\n     */\n",
    "66238": "    /**\n     * Set the value of selectedPanel\n     *\n     * @param selectedPanel new value of selectedPanel\n     */\n",
    "66270": "    /**\n     * At startup create and show the main frame of the application.\n     */\n",
    "66273": "    /**\n     * Check if any table row is selected.\n     *\n     * @return true if a row is selected, otherwise false.\n     */\n",
    "66284": "    /**\n     * Get the value of saveFired\n     *\n     * @return the value of saveFired\n     */\n",
    "66285": "    /**\n     * Set the value of saveFired\n     *\n     * @param saveFired new value of saveFired\n     */\n",
    "66286": "    /**\n     * Get the value of currentRecord\n     *\n     * @return the value of currentRecord\n     */\n",
    "66288": "    /**\n     * Set the value of currentRecord\n     *\n     * @param currentRecord new value of currentRecord\n     */\n",
    "66297": "    /**\n     * Check if any table row is selected.\n     *\n     * @return true if a row is selected, otherwise false.\n     */\n",
    "66300": "    /**\n     * Sets the default cursor to the given cursor. This instance is saved\n     * internally and displayed whenever no linecursor or resizecursor is shown.\n     * <p>\n     * The difference to setCursor is that this cursor will be preserved over\n     * action cursor changes.\n     * \n     * @param cursor\n     *            The cursor to use, or <code>null</code> if the OS default\n     *            cursor should be used.\n     * @param size_below_hotspot The number of pixels that are needed to paint the \n     * \t      cursor below and right of the cursor hotspot (that is the actual location the cursor\n     *        is pointing to).<p>\n     *        NOTE that this is just there to allow better positioning of tooltips.\n     * \t      Currently SWT does not provide an API to get the size of the cursor. So\n     *        these values are taken to calculate the position of the tooltip. The\n     *        the tooltip is placed pt.x pixels left and pt.y pixels below the mouse location.<br>\n     *        If you don't know the size of the cursor (for example you use a default one), set \n     *        <code>null</code> or <code>new Point(-1, -1)</code>. \n     */\n",
    "66305": "    /**\n     * Get the value of currentRecord\n     *\n     * @return the value of currentRecord\n     */\n",
    "66306": "    /**\n     * Set the value of currentRecord\n     *\n     * @param currentRecord new value of currentRecord\n     */\n",
    "66323": "    /**\n     * Get the value of currentRecord\n     *\n     * @return the value of currentRecord\n     */\n",
    "66324": "    /**\n     * Set the value of currentRecord\n     *\n     * @param currentRecord new value of currentRecord\n     */\n",
    "66330": "    /**\n     * Check if any table row is selected.\n     *\n     * @return true if a row is selected, otherwise false.\n     */\n",
    "66341": "    /**\n     * Get the value of currentRecord\n     *\n     * @return the value of currentRecord\n     */\n",
    "66342": "    /**\n     * Set the value of currentRecord\n     *\n     * @param currentRecord new value of currentRecord\n     */\n",
    "66379": "    /**\n     * Check if any table row is selected.\n     *\n     * @return true if a row is selected, otherwise false.\n     */\n",
    "66438": "    /**\n     * Check if any table row is selected.\n     *\n     * @return true if a row is selected, otherwise false.\n     */\n",
    "66452": "    /**\n     * Get the value of desconto\n     *\n     * @return the value of desconto\n     */\n",
    "66453": "    /**\n     * Set the value of desconto\n     *\n     * @param desconto new value of desconto\n     */\n",
    "66455": "    /**\n     * Get the value of diaria\n     *\n     * @return the value of diaria\n     */\n",
    "66456": "    /**\n     * Set the value of diaria\n     *\n     * @param diaria new value of diaria\n     */\n",
    "66459": "    /**\n     * Get the value of fim\n     *\n     * @return the value of fim\n     */\n",
    "66461": "    /**\n     * Set the value of fim\n     *\n     * @param fim new value of fim\n     */\n",
    "66462": "    /**\n     * Get the value of inicio\n     *\n     * @return the value of inicio\n     */\n",
    "66464": "    /**\n     * Set the value of inicio\n     *\n     * @param inicio new value of inicio\n     */\n",
    "66465": "    /**\n     * Get the value of animal\n     *\n     * @return the value of animal\n     */\n",
    "66467": "    /**\n     * Set the value of animal\n     *\n     * @param animal new value of animal\n     */\n",
    "66477": "    /**\n     * Checks for the event location in table coordinates within the region covered\n     * by the columns beginning by startCol and ending by endCol.\n     * @param span Set to true if for spanning cells we just want to have the left-upper-most cell.\n     */\n",
    "66478": "    /**\n     * Set the value of players\n     *\n     * @param players new value of players\n     */\n",
    "66535": "    /**\n     * Get the value of type\n     *\n     * @return the value of type\n     */\n",
    "66537": "    /**\n     * Set the value of type\n     *\n     * @param type new value of type\n     */\n",
    "66570": "    /**\n     * Get the value of playerName\n     *\n     * @return the value of playerName\n     */\n",
    "66571": "    /**\n     * Set the value of playerName\n     *\n     * @param playerName new value of playerName\n     */\n",
    "66572": "    /**\n     * Get the value of serverPort\n     *\n     * @return the value of serverPort\n     */\n",
    "66573": "    /**\n     * Set the value of serverPort\n     *\n     * @param serverPort new value of serverPort\n     */\n",
    "66575": "    /**\n     * Get the value of serverIP\n     *\n     * @return the value of serverIP\n     */\n",
    "66577": "    /**\n     * Set the value of serverIP\n     *\n     * @param serverIP new value of serverIP\n     */\n",
    "66585": "    /**\n     * Get the value of keyframeController\n     *\n     * @return the value of keyframeController\n     */\n",
    "66587": "    /**\n     * Set the value of keyframeController\n     *\n     * @param keyframeController new value of keyframeController\n     */\n",
    "66588": "    /**\n     * Get the value of node\n     *\n     * @return the value of node\n     */\n",
    "66590": "    /**\n     * Set the value of node\n     *\n     * @param node new value of node\n     */\n",
    "66607": "    /**\n     * Set the value of modelAnimationsList\n     *\n     * @param modelAnimationsList new value of modelAnimationsList\n     */\n",
    "66609": "    /**\n     * Get the value of baseAnimation\n     *\n     * @return the value of baseAnimation\n     */\n",
    "66611": "    /**\n     * Set the value of baseAnimation\n     *\n     * @param baseAnimation new value of baseAnimation\n     */\n",
    "66612": "    /**\n     * Get the value of runAnimation\n     *\n     * @return the value of runAnimation\n     */\n",
    "66614": "    /**\n     * Set the value of runAnimation\n     *\n     * @param runAnimation new value of runAnimation\n     */\n",
    "66632": "    /**\n     * create our custom input handler.\n     *\n     */\n",
    "66638": "    /**\n     * Get the value of beginFrame\n     *\n     * @return the value of beginFrame\n     */\n",
    "66639": "    /**\n     * Set the value of beginFrame\n     *\n     * @param beginFrame new value of beginFrame\n     */\n",
    "66640": "    /**\n     * Get the value of endFrame\n     *\n     * @return the value of endFrame\n     */\n",
    "66641": "    /**\n     * Set the value of endFrame\n     *\n     * @param endFrame new value of endFrame\n     */\n",
    "66642": "    /**\n     * Get the value of animating\n     *\n     * @return the value of animating\n     */\n",
    "66643": "    /**\n     * Set the value of animating\n     *\n     * @param animating new value of animating\n     */\n",
    "66644": "    /**\n     * Set the value of keys\n     *\n     * @param keys new value of keys\n     */\n",
    "66647": "    /**\n     * True if the text is to be displayed during rendering.\n     *\n     * @return True if the text should be displayed.\n     */\n",
    "66649": "    /**\n     * Sets whether we should cull the text during rendering.\n     *\n     * @param enabled True if the text should be displayed.\n     */\n",
    "66650": "    /**\n     * Sets the colour of the text.\n     *\n     * @param color The colour of the text.\n     */\n",
    "66651": "    /**\n     * Sets the offset from the target to display text at.\n     *\n     * @param offset The offset from the target to display text.\n     */\n",
    "66652": "    /**\n     * Sets the text to display.\n     *\n     * @param text The text string to display.\n     */\n",
    "66656": "    /**\n     * Sets the horizontal alignment of text to the target.\n     *\n     * @param align The horizontal alignment of text.\n     */\n",
    "66658": "    /**\n     * Sets the vertical alignment of text to the target.\n     *\n     * @param valign The vertical alignment of text.\n     */\n",
    "66661": "    /**\n     * Get the value of editorOutcomeSave\n     *\n     * @return the value of editorOutcomeSave\n     */\n",
    "66663": "    /**\n     * Set the value of editorOutcomeSave\n     *\n     * @param editorOutcomeSave new value of editorOutcomeSave\n     */\n",
    "66720": "    /**\n     * Sets the global tooltip for the whole table.<br>\n     * Note that this is only shown if the cell has no tooltip set.\n     * For tooltips on cell level (that overwrite this value), look\n     * for the method <code>getTooltipText()</code>.\n     * @see de.kupzog.ktable.KTableModel#getTooltipAt(int, int)\n     * @see de.kupzog.ktable.KTable#getToolTipText()\n     * @param tooltip The global tooltip for the table.\n     */\n",
    "66734": "    /**\n     * Returns the global tooltip for the whole table.<br>\n     * Note that this is not shown when there is a non-empty tooltip\n     * for the cell.\n     * @see de.kupzog.ktable.KTable#setToolTipText(String)\n     * @see de.kupzog.ktable.KTableModel#getTooltipAt(int, int)\n     */\n",
    "66811": "    /**\n     * This method activated the cell editor on the current focus cell, if the\n     * table model allows cell editing for this cell.\n     */\n",
    "66843": "    /**\n     * Scrolls the table so that the given cell is top left.\n     * @param col The column index.\n     * @param row The row index.\n     */\n",
    "66897": "    /**\n     * Adds a listener that is notified when a cell is selected.\n     * \n     * This can happen either by a click on the cell or by arrow keys. Note that\n     * the listener is not called for each cell that the user selects in one\n     * action using Shift+Click. To get all these cells use the listener and\n     * getCellSelecion() or getRowSelection().\n     * \n     * @param listener\n     */\n",
    "66909": "    /**\n     * Adds a listener that is notified when a cell is resized.\n     * This happens when the mouse button is released after a resizing.\n     * @param listener\n     */\n",
    "66949": "    /**\n     * Adds a listener that is notified when a cell is doubleClicked.\n     *\n     * @param listener\n     */\n",
    "66967": "    /**\n     * Removes the listener if present. \n     * Returns true, if found and removed from the list of listeners.\n     */\n",
    "66991": "    /**\n     * Removes the listener if present. \n     * Returns true, if found and removed from the list of listeners.\n     */\n",
    "67028": "    /**\n     * Removes the listener if present.\n     * Returns true, if found and removed from the list of listeners.\n     */\n",
    "67038": "  /** first record is 1 */\n",
    "67043": "  /** First column is 1 */\n",
    "67044": "    /**\n     * Returns true if in \"Full Selection Mode\". \n     * Mode is determined by style bits in the constructor or \n     * by <code>setStyle()</code>. (style: SWT.FULL_SELECTION)\n     * @return boolean\n     */\n",
    "67056": "    /**\n     * Returns true if in \"Multi Selection Mode\".\n     * Mode is determined by style bits in the constructor (SWT.MULTI)\n     * or by <code>getStyle()</code>.\n     */\n",
    "67066": "  /** there is no way to know if numeric cells with generic format\n   * are reals or integers... this method returns true if the first\n   * 100 rows do not include reals (or dates) */ \n",
    "67081": "  /** Parse next element.\n   * @return the element read, null otherwise\n   */\n",
    "67085": "  /** Initialise parser and loads document header */\n",
    "67140": "  /** In a string context, a TableResults returns the first\n   * column of the first row of its first result */\n",
    "67178": "  /** needed by TableResult.setPrimaryKeys \n   * @return index of label column in table */\n",
    "67180": "    /**\n     * Clears the current selection (in all selection modes).\n     */\n",
    "67193": "    /**\n     * Works in both modes: Cell and Row Selection.\n     * Has no redraw functionality!<p>\n     * \n     * Returns true, if added to selection.\n     */\n",
    "67203": "    /**\n     * Works in both modes: Cell and Row Selection.\n     * Has no redraw functionality!\n     */\n",
    "67213": "    /**\n     * Selects the given cell. If scroll is true, \n     * it scrolls to show this cell if neccessary.\n     * In Row Selection Mode, the given row is selected\n     * and a scroll to the given column is done.\n     * Does nothing if the cell does not exist. <p>\n     * Note that if you use a sorted model, don't forget to map the row index!\n     * @param col\n     * @param row\n     * @param scroll\n     */\n",
    "67216": "  /** needed by TableResult.setPrimaryKeys */\n",
    "67233": "    /**\n     * Returns true, if the given cell is selected.\n     * Works also in Row Selection Mode.\n     * @param col the column index.\n     * @param row the row index.\n     * @return boolean Returns true if the given cell is selected.\n     */\n",
    "67241": "    /**\n     * Returns true, if the given row is selected.\n     * Returns always false if not in Row Selection Mode!<p>\n     * If you use a sorted model, don't forget to map the row index first.\n     * @param row The row index as seen by the KTable.\n     * @return boolean returns true if the row is selected at the moment.\n     */\n",
    "67255": "  /** Access an object's field */\n",
    "67321": "    /**\n     * Internal helper method to determine wether the cell at the \n     * given position is to be highlighted because it is a header cell\n     * that corresponds to a selected cell.\n     * @param col The column index\n     * @param row The row index\n     * @return true if the cell should be highlighted.\n     */\n",
    "67364": "    /**\n     * Sets the table model.\n     * The table model provides data to the table.\n     * @see de.kupzog.ktable.KTableModel for more information.\n     * @param model The KTableModel instance that provides the table with all \n     * necessary data!\n     */\n",
    "67396": "    /**\n     * returns the current table model\n     * @return KTableModel \n     */\n",
    "67402": "  /** general typecast method */\n",
    "67404": "  /** return the object class; some scalars return the \n   * primitive class (eg Integer.TYPE, rather than Integer.getClass() */\n",
    "67405": "  /** Access an object's field */\n",
    "67409": "  /** Subclasses may override this method to add their own fields */\n",
    "67432": "  /** Access an object's field */\n",
    "67441": "    /**\n     * Helper method to quickly get the number of fixed columns.\n     * @return\n     */\n",
    "67494": "  /** This class can't reset its position, but subclasses may */\n",
    "67526": "    /**\n     * Helper method to quickly get the number of fixed rows.\n     * @return\n     */\n",
    "67554": "  /** Creates highlights around all occurrences of pattern in textComp \n   * code inspired from The Java Developers Almanac 1.4 */\n",
    "67555": "  /** Removes only our private highlights \n   * code inspired from The Java Developers Almanac 1.4 */\n",
    "67572": "  /** checks if file needs to be saved and aborts if user\n   * asks to save it and then cancels */\n",
    "67606": "  /** If invoked through a {@link net.sourceforge.dsql.gui.DSQLInterface}, \n   * add this value in a tab */\n",
    "67639": "  /** Add an entry in the connection vector and returns the connection object \n  */\n",
    "67646": "  /**\n   * Instruct the thread to stop masking.\n   */\n",
    "67647": "    /**\n     * Returns true, if at least one of the two enumerations has more\n     * elements.\n     */\n",
    "67648": "    /**\n     * Returns the next element.  This returns the next element of the\n     * first enumeration, if it has more elements, otherwise the next\n     * element of the second enumeration.\n     */\n",
    "67669": "  /** operators priority: * /, + - ||, = lt gt, AND OR */\n",
    "67718": "  /** Adds a variable to the current context */\n",
    "67719": "  /** Sets a variable: in the closest context if it exists, or adds\n   * otherwise */\n",
    "67810": "  /** This returns only the static text; to evaluate\n   * DSQL code or variables, call executeXML().getXMLText() */\n",
    "67862": "  /** called by EditArea */\n",
    "67892": "  /** Execute a Node\n   * @throws ExecuteException If an error occurs during execution,\n   * the exception is set with this Node so that a line number\n   * can be displayed along with the error message\n   */\n",
    "67954": "  /** This object is always the result of an execution; so do nothing... */\n",
    "68115": "   /**\n    * Searches dataset for an identical food. \n    * @param f a food to search for\n    * @return the identical food if found\n    */\n",
    "68207": "   /**\n    * Cap the string at a max length,\n    * @return\n    */\n",
    "68213": "   /**\n    * Creates the pre-defined biomarkers and flushes to disk\n    */\n",
    "68215": "   /**\n    * Creates a dataset, consisting of two series of monthly data.\n    *\n    * @return The dataset.\n    */\n",
    "68229": "   /**\n    * Compares two metrics by date for sorting.\n    */\n",
    "68297": "   /**\n    * Add the nutrients in the given table to our total\n    * \n    * @param toAdd\n    *            the nutrients ratios to add\n    * @param weight\n    *            multiplier for the amount in the added nutrients\n    */\n",
    "68319": "    /**\n     * Update the existing food information\n     */\n",
    "68342": "   /**\n    * Find a matching measure by name in this food\n    * \n    * @param measureName\n    */\n",
    "68372": "   /**\n    * Get a textual description of the food.\n    * \n    * @return this Food's description.\n    */\n",
    "68373": "   /**\n    * Set the measure to display weights for a particular food.\n    */\n",
    "68375": "   /**\n    * Update this Food's description.  The <code>Food</code> \n    * implementation must be associated with a writeable datasource.\n    * \n    * @param text The new description.\n    */\n",
    "68376": "   /**\n    * Set the weight to display\n    * @param w the type of measure\n    * @param mult the multiplier for that measure\n    */\n",
    "68377": "   /**\n    * Retrieve a List of <code>Measure</code>s for this Food.\n    * \n    * @return all <code>Measure</code>s associated with this Food.\n    public */\n",
    "68378": "   /**\n    * Update the widget after a weight change has occurred.\n    * Called when weight menu is changed or edited\n    */\n",
    "68380": "   /**\n    * Get the multiplier for the current weight and mult settings.\n    * @return a multiple of the standard nutrient value (x per 100g)\n    */\n",
    "68381": "   /**\n    * Replace the list of <code>Measure</code>s for this food.  The <code>Food</code> \n    * implementation must be associated with a writeable datasource.\n    * \n    * @param measures A list of <code>Measure</code> objects that will completely\n    * replace the ones currently in existence for this <code>Food</code>.\n    */\n",
    "68382": "   /**\n    * Get the number of grams in this measure\n    * @return the number of grams in this state\n    */\n",
    "68383": "   /**\n    * See if the food has a value set for the given nutrient\n    * \n    * @param ni the <code>NutrientInfo</code> to look up.\n    * @return true if a value exists in this food\n    */\n",
    "68386": "   /**\n    * Get the amount of a nutrient provided by this Food.\n    * \n    * @param ni the <code>NutrientInfo</code> to look up.\n    * @return the amount of the requested nutrient per unit.\n    */\n",
    "68388": "   /**\n    * Set the amount of a nutrient provided by this Food.  The <code>Food</code> \n    * implementation must be associated with a writeable datasource.\n    * \n    * @param ni the Nutrient to modify.\n    * @param val the amount of the Nutrient per unit.\n    */\n",
    "68401": "   /**\n    * Add a list of servings to the daily listing\n    * Ugly because this table and model listens to the parent, which is \n    * backwards from normal patterns...\n    * @param list\n    */\n",
    "68402": "   /**\n    * Called if the weight menu state is changed\n    */\n",
    "68403": "   /**\n    * Called when the text field is set\n    */\n",
    "68410": "   /**\n    * Retrieve a key for this food uniquely identifying both its datasource\n    * and its own unique ID in the DS.  The general contract of this method is that\n    * if f1.getSourceUID().equals(f2.getSourceUID()) then f1 and f2 both come from\n    * the same DS, and refer to the same item in that DS.\n    * @return A UID for this food.\n    */\n",
    "68411": "   /**\n    * Called when the text field is edited\n    */\n",
    "68413": "   /**\n    * Directly set the sourceUID of a food to that of another one.\n    * @param uid The <code>Food</code> whose sourceUID will be used.\n    */\n",
    "68415": "   /**\n    * If linked, changing a weight will update the multiplier\n    * to keep the grams constant. Otherwise, the multiplier is left unchanged.\n    * \n    * @return true if the multiplier is linked to the weight\n    */\n",
    "68416": "   /**\n    * Set the comment on this food.  <code>null</code> values will result in the comment being set\n    * to the empty string.\n    * \n    * @param comment The comment.\n    */\n",
    "68418": "   /**\n    * If linked, changing a weight will update the multiplier\n    * to keep the grams constant. Otherwise, the multiplier \n    * is left unchanged.\n    */\n",
    "68419": "   /**\n    * Get the commment on this food.  This value is guaranteed not to be <code>null</code>.\n    * \n    * @return the comment.\n    */\n",
    "68433": "   /**\n    * See if the food data is identical \n    * \n    * @param f to compare against\n    * @return true if the two foods contain the same food data (description, nutrients, and measures)\n    */\n",
    "68453": "   /**\n    * Allows custom rendering for a row and column. Can just return c, if no\n    * changes to default are desired.\n    * @param c the component used for rendering the cell\n    * @param row the row to render\n    * @param col the column to render\n    * @return a custom rendering component\n    */\n",
    "68457": "   /**\n    * Set the comboBox table cell editor to the currently\n    * selected measure list\n    * @param serving the selected serving\n    */\n",
    "68461": "   /**\n    * Copy changes to original and save.\n    */\n",
    "68472": "    /**\n     * Get the standard amount of this measure. Example: 1.0 Servings, 0.5 Cups,\n     * 2.0 Tablespoons\n     * \n     * @return the multiplier for this measure\n     */\n",
    "68474": "    /**\n     * Set the standard amount of this measure\n     * \n     * @param amount\n     *            a multiplier\n     */\n",
    "68477": "    /**\n     * Set the english name of this measure type\n     */\n",
    "68478": "    /**\n     * Get the number of grams in this measure\n     * \n     * @return the number of grams in the measure\n     */\n",
    "68480": "    /**\n     * Set the number of grams in this measure\n     */\n",
    "68523": "   /**\n    * Does a very simple print-out of the recipe.\n    */\n",
    "68552": "   /**\n    * Walk through all of the servings and tally up the \n    * nutrient values for the entire meal.\n    */\n",
    "68556": "   /**\n    * Get the nutrient amount by walking through all of the servings\n    * and calculating the total amount.\n    */\n",
    "68563": "   /**\n    * Copy changes to original and save.\n    */\n",
    "68564": "   /**\n    * Check if the data available for this nutrient is generally incomplete.\n    */\n",
    "68601": "   /**\n    * Get the last user that used CRON-o-meter.\n    */\n",
    "68615": "   /**\n    * Add a new user to Cronometer via the UI.\n    * @param parentWindow allow a popup to set the user settings\n    * @return the user that was just added.\n    */\n",
    "68621": "   /**\n    * Add a new user to Cronometer\n    * @param user the user to add.\n    */\n",
    "68626": "   /**\n    * Find the User with the given username\n    * @param username the name of the user\n    * @return User the Object that relates to the given name.  Null if the User is not found.\n    */\n",
    "68631": "   /**\n    * Delete a user from Cronometer.\n    * @param user the user Object to delete.\n    */\n",
    "68635": "   /**\n    * Delete all the settings file related to this user.\n    * @param user\n    */\n",
    "68641": "   /**\n    * Delete the user with the given <code>username</code>\n    * @param username the name of the user\n    * @return true if the delete was succesful\n    */\n",
    "68649": "   /**\n    * Search for a user and set that user as the current user.  \n    * @param username the name of the user\n    * @return true if the operation was successful\n    */\n",
    "68660": "   /**\n    * A rough estimate of the user's age, close enough for our purposes.\n    */\n",
    "68746": "   /** \n    * Delete the user selected in the userListModel\n    * @param row the row item to delete\n    */\n",
    "68754": "   /**\n    * Select the default user in the list. This is not the current user.\n    */\n",
    "68759": "   /**\n    * Select the current user in the list.\n    *\n    */\n",
    "68774": "   /**\n    * Look through all nutrients and see what overall percentage of the targets\n    * are completed.\n    */\n",
    "68851": "   /**\n    * Initialise the User specific data sources.\n    */\n",
    "68906": "   /**\n    * Ensure all data is saved to backing stores.\n    */\n",
    "68918": "   /**\n    * Look through all nutrients and see what overall percentage of the targets\n    * are completed.\n    */\n",
    "69072": "   /** \n    * Invoked when the text area loses the keyboard focus.\n    * This will not be invoked when the user clicks on the next/previous day button.\n    */\n",
    "69106": "   /**\n    * Allows custom rendering for a row and column. Can just return c, if no\n    * changes to default are desired.\n    * @param c the component used for rendering the cell\n    * @param row the row to render\n    * @param col the column to render\n    * @return a custom rendering component\n    */\n",
    "69119": "   /**\n    * Depending on the selected source, a different database will be searched\n    */\n",
    "69156": "   /**\n    * Show window normally\n    */\n",
    "69168": "   /**\n    * Set the current date to today\n    */\n",
    "69174": "   /**\n    * Copies the foods from the previous day into this day.\n    */\n",
    "69192": "      /**\n       * Allows custom rendering for a row and column. Can just return c, if no\n       * changes to default are desired.\n       * @param c the component used for rendering the cell\n       * @param row the row to render\n       * @param col the column to render\n       * @return a custom rendering component\n       */\n",
    "69198": "   /**\n    * Update the existing food information\n    */\n",
    "69207": "   /**\n    * Add a list of servings to the daily listing\n    * Ugly because this table and model listens to the parent, which is \n    * backwards from normal patterns...\n    * @param list\n    */\n",
    "69234": "   /**\n    * Set the current date being displayed by this daily summary\n    */\n",
    "69318": "   /** \n    * Reload the history file.\n    *\n    */\n",
    "69347": "   /**\n    * Allows custom rendering for a row and column. Can just return c, if no\n    * changes to default are desired.\n    * @param c the component used for rendering the cell\n    * @param row the row to render\n    * @param col the column to render\n    * @return a custom rendering component\n    */\n",
    "69454": "   /**\n    * Add a list of entries to the daily listing\n    * Ugly because this table and model listens to the parent, which is \n    * backwards from normal patterns...\n    * @param list\n    */\n",
    "69485": "    /**\n     * Removes the specified component from the layout.\n     * @param comp the component to be removed\n     */\n",
    "69504": "    /** \n     * Calculates the minimum size dimensions for the specified \n     * panel given the components in the specified parent container.\n     * @param parent the component to be laid out\n     * @see #preferredLayoutSize\n     */\n",
    "69515": "    /**\n     * Adds the specified component to the layout, using the specified\n     * constraint object.\n     * @param comp the component to be added\n     * @param constraints  where/how the component is added to the layout.\n     */\n",
    "69519": "    /** \n     * Returns the maximum size of this component.\n     * @see java.awt.Component#getMinimumSize()\n     * @see java.awt.Component#getPreferredSize()\n     * @see LayoutManager\n     */\n",
    "69523": "    /**\n     * Returns the alignment along the x axis.  This specifies how\n     * the component would like to be aligned relative to other \n     * components.  The value should be a number between 0 and 1\n     * where 0 represents alignment along the origin, 1 is aligned\n     * the furthest away from the origin, 0.5 is centered, etc.\n     */\n",
    "69527": "    /**\n     * Returns the alignment along the y axis.  This specifies how\n     * the component would like to be aligned relative to other \n     * components.  The value should be a number between 0 and 1\n     * where 0 represents alignment along the origin, 1 is aligned\n     * the furthest away from the origin, 0.5 is centered, etc.\n     */\n",
    "69530": "    /**\n     * Invalidates the layout, indicating that if the layout manager\n     * has cached information it should be discarded.\n     */\n",
    "69551": "   /**\n    * Allows custom rendering for a row and column. Can just return c, if no\n    * changes to default are desired.\n    * @param c the component used for rendering the cell\n    * @param row the row to render\n    * @param col the column to render\n    * @return a custom rendering component\n    */\n",
    "69578": "   /**\n    * Show window normally\n    */\n",
    "69601": "   /**\n    * Set to launch hyperlinks in external system browser, or in internal\n    * window instead.\n    * \n    * @param val true if external browser should load links.\n    */\n",
    "69606": "   /**\n    * Create a new instance of a class in this jar file.\n    * Must have a basic constructor with no arguments.\n    * \n    * @param name the class name to instantiate\n    * \n    * @return an Object created from the given class\n    */\n",
    "69631": "   /**\n    * Get a count of the bytes read by this stream.\n    * @return the number of bytes read by this stream.\n    */\n",
    "69634": "   /**\n    * Returns the key of the setting that was changed.\n    *\n    * @return  The key of the setting that was changed.\n    */\n",
    "69636": "   /**\n    * Returns the new value for the setting.\n    *\n    * @return  The new value for the setting, or <tt>null</tt> if the\n    *          setting was removed.\n    */\n",
    "69659": "   /**\n    * Retrieve the <code>cols</code> from the <code>SQLInsert</code>\n    * @return Returns the cols.\n    */\n",
    "69660": "    /**\n     * Added a WHERE constraint to the SELECT command.\n     * \n     * @param name\n     *            the field to constrain\n     * @param val\n     *            the value this field must equal as a constraint\n     */\n",
    "69676": "    /**\n     * Added a WHERE constraint to the SELECT command.\n     * \n     * @param name\n     *            the field to constrain\n     * @param val\n     *            the value this field must be like\n     */\n",
    "69689": "    /**\n     * Add an item to select\n     * \n     * @param field\n     *            a valid SQL selection item\n     */\n",
    "69692": "    /**\n     * Execute the query and return the results.\n     */\n",
    "69695": "   /**\n    * Set if this will format output with newlines or not\n    */\n",
    "69701": "   /**\n    * Generate the SQL string for an UPDATE command.\n    */\n",
    "69706": "   /**\n    * Generate the SQL string for an DELETE command.\n    */\n",
    "69730": "   /**\n    * Sets the horizontal gap between components.\n    */\n",
    "69735": "   /**\n    * Gets the vertical gap between components.\n    */\n",
    "69757": "   /**\n    * Sets the vertical gap between components.\n    */\n",
    "69767": "   /**\n    * Removes the specified component from the layout. Not used by\n    * this class.\n    * @param comp the component to remove\n    * @see       java.awt.Container#removeAll\n    */\n",
    "69866": "    /**\n     * Setting an endpoint from the outside is only meaningful for unit tests.\n     *\n     * @param endPoint An endpoint\n     * @return This distributor\n     */\n",
    "70192": "    /** Remove all nodes except the root node. */\n",
    "70311": "    /** Remove the currently selected node. */\n",
    "70455": "    /** Add child to the currently selected node. */\n",
    "70493": "    /**\n     * This method is only useful for unit testing.\n     *\n     * @param tickTock A time abstraction\n     * @return A deadline\n     */\n",
    "70817": "    /**\n     * Return an approximation of this interval, using an optional, preferred unit.\n     * For instance, 42,345,543 microseconds will approximate to 42,345 milliseconds,\n     * if {@link java.util.concurrent.TimeUnit#MILLISECONDS} is used.\n     *\n     * @param unit A unit\n     * @return Approximation using that unit\n     */\n",
    "70823": "    /**\n     * Returns a readable approximation of this time span.  For instance, instead of being\n     * billions of nanoseconds, it will be a number of seconds.  Example: 42,345,543 microseconds\n     * will approximate to 42 seconds.  In other words, it will gravitate towards a unit\n     * that makes it more approximate, but suits the size of the time span.\n     *\n     * @return Approximate time span\n     */\n",
    "70872": "    /**\n     * True iff the result is wrapped, in a {@link Holder}.\n     */\n",
    "70880": "    /**\n     * The toString of the value.\n     */\n",
    "70884": "    /**\n     * The holder object if wrapped, otherwise the object itself.\n     */\n",
    "70888": "    /**\n     * The class object of the result.  Will not be serialized.\n     */\n",
    "70892": "    /**\n     * The name of the class of the result.\n     */\n",
    "70898": "    /**\n     * True iff the result was a primitive value.\n     */\n",
    "70902": "    /**\n     * The throwable of a failed result.  Will not be serialized.\n     */\n",
    "70909": "    /**\n     * Returns the string value of this tree node\n     */\n",
    "70916": "    /**\n     * The time taken to evaluate the result, in milliseconds.\n     */\n",
    "70922": "    /**\n     * True iff the result was not a failure.\n     */\n",
    "71014": "    /**\n     * Returns the string value of the content\n     *\n     */\n",
    "71023": "    /**\n     * Evaluates the content of this leaf in the given environment.  Iff\n     * content is a symbol, look it up in the context\n     *\n     * @param context The context to evaluate in\n     * @return The value of the content\n     * @exception EvaluationException Thrown iff something bad happens\n     */\n",
    "71705": "    /**\n     * Adds nodes for the declared (if known) and actual (if not null) class\n     */\n",
    "71708": "    /**\n     * Adds nodes for each field of each (super)class\n     */\n",
    "72000": "    /**\n     * Test of the mod method.\n     */\n",
    "72003": "    /**\n     * Test of the mul method.\n     */\n",
    "72005": "    /**\n     * Test of the div method.\n     */\n",
    "72007": "    /**\n     * Test of the sub method.\n     */\n",
    "72010": "    /**\n     * Test of the add method.\n     */\n",
    "72016": "    /**\n     * Set up common stuff for all test methods.\n     * This method is called immediately before each test method is called\n     */\n",
    "72020": "    /**\n     * Tear down common stuff for all test methods.\n     * This method is called immediately after each test method is called\n     */\n",
    "72294": "\t/**\n\t * Populate the entry fields with the values stored in the editDVD\n\t */\n",
    "72310": "\t/**\n\t * Store the entered information into the editDVD object\n\t *\n\t * @throws RuntimeException If there is invalid data.\n\t */\n",
    "72311": "\t/**\n\t * This method is called to determine the rendered that will be used\n\t * for each column.  If the column doesn't have data in it yet this\n\t * function will fall back on the String's render so the table will not\n\t * have an exception.\n\t */\n",
    "72313": "\t/**\n\t * Sets the data to be displayed in the table\n\t *\n\t * @param v the data to be displayed in the table\n\t */\n",
    "72323": "\t/**\n\t * Create the Save, Cancel, Previous, and Next buttons and adds them\n\t * to a pane using the flow layout.\n\t *\n\t * @return pane containing the buttons\n\t */\n",
    "72324": "\t/**\n\t *  This method should be called wehn a user wants the image\n\t *\n\t * @return    The poster which is an ImageIcon \n\t */\n",
    "72326": "\t/**\n\t *  This is called when the new thread starts to run.\n\t */\n",
    "72330": "\t/**\n\t *  Sets the title attribute of the ImdbInfo object\n\t *\n\t * @param  title  The new title value\n\t */\n",
    "72340": "\t/**\n\t *  As seen below. Makes a CardLayout and the diffrent cards are added.\n\t *\n\t * @return    the pane that holds the components\n\t */\n",
    "72341": "\t/**\n\t *  Gets the director attribute of the imdbInfo object\n\t *\n\t * @return    The director value\n\t */\n",
    "72342": "\t/**\n\t *  Card nr 1. This card is for entering the movie to search for.\n\t *\n\t * @return    a JPanel which will be card nr 1\n\t */\n",
    "72345": "\t/**\n\t *  Gets the genre attribute of the imdbInfo object\n\t *\n\t * @return    The genre value\n\t */\n",
    "72350": "\t/**\n\t *  Gets the tagline attribute of the imdbInfo object\n\t *\n\t * @return    The tagline value\n\t */\n",
    "72354": "\t/**\n\t *  Gets the plot attribute of the imdbInfo object\n\t *\n\t * @return    The plot value\n\t */\n",
    "72360": "\t/**\n\t *  Gets the rating attribute of the imdbInfo object\n\t *\n\t * @return    The rating value\n\t */\n",
    "72365": "\t/**\n\t * This method is called to determine the rendered that will be used\n\t * for each column.  If the column doesn't have data in it yet this\n\t * function will fall back on the String's render so the table will not\n\t * have an exception.\n\t */\n",
    "72366": "\t/**\n\t *  Gets the posterUrl attribute of the imdbInfo object\n\t *\n\t * @return    The posterUrl value\n\t */\n",
    "72367": "\t/**\n\t * Sets the data to be displayed in the table\n\t *\n\t * @param v the data to be displayed in the table\n\t */\n",
    "72369": "    /**\n     * Add the ability to sort by column to a table.\n     *\n     * @param table the table to add the MouseListeners\n     */\n",
    "72371": "\t/**\n\t *  Gets the address attribute of the ImdbInfo object\n\t *\n\t * @return    The address value\n\t */\n",
    "72385": "    /**\n     * Compares two object arrays at column <i>col</i>.\n     *\n     * @param o1 first array\n     * @param o2 second array\n     *\n     * @return the result of the string comparison\n     *\n     * @throws ClassCastException if either o1 or o2 are not object arrays (Object[])\n     */\n",
    "72387": "    /**\n     * Compares this comparator with another comparator\n     *\n     * @returns true if column numbers are equal, false otherwise\n     */\n",
    "72389": "\t/**\n\t *  Creates the buttons at the buttom.\n\t *\n\t * @return    a JPanel with buttons\n\t */\n",
    "72390": "    /**\n     * Inserts an element to the list in sorted order.\n     *\n     * @param o the object to insert\n     *\n     * @return true if inserted, false if insertion failed\n     *\n     * @throws ClassCastException if any non-Object array is encountered\n     */\n",
    "72391": "    /**\n     * Sorts a column or toggles sort direction.\n     *\n     * @param col the column number to sort by\n     *\n     * @throws ClassCastException if any non-Object array is encountered\n     * @throws ArrayIndexOutOfBoundsException if (col < 0 || col > number_of_columns)\n     */\n",
    "72393": "    /**\n     * Reverses the direction of the array.\n     */\n",
    "72397": "\t/**\n\t * Create a FlowLayout pane to hold the new, edit, and delete buttons.\n\t * @return a pane containing the buttons\n\t */\n",
    "72402": "\t/**\n\t * Create a table for the DVDs with single selection mode so only one\n\t * DVD can be selected at a time.\n\t *\n\t * @return a table\n\t */\n",
    "72404": "\t/**\n\t * Converts a vector of DVDs into a vector of arrays for the table\n\t *\n\t * @param v Vector of DVDs\n\t */\n",
    "72407": "\t/**\n\t * Enable the edit and delete buttons.  This is called when a row on the\n\t * table is selected.\n\t */\n",
    "72410": "\t/**\n\t * This method keeps track of which row in the table is selected.\n\t */\n",
    "72413": "\t/**\n\t * Disable the edit and delete buttons.  This is called when a row on the\n\t * table is not selected.\n\t */\n",
    "72414": "\t/**\n\t *  Set if the Type should be permanent. For now there is no restricion\n\t *  just a boolean holder.\n\t */\n",
    "72419": "\t/**\n\t *  For each field that is created a type is saved in a Vector. The purpose \n\t *  is to avoid the user to reAdd a new type every time he/she adds a DVD.\n\t *  This method is called every time a change in the type String is made.\n\t */\n",
    "72420": "\t/**\n\t * This method will open the edit window when an item is double\n\t * clicked on the table.\n\t */\n",
    "72427": "\t/**\n\t *  This message is called when the fetching of data is done.\n\t */\n",
    "72436": "\t/**\n\t *  Compares two DVDs based on their titles.\n\t *\n\t * @param  o  Description of the Parameter\n\t * @return    a negative integer, zero, or a positive integer as this DVD title\n\t *      is less than, equal to, or greater than the specified DVD title; zero\n\t *      if the provided object is not a DVD object.\n\t */\n",
    "72442": "\t/**\n\t *  If the data is from imdb.com\n\t *\n\t * @param  wiz  The new fromWizard value\n\t */\n",
    "72448": "\t/**\n\t *  Return true if the data is from imdb.com\n\t *\n\t * @return    The fromImdb value\n\t */\n",
    "72463": "\t/**\n\t * This method will be called from the edit window once it is closed. It\n\t * will allow the user to use the main window.\n\t */\n",
    "72471": "\t/**\n\t * Sort the DVD collection and update the table data\n\t */\n",
    "72479": "\t/**\n\t * Add a DVD to the collection.  This method is called by the edit window\n\t * when a new DVD is saved.\n\t * @param d DVD to add to the collection\n\t */\n",
    "72487": "\t/**\n\t * This method informs the edit window if there is a DVD after the\n\t * one currently being edited.\n\t *\n\t * @return true or false if there is a DVD after the currectly selected one\n\t */\n",
    "72498": "\t/**\n\t * This method informs the edit window if there is a DVD before the\n\t * one currently being edited.\n\t *\n\t * @return true or false if there is a DVD before the currectly selected one\n\t */\n",
    "72555": "    /**\n     * decrease the intensity value in all scopes.\n     */\n",
    "72562": "    /**\n     * \"poke\" a channel, causing it's intensity value to be set to the max.\n     * @param channel\n     */\n",
    "72565": "    /**\n     * get the character representing the current intencity value of a channel.\n     * @param channel\n     * @return\n     */\n",
    "72570": "    /**\n     * get a string representation of the scopes.\n     * @return\n     */\n",
    "72667": "    /**\n     * get the value of the initial relative volume of a track.\n     * @param track\n     * @return\n     */\n",
    "72680": "    /**\n     * utility method for finding the number of tracks (channels) in the module. Note that this\n     * isn't reliable if you've managed to construct a module that has a different number of\n     * tracks per pattern. That's pretty unlikely though... It also doesn't work unless you\n     * have atleast one pattern.\n     * @return\n     */\n",
    "72830": "    /**\n     * loads a list from a LineNumberReader. Each line contains the name of a module.\n     *\n     * @param lnr\n     * @throws IOException\n     */\n",
    "72842": "    /**\n     * removes the current module from the playlist\n     */\n",
    "72849": "    /**\n     * create a player thread for playing the\n     * @param module\n     * @return\n     */\n",
    "72852": "    /**\n     * load the <code>nextModule</code>'th file in the file list.\n     * @param nextModule\n     * @return\n     */\n",
    "72854": "    /**\n     * create a player thread for playing the\n     * @param module\n     * @return\n     */\n",
    "72869": "        /**\n         * make the player thread die as soon as possible.\n         */\n",
    "72871": "    /**\n     * tell the playlist to save itself to the current playlist file\n     * @throws IOException\n     */\n",
    "72996": "    /**\n     * start playing the module\n     */\n",
    "72998": "    /**\n     * stop playing the module and the player thread\n     */\n",
    "73002": "    /**\n     * check if the player thread is still running\n     * @return\n     */\n",
    "73003": "    /**\n     * pause the player thread\n     * @param pause\n     */\n",
    "73007": "    /**\n     * check if the module is paused\n     * @return\n     */\n",
    "73009": "    /**\n     * check if an error has occured while playing\n     * @return\n     */\n",
    "73012": "    /**\n     * if an error occured while playing, use this to get the error cause\n     * @return\n     */\n",
    "73085": "        /**\n         * sets if this track should be muted\n         *\n         * @param mute if true: mute, if false: unmute\n         */\n",
    "73130": "    /**\n     * initialize the player\n     *\n     * @param output\n     * @return true if initialization was successful\n     */\n",
    "73132": "    /**\n     * Load a module from a file\n     *\n     * @param fileName the file name of the module\n     * @return true if loading was successful, false else\n     */\n",
    "73133": "    /**\n     * Load a module\n     * @param module the module to load\n     * @return true if loading was successful, false else\n     */\n",
    "73135": "    /**\n     * play a tick of the the module\n     *\n     * @return true if the module is still playing, false if the module is finished.\n     */\n",
    "73140": "    /**\n     * get the state of the module. The ModuleState can be used for\n     * finding information about the playing module and for manipulating how the\n     * module should be played\n     *\n     * @return the state of the playing module\n     */\n",
    "73141": "    /**\n     * get the current module;\n     * @return\n     */\n",
    "73142": "    /**\n     * get the default amplification. The default amplification is calculated using the following\n     * formula: <code>#tracks / 4</code>. This should maintain a reasonable volume when playing\n     * modules with many channels while avoiding clipping in most cases. Note that for 4channel mods\n     * this will result in an amplification of 1.\n     * @return\n     */\n",
    "73220": "    /**\n     * this will try to write all the indicated data whitout ever giving up...\n     * Either all the data is written or it will loop for ever.\n     *\n     * @param data\n     * @param ofs\n     * @param len\n     */\n",
    "74678": "\t/**\n\t * Returns a service object injected by Spring\n\t * @return\n\t */\n",
    "74681": "\t/**\n\t * Returns a service object injected by Spring\n\t * @return\n\t */\n",
    "74685": "\t/**\n\t * Returns a service object injected by Spring\n\t * @return\n\t */\n",
    "76469": "    /**\n     * Shutdown all the loaded services\n     */\n",
    "76483": "    /** Returns a string of the location. */\n",
    "76485": "    /**\n     * Get the Password value.\n     * @return the Password value.\n     */\n",
    "76487": "  /**\n   * Called on the event dispatching thread (not on the worker thread)\n   * after the <code>construct</code> method has returned.\n   */\n",
    "76489": "    /**\n     * Set the Password value.\n     * @param newPassword The new Password value.\n     */\n",
    "76490": "  /**\n   * A new method that interrupts the worker thread.  Call this method\n   * to force the worker to abort what it's doing.\n   */\n",
    "76492": "    /**\n     * Get the Userid value.\n     * @return the Userid value.\n     */\n",
    "76493": "  /**\n   * Return the value created by the <code>construct</code> method.  \n   * Returns null if either the constructing thread or\n   * the current thread was interrupted before a value was produced.\n   * \n   * @return the value created by the <code>construct</code> method\n   */\n",
    "76495": "    /**\n     * Set the Userid value.\n     * @param newUserid The new Userid value.\n     */\n",
    "76496": "  /**\n   * Start the worker\n   */\n",
    "76498": "    /**\n     * Get the ConnectUrl value.\n     * @return the ConnectUrl value.\n     */\n",
    "76501": "    /**\n     * Set the ConnectUrl value.\n     * @param newConnectUrl The new ConnectUrl value.\n     */\n",
    "76505": "    /**\n     * Get the JdbcDriver value.\n     * @return the JdbcDriver value.\n     */\n",
    "76507": "    /**\n     * Set the JdbcDriver value.\n     * @param newJdbcDriver The new JdbcDriver value.\n     */\n",
    "76525": "    /**\n     * Getter for property doPopup.\n     * @return Value of property doPopup.\n     */\n",
    "76530": "    /**\n     * Setter for property doPopup.\n     * @param doPopup New value of property doPopup.\n     */\n",
    "76542": "    /**\n     * Translates Xml Document from CDA to CLIPS format.\n     * \n     * @param inputDocument\n     *            String representation of the input XML document.\n     * @return File representation of the translated document.\n     */\n",
    "76545": "    /**\n     * Converts a String to a File\n     * \n     * @param str\n     *            String representation of the input XML document translated\n     *            into CLIPS format.\n     * @return File representation of the String.\n     */\n",
    "76607": "    /**\n     * Returns the Results document creation time in the appropriate CDA format\n     *\n     * @return String representation of the document creation time\n     *\n     */\n",
    "76618": "    /**\n     * Returns the Results document code\n     *\n     * @return String representation of the document code\n     *\n     */\n",
    "76629": "    /**\n     * Returns the Results document code system\n     *\n     * @return String representation of the document code system\n     *\n     */\n",
    "76670": "    /**\n     * Registers IDocImport interface instance with the TransController\n     * component.\n     * \n     * @param iDocumentImport\n     *            Instance of the DocImpEx component refered to by the\n     *            IDocumentImport interface\n     */\n",
    "76672": "    /**\n     * Registers IDocExport interface instance with the TransController\n     * component.\n     * \n     * @param iDocumentExport\n     *            Instance of the DocImpEx component refered to by the\n     *            IDocumentExport interface\n     */\n",
    "76675": "    /**\n     * Registers IInference interface instance with the TransController\n     * component.\n     * \n     * @param iInference\n     *            Instance of the InferenceEngine component refered to by the\n     *            IInference interface\n     */\n",
    "76679": "    /**\n     * Registers IAuditLog interface instance with the TransController\n     * component.\n     * \n     * @param iAuditLog\n     *            Instance of the ConfigManager component refered to by the\n     *            IAuditLog interface\n     */\n",
    "76685": "    /**\n     * Returns <tt>true</tt> if the iteration has more elements. (In other\n     * words, returns <tt>true</tt> if <tt>next</tt> would return an element\n     * rather than throwing an exception.)\n     * \n     * @return <tt>true</tt> if the iterator has more elements.\n     */\n",
    "76774": "    /** Get a scalar type for the given name. */\n",
    "76778": "    /** Get a scalar type for the name represented by a token. */\n",
    "76780": "    /** Get a scalar type for the name represented by a symbol. */\n",
    "76787": "    /** Apply the analysis to a list of child nodes. */\n",
    "76790": "    /** Apply the analysis to a child node. */\n",
    "76794": "    /** Report a warning message. */\n",
    "76795": "    /** Are there any errors? */\n",
    "76804": "    /**\n     * This method provides a String representation of a document with clinical\n     * recommendations based on patient-specific data.\n     *\n     * @param patientSummary\n     *            String representation of the CDA Patient Summary document that\n     *            is received by the EGADSS Service\n     * @return String representation of the Results CDA document that contains\n     *         clinical results from EGADSS. (the recommendations and requests\n     *         for additional patient information if applicable)\n     */\n",
    "76847": "    /** Creates and initializes instances of other EGADSS components. */\n",
    "76930": "    /**\n     * velocityClinicalGuideline\n     *\n     * @return String\n     */\n",
    "76934": "    /**\n     * Tests the DocumentValidator.validateDocument method of the DocImpEx\n     * componenet\n     */\n",
    "76946": "    /**\n     * Tests the IConfig.getInfo method of the DocImpEx componenet\n     */\n",
    "76949": "    /**\n     * Tests the IConfig.initialize method of the DocImpEx componenet\n     */\n",
    "76952": "    /**\n     * Tests the IConfig.terminate method of the DocImpEx componenet\n     */\n",
    "76956": "    /**\n     * Tests the IDocumentImport.importDocument method of the DocImpEx\n     * componenet\n     */\n",
    "76959": "    /**\n     * Tests the IDocumentExport.exportDocument method of the DocImpEx\n     * componenet\n     */\n",
    "76964": "    /**\n     * Tests the IConfig.getInfo method of the TransController componenet\n     */\n",
    "76968": "    /**\n     * Tests the IConfig.initialize method of the TransController componenet\n     */\n",
    "76973": "    /**\n     * Tests the XPathPreprocessor.parseKnowledgeModuleForXPath method.\n     */\n",
    "76975": "    /**\n     * Tests the IConfig.terminate method of the TransController componenet\n     */\n",
    "76980": "    /**\n     * Tests the ITrans.getRecommendations method of the TransController\n     * componenet\n     */\n",
    "76987": "    /**\n     * Tests the IConfig.getInfo method of the DataStorage componenet\n     */\n",
    "76990": "    /**\n     * Tests the IConfig.initialize method of the DataStorage componenet\n     */\n",
    "76991": "    /**\n     * Tests the IAuditLog.writeLogEntry method of the ConfigManager componenet\n     */\n",
    "76992": "    /**\n     * Tests the IConfig.terminate method of the DataStorage componenet\n     */\n",
    "76995": "    /**\n     * Tests the IAudit.generateAuditReport method of the ConfigManager\n     * componenet\n     */\n",
    "76997": "    /**\n     * Tests the IAudit.setAuditingMode and IAudit.getAuditingMode methods of\n     * the ConfigManager componenet\n     */\n",
    "77002": "    /**\n     * Tests the ISysConfig.shutSystemDown method of the ConfigManager\n     * componenet\n     */\n",
    "77005": "    /**\n     * Tests the ISysConfig.viewSystemConfig method of the ConfigManager\n     * componenet\n     */\n",
    "77008": "    /**\n     * Tests the IConfig.getInfo method of the ConfigManager componenet\n     */\n",
    "77015": "    /**\n     * Tests the IConfig.initialize method of the ConfigManager componenet\n     */\n",
    "77021": "    /**\n     * Tests the IConfig.terminate method of the ConfigManager componenet\n     */\n",
    "81092": "\t/**\n\t * This method is called when the plug-in is stopped\n\t */\n",
    "81105": "    /**\n     * trace utility of server\n     */\n",
    "81107": "    /**\n     * Shutdown the NetworkServer\n     */\n",
    "81108": "\t/**\n\t * Start Derby Network server\n\t * \n\t */\n",
    "81112": "\t /**\n\t  *\tgets a database connection\n\t  * If the dbUrl is trying to connect to the Derby NetNsSampleWork server using JCC\n\t  * then the jcc driver must be already loaded before calling this method,\n\t  * else there will be an error\n\t  * return jcc connection if no error, else null\n\t  */\n",
    "81114": "\t /**\n\t  * set the connection to this isolation level\n\t  */\n",
    "81131": "\t/**\n\t * Return the length of the binary stream which was calculated when\n\t * EXTDTAObject was created.\n\t * \n\t * @return the length of the stream once converted to an InputStream\n\t */\n",
    "81443": "\t/**\n\t * Return chaining bit for current DSS.\n\t */\n",
    "81557": "\t/**\n\t * End DSS header by writing the length in the length location\n\t * and setting the chain bit.\n\t */\n",
    "81745": "\t/**\n\t * Looks at chaining info for previous DSS written, and use\n\t * that to figure out what the correlation id for the current\n\t * DSS should be.  Return that correlation id.\n\t */\n",
    "82376": "\t/**\n\t * get an HTML labelled message from the resource bundle file, according to\n\t * the given key.\n\t */\n",
    "82378": "\t/**\n\t * Print the received string as a header.\n\t * @param str The string to be printed as a header.\n\t */\n",
    "82382": "\t/**\n\t * If the received string has one or more single quotes\n\t * in it, replace each one with the HTML escape-code\n\t * for a single quote (apostrophe) so that the string \n\t * can be properly displayed on a submit button.\n\t * @param str The string in which we want to escape\n\t *  single quotes.\n\t */\n",
    "82653": "\t/**\n\t * Build preformatted SQLException text \n\t * for severe exceptions or SQLExceptions that are not EmbedSQLExceptions.\n\t * Just send the message text localized to the server locale.\n\t * \n\t * @param se  SQLException for which to build SQLERRMC\n\t * @return preformated message text \n\t * \t\t\twith messages separted by SQLERRMC_PREFORMATED_MESSAGE_DELIMITER\n\t * \n\t */\n",
    "82659": "\t/**\n\t * Build Tokenized SQLERRMC to just send the tokenized arguments to the client.\n\t * for a Derby SQLException\n\t * Message argument tokens are separated by SQLERRMC_TOKEN_DELIMITER \n\t * Multiple messages are separated by SQLERRMC_MESSAGE_DELIMITER\n\t * \n\t *                 ...\n\t * @param se   SQLException to print\n\t * \n\t */\n",
    "83118": "\t/**\n\t * Finalize the current DSS chain and send it if\n\t * needed.\n\t */\n",
    "83491": "    /**\n     * Obtain the current transaction timeout value set for this XAResource instance. If\n     * <CODE>XAResource.setTransactionTimeout</CODE> was not use prior to invoking this method, the return value is the\n     * default timeout set for the resource manager; otherwise, the value used in the previous\n     * <CODE>setTransactionTimeout</CODE> call is returned.\n     *\n     * @return the transaction timeout value in seconds.\n     *\n     * @throws XAException An error has occurred. Possible exception values are XAER_RMERR, XAER_RMFAIL.\n     */\n",
    "83501": "    /**\n     * <P>Set the current transaction timeout value for this <CODE>XAResource</CODE> instance. This value overwrites the\n     * default transaction timeout value in the resource manager. The newly assigned timeout value is effective for the\n     * life of this <CODE>XAResource</CODE> instance unless a new value is set.<P>\n     *\n     * @param the transaction timeout value in seconds.\n     *\n     * @throws XAException An error has occurred. Possible exception values are XAER_RMERR, XAER_RMFAIL, or XAER_INVAL.\n     */\n",
    "84264": "    /**\n     * What's a column's table's catalog name?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     *\n     * @return column name or \"\" if not applicable.\n     *\n     * @throws SQLException thrown on failure\n     */\n",
    "84396": "    /**\n     * Store the Packagename and consistency token information This is called from Section.setPKGNAMCBytes\n     *\n     * @param b                    bytearray that has the PKGNAMC information to be stored\n     * @param resultSetHoldability depending on the holdability store it in the correct byte array packagename and\n     *                             consistency token information for when holdability is set to HOLD_CURSORS_OVER_COMMIT\n     *                             is stored in holdPKGNAMCBytes and in noHoldPKGNAMCBytes when holdability is set to\n     *                             CLOSE_CURSORS_AT_COMMIT\n     */\n",
    "84636": "   /**\n    * \tReturn true if the physical connection is still open.\n    * \tMight be logically closed but available for reuse.\n    *   @return true if physical connection still open\n    */\n",
    "84681": "    /**\n     * Store the Packagename and consistency token information for reuse. Case 1: if it is generated section, just store\n     * the byte array in PKGNAMCBytes Case 2: for not a generated section, information is stored in the correct byte\n     * array depending on the holdability in SectionManager\n     */\n",
    "84794": "    /**\n     * Performs the privileged action of System.getProperties()\n     */\n",
    "84802": "    /**\n     * Attempt to establish a database connection in a non-pooling, non-distributed environment.\n     *\n     * @return a Connection to the database\n     *\n     * @throws java.sql.SQLException if a database-access error occurs.\n     */\n",
    "84803": "    /**\n     * Attempt to establish a database connection in a non-pooling, non-distributed environment.\n     *\n     * @param user     the database user on whose behalf the Connection is being made\n     * @param password the user's password\n     *\n     * @return a Connection to the database\n     *\n     * @throws java.sql.SQLException if a database-access error occurs.\n     */\n",
    "84869": "\t/**\n\t\tRun once per-iteration to run the actual test.\n\t\t@exception T_Fail the test failed in some way.\n\t*/\n",
    "84901": "\t/**\n\t\tPut the object into the No Identity state. \n\n\t\t<BR> MT - single thread required - Method must only be called be cache manager\n\t\tand the cache manager will guarantee only one thread can be calling it.\n\n\t*/\n",
    "84903": "\t/**\n\t\tGet the identity of this object.\n\n\t\t<BR> MT - thread safe.\n\n\t*/\n",
    "84907": "\t/** \n\t\tQualififier is assumed to be null.\n\t@see Lockable#lockEvent\n\t*/\n",
    "84913": "\t/** \n\t\tQualififier is assumed to be null.\n\t@see Lockable#unlockEvent\n\t*/\n",
    "84927": "\t/**\n\t\tReturns true of the object is dirty. Will only be called when the object is unkept.\n\n\t\t<BR> MT - thread safe \n\n\t*/\n",
    "84948": "\t/**\n\t  Get the name of the protocol for the module to test.\n\t  This is the 'factory.MODULE' variable.\n\t  \n\t  'moduleName' to the name of the module to test. \n\n\t  @param testConfiguration the configuration for this test.\n\t  */\n",
    "84958": "\t/**\n\t\tA call to findCached() that is expected to return nothing.\n\t\t@exception StandardException  Standard Derby Error policy\n\t\t@exception T_Fail Something was found.\n\t*/\n",
    "84959": "\t/**\n\t\tA call to findCached() that is expected to find something.\n\t\t@exception StandardException  Standard Derby Error policy\n\t\t@exception T_Fail Nothing was found.\n\t*/\n",
    "84961": "\t/**\n\t\tA call to find() that is expected to return nothing.\n\n\t\t@exception T_Fail Something was found.\n\t\t@exception StandardException  Standard Derby Error policy\n\t*/\n",
    "84963": "\t/**\n\t\tA call to findCached() that is expected to find something.\n\n\t\t@exception T_Fail Nothing was found.\n\t\t@exception StandardException  Standard Derby Error policy\n\t*/\n",
    "84995": "\t/**\n\t  Emit a message indicating why the test failed.\n\n\t  RESOLVE: Should this be localized?\n\n\t  @param msg the message.\n\t  @return false\n\t*/\n",
    "84996": "\t/**\n\t  Emit a message saying the test passed.\n\t  You may use this to emit messages indicating individual test cases\n\t  within a unit test passed.\n\n\t  <P>RESOLVE:Localize this.\n\t  @param test the test which passed.\n\t  @return true\n\t  */\n",
    "84997": "\t/**\n\t\tEmit a message during a unit test run, indent the message\n\t\tto allow the PASS/FAIL messages to stand out.\n\t*/\n",
    "85040": "\t/**\n\t * T_MultiThreadedIteration method\n\t *\n\t * @exception T_Fail Unexpected behaviour from the API\n\t */\n",
    "85098": "\t/**\n\t\tGet the last page in a container.\n\t\tAlways returns a valid page or null if there is no page in the container.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85100": "\t/**\n\t\tGet a specific page in a container.\n\t\tAlways returns a valid page.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85104": "\t/**\n\t\tAdd a page to a container.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85120": "\t/**\n\t\tLazy people's random file generator:\n\t\tGenerate a random file with specified name and file size\n\n\t\t@exception T_Fail Record handle returned is null.\n\t*/\n",
    "85124": "\t/**\n\t  getValidColumns describes the DataValueDescriptor[] returned by all calls\n      to the getNextRowFromRowSource() call. \n\t*/\n",
    "85127": "\t/**\n\t\tneedsRowLocation returns true iff this the row source expects the\n\t\tdrainer of the row source to call rowLocation after getting a row from\n\t\tgetNextRowFromRowSource.\n\n\t\t@return true iff this row source expects some row location to be\n\t\treturned \n\t\t@see #rowLocation\n\t */\n",
    "85129": "\t/**\n\t\trowLocation  is not implemented here\n\t */\n",
    "85366": "\t/**\n\t  run the test\n\n\t  @exception T_Fail Unexpected behaviour from the API\n\t*/\n",
    "85374": "\t/**\n\t * T_MultiThreadedIteration method\n\t *\n\t * @exception T_Fail Unexpected behaviour from the API\n\t */\n",
    "85419": "\t/**\n\t\tT000 - ensure a transaction starts out idle.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85422": "\t/**\n\t\tT001 - start and commit an empty transaction.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85427": "\t/**\n\t\tT002 - start and abort an empty transaction.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85432": "\t/**\n\t\tT003 - start and commit an empty transaction and then ensure\n\t\tthat the transaction remains open for another commit.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85438": "\t/**\n\t\tT004 - start and abort an empty transaction and then ensure\n\t\tthat the transaction remains open for a commit and another abort.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85480": "\t/**\n\t\tC010 - Create a container within a transaction, commit and the re-open\n\t\tthe container twice.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\n\t*/\n",
    "85485": "\t/**\n\t\tC011 - Create a container withina transaction, commit and the re-open\n\t\tthe container in update and non-update mode.\n\t\t\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\n\t*/\n",
    "86122": "\t/**\n\t\tCreate a statement with modified State.\n\t*/\n",
    "86148": "      /**\n\t   *  Print the expected Exception's details if the SQLException SQLState\n\t   * matches the expected SQLState. Otherwise fail\n\t   *\n\t   * @param se  SQLException that was thrown by the test\n\t   * @param expectedSQLState  The SQLState that we expect. \n\t   *\n\t   **/\n",
    "86149": "     /**\n       * We are here because we got an exception when did not expect one.\n       * Hence printing the message and stack trace here.\n       **/\n",
    "86190": "\t/**\n\t * Dump the values in the received result set to output.\n\t */\n",
    "86192": "\t/**\n\t * Create a connect based on the test arguments passed in.\n\t */\n",
    "86244": "\t/**\n\t\tUnlatch an  object.\n\n\t\t<BR>\n\t\tMT - thread safe\n\n\t\t@see LockFactory#unlatch\n\t*/\n",
    "86250": "\t/**\t\n\t\tSet the potentially granted flag, returns true if the\n\t\tflag changed its state.\n\n\t\tMT - single thread required\n\t*/\n",
    "86252": "\t/**\t\n\t\tClear the potentially granted flag.\n\n\t\tMT - single thread required\n\t*/\n",
    "86261": "\t/**\n\t\tWe can return ourselves here because our identity\n\t\tis immutable and what we returned will not be accessed\n\t\tas a Lock, so the count cannot be changed.\n\t*/\n",
    "86264": "\t/**\n\t\tUnlock a group of objects. \n\n\t\t<BR>\n\t\tMT - thread safe\n\n\t\t@param group handle of group that objects were locked with.\n\t\tIf group is\tnull then this call is equivilent to unlockAll().\n\n\t\t@see LockFactory#unlockGroup\n\t*/\n",
    "86275": "\t/**\n\t\tReturns true if locks by anyone are blocking anyone else\n\t*/\n",
    "86278": "\t/**\n\t\tReturn true if locks are held in this group and this space.\n\n\t\t<BR>\n\t\tMT - thread safe\n\n\t\t@param group handle of group that objects were locked with.\n\n\t\t@see LockFactory#areLocksHeld\n\t*/\n",
    "86280": "\t/**\n\t\tReturn true if locks are held in this space\n\t\t\n\t\t<BR>\n\t\tMT - thread safe\n\n\t\t@see LockFactory#areLocksHeld\n\t*/\n",
    "86286": "\t/**\n\t\tClear a limit set by setLimit.\n\t*/\n",
    "86287": "\t/**\n\t\tReturn the first lock in the wait line, null if the\n\t\tline is empty.\n\t*/\n",
    "86289": "\t/**\n\t\tReturn the lockable object controlled by me.\n\t*/\n",
    "86301": "\t/**\n\t\tAdd the waiters of this lock into this Dictionary object.\n\t\t<BR>\n\t\tEach waiting thread gets two entries in the hashtable\n\t\t<OL>\n\t\t<LI>key=compatibility space - value=ActiveLock\n\t\t<LI>key=ActiveLock - value={LockControl for first waiter|ActiveLock of previosue waiter}\n\t\t</OL>\n\t*/\n",
    "86311": "\t/**\n\t * Remove and return the first lock request from a list of waiters.\n\t *\n\t * @param waiting\tThe list of waiters to pop from\n\t * @param ls\t\tThe LockSet\n\t *\n\t * @return\tThe removed lock request\n\t */\n",
    "86329": "    /**\n     * cpArray helps built the output string (outputRow).\n     * @param toCp the String to be copied into outputRow\n     * @param start the start place\n     * @param end the end place\n     */\n",
    "86343": "\t/**\n\t\tNotify the class manager that the classpath has been modified.\n\n\t\t@exception StandardException thrown on error\n\t*/\n",
    "86362": "\t/**\n\t\tGet a stream directly from a ZipFile.\n\t\tIn this case we can safely return the stream directly.\n\t\tIt's a new stream set up by the zip code to read just\n\t\tthe contents of this entry.\n\t*/\n",
    "86364": "\t/**\n\t\tGet a stream from a zip file that is itself a stream.\n\t\tHere we need to get the size of the zip entry and\n\t\tput a limiting stream around it. Otherwise the\n\t\tcaller would end up reading the entire zip file!\n\t*/\n",
    "86371": "\t/**\n\t\tMake the stream; note that service properties override\n\t\tapplication and system properties.\n\n\t */\n",
    "86372": "\t/**\n\t\tReturn a new header object.\n\t*/\n",
    "86373": "\t/**\n\t\tcreate a HeaderPrintWriter based on the header.\n\t\tWill still need to determine the target type.\n\t */\n",
    "86379": "\t/**\n\t\tUsed when no configuration information exists for a stream.\n\t*/\n",
    "86380": "\t/**\n\t\tUsed when creating a stream creates an error.\n\t*/\n",
    "86384": "\t/**\n\t\tKeep the cached object after a search.\n\n\t*/\n",
    "86392": "\t/**\n\t\tGet the cached object.\n\t*/\n",
    "86414": "\t/**\n\t\tClean all objects in the cache.\n\t*/\n",
    "86417": "\t/**\n\t\tClean all objects that match a partial key.\n\t*/\n",
    "86422": "\t/**\n\t\tMT - synchronization provided by caller\n\n\t\t@exception StandardException Standard Cloudscape error policy.\n\t*/\n",
    "86461": "\t/**\t\n\t\tPut the key-value pair in the Properties set and\n\t\tmark this set as modified.\n\n\t\t@see Hashtable#put\n\t*/\n",
    "86462": "\t/**\t\n\t\tRemove the key-value pair from the Properties set and\n\t\tmark this set as modified.\n\n\t\t@see Hashtable#remove\n\t*/\n",
    "86474": "\t/**\n\t\tShut down a service that was started by this Monitor. Will\n\t\tcause the stop() method to be called on each loaded module.\n\t*/\n",
    "86484": "\t/**\n\t\tReturn the name of the service that the passed in module lives in.\n\t*/\n",
    "86488": "\t/**\n\t\tClear an item's identity. Item must be \n\t\tunkept and valid. This is called for\n\t\tdirty items from the discard code.\n\n\t\tCaller must hold the cache synchronization.\n\n        @return the amount by which this shrinks the cache.\n\t*/\n",
    "86493": "\t/**\n\t\tReturn the PersistentService object for a service.\n\t\tWill return null if the service does not exist.\n\t*/\n",
    "86522": "\t/**\n\t\tShould only be called if reportOn is true\n\t\tapart from report/Exception().\n\t*/\n",
    "86570": "\t/**\n\t\tBoot all the service providers, ie. any module that implemented\n\t\tPersistentService. Upon entry to this call is the hashtable has\n\t\tPersistentService objects that have been created but not booted.\n\t*/\n",
    "86574": "\t/**\n\t\tBoot all persistent services that can be located at run time.\n\n\t\t<BR>\n\t\tThis method enumerates through all the service providers that\n\t\tare active and calls bootPersistentServices(PersistentService)\n\t\tto boot all the services that that provider knows about.\n\t*/\n",
    "86575": "\t/** Get the current PC */\n",
    "86576": "\t/**\n\t * add a field to this class. Fields cannot\n\t * be initialized here, they must be initialized\n\t * in the static initializer code (static fields)\n\t * or in the constructors.\n\t * <p>\n\t * static fields also added to this list,\n\t * with the modifier set appropriately.\n\t */\n",
    "86595": "\t/**\n\t * Return the logical name of the method. The current\n\t * myEntry refers to the sub method we are currently\n\t * overflowing to. Those sub-methods are hidden from any caller.\n\t */\n",
    "86600": "\t/**\n\t * a throwable can be added to the end of\n\t * the list of thrownExceptions.\n\t */\n",
    "86601": "\t/**\n\t * when the method has had all of its parameters\n\t * and thrown exceptions defined, and its statement\n \t * block has been completed, it can be completed and\n\t * its class file information generated.\n\t * <p>\n\t * further alterations of the method will not be\n\t * reflected in the code generated for it.\n\t */\n",
    "86635": "\t/**\n\tReturn the UUID factory for this system.  Returns null\n\tif there isn't one.\n\t@see com.ibm.db2j.system.System\n\t*/\n",
    "86648": "\t/**\n\t\tGet the locale from the ContextManager and then find the bundle\n\t\tbased upon that locale.\n\t*/\n",
    "86663": "\t/**\n\t\tPush the contents of the described static field onto the stack.\t\t\n\t*/\n",
    "86667": "\t/**\n\t * Set the field but don't duplicate its value so\n\t * nothing is left on the stack after this call.\n\t */\n",
    "86669": "\t/**\n\t\tUpon entry the top word(s) on the stack is\n\t\tthe value to be put into the field. Ie.\n\t\twe have\n\t\t<PRE>\n\t\tword\n\t\t</PRE>\n\n\t\tBefore the call we need \n\t\t<PRE>\n\t\tword\n\t\tthis\n\t\tword\n\t\t</PRE>\n\t\tword2,word1 -> word2, word1, word2\n\n\t\tSo that we are left with word after the put.\n\n\t*/\n",
    "86675": "\t/**\n\t\tStart this module. We need a read/write version of the class utilities\n\n\t\t@exception StandardException standard cloudscape policy\n\t */\n",
    "86677": "\t/**\n\t\tStop this module.  In this case, nothing needs to be done.\n\t */\n",
    "86700": "\t/**\n\t\tOpen a temp table several times with different modes and ensure the\n\t\tcorrect behaviour (most severe open wins).\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "86718": "  /** Gets the resultset meta data\n \t* @exception\tSQLException if there is an error\n\t*/\n",
    "86719": "  /** gets the next row\n \t* @exception\tSQLException if there is an error\n\t*/\n",
    "86721": "  /** closes the resultset\n \t* @exception\tSQLException if there is an error\n\t*/\n",
    "86736": "\t/** virtual method from the abstract class\n\t * @exception\tException on error\n\t */\n",
    "86758": "  /**if columndefinition is true, ignore first row. The way to do that is to just\n  *  look for the record separator\n \t* @exception\tException if there is an error\n\t*/\n",
    "86775": "  /**close the input data file\n \t* @exception\tException if there is an error\n\t*/\n",
    "86834": "  /**returns the number of the current row\n  */\n",
    "86844": "\t/**\n\t * position is 1-based.\n\t * @see ResultDescription#getColumnDescriptor\n\t */\n",
    "86861": "\t/**\n\t\tIs the database active (open).\n\t*/\n",
    "86981": "\t/**\n\t * Get the formatID which corresponds to this class.\n\t   Map to the 5.0 version identifier so that 5.0 will understand\n\t   this object when we write it out in soft upgrade mode.\n\t   CS 5.0 will de-serialize it correctly.\n\t   When we are writing out a 5.1 version number we write out\n\t   the 5.1 version just to ensure no problems.\n\t   \n\t *\n\t *\t@return\tthe formatID of this class\n\t */\n",
    "87063": "\t/**\n\t * Return the savepoint level when the table was dropped\n\t */\n",
    "87076": "\t/**\n\t * Get the PreparedStatement that is associated with this Cacheable\n\t */\n",
    "87090": "\t/**\n\t * Resets the savepoint to the current spot if it is\n\t * set, otherwise, noop.  Used when a commit is\n\t * done on a nested connection.\n\t *\n\t * @see StatementContext#resetSavePoint\n\t * @exception StandardException Thrown on error\n\t */\n",
    "87117": "\t/**\n\t * Indicate that, in the event of a statement-level exception,\n\t * this context is NOT the last one that needs to be rolled\n\t * back--rather, it is nested within some other statement\n\t * context, and that other context needs to be rolled back,\n\t * too.\n\t*/\n",
    "87118": "\t/**\n\t\tSet to indicate statement is system code.\n\t\tFor example a system procedure, view, function etc.\n\t*/\n",
    "87120": "\t/**\n\t\tReturn true if this statement is system code.\n\t*/\n",
    "87135": "\t/**\n\t\tGet the ExecutionFactory to use with this language connection\n\t */\n",
    "87139": "\t/**\n\t\tGet the OptimizerFactory to use with this language connection\n\t */\n",
    "87140": "\t/**\n\t\tGet the TypeCompilerFactory to use with this language connection\n\t */\n",
    "87141": "\t/**\n\t\tGet the DataValueFactory to use with this language connection\n\t */\n",
    "87144": "\t/**\n\t\tthis implementation will not support caching of statements.\n\t */\n",
    "87173": "\t/**\n\t * Start-up method for this instance of the language factory.\n\t * This service is expected to be started and accessed relative \n\t * to a database.\n\t *\n\t * @param startParams\tThe start-up parameters (ignored in this case)\n\n       @exception StandardException Thrown if module cannot be booted.\n\t *\n\t */\n",
    "87202": "\t/**\n\t * Add the activation to those known about by this connection.\n\t */\n",
    "87210": "\t/**\n\t * removes a dependency for a given provider. assumes\n\t * that the dependent removal is being dealt with elsewhere.\n\t * Won't assume that the dependent only appears once in the list.\n\t */\n",
    "87237": "\t/**\n\t\treturn the provider's key for this dependency.\n\t\t@return the provider' key for this dependency\n\t */\n",
    "87238": "\t/**\n\t\treturn the provider for this dependency.\n\t\t@return the provider for this dependency\n\t */\n",
    "87239": "\t/**\n\t\treturn the dependent for this dependency.\n\t\t@return the dependent for this dependency\n\t */\n",
    "87264": "\t/**\n\t\tCheck that there are not output parameters defined\n\t\tby the parameter set. If there are unknown parameter\n\t\ttypes they are forced to input types. i.e. Cloudscape static method\n\t\tcalls with parameters that are array.\n\n\t\t@return true if a declared Java Procedure INOUT or OUT parameter is in the set, false otherwise.\n\t*/\n",
    "87281": "\t/**\n\t\tGet a column from the list\n\t\n\t\t@param position\tThe column to get from the list\n\t */\n",
    "87283": "\t/**\n\t\tPrint the list.\n\t\n\t\t@param depth\t\tThe depth at which to indent the sub-nodes\n\t */\n",
    "87297": "\t/**\n\t * Return the number of activations known for this connection.\n\t * Note that some of these activations may not be in use\n\t * (when a prepared statement is finalized, its activations\n\t * are marked as unused and later closed and removed on\n\t * the next commit/rollback).\n\t */\n",
    "87307": "\t/**\n\t * See if a given cursor is available for use.\n\t * if so return its activation. Returns null if not found.\n\t * For use in execution.\n\t *\n\t * @return the activation for the given cursor, null\n\t *\tif none was found.\n\t */\n",
    "87313": "\t/**\n\t * null operators are defined on DataValueDescriptor.\n\t * Overrides method in UnaryOperatorNode for code generation purposes.\n\t */\n",
    "87439": " /** Get the data value factory to use with this language connection\n\t\tcontext.\n\t */\n",
    "87443": "\t/**\n\t\tGet the language factory to use with this language connection\n\t\tcontext.\n\t */\n",
    "87448": "\t/**\n\t\tGet the language connection factory to use with this language connection\n\t\tcontext.\n\t */\n",
    "87479": "\t/**\n\t\tEmpty as much of the cache as possible. It is not guaranteed\n\t\tthat the cache is empty after this call, as statements may be kept\n\t\tby currently executing queries, activations that are about to be garbage\n\t\tcollected.\n\t*/\n",
    "87554": "    /**\n\t  *\tReports how many statement levels deep we are.\n\t  *\n\t  *\t@return\ta statement level >= OUTERMOST_STATEMENT\n\t  */\n",
    "87621": "\t/**\n\t\tFinish the data dictionary transaction, if any.\n\n\t\t@exception StandardException\tThrown on error\n\t */\n",
    "87664": "\t/**\n\t * Convert this object to a String.  See comments in QueryTreeNode.java\n\t * for how this should be done for tree printing.\n\t *\n\t * @return\tThis object as a String\n\t */\n",
    "87665": "\t/**\n\t * Mark the column as descending order\n\t */\n",
    "87666": "\t/**\n\t * Get the column order.  Overrides \n\t * OrderedColumn.isAscending.\n\t *\n\t * @return true if ascending, false if descending\n\t */\n",
    "87831": "\t/**\n\t * This is a length operator node.  Overrides this method\n\t * in UnaryOperatorNode for code generation purposes.\n\t */\n",
    "87990": "\t/**\n\t * Determine the type the binary method is called on.\n\t * By default, based on the receiver.\n\t *\n\t * Override in nodes that use methods on super-interfaces of\n\t * the receiver's interface, such as comparisons.\n\t *\n\t * @exception StandardException\t\tThrown on error\n\t */\n",
    "88021": "\t/**\n\t * Initializer for a ExtractOperatorNode\n\t *\n\t * @param field\t\tThe field to extract\n\t * @param operand\tThe operand\n\t */\n",
    "88329": "\t/**\n\t  *\tGet the package name that this generated class lives in\n\t  *\n\t  *\t@return\tpackage name\n\t  */\n",
    "88330": "\t/**\n\t\tThe base class for activations is BaseActivation\n\t */\n",
    "88994": "\t/**\n\t * This is a length operator node.  Overrides this method\n\t * in UnaryOperatorNode for code generation purposes.\n\t */\n",
    "89015": "\t/**\n\t * Return the length\n\t *\n\t * @return\tThe length of the value this node represents\n\t *\n\t * @exception StandardException\t\tThrown on error\n\t */\n",
    "89233": "\t/**\n\t * Prints the sub-nodes of this object.  See QueryTreeNode.java for\n\t * how tree printing is supposed to work.\n\t *\n\t * @param depth\t\tThe depth of this node in the tree\n\t */\n",
    "89234": "\t/**\n\t * Convert this object to a String.  See comments in QueryTreeNode.java\n\t * for how this should be done for tree printing.\n\t *\n\t * @return\tThis object as a String\n\t */\n",
    "89467": "\t/**\n\t\tCheck to see if a database has been upgraded to the required\n\t\tlevel in order to use a language feature. \n\n\t\t@param majorVersion Data Dictionary major version\n\t\t@param feature Non-null to throw an error, null to return the state of the version match.\n\n\t\t@return True if the database has been upgraded to the required level, false otherwise.\n\t*/\n",
    "89612": "\t/**\n\t * Determine the type the binary method is called on.\n\t * By default, based on the receiver.\n\t *\n\t * Override in nodes that use methods on super-interfaces of\n\t * the receiver's interface, such as comparisons.\n\t *\n\t * @exception StandardException\t\tThrown on error\n\t */\n",
    "89786": "\t/**\n\t * The execute method returns a result set that will evaluate the\n\t * statement this activation class is the compiled form of.\n\t * REVISIT: do we need to give the caller the ability to touch it\n\t * directly, or could we wrap the alterations to it in this class?\n\t */\n",
    "89795": "\t/**\n\t * Activations might have need of internal functions\n\t * that are not used by the result sets, but by other\n\t * activation functions. Thus, we make it possible\n\t * for functions to be generated directly as well\n\t * as through the newExprFun interface.  newExprFun\n\t * should be used when a static field pointing to the\n\t * expression function is needed.\n\t * <p>\n\t * The generated function will generally have a generated name\n\t * that can be viewed through the MethodBuilder interface.\n\t * This name is generated to ensure uniqueness from other\n\t * function names in the activation class. If you pass in a function\n\t * name, think carefully about whether it will collide with other names.\n\t *\n\t * @param exprName\tName of function. Usually null, which causes us to\n\t *\t\t\t\t\tgenerate a unique name.\n\t * @param returnType the return type of the function\n\t * @param modifiers the modifiers on the function\n\t *\n\t * @see #newExprFun\n\t */\n",
    "89803": "\t/**\n\t\tPush an expression that is a GeneratedMethod reference to the\n\t\tpassed in method. aka. a \"function pointer\".\n\t*/\n",
    "89804": "\t/**\n\t * Start a user expression.  The difference between a normal expression\n\t * (returned by newExprFun)\n\t * and a user expression is that a user expression catches all exceptions\n\t * (because we don't want random exceptions thrown from user methods to\n\t * propagate to the rest of the system.\n\t *\n\t * @param functionName\tName to give to the function. If null, we'll generate a\n\t *\t\t\t\t\t\tunique name.\n\t * @param returnType\tA String telling the return type from the expression\n\t *\n\t * @return\tA new MethodBuilder\n\t */\n",
    "89806": "\t/**\n\t\tThis utility method returns an expression for CURRENT_DATE.\n\t\tGet the expression this way, because the activation needs to \n\t\tgenerate support information for CURRENT_DATE,\n\t\tthat would otherwise be painful to create manually.\n\t */\n",
    "89807": "\t/**\n\t\tThis utility method returns an expression for CURRENT_TIME.\n\t\tGet the expression this way, because the activation needs to \n\t\tgenerate support information for CURRENT_TIME,\n\t\tthat would otherwise be painful to create manually.\n\t */\n",
    "89809": "\t/**\n\t\tThis utility method generates an expression for CURRENT_TIMESTAMP.\n\t\tGet the expression this way, because the activation needs to \n\t\tgenerate support information for CURRENT_TIMESTAMP,\n\t\tthat would otherwise be painful to create manually.\n\t */\n",
    "89823": "\t/**\n\t\tThis utility method returns the resultSetClosed method reference that the\n\t\tactivation wants called when a result set closes, to let it clean up.\n\t\tThis will be null if none was needed.\n\n\t\tREMIND: because ObjectManager returns exceptions on its invoke() method\n\t\tand close() is not supposed to return exceptions, we may want to\n\t\tmove this to be something done on open() instead of on close().\n\t\tOtherwise, we have to do try/catch/THROWASSERT in the close code,\n\t\twhich looks unfriendly.\n\t */\n",
    "89827": "\t/**\n\t * Generate a reference to the row array that\n\t * all activations use.\n\t * \n\t * @param eb the expression block\n\t *\n\t * @return expression\n\t */\n",
    "89836": "\t/**\n\t * Take the generated class, and turn it into an\n\t * actual class.\n\t * <p> This method assumes, does not check, that\n\t * the class and its parts are all complete.\n \t *\n\t * @param savedBytes place to save generated bytes.\n\t *\tif null, it is ignored\n\t * @exception StandardException thrown when exception occurs\n\t */\n",
    "89838": "\t/**\n\t * Get a \"this\" expression declared as an Activation.\n\t * This is the commonly used type of the this expression.\n\t *\n\t */\n",
    "89839": "\t/**\n\t\tGenerate a Null data value.\n\t\tNothing is required on the stack, a SQL null data value\n\t\tis pushed.\n\t*/\n",
    "89841": "\t/**\n\t\tGenerate a Null data value.\n\t\tThe express value is required on the stack and will be popped, a SQL null data value\n\t\tis pushed.\n\t*/\n",
    "89842": "\t/**\n\t\tGenerate a data value.\n\t\tThe value is to be set in the SQL data value is required\n\t\ton the stack and will be popped, a SQL data value\n\t\tis pushed.\n\t*/\n",
    "89962": "\t/**\n\t * Returns the current SQL text string that is being parsed.\n\t *\n\t * @return\tCurrent SQL text string.\n\t *\n\t */\n",
    "90128": "\t/**\n\t  *\tGet the NodeFactory for this context\n\t  *\n\t  *\t@return\tThe NodeFactory for this context.\n\t  */\n",
    "90195": "\t/**\n\t\tAdd a compile time warning.\n\t*/\n",
    "90197": "\t/**\n\t\tGet the chain of compile time warnings.\n\t*/\n",
    "90348": "\t/**\n\t\tCheck the reliability type of this java value.\n\n\t    @exception StandardException\t\tThrown on error\n\n\t\t@see org.apache.derby.iapi.sql.compile.CompilerContext\n\t*/\n",
    "90419": "\t/**\n\t\tSet the activation for a single execution.\n\n\t\t@see Activation#setSingleExecution\n\t*/\n",
    "90420": "\t/**\n\t\tIs the activation set up for a single execution.\n\n\t\t@see Activation#isSingleExecution\n\t*/\n",
    "90422": "\t/**\n\t\tGet the number of subqueries in the entire query.\n\t\t@return int\t The number of subqueries in the entire query.\n\t */\n",
    "90466": "\t/**\n\t * Gets information from its source. We might want\n\t * to have this take a CursorResultSet in its constructor some day,\n\t * instead of doing a cast here?\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return the row location of the current cursor row.\n\t * @exception StandardException thrown on failure.\n\t */\n",
    "90528": "\t/**\n     * open a scan on the table. scan parameters are evaluated\n     * at each open, so there is probably some way of altering\n     * their values...\n\t *\n\t * @exception StandardException thrown on failure to open\n     */\n",
    "90536": "\t/**\n\t * This result set has its row location from\n\t * the last fetch done. If it is closed,\n\t * a null is returned.\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return the row location of the current row.\n\t * @exception StandardException thrown on failure to get row location\n\t */\n",
    "90671": "\t/**\n\t * Gets information from its source. We might want\n\t * to have this take a CursorResultSet in its constructor some day,\n\t * instead of doing a cast here?\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return the row location of the current cursor row.\n\t * @exception StandardException thrown on failure.\n\t */\n",
    "90739": "\t/**\n\t * A join is combining rows from two sources, so it has no\n\t * single row location to return; just return a null.\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return the row location of the current cursor row.\n\t */\n",
    "90740": "\t/**\n\t * A join is combining rows from two sources, so it \n\t * should never be used in a positioned update or delete.\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return a null value.\n\t */\n",
    "90770": "\t/**\n\t\tReport if closed.\n\t */\n",
    "90774": "\t/**\n     * Returns the description of the table's rows\n\t */\n",
    "90797": "    /**\n\t  *\tReports whether these constants are up-to-date. This returns true\n\t  *\tfor homogenous Cloudscape/Cloudsync. For the Plugin, this may\n\t  *\treturn false;\n\t  *\n\t  *\t@return\ttrue if these constants are up-to-date\n\t  *\t\t\tfalse otherwise\n\t  */\n",
    "90915": "\t/**\n     * Returns the description of the table's rows\n\t */\n",
    "90917": "\t/**\n\t\tReturn my cursor name for JDBC. Can be null.\n\t*/\n",
    "90924": "\t/**\n\t * This is not operating against a stored table,\n\t * so it has no row location to report.\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return a null.\n\t */\n",
    "90928": "\t/**\n\t * This is not used in positioned update and delete,\n\t * so just return a null.\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return a null.\n\t */\n",
    "90977": "\t/**\n\t * reopen this ResultSet.\n\t *\n\t * @exception StandardException thrown if cursor finished.\n\t */\n",
    "90994": "\t/**\n\t\tJust report that it is always closed.\n\t\tRESOLVE: if we don't report that we are closed,\n\t\tthen we will wind up with a dependency problem when\n\t\twe send an invalidateFor on our own Statement.  It\n\t\twill call lcc.verifyNoOpenResultSets(), which is really\n\t\tsupposed to be verify that there are no read only\n\t\tresult sets that are open.\n\t */\n",
    "91015": "\t/**\n\t\tReturn the cursor name, null in this case.\n\n\t\t@see ResultSet#getCursorName\n\t*/\n",
    "91061": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91066": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91071": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91074": "\t/**\n\t * Get the objects to be displayed when this tree object is expanded.\n\t * <P>\n\t * The objects returned can be of any type, including addtional Inspectables.\n   *\n\t * @return java.util.Vector\tA vector of objects.\n\t */\n",
    "91076": "\t/**\n   * Return the time for all operations performed by this node, and the children\n   * of this node.  The times included open, next, and close.\n\t *\n\t */\n",
    "91077": "\t/**\n   * Return the time for all operations performed by the children of this node.\n\t *\n\t */\n",
    "91080": "\t/**\n   * Return the time for all operations performed by this node, but not the\n   * time for the children of this node.\n\t *\n\t */\n",
    "91088": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91097": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91104": "\t/**\n\t * Get the objects to be displayed when this tree object is expanded.\n\t * <P>\n\t * The objects returned can be of any type, including addtional Inspectables.\n   *\n\t * @return java.util.Vector\tA vector of objects.\n\t */\n",
    "91112": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91121": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91130": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91133": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91141": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91142": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91149": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91150": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91157": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91158": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91159": "\t\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91166": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91175": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91178": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91182": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91187": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91188": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91193": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91202": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91208": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91244": "\t/**\n\t * Get the objects to be displayed when this tree object is expanded.\n\t * <P>\n\t * The objects returned can be of any type, including addtional Inspectables.\n   *\n\t * @return java.util.Vector\tA vector of objects.\n\t */\n",
    "91279": "\t/**\n     * Returns the description of the first source.\n     * Assumes the compiler ensured both sources\n     * had the same description.\n\t */\n",
    "91286": "\t/**\n\t\tA union has a single underlying row at a time, although\n\t\tfrom one of several sources.\n\t\n\t\t@see CursorResultSet\n\t \n\t\t@return the row location of the current cursor row.\n\t\t@exception StandardException thrown on failure\n\t */\n",
    "91292": "\t/**\n\t\tThis is called prior to each execution of the statement, to\n\t\tensure that it starts over with a new current datetime value.\n\t */\n",
    "91330": "\t/**\n\t * Mark the ResultSet as the topmost one in the ResultSet tree.\n\t * Useful for closing down the ResultSet on an error.\n\t *\n\t * @return Nothing.\n\t */\n",
    "91411": "\t/**\n     * If open and not returned yet, returns the row\n     * after plugging the parameters into the expressions.\n\t *\n\t * @exception StandardException thrown on failure.\n     */\n",
    "91490": "\t/**\n\t  *\tGet the name of the table that these column live in.\n\t  *\n\t  *\t@return\treferenced table name\n\t  */\n",
    "91491": "\t/**\n\t  *\tGet the referential Action for an Update.\n\t  *\n\t  *\t@return\treferential Action for update\n\t  */\n",
    "91493": "\t/**\n\t  *\tGet the referential Action for a Delete.\n\t  *\n\t  *\t@return\treferential Action Delete rule\n\t  */\n",
    "91567": "\t/**\n\t\tA generated class can create its own closeActivationAction\n\t\tmethod to invoke special logic when the activation is closed.\n\t*/\n",
    "91570": "\t/**\n\t\tFind out if the activation closed or not.\n\t\t@return true if the prepared statement has been closed.\n\t */\n",
    "91573": "\t/**\n\t\tSet this Activation for a single execution.\n\n\t\t@see Activation#setSingleExecution\n\t*/\n",
    "91576": "\t/**\n\t\tReturns true if this Activation is only going to be used for\n\t\tone execution.\n\n\t\t@see Activation#isSingleExecution\n\t*/\n",
    "91579": "\t/**\n\t\tGet the number of subqueries in the entire query.\n\t\t@return int\t The number of subqueries in the entire query.\n\t */\n",
    "91621": "\t/**\n\t  get the cursor name.  For something that isn't\n\t  a cursor, this is used as a string name of the\n\t  result set for messages from things like the\n\t  dependency manager.\n\t  <p>\n\t  Activations that do support cursors will override\n\t  this.\t\n\t*/\n",
    "91632": "\t/**\n\t\tUsed in the execute method of activations for\n\t\tgenerating the result sets that they concatenate together.\n\t */\n",
    "91636": "\t/**\n\t\tUsed in activations for generating rows.\n\t */\n",
    "91638": "\t/**\n\t\tUsed in CurrentOfResultSet to get to the target result set\n\t\tfor a cursor. Overridden by activations generated for\n\t\tupdatable cursors.  Those activations capture the target\n\t\tresult set in a field in their execute() method, and then\n\t\treturn the value of that field in their version of this method.\n\n\t\t@return null.\n\t */\n",
    "91642": "\t/**\n\t\tUsed in CurrentOfResultSet to get to the cursor result set\n\t\tfor a cursor.  Overridden by activations generated for\n\t\tupdatable cursors.  Those activations capture the cursor\n\t\tresult set in a field in their execute() method, and then\n\t\treturn the value of that field in their version of this method.\n\n\t\t@return null\n\t */\n",
    "91643": "\t/**\n\t\tVarious activation methods need to disallow their\n\t\tinvocation if the activation is closed. This lets them\n\t\tcheck and throw without generating alot of code.\n\t\t<p>\n\t\tThe code to write to generate the call to this is approximately:\n\t\t<verbatim>\n\t\t\t// jf is a JavaFactory\n\t\t\tCallableExpression ce = jf.newMethodCall(\n\t\t\t\tjf.thisExpression(),\n\t\t\t\tBaseActivation.CLASS_NAME,\n\t\t\t\t\"throwIfClosed\",\n\t\t\t\t\"void\",\n\t\t\t\tacb.exprArray(jf.newStringLiteral(...some literal here...)));\n\n\t\t\t//mb is a MethodBuilder\n\t\t\tmb.addStatement(jf.newStatement(ce));\n\t\t</verbatim>\n\t\tThe java code to write to call this is:\n\t\t<verbatim>\n\t\t\tthis.throwIfClosed(...some literal here...);\n\t\t</verbatim>\n\t\tIn both cases, \"...some literal here...\" gets replaced with\n\t\tan expression of type String that evaluates to the name\n\t\tof the operation that is being checked, like \"execute\" or\n\t\t\"reset\".\n\n\t\t@exception StandardException thrown if closed\n\t */\n",
    "91735": "\t/**\n\t * reopen this ResultSet.\n\t *\n\t * @exception StandardException thrown if cursor finished.\n\t */\n",
    "91741": "\t/**\n\t * Return the RowLocation of the base row.\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return the row location of the current cursor row.\n\t * @exception StandardException thrown on failure.\n\t */\n",
    "91760": "\t/**\n\t * Used to get a proxy for the current connection.\n\t *\n\t * @exception SQLException\t\tThrown on failure to get connection\n\t */\n",
    "91763": "\t/**\n\t\tReal implementations of this method are provided by a generated class.\n\t*/\n",
    "91880": "\t/**\n\t\tCheck that all of the dependent's dependencies are valid.\n\n\t\t@return true if the dependent is currently valid\n\t */\n",
    "91942": "\t/**\n\t * the update mode of the cursor\n\t *\n\t * @return\tThe update mode of the cursor\n\t */\n",
    "91988": "    /**\n     * A driver may convert the JDBC sql grammar into its system's\n     * native SQL grammar prior to sending it; nativeSQL returns the\n     * native form of the statement that the driver would have sent.\n     *\n     * @param sql a SQL statement that may contain one or more '?'\n     * parameter placeholders\n     * @return the native form of this statement\n     */\n",
    "91992": "    /**\n     * If a connection is in auto-commit mode, then all its SQL\n     * statements will be executed and committed as individual\n     * transactions.  Otherwise, its SQL statements are grouped into\n     * transactions that are terminated by either commit() or\n     * rollback().  By default, new connections are in auto-commit\n     * mode.\n     *\n     * The commit occurs when the statement completes or the next\n     * execute occurs, whichever comes first. In the case of\n     * statements returning a ResultSet, the statement completes when\n     * the last row of the ResultSet has been retrieved or the\n     * ResultSet has been closed. In advanced cases, a single\n     * statement may return multiple results as well as output\n     * parameter values. Here the commit occurs when all results and\n     * output param values have been retrieved.\n     *\n     * @param autoCommit true enables auto-commit; false disables\n     * auto-commit.  \n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "91995": "    /**\n     * Get the current auto-commit state.\n     *\n     * @return Current state of auto-commit mode.\n     * @see #setAutoCommit \n     */\n",
    "91998": "    /**\n     * Commit makes all changes made since the previous\n     * commit/rollback permanent and releases any database locks\n     * currently held by the Connection. This method should only be\n     * used when auto commit has been disabled.\n     *\n     * @exception SQLException if a database-access error occurs.\n     * @see #setAutoCommit \n     */\n",
    "92002": "    /**\n     * Rollback drops all changes made since the previous\n     * commit/rollback and releases any database locks currently held\n     * by the Connection. This method should only be used when auto\n     * commit has been disabled.\n     *\n     * @exception SQLException if a database-access error occurs.\n     * @see #setAutoCommit \n     */\n",
    "92005": "    /**\n     * In some cases, it is desirable to immediately release a\n     * Connection's database and JDBC resources instead of waiting for\n     * them to be automatically released; the close method provides this\n     * immediate release. \n     *\n     * <P><B>Note:</B> A Connection is automatically closed when it is\n     * garbage collected. Certain fatal errors also result in a closed\n     * Connection.\n     *\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "92011": "    /**\n     * A Connection's database is able to provide information\n     * describing its tables, its supported SQL grammar, its stored\n     * procedures, the capabilities of this connection, etc. This\n     * information is made available through a DatabaseMetaData\n     * object.\n     *\n     * @return a DatabaseMetaData object for this Connection \n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "92016": "    /**\n     * A sub-space of this Connection's database may be selected by setting a\n     * catalog name. If the driver does not support catalogs it will\n     * silently ignore this request.\n     *\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "92020": "    /**\n     * Return the Connection's current catalog name.\n     *\n     * @return the current catalog name or null\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "92035": "\t/**\n\t * if auto commit is on, remember that we need to commit\n\t * the current statement.\n\t */\n",
    "92070": "\t/**\n\t\tJDBC states that a Statement is closed when garbage collected.\n\n\t\t@exception Throwable Allows any exception to be thrown during finalize\n\t*/\n",
    "92071": "\t/**\n\t\tAdditional close to close our activation.\n\n\t\t@exception SQLException\tthrown on failure\n\t */\n",
    "92073": "    /**\n     * Set a parameter to SQL NULL.\n     *\n     * <P><B>Note:</B> You must specify the parameter's SQL type.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param sqlType SQL type code defined by java.sql.Types\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92074": "    /**\n     * Set a parameter to a Java boolean value.  According to the JDBC API spec,\n\t * the driver converts this to a SQL BIT value when it sends it to the\n\t * database. But we don't have to do this, since the database engine\n\t * supports a boolean type.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92077": "    /**\n     * Set a parameter to a Java byte value.  The driver converts this\n     * to a SQL TINYINT value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92079": "    /**\n     * Set a parameter to a Java short value.  The driver converts this\n     * to a SQL SMALLINT value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92081": "    /**\n     * Set a parameter to a Java int value.  The driver converts this\n     * to a SQL INTEGER value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92082": "    /**\n     * Set a parameter to a Java long value.  The driver converts this\n     * to a SQL BIGINT value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92084": "    /**\n     * Set a parameter to a Java float value.  The driver converts this\n     * to a SQL FLOAT value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92085": "    /**\n     * Set a parameter to a Java double value.  The driver converts this\n     * to a SQL DOUBLE value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92089": "    /**\n     * Set a parameter to a Java String value.  The driver converts this\n     * to a SQL VARCHAR or LONGVARCHAR value (depending on the arguments\n     * size relative to the driver's limits on VARCHARs) when it sends\n     * it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92091": "\t/**\n\t\tReset the connection before it is returned from a PooledConnection\n\t\tto a new application request (wrapped by a BrokeredConnection).\n\t\tExamples of reset covered here is dropping session temporary tables\n\t\tand reseting IDENTITY_VAL_LOCAL.\n\t\tMost JDBC level reset is handled by calling standard java.sql.Connection\n\t\tmethods from EmbedPooledConnection.\n\t */\n",
    "92092": "    /**\n     * Set a parameter to a Java array of bytes.  The driver converts\n     * this to a SQL VARBINARY or LONGVARBINARY (depending on the\n     * argument's size relative to the driver's limits on VARBINARYs)\n     * when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value \n\t * @exception SQLException thrown on failure.\n     */\n",
    "92093": "    /**\n     * Set a parameter to a java.sql.Date value.  The driver converts this\n     * to a SQL DATE value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92095": "    /**\n     * Set a parameter to a java.sql.Time value.  The driver converts this\n     * to a SQL TIME value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92110": "    /**\n     * <P>In general, parameter values remain in force for repeated use of a\n     * Statement. Setting a parameter value automatically clears its\n     * previous value.  However, in some cases it is useful to immediately\n     * release the resources used by the current parameter values; this can\n     * be done by calling clearParameters.\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92129": "    /**\n     * What's the number of columns in the ResultSet?\n     *\n     * @return the number\n     */\n",
    "92130": "    /**\n     * Is the column automatically numbered, thus read-only?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if so\n\t * @exception SQLException thrown on failure\n     *\n     */\n",
    "92132": "    /**\n     * Does a column's case matter?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if so\n\t * @exception SQLException thrown on failure\n     */\n",
    "92133": "    /**\n     * Can the column be used in a where clause?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if so\n\t * @exception SQLException thrown on failure\n     */\n",
    "92134": "    /**\n     * Is the column a cash value?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if so\n\t * @exception SQLException thrown on failure\n     */\n",
    "92135": "    /**\n     * Can you put a NULL in this column?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return columnNoNulls, columnNullable or columnNullableUnknown\n\t * @exception SQLException thrown on failure\n     */\n",
    "92136": "    /**\n     * Is the column a signed number?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if so\n\t * @exception SQLException thrown on failure\n     */\n",
    "92138": "    /**\n     * What's the column's normal max width in chars?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return max width\n\t * @exception SQLException thrown on failure\n     */\n",
    "92139": "    /**\n     * What's the suggested column title for use in printouts and\n     * displays?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if so\n\t * @exception SQLException thrown on failure\n     */\n",
    "92140": "    /**\n     * What's a column's name?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return column name\n\t * @exception SQLException thrown on failure\n     */\n",
    "92141": "    /**\n     * What's a column's table's schema?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return schema name or \"\" if not applicable\n\t * @exception SQLException thrown on failure\n     */\n",
    "92142": "    /**\n     * What's a column's number of decimal digits?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return precision\n\t * @exception SQLException thrown on failure\n     */\n",
    "92144": "    /**\n     * What's a column's number of digits to right of the decimal point?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return scale\n\t * @exception SQLException thrown on failure\n     */\n",
    "92145": "    /**\n     * What's a column's table name?\n     *\n     * @return table name or \"\" if not applicable\n\t * @exception SQLException thrown on failure\n     */\n",
    "92146": "    /**\n     * What's a column's table's catalog name?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return column name or \"\" if not applicable.\n\t * @exception SQLException thrown on failure\n     */\n",
    "92147": "    /**\n     * What's a column's SQL type?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return SQL type\n     * @see Types\n\t * @exception SQLException thrown on failure\n     */\n",
    "92149": "\t/**\n\t\tOverride Throwable's toString() to avoid the class name\n\t\tappearing in the message. \n\t*/\n",
    "92150": "    /**\n     * What's a column's data source specific type name?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return type name\n\t * @exception SQLException thrown on failure\n     */\n",
    "92153": "    /**\n     * Is a column definitely not writable?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if so\n\t * @exception SQLException thrown on failure\n     */\n",
    "92157": "    /**\n     * Is it possible for a write on the column to succeed?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if so\n\t * @exception SQLException thrown on failure\n     */\n",
    "92160": "    /**\n     * Will a write on the column definitely succeed?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if so\n\t * @exception SQLException thrown on failure\n     */\n",
    "92175": "\t/**\n\t\tJDBC states that a ResultSet is closed when garbage collected.\n\t\tWe simply mark the activation as unused. Some later use\n\t\tof the connection will clean everything up.\n\n\t\t@exception Throwable Allows any exception to be thrown during finalize\n\t*/\n",
    "92184": "    /**\n     * The maxFieldSize limit (in bytes) is the maximum amount of data\n     * returned for any column value; it only applies to BINARY,\n     * VARBINARY, LONGVARBINARY, CHAR, VARCHAR, and LONGVARCHAR\n     * columns.  If the limit is exceeded, the excess data is silently\n     * discarded.\n     *\n     * @return the current max column size limit; zero means unlimited\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92192": "    /**\n     * If escape scanning is on (the default) the driver will do\n     * escape substitution before sending the SQL to the database.\n     *\n     * @param enable true to enable; false to disable\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92193": "    /**\n     * The queryTimeout limit is the number of seconds the driver will\n     * wait for a Statement to execute. If the limit is exceeded a\n     * SQLException is thrown.\n     *\n     * @return the current query timeout limit in seconds; zero means unlimited\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92195": "    /**\n     * The queryTimeout limit is the number of seconds the driver will\n     * wait for a Statement to execute. If the limit is exceeded a\n     * SQLException is thrown.\n     *\n     * @param seconds the new query timeout limit in seconds; zero means unlimited\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92196": "    /**\n     * Cancel can be used by one thread to cancel a statement that\n     * is being executed by another thread.\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92198": "    /**\n     * The first warning reported by calls on this Statement is\n     * returned.  A Statment's execute methods clear its SQLWarning\n     * chain. Subsequent Statement warnings will be chained to this\n     * SQLWarning.\n     *\n     * <p>The warning chain is automatically cleared each time\n     * a statement is (re)executed.\n     *\n     * <P><B>Note:</B> If you are processing a ResultSet then any\n     * warnings associated with ResultSet reads will be chained on the\n     * ResultSet object.\n     *\n     * @return the first SQLWarning or null\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92199": "    /**\n     * After this call getWarnings returns null until a new warning is\n     * reported for this Statement.\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92202": "    /**\n     * setCursorName defines the SQL cursor name that will be used by\n     * subsequent Statement execute methods. This name can then be\n     * used in SQL positioned update/delete statements to identify the\n     * current row in the ResultSet generated by this statement.  If\n     * the database doesn't support positioned update/delete, this\n     * method is a noop.\n     *\n     * <P><B>Note:</B> By definition, positioned update/delete\n     * execution must be done by a different Statement than the one\n     * which generated the ResultSet being used for positioning. Also,\n     * cursor names must be unique within a Connection.\n     *\n     * @param name the new cursor name.\n     */\n",
    "92207": "    /**\n     * The number, types and properties of a ResultSet's columns\n     * are provided by the getMetaData method.\n     *\n     * @return the description of a ResultSet's columns\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92226": "\t/**\n\t\tExecute a single element of the batch. Overridden by EmbedPreparedStatement\n\t*/\n",
    "92241": "\t/**\n\t\tTransfer my batch of Statements to a newly created Statement.\n\t*/\n",
    "92266": "\t/**\n\t\tPrint the stack trace of the wrapped java exception or this\n\t\texception if there is none.\n\n\t\t@see Throwable#printStackTrace\n\t*/\n",
    "92267": "\t/**\n\t\tPrint the stack trace of the wrapped java exception or this\n\t\texception if there is none.\n\n\t\t@see Throwable#printStackTrace\n\t*/\n",
    "92268": "\t/**\n\t\tPrint the stack trace of the wrapped java exception or this\n\t\texception if there is none.\n\n\t\t@see Throwable#printStackTrace\n\t*/\n",
    "92269": "\t/**\n\t\tOverride Throwables toString() to avoid the class name\n\t\tappearing in the message.\n\t*/\n",
    "92277": "\t/**\n\t * Returns a property if it was set at the database or\n\t * system level. Treated as SERVICE property by default.\n\t *\n\t * @return a property string value.\n\t **/\n",
    "92286": "\t/**\n\t *  Check if we should activate this authentication service.\n\t */\n",
    "92289": "\t/**\n\t *  Check if we should activate the JNDI authentication service.\n\t */\n",
    "92299": "\t/**\n\t * Construct the initial JNDI directory context environment Properties\n\t * object. We retrieve JNDI environment properties that the user may\n\t * have set at the database level.\n\t *\n\t **/\n",
    "92300": "\t/**\n\t *  Check if we should activate this authentication service.\n\t */\n",
    "92303": "\t/**\n\t\tRead from the wrapped stream prepending the intial bytes if needed.\n\t*/\n",
    "92305": "\t/**\n\t\tRead from the wrapped stream prepending the intial bytes if needed.\n\t*/\n",
    "92353": "    /**\n     * Can all the procedures returned by getProcedures be called by the\n     * current user?\n     *\n     * @return true if so\n     */\n",
    "92356": "    /**\n     * Can all the tables returned by getTable be SELECTed by the\n     * current user?\n     *\n     * @return true if so\n     */\n",
    "92359": "    /**\n     * What's our user name as known to the database?\n     *\n     * @return our database user name\n     */\n",
    "92360": "    /**\n     * Is the database in read-only mode?\n     *\n     * @return true if so\n     */\n",
    "92364": "    /**\n     * Are NULL values sorted high?\n     *\n     * @return true if so\n     */\n",
    "92365": "    /**\n     * Are NULL values sorted low?\n     *\n     * @return true if so\n     */\n",
    "92367": "    /**\n     * Are NULL values sorted at the start regardless of sort order?\n     *\n     * @return true if so\n     */\n",
    "92369": "    /**\n     * Are NULL values sorted at the end regardless of sort order?\n     *\n     * @return true if so\n     */\n",
    "92372": "    /**\n     * What's the name of this database product?\n     *\n     * @return database product name\n     */\n",
    "92374": "    /**\n     * What's the version of this database product?\n     *\n     * @return database version\n     */\n",
    "92376": "    /**\n     * What's the name of this JDBC driver?\n     *\n     * @return JDBC driver name\n     */\n",
    "92380": "    /**\n     * What's the version of this JDBC driver?\n     *\n     * @return JDBC driver version\n     */\n",
    "92381": "    /**\n     * What's this JDBC driver's major version number?\n     *\n     * @return JDBC driver major version\n     */\n",
    "92383": "    /**\n     * What's this JDBC driver's minor version number?\n     *\n     * @return JDBC driver minor version number\n     */\n",
    "92386": "    /**\n     * Does the database store tables in a local file?\n     *\n     * @return true if so\n     */\n",
    "92388": "    /**\n     * Does the database use a file for each table?\n     *\n     * @return true if the database uses a local file for each table\n     */\n",
    "92390": "    /**\n     * Does the database treat mixed case unquoted SQL identifiers as\n     * case sensitive and as a result store them in mixed case?\n     *\n     * A JDBC-Compliant driver will always return false.\n     *\n     * @return true if so\n     */\n",
    "92392": "    /**\n     * Does the database treat mixed case unquoted SQL identifiers as\n     * case insensitive and store them in upper case?\n     *\n     * @return true if so\n     */\n",
    "92395": "    /**\n     * Does the database treat mixed case unquoted SQL identifiers as\n     * case insensitive and store them in lower case?\n     *\n     * @return true if so\n     */\n",
    "92397": "    /**\n     * Does the database treat mixed case unquoted SQL identifiers as\n     * case insensitive and store them in mixed case?\n     *\n     * @return true if so\n     */\n",
    "92400": "    /**\n     * Does the database treat mixed case quoted SQL identifiers as\n     * case sensitive and as a result store them in mixed case?\n     *\n     * A JDBC-Compliant driver will always return true.\n     *\n     * @return true if so\n     */\n",
    "92402": "    /**\n     * Does the database treat mixed case quoted SQL identifiers as\n     * case insensitive and store them in upper case?\n     *\n     * @return true if so\n     */\n",
    "92404": "    /**\n     * Does the database treat mixed case quoted SQL identifiers as\n     * case insensitive and store them in lower case?\n     *\n     * @return true if so\n     */\n",
    "92405": "    /**\n     * Does the database treat mixed case quoted SQL identifiers as\n     * case insensitive and store them in mixed case?\n     *\n     * @return true if so\n     */\n",
    "92409": "    /**\n     * What's the string used to quote SQL identifiers?\n     * This returns a space \" \" if identifier quoting isn't supported.\n     *\n     * A JDBC-Compliant driver always uses a double quote character.\n     *\n     * @return the quoting string\n     */\n",
    "92411": "    /**\n     * Get a comma separated list of all a database's SQL keywords\n     * that are NOT also SQL92 keywords.\n\tincludes reserved and non-reserved keywords.\n\n     * @return the list\n     */\n",
    "92412": "    /**\n     * Get a comma separated list of math functions.\n\tgetNumericFunctions lists \"math functions\" -- so built-in operators and\n\tthings like EXTRACT are not included.\n\tFIXME: find a way to reference method aliases known to be \"numeric\"\n    *\n     * @return the list\n     */\n",
    "92415": "    /**\n     * Get a comma separated list of string functions.\n\t\tREMIND, when they show up, something like this might appear here:\n\t\tFIXME: find a way to reference method aliases known to be \"string\"\n     * @return the list\n     */\n",
    "92418": "    /**\n     * Get a comma separated list of system functions.\n\t\tFIXME: find a way to reference system functions on Database when/if\n\t\tthey are registered as aliases or include the Database object too.\n     * @return the list\n     */\n",
    "92420": "    /**\n     * Get a comma separated list of time and date functions.\n\t\tnot sure if this includes these built-ins or not, but here they are.\n\t\tFIXME: find a way to reference method aliases known to be \"date/time\"\n     * @return the list\n     */\n",
    "92422": "    /**\n     * This is the string that can be used to escape '_' or '%' in\n     * the string pattern style catalog search parameters.\n        we have no default escape value, so = is the end of the next line\n     * <P>The '_' character represents any single character.\n     * <P>The '%' character represents any sequence of zero or\n     * more characters.\n     * @return the string used to escape wildcard characters\n     */\n",
    "92425": "    /**\n     * Get all the \"extra\" characters that can be used in unquoted\n     * identifier names (those beyond a-z, A-Z, 0-9 and _).\n     *\n     * @return the string containing the extra characters\n     */\n",
    "92427": "    /**\n     * Is \"ALTER TABLE\" with add column supported?\n     *\n     * @return true if so\n     */\n",
    "92429": "    /**\n     * Is \"ALTER TABLE\" with drop column supported?\n     *\n     * @return true if so\n     */\n",
    "92432": "    /**\n     * Is column aliasing supported?\n     *\n     * <P>If so, the SQL AS clause can be used to provide names for\n     * computed columns or to provide alias names for columns as\n     * required.\n     *\n     * A JDBC-Compliant driver always returns true.\n     *\n     * @return true if so\n     */\n",
    "92433": "    /**\n     * Are concatenations between NULL and non-NULL values NULL?\n     *\n     * A JDBC-Compliant driver always returns true.\n     *\n     * @return true if so\n     */\n",
    "92437": "    /**\n     * Is the CONVERT function between SQL types supported?\n     *\n     * @return true if so\n     */\n",
    "92440": "    /**\n     * Is CONVERT between the given SQL types supported?\n     *\n     * @param fromType the type to convert from\n     * @param toType the type to convert to\n     * @return true if so\n     * @see Types\n     */\n",
    "92441": "    /**\n     * Are table correlation names supported?\n     *\n     * A JDBC-Compliant driver always returns true.\n     *\n     * @return true if so\n     */\n",
    "92444": "    /**\n     * If table correlation names are supported, are they restricted\n     * to be different from the names of the tables?\n     *\n     * @return true if so\n     */\n",
    "92446": "    /**\n     * Are expressions in \"ORDER BY\" lists supported?\n     *\n     * @return true if so\n     */\n",
    "92448": "    /**\n     * Can an \"ORDER BY\" clause use columns not in the SELECT?\n     *\n     * @return true if so\n     */\n",
    "92450": "    /**\n     * Is some form of \"GROUP BY\" clause supported?\n     *\n     * @return true if so\n     */\n",
    "92454": "    /**\n     * Can a \"GROUP BY\" clause use columns not in the SELECT?\n     *\n     * @return true if so\n     */\n",
    "92456": "    /**\n     * Can a \"GROUP BY\" clause add columns not in the SELECT\n     * provided it specifies all the columns in the SELECT?\n     *\n     * @return true if so\n     */\n",
    "92458": "    /**\n     * Is the escape character in \"LIKE\" clauses supported?\n     *\n     * A JDBC-Compliant driver always returns true.\n     *\n     * @return true if so\n     */\n",
    "92461": "    /**\n     * Are multiple ResultSets from a single execute supported?\n     *\n     * @return true if so\n     */\n",
    "92462": "    /**\n     * Can we have multiple transactions open at once (on different\n     * connections)?\n     *\n     * @return true if so\n     */\n",
    "92465": "    /**\n     * Can columns be defined as non-nullable?\n     *\n     * A JDBC-Compliant driver always returns true.\n     *\n     * @return true if so\n     */\n",
    "92466": "    /**\n     * Is the ODBC Minimum SQL grammar supported?\n     *\n     * All JDBC-Compliant drivers must return true.\n     *\n     * @return true if so\n     */\n",
    "92469": "    /**\n     * Is the ODBC Core SQL grammar supported?\n     *\n     * @return true if so\n     */\n",
    "92473": "    /**\n     * Is the ODBC Extended SQL grammar supported?\n     *\n     * @return true if so\n     */\n",
    "92474": "    /**\n     * Is the ANSI92 entry level SQL grammar supported?\n     *\n     * All JDBC-Compliant drivers must return true.\n     *\n     * @return true if so\n     */\n",
    "92477": "    /**\n     * Is the ANSI92 intermediate SQL grammar supported?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92479": "    /**\n     * Is the ANSI92 full SQL grammar supported?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92481": "    /**\n     * Is the SQL Integrity Enhancement Facility supported?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92483": "    /**\n     * Is some form of outer join supported?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92486": "    /**\n     * Are full nested outer joins supported?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92488": "    /**\n     * Is there limited support for outer joins?  (This will be true\n     * if supportFullOuterJoins is true.)\n     *\n     * @return true if so\n\t * \n     */\n",
    "92491": "    /**\n     * What's the database vendor's preferred term for \"schema\"?\n     *\n     * @return the vendor term\n\t * \n     */\n",
    "92494": "    /**\n     * What's the database vendor's preferred term for \"procedure\"?\n     *\n     * @return the vendor term\n\t * \n     */\n",
    "92495": "    /**\n     * What's the database vendor's preferred term for \"catalog\"?\n     *\n     * @return the vendor term\n\t * \n     */\n",
    "92498": "    /**\n     * Does a catalog appear at the start of a qualified table name?\n     * (Otherwise it appears at the end)\n     *\n     * @return true if it appears at the start\n\t * \n     */\n",
    "92500": "    /**\n     * What's the separator between catalog and table name?\n     *\n     * @return the separator string\n\t * \n     */\n",
    "92502": "    /**\n     * Can a schema name be used in a data manipulation statement?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92505": "    /**\n     * Can a schema name be used in a procedure call statement?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92508": "    /**\n     * Can a schema name be used in a table definition statement?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92510": "    /**\n     * Can a schema name be used in an index definition statement?\n     *\n     * @return true if so\n     */\n",
    "92512": "    /**\n     * Can a schema name be used in a privilege definition statement?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92515": "    /**\n     * Can a catalog name be used in a data manipulation statement?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92517": "    /**\n     * Can a catalog name be used in a procedure call statement?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92519": "    /**\n     * Can a catalog name be used in a table definition statement?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92522": "    /**\n     * Can a catalog name be used in an index definition statement?\n     *\n     * @return true if so\n     */\n",
    "92523": "    /**\n     * Can a catalog name be used in a privilege definition statement?\n     *\n     * @return true if so\n     */\n",
    "92527": "    /**\n     * Is positioned DELETE supported?\n     *\n     * @return true if so\n     */\n",
    "92529": "    /**\n     * Is positioned UPDATE supported?\n     *\n     * @return true if so\n     */\n",
    "92532": "    /**\n     * Is SELECT for UPDATE supported?\n     *\n     * @return true if so\n     */\n",
    "92534": "    /**\n     * Are stored procedure calls using the stored procedure escape\n     * syntax supported?\n     *\n     * @return true if so\n     */\n",
    "92536": "    /**\n     * Are subqueries in comparison expressions supported?\n     *\n     * A JDBC-Compliant driver always returns true.\n     *\n     * @return true if so\n     */\n",
    "92539": "    /**\n     * Are subqueries in 'exists' expressions supported?\n     *\n     * A JDBC-Compliant driver always returns true.\n     *\n     * @return true if so\n     */\n",
    "92540": "    /**\n     * Are subqueries in 'in' statements supported?\n     *\n     * A JDBC-Compliant driver always returns true.\n     *\n     * @return true if so\n     */\n",
    "92547": "    /**\n     * Are correlated subqueries supported?\n     *\n     * A JDBC-Compliant driver always returns true.\n     *\n     * @return true if so\n     */\n",
    "92548": "    /**\n     * Is SQL UNION supported?\n     *\n     * @return true if so\n     */\n",
    "92551": "    /**\n     * Is SQL UNION ALL supported?\n     *\n     * @return true if so\n     */\n",
    "92555": "    /**\n     * Can cursors remain open across rollbacks?\n     *\n     * @return true if cursors always remain open; false if they might not remain open\n     */\n",
    "92558": "    /**\n     * Can statements remain open across commits?\n     *\n     * @return true if statements always remain open; false if they might not remain open\n     */\n",
    "92561": "    /**\n     * Can statements remain open across rollbacks?\n     *\n     * @return true if statements always remain open; false if they might not remain open\n     */\n",
    "92564": "    /**\n     * How many hex characters can you have in an inline binary literal?\n     *\n     * @return max literal length\n     */\n",
    "92565": "    /**\n     * What's the max length for a character literal?\n     *\n     * @return max literal length\n     */\n",
    "92568": "    /**\n     * What's the limit on column name length?\n     *\n     * @return max literal length\n     */\n",
    "92570": "    /**\n     * What's the maximum number of columns in a \"GROUP BY\" clause?\n     *\n     * @return max number of columns\n     */\n",
    "92572": "    /**\n     * What's the maximum number of columns allowed in an index?\n     *\n     * @return max columns\n     */\n",
    "92575": "    /**\n     * What's the maximum number of columns in an \"ORDER BY\" clause?\n     *\n     * @return max columns\n     */\n",
    "92577": "    /**\n     * What's the maximum number of columns in a \"SELECT\" list?\n     *\n     * we don't have a limit...\n     *\n     * @return max columns\n     */\n",
    "92580": "    /**\n     * What's the maximum number of columns in a table?\n     *\n     * @return max columns\n     */\n",
    "92582": "    /**\n     * How many active connections can we have at a time to this database?\n     *\n     * @return max connections\n     */\n",
    "92585": "    /**\n     * What's the maximum cursor name length?\n     *\n     * @return max cursor name length in bytes\n     */\n",
    "92587": "    /**\n     * What's the maximum length of an index (in bytes)?\n     *\n     * @return max index length in bytes\n     */\n",
    "92589": "    /**\n     * What's the maximum length allowed for a schema name?\n     *\n     * @return max name length in bytes\n     */\n",
    "92592": "    /**\n     * What's the maximum length of a procedure name?\n     *\n     * @return max name length in bytes\n     */\n",
    "92593": "    /**\n     * What's the maximum length of a catalog name?\n     *\n     * @return max name length in bytes\n     */\n",
    "92597": "    /**\n     * What's the maximum length of a single row?\n     *\n     * @return max row size in bytes\n     */\n",
    "92600": "    /**\n     * Did getMaxRowSize() include LONGVARCHAR and LONGVARBINARY\n     * blobs?\n     *\n     * @return true if so\n     */\n",
    "92601": "    /**\n     * What's the maximum length of a SQL statement?\n     *\n     * @return max length in bytes\n     */\n",
    "92604": "    /**\n     * How many active statements can we have open at one time to this\n     * database?\n     *\n     * @return the maximum\n     */\n",
    "92606": "    /**\n     * What's the maximum length of a table name?\n     *\n     * @return max name length in bytes\n     */\n",
    "92615": "    /**\n     * What's the maximum number of tables in a SELECT?\n     *\n     * @return the maximum\n     */\n",
    "92622": "    /**\n     * What's the maximum length of a user name?\n     *\n     * @return max name length  in bytes\n     */\n",
    "92630": "    /**\n     * What's the database's default transaction isolation level?  The\n     * values are defined in java.sql.Connection.\n     *\n     * @return the default isolation level\n     * @see Connection\n     */\n",
    "92639": "    /**\n     * Are transactions supported? If not, commit is a noop and the\n     * isolation level is TRANSACTION_NONE.\n     *\n     * @return true if transactions are supported\n     */\n",
    "92656": "    /**\n     * Are both data definition and data manipulation statements\n     * within a transaction supported?\n     *\n     * @return true if so\n     */\n",
    "92668": "    /**\n     * Does a data definition statement within a transaction force the\n     * transaction to commit?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92676": "    /**\n     * Is a data definition statement within a transaction ignored?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92771": "    /**\n     * Get the schema names available in this database.  The results\n     * are ordered by schema name.\n     *\n     * <P>The schema column is:\n     *  <OL>\n     *\t<LI><B>TABLE_SCHEM</B> String => schema name\n     *  </OL>\n     *\n     * @return ResultSet - each row has a single String column that is a\n     * schema name\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92775": "    /**\n     * Get the catalog names available in this database.  The results\n     * are ordered by catalog name.\n     *\n     * <P>The catalog column is:\n     *  <OL>\n     *\t<LI><B>TABLE_CAT</B> String => catalog name\n     *  </OL>\n     *\n     * @return ResultSet - each row has a single String column that is a\n     * catalog name\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92779": "    /**\n     * Get the table types available in this database.  The results\n     * are ordered by table type.\n     *\n     * <P>The table type is:\n     *  <OL>\n     *\t<LI><B>TABLE_TYPE</B> String => table type.  Typical types are \"TABLE\",\n     *\t\t\t\"VIEW\",\t\"SYSTEM TABLE\", \"GLOBAL TEMPORARY\",\n     *\t\t\t\"LOCAL TEMPORARY\", \"ALIAS\", \"SYNONYM\".\n     *  </OL>\n     *\n     * @return ResultSet - each row has a single String column that is a\n     * table type\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92850": "    /**\n     * Get a description of all the standard SQL types supported by\n     * this database. They are ordered by DATA_TYPE and then by how\n     * closely the data type maps to the corresponding JDBC SQL type.\n     *\n     * <P>Each type description has the following columns:\n     *  <OL>\n     *\t<LI><B>TYPE_NAME</B> String => Type name\n     *\t<LI><B>DATA_TYPE</B> short => SQL data type from java.sql.Types\n     *\t<LI><B>PRECISION</B> int => maximum precision\n     *\t<LI><B>LITERAL_PREFIX</B> String => prefix used to quote a literal\n     *      (may be null)\n     *\t<LI><B>LITERAL_SUFFIX</B> String => suffix used to quote a literal\n            (may be null)\n     *\t<LI><B>CREATE_PARAMS</B> String => parameters used in creating\n     *      the type (may be null)\n     *\t<LI><B>NULLABLE</B> short => can you use NULL for this type?\n     *      <UL>\n     *      <LI> typeNoNulls - does not allow NULL values\n     *      <LI> typeNullable - allows NULL values\n     *      <LI> typeNullableUnknown - nullability unknown\n     *      </UL>\n     *\t<LI><B>CASE_SENSITIVE</B> boolean=> is it case sensitive?\n     *\t<LI><B>SEARCHABLE</B> short => can you use \"WHERE\" based on this type:\n     *      <UL>\n     *      <LI> typePredNone - No support\n     *      <LI> typePredChar - Only supported with WHERE .. LIKE\n     *      <LI> typePredBasic - Supported except for WHERE .. LIKE\n     *      <LI> typeSearchable - Supported for all WHERE ..\n     *      </UL>\n     *\t<LI><B>UNSIGNED_ATTRIBUTE</B> boolean => is it unsigned?\n     *\t<LI><B>FIXED_PREC_SCALE</B> boolean => can it be a money value?\n     *\t<LI><B>AUTO_INCREMENT</B> boolean => can it be used for an\n     *      auto-increment value?\n     *\t<LI><B>LOCAL_TYPE_NAME</B> String => localized version of type name\n     *      (may be null)\n     *\t<LI><B>MINIMUM_SCALE</B> short => minimum scale supported\n     *\t<LI><B>MAXIMUM_SCALE</B> short => maximum scale supported\n     *\t<LI><B>SQL_DATA_TYPE</B> int => unused\n     *\t<LI><B>SQL_DATETIME_SUB</B> int => unused\n     *\t<LI><B>NUM_PREC_RADIX</B> int => usually 2 or 10\n     *  </OL>\n     *\n     * @return ResultSet - each row is a SQL type description\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92854": "\t/**\n\t * Get a description of all the standard SQL types supported by\n\t * this database. They are ordered by DATA_TYPE and then by how\n\t * closely the data type maps to the corresponding JDBC SQL type.\n\t * Same as getTypeInfo above, except that the result set will\n\t * conform to ODBC specifications.\n\t */\n",
    "92859": "\t/**\n\t\tReset the cache statistics for the specified cache\n\t*/\n",
    "93292": "\t/**\n\tStore the stored representation of the column value in the stream.\n\tIt might be easier to simply store the properties - which would certainly\n\tmake upgrading easier.*/\n",
    "93320": "\t/** Get the id of the column to be qualified. **/\n",
    "93321": "\t/**\n\t * Get the value that the column is to be compared to.\n\t *\n\t * @exception StandardException\t\tThrown on error\n\t */\n",
    "93322": "\t/** Get the operator to use in the comparison. \n     *\n     *  @see DataValueDescriptor#compare\n     **/\n",
    "93324": "\t/** \n     *  Determine if the result from the compare operation is to be negated.  \n     *  <p>\n     *  If true then only rows which fail the compare operation will qualify.\n     *\n     *  @see DataValueDescriptor#compare\n     **/\n",
    "93326": "\t/** Get the getOrderedNulls argument to use in the comparison.\n     *  \n     *  @see DataValueDescriptor#compare\n     **/\n",
    "93543": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "93631": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "93688": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "93711": "\t/**\n\t\tThese following methods are only intended to be called by an\n\t\timplementation of a log factory. All other uses of this object should\n\t\tonly see it as a log instant.\n\t*/\n",
    "93715": "\t/**\n\t * Read this in.\n\t * @exception IOException error reading from log stream\n\t * @exception ClassNotFoundException corrupted log stream\n\t */\n",
    "93716": "\t/**\n\t * Write this out.\n\t * @exception IOException error writing to log stream\n\t */\n",
    "93733": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "93746": "\t/**\n\t\tGet my record id.\n\n\t\t<BR>\n\t\tMT - thread safe\n\n\t\t@see RecordHandle#getId\n\t*/\n",
    "93753": "\t/**\n\t\tIs a caller that holds a lock compatible with themselves?\n        <p>\n        Row locks held in the same transaction are always compatible with\n        themselves.\n\n\t\t<BR>\n\t\tMT - Single thread required (methods of Lockable)\n\n\t\t@see org.apache.derby.iapi.services.locks.Lockable#lockerAlwaysCompatible\n\t*/\t \n",
    "93757": "\t/**\n\t\tImplement value equality.\n\t\t<BR>\n\t\tMT - Thread safe\n\t*/\n",
    "93758": "\t/**\n\t\tReturn a hashcode based on value.\n\t\t<BR>\n\t\tMT - thread safe\n\t*/\n",
    "93764": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "93773": "\t/**\n\t\tremove the stream container\n\n\t\t@exception StandardException Standard Cloudscape error policy\t\t\n\t\t@see StreamContainerHandle#removeContainer\n\t */\n",
    "93774": "\t/**\n\t\tMT- not needed\n\t*/\n",
    "93775": "\t/**\n\t\tget the container key for the stream container\n\t */\n",
    "93777": "\t/**\n\t\tAttach me to a container. If this method returns false then\n\t\tI cannot be used anymore, and any reference to me must be discarded.\n\n\t\t@exception StandardException Standard Cloudscape error policy\n\t*/\n",
    "93788": "\t/**\n\t\tAdd a page to the container, if flag == ContainerHandle.ADD_PAGE_BULK,\n\t\ttell the container about it.\n\n\t\tThe page returned will be observing me.\n\n\t\t@see BaseContainer#addPage\n\t\t@see ContainerHandle#addPage\n\t\t@exception StandardException Standard Cloudscape error policy\n\t*/\n",
    "93879": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "93880": "\t/**\n\t\tReturn the last column of the row this operation logged\n\t*/\n",
    "93931": "\t/**\n\t\tSet container's identity\n\t\t@exception StandardException Standard Cloudscape error policy\n\t*/\n",
    "93950": "\t/**\n\t\tflush the cache to ensure all of my pages are written to disk\n\n\t\t@exception StandardException Standard Cloudscape error policy\n\t*/\n",
    "93980": "\t/**\n\t\tHas the page or its header been modified or about to be modified.\n\t\tSee comment on class header on meaning of isDirty and preDirty bits.\n\n\t\t@see Cacheable#isDirty\n\t*/\n",
    "93981": "\t/**\n\t\tHas the page or its header been modified.\n\t\tSee comment on class header on meaning of isDirty and preDirty bits.\n\t*/\n",
    "93998": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "94007": "\t/**\n\t\tCreate a new container, all references to identity must be through the\n\t\tpassed in identity, this object will no identity until after this method returns.\n\t*/\n",
    "94008": "\t/**\n\t\tRead the page at the positioned offset.\n\t\tThis default implementation, opens the stream and skips to the offset\n\t\tand then reads the data into pageData.\n\t*/\n",
    "94017": "\t/**\n\t  Get an input stream for re-reading the remembered bytes.\n\t  */\n",
    "94018": "\t/**\n\t  Get the byteHolder.\n\t  */\n",
    "94020": "\t/**\n\t  Clear all the remembered bytes. This stream will\n\t  remember any bytes read after this call.\n\t  @exception IOException thrown on an io error clearing backing\n\t             storage.\n\t  */\n",
    "94021": "\t/**\n\t  Set the InputStream from which this reads.\n\n\t  <P>Please note this does not clear remembered\n\t  bytes.\n\t */\n",
    "94022": "\t/**\n\t  Return true iff this RememberBytesInputStream is\n\t  in recording mode.\n\t  */\n",
    "94023": "\t/**\n\t  Return the number of bytes remains in the byteHolder\n\t  for reading, without setting the write/read mode.\n\t  */\n",
    "94025": "\t/**\n\t  remove the remaining bytes in the byteHolder to the beginning\n\t  set the position to start recording just after these bytes.\n\t  returns how many bytes was transfered to the beginning.\n\t  */\n",
    "94059": "\t/**\t\n\t\tOK to hand object outside to cache.. \n\t*/\n",
    "94087": "\t/**\n\t\tUnlatch the page.\n\t\t@see Page#unlatch\n\t*/\n",
    "94104": "\t/**\n\t\tIs another request compatible, no never.\n\t\t<BR> MT - single thread required (methods of Lockable)\n\t\t@see Lockable#requestCompatible\n\t*/\n",
    "94108": "\t/**\n\t\tIs another request compatible, no never.\n\t\t<BR> MT - single thread required (methods of Lockable)\n\t\t@see Lockable#requestCompatible\n\t*/\n",
    "94109": "\t/**\n\t\tUnlatch me, only to be called from lock manager.\n\t\t<BR> MT - single thread required (methods of Lockable)\n\n\t\t@see Lockable#requestCompatible\n\t*/\n",
    "94115": "\t/**\n\t\tGet the Page identifer\n\n\t\t<BR> MT - RESOLVE\n\t*/\n",
    "94118": "\t/**\n\t\tRelease the exclusive latch on the page.\n\t\t<BR>\n\t\tMT - latched\n\t*/\n",
    "94122": "\t/**\n\t\tMark the record at the passed in slot as deleted.\n\n\t\treturn code comes from StoredRecordHeader class:\n\t\t\treturn\t1, if delete status from not deleted to deleted\n\t\t\treturn -1, if delete status from deleted to not deleted\n\t\t\treturn  0, if status unchanged.\n\t\t<BR>\n\t\t<B>Any sub-class must call this method when deleting a record.</B>\n\n\t\t<BR>\n\t\tMT - latched\n\n\t\t@exception StandardException Standard Cloudscape error policy\n\t\t@exception IOException IO error accessing page\n\t*/\n",
    "94129": "\t/**\n\t\tFind the slot for the record with the passed in identifier.\n\n\t\t<BR>\n\t\tThis method returns the record regardless of its deleted status.\n        <BR>\n        The \"slotHint\" argument is a hint about what slot the record id might\n        be in.  Callers may save the last slot where the record was across\n        latch/unlatches to the page, and then pass that slot back as a hint - \n        if the page has not shuffled slots since the last reference then the\n        hint will succeed and a linear search is saved.  If the caller has\n        no idea where it may be, then FIRST_SLOT_NUMBER is passed in and a\n        linear search is performed.\n\t\t<BR>\n\t\tMT - latched\n\n        @param recordId  record id of the record to search for.\n        @param slotHint \"hint\" about which slot the record might be in.\n\t\t\n\t*/\n",
    "94292": "\t/**\n\t\tDiscontinue use of this container. Note that the unlockContainer\n\t\tcall made from this method may not release any locks. The container\n\t\tlock may be held until the end of the transaction.\n\n\t*/\n",
    "94304": "\t/**\n\t\tSet the container's dropped state\n\t*/\n",
    "94311": "\t/**\n\t\tCalled when the transaction is about to complete.\n\n\t\t@see java.util.Observer#update\n\t*/\n",
    "94332": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "94378": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "94475": "\t/**\n\t\tReally this is just a convience routine for callers that might not\n\t\thave access to a log factory.\n\t*/\n",
    "94490": "\t/**\n\t\tGet the root directory of the data storage area. Is always guaranteed to be an absolute path.\n\t*/\n",
    "94511": "\t/**\n\t\tDoes this factory support this service type.\n\t*/\n",
    "94538": "\t/**\n\t\tCalled after recovery is performed.\n\n\t\t@exception StandardException Standard Cloudscape Error Policy\n\t*/\n",
    "94554": "\t/**\n\t\tIs the store read-only.\n\t*/\n",
    "94561": "/**\n * <A NAME=\"methodCallParameterList\">methodCallParameterList</A>\n*/\n",
    "94576": "\t/**\n\t\tThe container is kept by the find() in File.openContainer. \n\t*/\n",
    "94584": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "94614": "\t/**\n\t\tDiscontinue use of this container. Note that the unlockContainer\n\t\tcall made from this method may not release any locks. The container\n\t\tlock may be held until the end of the transaction.\n\n\t*/\n",
    "94616": "\t/**\n\t\tReturns true if only a single handle is connected to this container.\n\t*/\n",
    "94638": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "94656": "\t/**\n\t\tAn equals method that returns true if the other obejct\n\t\tis a sub-class of this, and the container identities\n\t\tare equal *and* it is the same class as this.\n\t\t<BR>\n\t\tThis allows mutiple additions of value equality\n\t\tobejcts to the observer list while only retaining one.\n\t*/\n",
    "94716": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "94725": "\t/**\n\t\tReset the cache statistics for the specified cache\n\t*/\n",
    "94726": "\t/**\n\t\tReturn true if any transaction is currently blocked, even if not by\n\t\tthis transaction.\n\n\t */\n",
    "94746": "\t/**\n\t\tSet my transaction identifier.\n\t*/\n",
    "94813": "\t/**\n\t\tGet the Logger object used to write log records to the transaction log.\n\t*/\n",
    "94898": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "94908": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "94991": "\t/**\n\t\tGet the LockFactory to use with this store.\n\t*/\n",
    "95011": "\t/**\n\t\tReally this is just a convience routine for callers that might not\n\t\thave access to a log factory.\n\t*/\n",
    "95040": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "95048": "\t/**\n\t  We use this RawStore for all databases.\n\t  */\n",
    "95052": "\t/**\n\t\tIs the store read-only.\n\t\t@see RawStoreFactory#isReadOnly\n\t*/\n",
    "95131": "\t/**\n\t\tAll columns in TransactionTable VTI are of String type.\n\t\t@see java.sql.ResultSet#getString\n\t */\n",
    "95455": "    /**\n     * Is the column automatically numbered, and thus read-only?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if the column is automatically numbered\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95457": "    /**\n     * Does a column's case matter?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if the column is case-sensitive\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95458": "    /**\n     * Can the column be used in a WHERE clause?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if the column is searchable\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95459": "    /**\n     * Is the column a cash value?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if the column is a cash value\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95460": "    /**\n     * Can you put a NULL in this column?\t\t\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return columnNoNulls, columnNullable or columnNullableUnknown\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95461": "    /**\n     * Is the column a signed number?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if the column is a signed number\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95463": "    /**\n     * What's the column's normal maximum width in chars?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return the column's maximum width\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95465": "    /**\n     * What's the suggested column title for use in printouts and\n     * displays?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return the column's title\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95466": "    /**\n     * What's a column's name?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return column name\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95467": "    /**\n     * What's a column's table's schema?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return schema name or \"\" if not applicable\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95468": "    /**\n     * How many decimal digits are in the column?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return the column's precision\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95469": "    /**\n     * What's a column's number of digits to the right of the decimal point?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return the column's scale\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95471": "    /**\n     * What's a column's table name? \n     *\n\t * @param column the first column is 1, the second is 2, ...\n     * @return the column's table name or \"\" if not applicable\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95472": "    /**\n     * What's a column's table's catalog name?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return the column's table's catalog name or \"\" if not applicable.\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95473": "    /**\n     * What's a column's data source specific type name?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return the column's type name\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95474": "    /**\n     * Is a column definitely not writable?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true - vti's are read only\n\t *         false - column is not read-only\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95475": "    /**\n     * Is it possible for a write on the column to succeed?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if column is possibly writable\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95476": "    /**\n     * Will a write on the column definitely succeed?\t\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if column is definitely writable\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95477": "\t/**\n\t * Returns the fully-qualified name of the Java class whose instances\n\t * are manufactured if the method <code>ResultSet.<!-- -->getObject</code>\n\t * is called to retrieve a value from the column. JDBC 2.0.\n\t *\n\t * @exception SQLException if a database-access error occurs\n\t */\n",
    "95612": "\t/**\n\t\tSkip a field header and its data on the given stream.\n\t\t\n\t\t@exception IOException corrupt stream\n\t*/\n",
    "95656": "\t/**\n\t\tIn this case the Listeners are *not* notified. JDBC 3.0 spec section 11.4\n\t*/\n",
    "95659": "\t/**\n\t\tNotify the control class that a SQLException was thrown\n\t\tduring a call on one of the brokered connection's methods.\n\t*/\n",
    "95662": "\t/**\n\t\tAre held cursors allowed.\n\t*/\n",
    "95663": "\t/**\n\t\tAllow control over creating a Savepoint (JDBC 3.0)\n\t*/\n",
    "95665": "\t/**\n\t\tAllow control over calling rollback.\n\t*/\n",
    "95666": "\t/**\n\t\tAllow control over calling commit.\n\t*/\n",
    "95667": "\t/**\n\t\tClose called on BrokeredConnection. If this call\n\t\treturns true then getRealConnection().close() will be called.\n\n\t\tDon't close the underlying real connection as\n\t\tit is pooled.\n\t*/\n",
    "95669": "\t/**\n\t\tNo need to wrap statements for PooledConnections.\n\t*/\n",
    "95670": "\t/**\n\t\tNo need to wrap statements for PooledConnections.\n\t*/\n",
    "95671": "\t/**\n\t\tNo need to wrap statements for PooledConnections.\n\t*/\n",
    "95695": "\t/**\n\t * Gets the maximum time in seconds that this data source can wait while\n\t * attempting to connect to a database. A value of zero means that the\n\t * timeout is the default system timeout if there is one; otherwise it means\n\t * that there is no timeout. When a data source object is created, the login\n\t * timeout is initially zero.\n\t * \n\t * @return the data source login time limit\n\t * @exception SQLException\n\t *                if a database access error occurs.\n\t */\n",
    "95696": "\t/**\n\t * Sets the maximum time in seconds that this data source will wait while\n\t * attempting to connect to a database. A value of zero specifies that the\n\t * timeout is the default system timeout if there is one; otherwise it\n\t * specifies that there is no timeout. When a data source object is created,\n\t * the login timeout is initially zero.\n\t * <P>\n\t * Cloudscape ignores this property.\n\t * \n\t * @param seconds\n\t *            the data source login time limit\n\t * @exception SQLException\n\t *                if a database access error occurs.\n\t */\n",
    "95697": "\t/**\n\t * Get the log writer for this data source.\n\t * \n\t * <p>\n\t * The log writer is a character output stream to which all logging and\n\t * tracing messages for this data source object instance will be printed.\n\t * This includes messages printed by the methods of this object, messages\n\t * printed by methods of other objects manufactured by this object, and so\n\t * on. Messages printed to a data source specific log writer are not printed\n\t * to the log writer associated with the java.sql.Drivermanager class. When\n\t * a data source object is created the log writer is initially null, in\n\t * other words, logging is disabled.\n\t * \n\t * @return the log writer for this data source, null if disabled\n\t * @exception SQLException\n\t *                if a database-access error occurs.\n\t */\n",
    "95698": "\t/**\n\t * Set the log writer for this data source.\n\t * \n\t * <p>\n\t * The log writer is a character output stream to which all logging and\n\t * tracing messages for this data source object instance will be printed.\n\t * This includes messages printed by the methods of this object, messages\n\t * printed by methods of other objects manufactured by this object, and so\n\t * on. Messages printed to a data source specific log writer are not printed\n\t * to the log writer associated with the java.sql.Drivermanager class. When\n\t * a data source object is created the log writer is initially null, in\n\t * other words, logging is disabled.\n\t * \n\t * @param out\n\t *            the new log writer; to disable, set to null\n\t * @exception SQLException\n\t *                if a database-access error occurs.\n\t */\n",
    "95703": "\t/**\n\t\tAccept anything that starts with <CODE>jdbc:derby:</CODE>.\n\t\t@exception SQLException if a database-access error occurs.\n    @see java.sql.Driver\n\t*/\n",
    "95705": "    /**\n     * Returns the driver's major version number. \n     @see java.sql.Driver\n     */\n",
    "95706": "    /**\n     * Returns the driver's minor version number.\n     @see java.sql.Driver\n     */\n",
    "95707": "  /**\n   * Report whether the Driver is a genuine JDBC COMPLIANT (tm) driver.\n     @see java.sql.Driver\n   */\n",
    "95714": "\t/**\n\t\tCan cursors be held across commits.\n\t*/\n",
    "95718": "\t/**\n\t\tAllow control over setting auto commit mode.\n\t*/\n",
    "95720": "\t/**\n\t\tAre held cursors allowed.\n\t*/\n",
    "95723": "\t/**\n\t\tAllow control over creating a Savepoint (JDBC 3.0)\n\t*/\n",
    "95724": "\t/**\n\t\tAllow control over calling rollback.\n\t*/\n",
    "95725": "\t/**\n\t\tAllow control over calling commit.\n\t*/\n",
    "95727": "\t/**\n\t\tWrap and control a Statement\n\t*/\n",
    "95728": "\t/**\n\t\tWrap and control a PreparedStatement\n\t*/\n",
    "95730": "\t/**\n\t\tWrap and control a PreparedStatement\n\t*/\n",
    "95763": "\t/**\n\t\tGet the error code for an error given a type. The value of\n\t\tthe property messageId.type will be returned, e.g.\n\t\tdeadlock.sqlstate.\n\t*/\n",
    "95764": "\t/**\n\t\tDon't print the class name in the toString() method.\n\t*/\n",
    "95796": "\t/**\n\t * Convert the object representation of the class into\n\t * its class file format.\n\t * @exception IOException error writing the class\n\t */\n",
    "95824": "\t/**\n\t\tGeneric add entry to constant pool. Includes the logic\n\t\tfor an entry to occupy more than one slot (e.g. long).\n\n\t\t@return The number of slots occupied by the entry.\n.\n\t*/\n",
    "95825": "\t/**\n\t\tAdd an entry, but only if it doesn't exist.\n\n\t\t@return the constant pool index of the added\n\t\tor existing item.\n\t*/\n",
    "95826": "\t/**\n\t\tAdd an index reference.\n\t*/\n",
    "95827": "\t/**\n\t\tAdd a class entry to the pool.\n\t*/\n",
    "95828": "\t/**\n\t\tAdd a name and type entry\n\t*/\n",
    "95831": "\t/**\n\t\tAdd a UTF8 into the pool and return the index to it.\n\t*/\n",
    "95833": "\t/**\n\t\tAdd an extra UTF8 into the pool \n\t*/\n",
    "95834": "\t/**\n\t\tAdd a string entry\n\t*/\n",
    "95835": "\t/**\n\t\tAdd a string entry\n\t*/\n",
    "95838": "\t/**\n\t\tFind a class descriptor (section 4.4.1) and return its\n\t\tindex, returns -1 if not found.\n\t*/\n",
    "95839": "\t/**\n\t\tFind a name and type descriptor (section 4.4.6) and\n\t\treturn it's index. \n        <p>\n        returns -1 if not found.\n\t*/\n",
    "95850": "\t/**\n\t\tA helper to build a type description based on a Java class\n\t\tand an array arity.\n\n\t\tIf descriptor is true create a descriptor according to\n\t\tsection 4.3.2 of the vm spec. If false create a class name\n\t\taccording to sections 4.3.2 and 4.4.1 of the vm spec.\n\t\n\t */\n",
    "95892": "\t/**\n\t\tCheck to see if we have been interrupted. If we have then\n\t\ta ShutdownException will be thrown. This will be either the\n\t\tone passed to interrupt or a generic one if some outside\n\t\tsource interrupted the thread.\n\t*/\n",
    "95893": "\t/**\n\t\tSet the locale for this context.\n\t*/\n",
    "95906": "\t/**\n\t * Get current Context Manager\n\t * @return ContextManager current Context Manager\n\t */\n",
    "95924": "\t/**\n\t * The DEBUG_PRINT calls provides a convenient way to print debug\n\t * information to the db2j.LOG file,  The message includes a header\n\t *<p>\n\t *\tDEBUG <flag> OUTPUT: \n\t * before the message\n\t *<p>\n\t * If the debugStream stream cannot be found, the message is printed to\n\t * System.out.\n\t *\n\t */\n",
    "95931": "\t/**\n\t\tGet count of bytes written to the stream since the last\n\t\treset() call.\n\t*/\n",
    "95933": "\t/**\n\t\tSet a limit at which an exception will be thrown. This allows callers\n\t\tto count the number of bytes up to some point, without having to complete\n\t\tthe count. E.g. a caller may only want to see if some object will write out\n\t\tover 4096 bytes, without waiting for all 200,000 bytes of the object to be written.\n\t\t<BR>\n\t\tIf the passed in limit is 0 or negative then the stream will count bytes without\n\t\tthrowing an exception.\n\n\t\t@see EOFException\n\t*/\n",
    "95935": "\t/**\n\t\tAdd 1 to the count.\n\n\t\t@see OutputStream#write\n\t*/\n",
    "95937": "\t/**\n\t\tAdd len to the count, discard the data.\n\n\t\t@see OutputStream#write\n\t*/\n",
    "95967": "\t/**\n\t\tSet the array of bytes to be read.\n\t*/\n",
    "95977": "\t/**\n\t\tA setLimit which also sets the position to be offset.\n\n\t\t@exception IOException limit is out of range \n\t*/\n",
    "95982": "\t/**\n\t\tDiscard the data.\n\n\t\t@see OutputStream#write\n\t*/\n",
    "95983": "\t/**\n\t\tDiscard the data.\n\n\t\t@see OutputStream#write\n\t*/\n",
    "95984": "\t/**\n\t\tDiscard the data.\n\n\t\t@see OutputStream#write\n\t*/\n",
    "96002": "\t/**\n\t\tShrink the buffer left by the amount given. Ie.\n\t\tbytes from 0 to amountToShrinkBy are thrown away\n\t*/\n",
    "96022": "\t/**\n\t\tSet the limit of the stream that can be read. After this\n\t\tcall up to and including length bytes can be read from or skipped in\n\t\tthe stream. Any attempt to read more than length bytes will\n\t\tresult in an EOFException\n\n\t\t@return The value of length.\n\t\t@exception IOException IOException from some underlying stream\n\t\t@exception EOFException The set limit would exceed\n\t\tthe available data in the stream.\n\t*/\n",
    "96023": "\t/**\n\t\tClear any limit set by setLimit. After this call no limit checking\n\t\twill be made on any read until a setLimit()) call is made.\n\n\t\t@return the number of bytes within the limit that have not been read.\n\t\t-1 if no limit was set.\n\t*/\n",
    "96038": "\t/**\n\t\tClear the defaults from this Properties set.\n\t\tThis sets the default field to null and thus\n\t\tbreaks any link with the Properties set that\n\t\twas the default.\n\t*/\n",
    "96055": "\t/**\n\t** Get the length in bits\n\t**\n\t** @return The length in bits for this value\n\t**\n\t** NOTE: could possibly be changed to a long.  As is\n\t** we are restricted to 2^(31-3) -> 256meg instead\n\t** of 2^31 (Integer.MAX_VALUE) like other datatypes\n\t** (or 2 gig).  If it is ever changed to a long\n\t** be sure to change read/writeExternal which write\n\t** out the length in bits.\n\t*/\n",
    "96104": "\t/**\n\t\treturn whether the field has exceeded the max threshold for this page\n\t\tit compares the fieldSize with the largest possible field for this page\n\t*/\n",
    "96106": "\t/**\n\t\tIs method/constructor T more or equally specific than method U.\n\n\t\tSee the Java Language Specification section 15.11.2.2.\n\t*/\n",
    "96124": "\t/**\n\t  Return true if this is a alpha product.\n\t  */\n",
    "96127": "    /**\n     * Return the build number as an integer if possible,\n     * mapping from the SVN number.\n     * nnnnn -> returns nnnnn\n     * nnnnnM -> returns -nnnnn indicates a modified code base\n     * nnnnn:mmmmm -> returns -nnnnn\n     * anything else -> returns -1\n    */\n",
    "96130": "\t/**\n\t\tReturn the feature version string, ie. major.minor. (e.g. 5.2)\n\t*/\n",
    "96156": "\t/**\n\t\tValue equality for byte arrays.\n\t*/\n",
    "96216": "\t/**\n\t * Is this column to have autoincremented value always ?\n\t */\n",
    "96617": "\t/**\n\t\tSync up the state of the underlying connection\n\t\twith the state of this new handle.\n\t*/\n",
    "96664": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "96713": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "96791": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "96825": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "96878": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "96913": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "96983": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97030": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97229": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97237": "\t/**\n\t\tSet this value into a ResultSet for a subsequent ResultSet.insertRow\n\t\tor ResultSet.updateRow. This method will only be called for non-null values.\n\n\t\t@exception SQLException thrown by the ResultSet object\n\t\t@exception StandardException thrown by me accessing my value.\n\t*/\n",
    "97249": "\t/**\n\t * Each built-in type in JSQL has a precedence.  This precedence determines\n\t * how to do type promotion when using binary operators.  For example, float\n\t * has a higher precedence than int, so when adding an int to a float, the\n\t * result type is float.\n\t *\n\t * The precedence for some types is arbitrary.  For example, it doesn't\n\t * matter what the precedence of the boolean type is, since it can't be\n\t * mixed with other types.  But the precedence for the number types is\n\t * critical.  The SQL standard requires that exact numeric types be\n\t * promoted to approximate numeric when one operator uses both.  Also,\n\t * the precedence is arranged so that one will not lose precision when\n\t * promoting a type.\n\t *\n\t * @return\t\tThe precedence of this type.\n\t */\n",
    "97253": "        /**\n                Return my format identifier.\n\n                @see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n        */\n",
    "97371": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97456": "\t/**\n\t\tGet a Null for this type.\n\t*/\n",
    "97504": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97558": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97638": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97685": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97749": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97807": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97821": "\t/**\n\t * Compare two non-null NumberDataValues using DECIMAL arithmetic.\n\t */\n",
    "97824": "\t/**\n\t * Negate the number.\n\t * @see org.apache.derby.iapi.types.NumberDataValue#minus(org.apache.derby.iapi.types.NumberDataValue)\n\t */\n",
    "97838": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97873": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97957": "\t/**\n\t\tReturn my identifier within the segment\n\t*/\n",
    "97982": "        /**\n         * Is this type StreamStorable?\n         *\n         * @return      true if this type has variable length.\n         */\n",
    "97991": "\t/**\n\t\tCheck to see if a logical operation is allowed by this transaction, \n        throws a TransactionExceotion if it isn't. This implementation allows\n\t\tlogical operations. Transactions that need to disallow logical \n        operations should hide this method.\n\n\t\t@exception StandardException Standard Cloudscape error policy,\n\t*/\n",
    "97992": "\t/**\n\t\tReturn true if this transaction should be rolled back first\n\t\tin recovery. This implementation returns false. Transactions that\n\t\tneed to rollback first during recovery should hide this method.\n\t*/\n",
    "97994": "\t/**\n\t\tAllow an Observer to indicate an exception to the transaction that\n\t\tis raised in its update() method.\n\t*/\n",
    "97995": "\t/**\n\t\tAllow my users to notigy my observers.\n\t*/\n",
    "98034": "    /**\n     * format_id not expected to be used in field documentation.\n     * @return false\n     */\n",
    "98036": "    /**\n     * format_id not expected to be used in constructor documentation.\n     * @return false\n     */\n",
    "98037": "    /**\n     * format_id not expected to be used in method documentation.\n     * @return false\n     */\n",
    "98038": "    /**\n     * format_id can be used in overview documentation.\n     * @return true\n     */\n",
    "98039": "    /**\n     * format_id can be used in package documentation.\n     * @return true\n     */\n",
    "98040": "    /**\n     * format_id can be used in type documentation.\n     * @return true\n     */\n",
    "98041": "    /**\n     * format_id is not an inline tag.\n     * @return false\n     */\n",
    "98042": "    /**\n     * Embed the contents of the format_id tag as a row\n     * in the disk format table.\n     * @param tag The tag to embed to the disk format the table.\n     */\n",
    "98043": "    /**\n     * Embed multiple format_id tags as cells in the disk format table.\n     * @param tags An array of tags to add to the disk format table.\n     */\n",
    "98053": "    /**\n     * Embed the contents of the upgrade tag as a row\n     * in the disk format table.\n     * @param tag The tag to embed to the disk format the table.\n     */\n",
    "98054": "    /**\n     * Embed multiple upgrade tags as cells in the disk format table.\n     * @param tags An array of tags to add to the disk format table.\n     */\n",
    "98086": "    /**\n     * Embed the contents of the disk_layout tag as a row\n     * in the disk format table. Close the table.\n     * @param tag The tag to embed to the disk format the table.\n     */\n",
    "98088": "    /**\n     * Embed multiple disk_layout tags as cells in the disk format table.\n     * Close the table.\n     * @param tags An array of tags to add to the disk format table.\n     */\n",
    "98104": "\t/**\n\t * stack trace dumper\n\t */\n",
    "98193": "\t/**\n\t\tReinit is used to redirect the finder to another stream.\n\t\tThe previous stream should not have been in a PEEK state.\n\n\t\t@param s the input stream for reading statements from.\n\t */\n",
    "98202": "\t/**\n\t\tDetermine if the given character is considered whitespace\n\n\t\t@param c the character to consider\n\t\t@return true if the character is whitespace\n\t */\n",
    "98208": "\t/**\n\t\tAdvance the stream to the end of the string.\n\t\tAssumes the opening delimiter of the string has been read.\n\t\tThis handles the SQL ability to put the delimiter within\n\t\tthe string by doubling it, by reading those as two strings\n\t\tsitting next to one another.  I.e, 'Mary''s lamb' is read\n\t\tby this class as two strings, 'Mary' and 's lamb'.\n\t\t<p>\n\t\tThe delimiter of the string is expected to be repeated at\n\t\tits other end. If the other flavor of delimiter occurs within\n\t\tthe string, it is just a normal character within it.\n\t\t<p>\n\t\tAll characters except the delimiter are permitted within the\n\t\tstring. If EOF is hit before the closing delimiter is found,\n\t\tthe end of the string is assumed. Parsers using this parser\n\t\twill detect the error in that case and return appropriate messages.\n\n\t\t@param stringDelimiter the starting and ending character\n\t\t\tfor the string being read.\n\t */\n",
    "98217": "\t/**\n\t\treturn the next character in the source stream and\n\t\tappend it to the statement buffer.\n\n\t\t@return the next character in the source stream.\n\t */\n",
    "98218": "\t/**\n\t\treturn the next character in the source stream, without\n\t\tadvancing.\n\n\t\t@return the next character in the source stream.\n\t */\n",
    "98352": "\t/**\n\t\tij is started with \"-p[r] file OtherArgs\";\n\t\tthe file contains properties to control the driver and database\n\t\tused to run ij, and can provide additional system properties.\n\t\t<p>\n\t\tgetPropertyArg will look at the args and take out a \"-p <file>\" pair,\n\t\treading the file into the system properties.\n\t\t<p>\n\t\tIf there was a -p without a following <file>, no action is taken.\n\n\t\t@exception IOException thrown if file not found\n\n\t\t@param args\tthe argument list to consider.\n\t\t@return true if a property item was found and loaded.\n\t */\n",
    "98357": "\t/**\n\t  Return the name of the ij command file or null if none is\n\t  specified. The command file may be proceeded with -f flag on\n\t  the command line. Alternatively, the command file may be \n\t  specified without a -f flag. In this case we assume the first\n\t  unknown argument is the command file.\n\n\t  <P>\n\t  This should only be called after calling invalidArgs.\n\n\t  <p>\n\t  If there is no such argument, a null is returned.\n\n\t  @param args\tthe argument list to consider.\n\t  @return the name of the first argument not preceded by \"-p\",\n\t  null if none found.\n\t  \n\t  @exception IOException thrown if file not found\n\t */\n",
    "98359": "\t/**\n\t  Return the name of a resource containing input commands or\n\t  null iff none has been specified.\n\t  */\n",
    "98363": "\t/**\n\t\tUtility interface that defaults driver and database to null.\n\n\t\t@return a connection to the defaultURL if possible; null if not.\n\t\t@exception SQLException on failure to connect.\n\t\t@exception ClassNotFoundException on failure to load driver.\n\t\t@exception InstantiationException on failure to load driver.\n\t\t@exception IllegalAccessException on failure to load driver.\n\t */\n",
    "98410": "/**\n * ProtocolStatement is PROTOCOL 'JDBC protocol' where\n * the protocol is used to prefix any connect request that\n * cannot find a driver.  We will take a stab at loading\n * a driver as each protocol comes in -- we only know about\n * two.\n */\n",
    "98431": "\t/**\n\t * init method - will init the class to support a locale and\n\t * codeset based on the derby.ui.locale and derby.ui.codeset\n\t * properties if exists or using the default values from the JVM.\n\t */\n",
    "98433": "\t/**\n\t\tPrint information about the exception to the given PrintWriter.\n\t\tFor non-SQLExceptions, does a stack trace. For SQLExceptions,\n\t\tprint a standard error message and walk the list, if any.\n\n\t\t@param out the place to write to\n\t\t@param e the exception to display\n\t */\n",
    "98434": "\t/**\n\t\tPrint information about the SQL exception to the given PrintWriter.\n\t\tWalk the list of exceptions, if any.\n\n\t\t@param out the place to write to\n\t\t@param e the exception to display\n\t */\n",
    "98435": "\t/**\n\t\tPrint information about the SQL warnings for the connection\n\t\tto the given PrintWriter.\n\t\tWalks the list of exceptions, if any.\n\n\t\t@param out the place to write to\n\t\t@param theConnection the connection that may have warnings.\n\t */\n",
    "98437": "\t/**\n\t\tPrint information about the SQL warnings for the ResultSet\n\t\tto the given PrintWriter.\n\t\tWalk the list of exceptions, if any.\n\t\n\t\t@param out the place to write to\n\t\t@param rs the ResultSet that may have warnings on it\n\t */\n",
    "98454": "/**\n * SetConnectionStatement is SET CONNECTION ident\n * <p>\n * Moves to the named session, if it exists. If it doesn't\n * exist, remains on the current session and returns an error.\n */\n",
    "98459": "/**\n\tShows the current connections for the current environment.\n */\n",
    "98460": "\t/**\n\t\tMap the string to the value if it is null.\n\n\t\t@param s the string to test for null\n\t\t@param nullValue the value to use if s is null\n\n\t\t@return if s is non-null, s; else nullValue.\n\t */\n",
    "98463": "\t/**\n\t\tIf the property ij.exceptionTrace is true, display the stack\n\t\ttrace to the print stream. Otherwise, do nothing.\n\n\t\t@param out the output stream to write to\n\t\t@param e the exception to display\n\t */\n",
    "98466": "/**\n * CommitStatement is simply COMMIT.\n * It commits the current transation.\n */\n",
    "98474": "/**\n * RollbackStatement is simply ROLLBACK.\n * It undoes the current transation.\n */\n",
    "98587": "    /** Shuts down everything nicely\n     */\n",
    "98588": "    /** Adds a socket to the sockets ArrayList\n     * @param IP the IP address of the socket\n     */\n",
    "98589": "    /** Attaches data streams to a socket\n     * @param index index into the arraylist for where the data streams go\n     */\n",
    "98592": "    /** Writes out a bad command message\n     * @param rcv string that was received\n     * @param exp string that was expected\n     */\n",
    "98593": "    /** Finds out what OS we are running\n     * @return 0=linux 1=windows 2=other\n     */\n",
    "98596": "    /** Waits for a client to connect\n     * @return true if recycle, false if shutdown\n     */\n",
    "98598": "    /** Shuts down everything nicely\n     */\n",
    "98599": "    /**\n     * Gets the value of the point property.\n     * \n     * @return\n     *     possible object is\n     *     {@link PointType }\n     *     \n     */\n",
    "98600": "    /**\n     * Sets the value of the point property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link PointType }\n     *     \n     */\n",
    "98611": "    /**\n     * Gets the value of the pos property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Pos }\n     *     \n     */\n",
    "98612": "    /**\n     * Sets the value of the pos property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Pos }\n     *     \n     */\n",
    "98626": "    /**\n     * Sets the value of the pointMembers property.\n     * \n     * @param pointMembers\n     *     allowed object is\n     *     {@link PointMember }\n     *     \n     */\n",
    "98639": "    /**\n     * Gets the value of the srsName property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "98640": "    /**\n     * Sets the value of the srsName property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98650": "    /**\n     * Sets the value of the _Geometry property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link JAXBElement }{@code <}{@link LinearRingType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link MultiSurfaceType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link MultiCurveType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link AbstractGeometricAggregateType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link AbstractCurveType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link LineStringType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link AbstractGeometryType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link PolygonType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link SurfaceType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link MultiPointType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link CurveType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link PointType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link AbstractSurfaceType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link AbstractGeometricPrimitiveType }{@code >}\n     *     \n     */\n",
    "98662": "    /**\n     * Gets the value of the multiCurve property.\n     * \n     * @return\n     *     possible object is\n     *     {@link MultiCurveType }\n     *     \n     */\n",
    "98663": "    /**\n     * Sets the value of the multiCurve property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link MultiCurveType }\n     *     \n     */\n",
    "98675": "    /**\n     * Gets the value of the exterior property.\n     * \n     * @return\n     *     possible object is\n     *     {@link AbstractRingPropertyType }\n     *     \n     */\n",
    "98677": "    /**\n     * Sets the value of the exterior property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link AbstractRingPropertyType }\n     *     \n     */\n",
    "98681": "    /**\n     * Gets the value of the interpolation property.\n     * \n     * @return\n     *     possible object is\n     *     {@link SurfaceInterpolationType }\n     *     \n     */\n",
    "98682": "    /**\n     * Sets the value of the interpolation property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link SurfaceInterpolationType }\n     *     \n     */\n",
    "98684": "    /**\n     * Sets the value of the interiors property.\n     * \n     * @param interiors\n     *     allowed object is\n     *     {@link AbstractRingPropertyType }\n     *     \n     */\n",
    "98698": "    /**\n     * Gets the value of the value property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "98699": "    /**\n     * Sets the value of the value property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98701": "    /**\n     * Gets the value of the codeSpace property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "98702": "    /**\n     * Sets the value of the codeSpace property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98732": "    /**\n     * Create an instance of {@link BoundedBy }\n     * \n     */\n",
    "98733": "    /**\n     * Create an instance of {@link LineStringSegmentType }\n     * \n     */\n",
    "98734": "    /**\n     * Create an instance of {@link MultiPointType }\n     * \n     */\n",
    "98735": "    /**\n     * Create an instance of {@link Segments }\n     * \n     */\n",
    "98737": "    /**\n     * Create an instance of {@link MultiSurfacePropertyType }\n     * \n     */\n",
    "98738": "    /**\n     * Create an instance of {@link PolygonPatchType }\n     * \n     */\n",
    "98739": "    /**\n     * Create an instance of {@link GeometryPropertyType }\n     * \n     */\n",
    "98740": "    /**\n     * Create an instance of {@link MeasureType }\n     * \n     */\n",
    "98741": "    /**\n     * Create an instance of {@link PointType }\n     * \n     */\n",
    "98742": "    /**\n     * Create an instance of {@link PolygonType }\n     * \n     */\n",
    "98743": "    /**\n     * Create an instance of {@link CurveType }\n     * \n     */\n",
    "98745": "    /**\n     * Create an instance of {@link PosList }\n     * \n     */\n",
    "98747": "    /**\n     * Create an instance of {@link AbstractRingPropertyType }\n     * \n     */\n",
    "98748": "    /**\n     * Create an instance of {@link PointMember }\n     * \n     */\n",
    "98750": "    /**\n     * Create an instance of {@link LineStringType }\n     * \n     */\n",
    "98751": "    /**\n     * Create an instance of {@link MultiCurvePropertyType }\n     * \n     */\n",
    "98752": "    /**\n     * Create an instance of {@link MultiSurfaceType }\n     * \n     */\n",
    "98753": "    /**\n     * Create an instance of {@link ReferenceType }\n     * \n     */\n",
    "98754": "    /**\n     * Create an instance of {@link Patches }\n     * \n     */\n",
    "98755": "    /**\n     * Create an instance of {@link MultiPointPropertyType }\n     * \n     */\n",
    "98756": "    /**\n     * Create an instance of {@link MultiGeometryPropertyType }\n     * \n     */\n",
    "98757": "    /**\n     * Create an instance of {@link MultiCurveType }\n     * \n     */\n",
    "98759": "    /**\n     * Create an instance of {@link Pos }\n     * \n     */\n",
    "98761": "    /**\n     * Create an instance of {@link SurfaceMember }\n     * \n     */\n",
    "98762": "    /**\n     * Create an instance of {@link SurfaceType }\n     * \n     */\n",
    "98765": "    /**\n     * Create an instance of {@link LinearRingType }\n     * \n     */\n",
    "98766": "    /**\n     * Create an instance of {@link AbstractFeatureBaseType }\n     * \n     */\n",
    "98767": "    /**\n     * Create an instance of {@link AbstractSurfaceType }\n     * \n     */\n",
    "98768": "    /**\n     * Create an instance of {@link Envelope }\n     * \n     */\n",
    "98769": "    /**\n     * Create an instance of {@link Name }\n     * \n     */\n",
    "98770": "    /**\n     * Create an instance of {@link CurveMember }\n     * \n     */\n",
    "98776": "/**\n * Hack to get the grammar to leave a\n * EXECUTE STATEMENT <stmt> alone.  Short\n * circuit the ij EXECUTE built in.\n */\n",
    "98780": "    /**\n     * Gets the value of the type property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "98781": "    /**\n     * Sets the value of the type property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98783": "    /**\n     * Gets the value of the href property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "98784": "    /**\n     * Sets the value of the href property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98787": "    /**\n     * Gets the value of the role property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "98788": "    /**\n     * Sets the value of the role property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98791": "    /**\n     * Gets the value of the arcrole property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "98792": "    /**\n     * Sets the value of the arcrole property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98795": "    /**\n     * Sets the value of the title property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98796": "/**\n * Hack to get the grammar to leave a\n * EXECUTE PROCEDURE <procSpec> alone.  Short\n * circuit the ij EXECUTE built in so that\n * we can deploy ij against Foundation2000.\n */\n",
    "98798": "    /**\n     * Gets the value of the show property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "98799": "    /**\n     * Sets the value of the show property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98801": "    /**\n     * Gets the value of the actuate property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "98802": "    /**\n     * Sets the value of the actuate property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98816": "    /**\n     * Gets the value of the multiSurface property.\n     * \n     * @return\n     *     possible object is\n     *     {@link MultiSurfaceType }\n     *     \n     */\n",
    "98817": "    /**\n     * Sets the value of the multiSurface property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link MultiSurfaceType }\n     *     \n     */\n",
    "98842": "    /**\n     * Sets the value of the description property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98844": "/**\n * Async: like execute immediate, without using,\n * but runs the statement in a separate thread, against\n * the current connection.\n * <p>\n * Syntax:\n *   ASYNC asyncName statementSource \n *\n *\t statementSource is a string containing SQL-J text.\n */\n",
    "98847": "    /**\n     * Gets the value of the id property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "98848": "    /**\n     * Sets the value of the id property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98861": "    /**\n     * Sets the value of the _GeometricAggregate property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link JAXBElement }{@code <}{@link MultiCurveType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link MultiSurfaceType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link MultiPointType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link AbstractGeometricAggregateType }{@code >}\n     *     \n     */\n",
    "98869": "/**\n * Wait for: the second half of Async, waits for completion\n * if needed and then supplies the result.  Only execute is done,\n * not row fetching.\n * <p>\n * Syntax:\n *   WAIT FOR asyncName \n *\n *\t asyncName is a name used in an ASYNC statement previously\n */\n",
    "98893": "    /**\n     * Gets the value of the multiPoint property.\n     * \n     * @return\n     *     possible object is\n     *     {@link MultiPointType }\n     *     \n     */\n",
    "98894": "/**\n * RemoveStatement is REMOVE identifier. It identifies\n * a previously prepared statement.  We would prefer a DROP\n * syntax, but SQL-J is using that word and I want to point out\n * that special processing will be needed to give that parser\n * this parser's input for unrecognized text.\n */\n",
    "98895": "    /**\n     * Sets the value of the multiPoint property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link MultiPointType }\n     *     \n     */\n",
    "98907": "    /**\n     * Sets the value of the segments property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Segments }\n     *     \n     */\n",
    "98937": "    /**\n     * Sets the value of the _Surface property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link JAXBElement }{@code <}{@link PolygonType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link AbstractSurfaceType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link SurfaceType }{@code >}\n     *     \n     */\n",
    "98949": "    /**\n     * Gets the value of the envelope property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Envelope }\n     *     \n     */\n",
    "98950": "    /**\n     * Sets the value of the envelope property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Envelope }\n     *     \n     */\n",
    "98964": "    /**\n     * Sets the value of the _SurfacePatches property.\n     * \n     * @param surfacePatches\n     *     allowed object is\n     *     {@link JAXBElement }{@code <}{@link AbstractSurfacePatchType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link PolygonPatchType }{@code >}\n     *     \n     */\n",
    "98970": "/**\n * Autocommit lets you control this aspect of the connection.\n * REMIND: should have a general way to set all connection attributes,\n * this is a shortcut for immediate needs.\n * <p>\n * Syntax:\n *   AUTOCOMMIT [ ON | OFF ] ;\n */\n",
    "98975": "    /**\n     * Gets the value of the boundedBy property.\n     * \n     * @return\n     *     possible object is\n     *     {@link BoundedBy }\n     *     \n     */\n",
    "98976": "    /**\n     * Sets the value of the boundedBy property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link BoundedBy }\n     *     \n     */\n",
    "98988": "    /**\n     * Sets the value of the patches property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Patches }\n     *     \n     */\n",
    "99000": "    /**\n     * Sets the value of the _Curve property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link JAXBElement }{@code <}{@link CurveType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link AbstractCurveType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link LineStringType }{@code >}\n     *     \n     */\n",
    "99004": "/**\n * By default, holdability is set to true for Connection objects. This syntax NOHOLDFORCONNECTION lets you set it to close cursors at commit.\n * Syntax:\n *   NOHOLDFORCONNECTION ;\n */\n",
    "99013": "    /**\n     * Gets the value of the posList property.\n     * \n     * @return\n     *     possible object is\n     *     {@link PosList }\n     *     \n     */\n",
    "99014": "    /**\n     * Sets the value of the posList property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link PosList }\n     *     \n     */\n",
    "99016": "    /**\n     * Gets the value of the interpolation property.\n     * \n     * @return\n     *     possible object is\n     *     {@link CurveInterpolationType }\n     *     \n     */\n",
    "99017": "    /**\n     * Sets the value of the interpolation property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link CurveInterpolationType }\n     *     \n     */\n",
    "99037": "/**\n * Localizeddisplay controls locale sensitive data representayion\n * <p>\n * Syntax:\n *   LOCALIZEDDISPLAY [ ON | OFF ] ;\n */\n",
    "99057": "    /**\n     * Sets the value of the surfaceMembers property.\n     * \n     * @param surfaceMembers\n     *     allowed object is\n     *     {@link SurfaceMember }\n     *     \n     */\n",
    "99067": "/**\n * ReadOnly lets you control this aspect of the connection.\n * REMIND: should have a general way to set all connection attributes,\n * this is a shortcut for immediate needs.\n * <p>\n * Syntax:\n *   READONLY [ ON | OFF ] ;\n */\n",
    "99085": "    /**\n     * Sets the value of the curveMembers property.\n     * \n     * @param curveMembers\n     *     allowed object is\n     *     {@link CurveMember }\n     *     \n     */\n",
    "99095": "    /**\n     * Gets the value of the value property.\n     * \n     */\n",
    "99096": "    /**\n     * Sets the value of the value property.\n     * \n     */\n",
    "99098": "    /**\n     * Gets the value of the uom property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99099": "    /**\n     * Sets the value of the uom property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99101": "/**\n * Elapsedtime on causes ij to dump out the elapsed time it takes\n * to run a user statement at the end of that statement.\n * <p>\n * Syntax:\n *   ELAPSEDTIME [ ON | OFF ] ;\n */\n",
    "99137": "    /**\n     * Gets the value of the lowerCorner property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Pos }\n     *     \n     */\n",
    "99138": "    /**\n     * Sets the value of the lowerCorner property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Pos }\n     *     \n     */\n",
    "99139": "/**\n * MaximumDisplayWidth EXACT_NUMERIC changes the maximum display width for\n * java.lang.String to the specified EXACT_NUMERIC.\n * This is only used by the console view.\n * <p>\n * Syntax:\n *   MAXIMUMDISPLAYWIDTH INTEGER ;\n */\n",
    "99141": "    /**\n     * Gets the value of the upperCorner property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Pos }\n     *     \n     */\n",
    "99142": "    /**\n     * Sets the value of the upperCorner property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Pos }\n     *     \n     */\n",
    "99156": "    /**\n     * Gets the value of the linearRing property.\n     * \n     * @return\n     *     possible object is\n     *     {@link LinearRingType }\n     *     \n     */\n",
    "99157": "    /**\n     * Sets the value of the linearRing property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link LinearRingType }\n     *     \n     */\n",
    "99172": "    /**\n     * Sets the value of the _CurveSegments property.\n     * \n     * @param curveSegments\n     *     allowed object is\n     *     {@link JAXBElement }{@code <}{@link LineStringSegmentType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link AbstractCurveSegmentType }{@code >}\n     *     \n     */\n",
    "99190": "\t/**\n\t * Apply a given remark to a value\n\t */\n",
    "99191": "\t/**\n\t * Check if a remark is set on a given value\n\t */\n",
    "99192": "\t/**\n\t * Check if a remark is inherited\n\t */\n",
    "99193": "\t/**\n\t * Force override a remark from a given value\n\t */\n",
    "99194": "\t/**\n\t * Remove a remark\n\t */\n",
    "99195": "\t/**\n\t * Remove all TridasRemarks 'remark' from the given value\n\t * @param remark\n\t * @param value\n\t */\n",
    "99207": "    /**\n     * Sets the value of the name property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99213": "    /**\n     * Gets the value of the isActive property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Boolean }\n     *     \n     */\n",
    "99214": "    /**\n     * Sets the value of the isActive property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Boolean }\n     *     \n     */\n",
    "99230": "    /**\n     * Sets the value of the measurementVariables property.\n     * \n     * @param measurementVariables\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99242": "    /**\n     * Sets the value of the elementShapes property.\n     * \n     * @param elementShapes\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99254": "    /**\n     * Gets the value of the type property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99259": "    /**\n     * Gets the value of the object property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99260": "    /**\n     * Sets the value of the object property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99281": "    /**\n     * Sets the value of the datingTypes property.\n     * \n     * @param datingTypes\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99295": "    /**\n     * Sets the value of the coverageTemporals property.\n     * \n     * @param coverageTemporals\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99306": "    /**\n     * Create an instance of {@link WSISapwoodDictionary }\n     * \n     */\n",
    "99307": "    /**\n     * Create an instance of {@link WSIParam }\n     * \n     */\n",
    "99308": "    /**\n     * Create an instance of {@link WSIBox }\n     * \n     */\n",
    "99310": "    /**\n     * Create an instance of {@link WSIRequest }\n     * \n     */\n",
    "99311": "    /**\n     * Create an instance of {@link WSISearchParams }\n     * \n     */\n",
    "99312": "    /**\n     * Create an instance of {@link WSIRegionDictionary }\n     * \n     */\n",
    "99313": "    /**\n     * Create an instance of {@link WSISecurityUserDictionary }\n     * \n     */\n",
    "99314": "/**\n\tHaven't included: ASYNC, !, EXPECT\n\tDon't include: XA_*\n **/\n",
    "99315": "    /**\n     * Create an instance of {@link WSIHeartwoodDictionary }\n     * \n     */\n",
    "99316": "    /**\n     * Create an instance of {@link WSIRootElement }\n     * \n     */\n",
    "99317": "    /**\n     * Create an instance of {@link WSINonce }\n     * \n     */\n",
    "99318": "    /**\n     * Create an instance of {@link WSIMessage }\n     * \n     */\n",
    "99319": "    /**\n     * Create an instance of {@link WSIBoxDictionary }\n     * \n     */\n",
    "99320": "    /**\n     * Create an instance of {@link WSIElementAuthenticityDictionary }\n     * \n     */\n",
    "99321": "    /**\n     * Create an instance of {@link WSIEntity }\n     * \n     */\n",
    "99322": "    /**\n     * Create an instance of {@link WSIHelp }\n     * \n     */\n",
    "99323": "    /**\n     * Create an instance of {@link WSIHeader }\n     * \n     */\n",
    "99324": "    /**\n     * Create an instance of {@link WSILocationTypeDictionary }\n     * \n     */\n",
    "99325": "    /**\n     * Create an instance of {@link WSIAuthenticate }\n     * \n     */\n",
    "99326": "    /**\n     * Create an instance of {@link WSIElementTypeDictionary }\n     * \n     */\n",
    "99327": "    /**\n     * Create an instance of {@link WSILink }\n     * \n     */\n",
    "99328": "    /**\n     * Create an instance of {@link WSISampleTypeDictionary }\n     * \n     */\n",
    "99329": "    /**\n     * Create an instance of {@link WSIElementShapeDictionary }\n     * \n     */\n",
    "99330": "    /**\n     * Create an instance of {@link WSIReadingNoteDictionary }\n     * \n     */\n",
    "99331": "    /**\n     * Create an instance of {@link WSIDatingTypeDictionary }\n     * \n     */\n",
    "99332": "    /**\n     * Create an instance of {@link WSICoverageTemporalFoundationDictionary }\n     * \n     */\n",
    "99333": "    /**\n     * Create an instance of {@link WSITaxonDictionary }\n     * \n     */\n",
    "99335": "    /**\n     * Create an instance of {@link WSIContent }\n     * \n     */\n",
    "99336": "    /**\n     * Create an instance of {@link WSIMeasurementVariableDictionary }\n     * \n     */\n",
    "99337": "    /**\n     * Create an instance of {@link WSIObjectTypeDictionary }\n     * \n     */\n",
    "99338": "    /**\n     * Create an instance of {@link SecurityGroup }\n     * \n     */\n",
    "99339": "    /**\n     * Create an instance of {@link WSICoverageTemporalDictionary }\n     * \n     */\n",
    "99340": "    /**\n     * Create an instance of {@link SecurityUser }\n     * \n     */\n",
    "99342": "    /**\n     * Gets the value of the type property.\n     * \n     * @return\n     *     possible object is\n     *     {@link EntityType }\n     *     \n     */\n",
    "99343": "    /**\n     * Sets the value of the type property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link EntityType }\n     *     \n     */\n",
    "99360": "    /**\n     * Sets the value of the sqlsAndObjectsAndElements property.\n     * \n     * @param sqlsAndObjectsAndElements\n     *     allowed object is\n     *     {@link WSISampleTypeDictionary }\n     *     {@link WSICoverageTemporalFoundationDictionary }\n     *     {@link WSIElementAuthenticityDictionary }\n     *     {@link WSIHeartwoodDictionary }\n     *     {@link WSIRegionDictionary }\n     *     {@link WSICoverageTemporalDictionary }\n     *     {@link TridasSample }\n     *     {@link WSIElementTypeDictionary }\n     *     {@link WSIReadingNoteDictionary }\n     *     {@link WSIBoxDictionary }\n     *     {@link WSIMeasurementVariableDictionary }\n     *     {@link WSIDatingTypeDictionary }\n     *     {@link WSISapwoodDictionary }\n     *     {@link WSITaxonDictionary }\n     *     {@link TridasRadius }\n     *     {@link WSISecurityUserDictionary }\n     *     {@link SecurityUser }\n     *     {@link TridasElement }\n     *     {@link TridasObject }\n     *     {@link WSILocationTypeDictionary }\n     *     {@link WSIBox }\n     *     {@link WSIObjectTypeDictionary }\n     *     {@link Object }\n     *     {@link TridasMeasurementSeries }\n     *     {@link WSIElementShapeDictionary }\n     *     {@link TridasDerivedSeries }\n     *     \n     */\n",
    "99377": "    /**\n     * Gets the value of the identifier property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasIdentifier }\n     *     \n     */\n",
    "99378": "    /**\n     * Sets the value of the identifier property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasIdentifier }\n     *     \n     */\n",
    "99380": "    /**\n     * Gets the value of the createdTimestamp property.\n     * \n     * @return\n     *     possible object is\n     *     {@link DateTime }\n     *     \n     */\n",
    "99382": "    /**\n     * Sets the value of the createdTimestamp property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link DateTime }\n     *     \n     */\n",
    "99384": "    /**\n     * Gets the value of the lastModifiedTimestamp property.\n     * \n     * @return\n     *     possible object is\n     *     {@link DateTime }\n     *     \n     */\n",
    "99385": "    /**\n     * Sets the value of the lastModifiedTimestamp property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link DateTime }\n     *     \n     */\n",
    "99388": "    /**\n     * Gets the value of the comments property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99389": "    /**\n     * Sets the value of the comments property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99391": "    /**\n     * Gets the value of the trackingLocation property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99393": "    /**\n     * Sets the value of the trackingLocation property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99396": "    /**\n     * Gets the value of the curationLocation property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99397": "    /**\n     * Sets the value of the curationLocation property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99399": "    /**\n     * Gets the value of the sampleCount property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99400": "    /**\n     * Sets the value of the sampleCount property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99405": "    /**\n     * Sets the value of the samples property.\n     * \n     * @param samples\n     *     allowed object is\n     *     {@link TridasSample }\n     *     \n     */\n",
    "99422": "    /**\n     * Sets the value of the elementTypes property.\n     * \n     * @param elementTypes\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99434": "    /**\n     * Sets the value of the regions property.\n     * \n     * @param regions\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99445": "    /**\n     * Sets the value of the dictionaries property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link WSIRequest.Dictionaries }\n     *     \n     */\n",
    "99446": "/**\n * XA_DataSourceStatement is XA_DataSource 'dbname' ( create | shutdown )\n * We new'ed an instance of XADataSource as the current DataSource and set its\n * database name to dbname.\n */\n",
    "99454": "/**\n * XA_ConnectStatement is XA_CONNECT (<AS> connid)\n * make a XAConnection using the currentXADataSource and make that XAConnection\n * the current XAConnection.  If connid is given, then associate connid with\n * the XAConnection.  This connid is not th xid.\n */\n",
    "99460": "/**\n * XA_DisconnectStatement is XA_DISCONNECT [xaconnid = identifier()]\n * disconnect the current XAConnection \n * If xaconnid is given, then disconnect XAConnection with xaconnid (xaconnid\n *\tnot implemented).\n * \n */\n",
    "99468": "/**\n * XA_CommitStatement is XA_COMMIT [ XA_1PHASE | XA_2PHASE ] xid\n * commits a global transaction xid\n */\n",
    "99475": "/**\n * XA_EndStatement is XA_END [ XA_SUSPEND | XA_SUCCESS | XA_FAIL] xid\n * dissociates a transaction from the current XAConnection or end an already\n * suspended one\n */\n",
    "99480": "    /**\n     * Gets the value of the authenticate property.\n     * \n     * @return\n     *     possible object is\n     *     {@link WSIAuthenticate }\n     *     \n     */\n",
    "99481": "/**\n * XA_ForgetStatement is XA_FORGET xid\n * forgets about a heuristically completed transaction\n */\n",
    "99482": "    /**\n     * Sets the value of the authenticate property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link WSIAuthenticate }\n     *     \n     */\n",
    "99485": "    /**\n     * Gets the value of the searchParams property.\n     * \n     * @return\n     *     possible object is\n     *     {@link WSISearchParams }\n     *     \n     */\n",
    "99487": "    /**\n     * Sets the value of the searchParams property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link WSISearchParams }\n     *     \n     */\n",
    "99488": "/**\n * XA_GetConnectionStatement is XA_GETCONNECTION\n * it gets a Connection from the currentXAConnection and uses that as the\n * current connection \n */\n",
    "99491": "    /**\n     * Gets the value of the type property.\n     * \n     * @return\n     *     possible object is\n     *     {@link CorinaRequestType }\n     *     \n     */\n",
    "99493": "    /**\n     * Sets the value of the type property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link CorinaRequestType }\n     *     \n     */\n",
    "99495": "    /**\n     * Gets the value of the format property.\n     * \n     * @return\n     *     possible object is\n     *     {@link CorinaRequestFormat }\n     *     \n     */\n",
    "99498": "    /**\n     * Sets the value of the format property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link CorinaRequestFormat }\n     *     \n     */\n",
    "99500": "    /**\n     * Gets the value of the parentEntityID property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99502": "    /**\n     * Sets the value of the parentEntityID property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99503": "/**\n * XA_RecoverStatement is XA_RECOVER flag\n * displays the list of prepared transactions\n */\n",
    "99505": "    /**\n     * Sets the value of the projects property.\n     * \n     * @param projects\n     *     allowed object is\n     *     {@link TridasProject }\n     *     \n     */\n",
    "99507": "    /**\n     * Sets the value of the objects property.\n     * \n     * @param objects\n     *     allowed object is\n     *     {@link TridasObject }\n     *     \n     */\n",
    "99508": "    /**\n     * Sets the value of the elements property.\n     * \n     * @param elements\n     *     allowed object is\n     *     {@link TridasElement }\n     *     \n     */\n",
    "99509": "/**\n * XA_RollbackStatement is XA_Rollback xid\n * rolls back a global transaction\n */\n",
    "99512": "    /**\n     * Sets the value of the radiuses property.\n     * \n     * @param radiuses\n     *     allowed object is\n     *     {@link TridasRadius }\n     *     \n     */\n",
    "99513": "    /**\n     * Sets the value of the measurementSeries property.\n     * \n     * @param measurementSeries\n     *     allowed object is\n     *     {@link TridasMeasurementSeries }\n     *     \n     */\n",
    "99516": "/**\n * XA_StartStatement is XA_START [ XA_NOFLAGS | XA_JOIN | XA_RESUME ] xid\n * start or associates a transaction with the current XAConnection\n */\n",
    "99517": "    /**\n     * Sets the value of the derivedSeries property.\n     * \n     * @param derivedSeries\n     *     allowed object is\n     *     {@link TridasDerivedSeries }\n     *     \n     */\n",
    "99518": "    /**\n     * Sets the value of the users property.\n     * \n     * @param users\n     *     allowed object is\n     *     {@link SecurityUser }\n     *     \n     */\n",
    "99519": "    /**\n     * Sets the value of the boxes property.\n     * \n     * @param boxes\n     *     allowed object is\n     *     {@link WSIBox }\n     *     \n     */\n",
    "99521": "    /**\n     * Sets the value of the entities property.\n     * \n     * @param entities\n     *     allowed object is\n     *     {@link WSIEntity }\n     *     \n     */\n",
    "99535": "/**\n * CP_DataSourceStatement is\n *\tCP_DataSource 'dbname' [ <PROTOCOL> 'protocol' ]\n *\t\t- get a connection pool data source whose database name is\n *\t\tdbname and make that DataSource the current CPDataSource.  \n *\t\tIf <PROTOCOL> is specified, the DataSource may be\n *\t\tremote.\n */\n",
    "99543": "/**\n * CP_ConnectStatement is\n *\t<CP_CONNECT>\t[ <USER> 'user' ]\n *\t\t\t[ <PASSWORD> 'password' ]\n *\t\t\t[ <AS> cpconnid ]\n * make a PooledConnection using the current CPDataSource and\n * make that PooledConnection the current PooledConnection.\n * If cpconnid is given, then associate cpconnid with the\n * PooledConnection. (cpconnid not implemented).\n */\n",
    "99549": "/**\n * CP_GetConnectionStatement is\n *\t<CP_GETCONNECTION> [ <AS> connid ]\n * get a Connection object from the current PooledConnection.\n * If connid is given, the associate connid with the connection.\n * (connid not implemented)\n */\n",
    "99557": "    /**\n     * Sets the value of the taxons property.\n     * \n     * @param taxons\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99562": "/**\n * CP_DisconnectStatement is\n *\t<CP_DISCONNECT> [ cpconnid = identifier() ]\n * disconnect a PooledConnection.  If cpconnid is given, then\n * disconnect the PooledConnection with the given cpconnid. \n * (cpconnid not implemented)\n */\n",
    "99572": "    /**\n     * Sets the value of the objectTypes property.\n     * \n     * @param objectTypes\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99601": "    /**\n     * Sets the value of the remarks property.\n     * \n     * @param remarks\n     *     allowed object is\n     *     {@link TridasRemark }\n     *     \n     */\n",
    "99613": "    /**\n     * Sets the value of the locationTypes property.\n     * \n     * @param locationTypes\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99625": "    /**\n     * Sets the value of the sapwoods property.\n     * \n     * @param sapwoods\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99639": "    /**\n     * Gets the value of the code property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99640": "    /**\n     * Sets the value of the code property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99642": "    /**\n     * Sets the value of the content property.\n     * \n     * @param content\n     *     allowed object is\n     *     {@link Element }\n     *     {@link String }\n     *     \n     */\n",
    "99668": "    /**\n     * Sets the value of the heartwoods property.\n     * \n     * @param heartwoods\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99679": "    /**\n     * Sets the value of the memberOf property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link SecurityUser.MemberOf }\n     *     \n     */\n",
    "99686": "    /**\n     * Gets the value of the username property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99687": "    /**\n     * Sets the value of the username property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99690": "    /**\n     * Gets the value of the firstName property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99691": "    /**\n     * Sets the value of the firstName property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99693": "    /**\n     * Gets the value of the lastName property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99694": "    /**\n     * Sets the value of the lastName property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99704": "    /**\n     * Sets the value of the password property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99720": "        /**\n         * Sets the value of the securityGroups property.\n         * \n         * @param securityGroups\n         *     allowed object is\n         *     {@link SecurityGroup }\n         *     \n         */\n",
    "99734": "    /**\n     * Sets the value of the user property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link WSIHeader.User }\n     *     \n     */\n",
    "99737": "    /**\n     * Gets the value of the wsVersion property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99739": "    /**\n     * Sets the value of the wsVersion property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99743": "    /**\n     * Gets the value of the clientVersion property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99744": "    /**\n     * Sets the value of the clientVersion property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99746": "    /**\n     * Gets the value of the requestDate property.\n     * \n     * @return\n     *     possible object is\n     *     {@link XMLGregorianCalendar }\n     *     \n     */\n",
    "99748": "    /**\n     * Sets the value of the requestDate property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link XMLGregorianCalendar }\n     *     \n     */\n",
    "99752": "    /**\n     * Sets the value of the queryTime property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link WSIHeader.QueryTime }\n     *     \n     */\n",
    "99755": "    /**\n     * Gets the value of the requestUrl property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99756": "    /**\n     * Sets the value of the requestUrl property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99760": "    /**\n     * Gets the value of the requestType property.\n     * \n     * @return\n     *     possible object is\n     *     {@link CorinaRequestType }\n     *     \n     */\n",
    "99762": "    /**\n     * Sets the value of the requestType property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link CorinaRequestType }\n     *     \n     */\n",
    "99764": "    /**\n     * Gets the value of the status property.\n     * \n     * @return\n     *     possible object is\n     *     {@link CorinaRequestStatus }\n     *     \n     */\n",
    "99765": "    /**\n     * Sets the value of the status property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link CorinaRequestStatus }\n     *     \n     */\n",
    "99774": "    /**\n     * Gets the value of the nonce property.\n     * \n     * @return\n     *     possible object is\n     *     {@link WSINonce }\n     *     \n     */\n",
    "99775": "    /**\n     * Sets the value of the nonce property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link WSINonce }\n     *     \n     */\n",
    "99779": "    /**\n     * Sets the value of the messages property.\n     * \n     * @param messages\n     *     allowed object is\n     *     {@link WSIMessage }\n     *     \n     */\n",
    "99780": "    /**\n     * Sets the value of the timings property.\n     * \n     * @param timings\n     *     allowed object is\n     *     {@link WSIHeader.Timing }\n     *     \n     */\n",
    "99802": "        /**\n         * Gets the value of the unit property.\n         * \n         * @return\n         *     possible object is\n         *     {@link String }\n         *     \n         */\n",
    "99804": "        /**\n         * Sets the value of the unit property.\n         * \n         * @param value\n         *     allowed object is\n         *     {@link String }\n         *     \n         */\n",
    "99827": "        /**\n         * Gets the value of the label property.\n         * \n         * @return\n         *     possible object is\n         *     {@link String }\n         *     \n         */\n",
    "99829": "        /**\n         * Sets the value of the label property.\n         * \n         * @param value\n         *     allowed object is\n         *     {@link String }\n         *     \n         */\n",
    "99860": "        /**\n         * Gets the value of the firstname property.\n         * \n         * @return\n         *     possible object is\n         *     {@link String }\n         *     \n         */\n",
    "99862": "        /**\n         * Sets the value of the firstname property.\n         * \n         * @param value\n         *     allowed object is\n         *     {@link String }\n         *     \n         */\n",
    "99866": "        /**\n         * Gets the value of the lastname property.\n         * \n         * @return\n         *     possible object is\n         *     {@link String }\n         *     \n         */\n",
    "99867": "        /**\n         * Sets the value of the lastname property.\n         * \n         * @param value\n         *     allowed object is\n         *     {@link String }\n         *     \n         */\n",
    "99888": "    /**\n     * Sets the value of the coverageTemporalFoundations property.\n     * \n     * @param coverageTemporalFoundations\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99902": "    /**\n     * Sets the value of the elementAuthenticities property.\n     * \n     * @param elementAuthenticities\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99917": "    /**\n     * Gets the value of the seq property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99918": "    /**\n     * Sets the value of the seq property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99931": "    /**\n     * Gets the value of the name property.\n     * \n     * @return\n     *     possible object is\n     *     {@link SearchParameterName }\n     *     \n     */\n",
    "99932": "    /**\n     * Sets the value of the name property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link SearchParameterName }\n     *     \n     */\n",
    "99934": "    /**\n     * Gets the value of the operator property.\n     * \n     * @return\n     *     possible object is\n     *     {@link SearchOperator }\n     *     \n     */\n",
    "99935": "    /**\n     * Sets the value of the operator property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link SearchOperator }\n     *     \n     */\n",
    "99951": "    /**\n     * Gets the value of the header property.\n     * \n     * @return\n     *     possible object is\n     *     {@link WSIHeader }\n     *     \n     */\n",
    "99952": "    /**\n     * Sets the value of the header property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link WSIHeader }\n     *     \n     */\n",
    "99954": "    /**\n     * Gets the value of the help property.\n     * \n     * @return\n     *     possible object is\n     *     {@link WSIHelp }\n     *     \n     */\n",
    "99956": "    /**\n     * Sets the value of the help property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link WSIHelp }\n     *     \n     */\n",
    "99959": "    /**\n     * Gets the value of the content property.\n     * \n     * @return\n     *     possible object is\n     *     {@link WSIContent }\n     *     \n     */\n",
    "99960": "    /**\n     * Sets the value of the content property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link WSIContent }\n     *     \n     */\n",
    "99962": "    /**\n     * Gets the value of the request property.\n     * \n     * @return\n     *     possible object is\n     *     {@link WSIRequest }\n     *     \n     */\n",
    "99963": "    /**\n     * Sets the value of the request property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link WSIRequest }\n     *     \n     */\n",
    "99974": "    /**\n     * Gets the value of the any property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Object }\n     *     \n     */\n",
    "99975": "    /**\n     * Sets the value of the any property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Object }\n     *     \n     */\n",
    "99989": "    /**\n     * Sets the value of the all property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link WSISearchParams.All }\n     *     \n     */\n",
    "99993": "    /**\n     * Gets the value of the returnObject property.\n     * \n     * @return\n     *     possible object is\n     *     {@link SearchReturnObject }\n     *     \n     */\n",
    "99994": "    /**\n     * Sets the value of the returnObject property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link SearchReturnObject }\n     *     \n     */\n",
    "99996": "    /**\n     * Gets the value of the limit property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99997": "    /**\n     * Sets the value of the limit property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99999": "    /**\n     * Gets the value of the skip property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "100000": "    /**\n     * Sets the value of the skip property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "100002": "    /**\n     * Gets the value of the includeChildren property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Boolean }\n     *     \n     */\n",
    "100003": "    /**\n     * Sets the value of the includeChildren property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Boolean }\n     *     \n     */\n",
    "100009": "    /**\n     * Sets the value of the params property.\n     * \n     * @param params\n     *     allowed object is\n     *     {@link WSIParam }\n     *     \n     */\n",
    "100038": "    /**\n     * Sets the value of the sampleTypes property.\n     * \n     * @param sampleTypes\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "100054": "    /**\n     * Gets the value of the cnonce property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "100055": "    /**\n     * Sets the value of the cnonce property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "100058": "    /**\n     * Gets the value of the snonce property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "100059": "    /**\n     * Sets the value of the snonce property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "100062": "    /**\n     * Gets the value of the hash property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "100064": "    /**\n     * Sets the value of the hash property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "100109": "    /**\n        Get the key for the preference which was changed.\n        \n        @return the key of the pref which was changed\n    */\n",
    "100364": "\t/**\n\t * Effectively removes this preference\n\t */\n",
    "100365": "\t/** \n\t * Sets the preference to the given value\n\t * @param value\n\t */\n",
    "100367": "\t/**\n\t * Get the value of this preference\n\t * @return the value of this preference, or its default\n\t */\n",
    "100398": "\t/**\n\t * Set the value of this preference\n\t * @param value\n\t */\n",
    "100399": "\t/**\n\t * Get the value of the pref referenced by this wrapper\n\t * @return\n\t */\n",
    "100405": "    /**\n       This method always throws UnsupportedOperationException.  It's\n       not implemented, and don't even think about implementing it\n       yourself!  It encourages being lazy and bypassing Year's\n       methods to just deal with ints.  And that defeats the whole\n       purpose of having Years.  So I'll just disallow it.  You don't\n       need it anyway.  If you really need the int for some reason I\n       can't imagine, you can always do\n       <code>Integer.parseInt(y.toString())</code>.  That way you know\n       you're doing it to get the int, and not for imagined\n       performance or convenience reasons.\n\n       @return never returns\n       @exception UnsupportedOperationException always!\n    */\n",
    "100406": "    /**\n       Return true, iff this is year 1.  (This actually comes up\n       fairly often.)\n\n       @return true iff this is year 1\n    */\n",
    "100407": "    /**\n       Adds (or subtracts, for negative values) some number of years,\n       and generates a new Year object.\n\n       @param dy the number of years to add (subtract)\n       @see #diff\n    */\n",
    "100408": "    /**\n       Calculate the number of years difference between two years.\n       That is, there are this many years difference between\n       <code>this</code> and <code>y2</code>; if they are equal, this\n       number is zero.\n\n       @param y2 the year to subtract\n       @return the number of years difference between\n       <code>this</code> and <code>y2</code>\n       @see #add\n    */\n",
    "100409": "    /**\n       Computes <code>this</code> modulo <code>m</code>.  Always\n       gives a positive result, even for negative numbers, so it is\n       suitable for computing a grid position for a span of years.\n\n       @param m base for modulo\n       @return the year modulo <code>m</code>\n    */\n",
    "100410": "    /**\n       Determines what row this year would be, if years were in a\n       grid 10 wide, with the left column years ending in zero.  Row\n       0 is years 1 through 9.\n\n       @return this year's row\n       @see #column\n    */\n",
    "100411": "    /**\n       Determines what column this year would be, if years were in a\n       grid 10 wide, with the left column years ending in zero.\n\n       Works for BC years, also:\n       <table border=\"1\" cellspacing=\"0\">\n\t   <tr><th>column()</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td>\n\t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n\t   <tr><th rowspan=\"3\">Year</th><td>-10</td><td>-9</td><td>-8</td><td>-7</td><td>-6</td>\n\t        <td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr>\n\t   <tr><td> </td><td>1</td><td>2</td><td>3</td><td>4</td>\n\t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n\t   <tr><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td>\n\t        <td>15</td><td>16</td><td>17</td><td>18</td><td>19</td></tr>\n       </table>\n\n       @return this year's column\n       @see #row\n    */\n",
    "100412": "    /**\n       Compares this and <code>o</code>.\n\n       @see java.lang.Comparable\n       @param o2 Object to compare\n       @return >0, =0, or <0 if this is greater-than, equal-to, or less-than o\n       @throws ClassCastException if o is not a Year\n    */\n",
    "100420": "    /**\n       Return the default extension for files of this type.  All of\n       the files I've seen end with \".out\", so that's what I'll use.\n\n       @return the string \".out\"\n    */\n",
    "100496": "\t/**\n\t * Quickly check to see if it's an XML document\n\t * @param r\n\t * @throws IOException\n\t */\n",
    "100500": "    /**\n       Throw a WrongFiletypeException; spreadsheet format is\n       write-only.\n\n       (This should never get called.)\n\n       @return never returns\n       @exception WrongFiletypeException every time\n    */\n",
    "100503": "    /**\n       Return the extension \".TXT\".  I don't know what format\n       spreadsheets normally expect, but it's just a text file, so\n       I'll use this for now.\n\n       @return the string \".TXT\"\n    */\n",
    "100639": "\t/**\n\t * If we've selected something, enable or disable the 'remeasure' button\n\t */\n",
    "100671": "\t/**\n\t * Apply a redate directly to the sample\n\t * @param dating\n\t */\n",
    "100728": "        /**\n         * Set the row and column without firing the listener\n         * @param row\n         * @param col\n         */\n",
    "100752": "\t/**\n\t * Set up our button behaviors\n\t */\n",
    "100773": "\t/**\n\t * update \"after:\" text with resultant range.\n\t */\n",
    "100776": "    /**\n       Return the height of this line: 18 points.\n\n       @param g the Graphics object\n       @return the height: 18 points\n    */\n",
    "100779": "    /**\n       Return the latitude, in degrees.\n        \n       @return the latitude, in degrees\n    */\n",
    "100780": "\t/** Set the font to use for the lines generated by this factory.\n\t @param f the font to use */\n",
    "100781": "    /**\n       Return the longitude, in degrees.\n\n       @return the longitude, in degrees\n    */\n",
    "100784": "    /**\n       Set the latitude, in degrees.\n\n       @param degrees the new latitude, in degrees\n    */\n",
    "100786": "    /**\n       Set the longitude, in degrees.\n\n       @param degrees the new longitude, in degrees\n    */\n",
    "100788": "    /**\n       Get the latitude, in seconds.\n\n       @return the latitude, in seconds\n    */\n",
    "100789": "    /**\n       Get the longitude, in seconds.\n\n       @return the longitude, in seconds\n    */\n",
    "100791": "    /**\n       Set the latitude, in seconds.\n\n       @param seconds the new latitude, in seconds\n    */\n",
    "100793": "    /**\n       Set the longitude, in seconds.\n\n       @param seconds the new longitude, in seconds\n    */\n",
    "100804": "    /**\n     * This method checks if a String contains only numbers\n     */\n",
    "100851": "\t/**\n\t * Ask our parent to repaint\n\t */\n",
    "100862": "\t/** Return the row count.  For the Data tab of a Sample (i.e., not\n\t Weiserjahre), it adds an extra row if the last datum is a -9\n\t year, thus ensuring that there's always one blank after the\n\t end for user editing.\n\t @return the number of displayable rows */\n",
    "100863": "\t/** Return the column count.  This is always 12: the decade, 10\n\t columns of data, and the histogram cell\n\t @return the number of columns, 12 */\n",
    "100878": "\t/**\n\t * Lazily-load this icon\n\t * \n\t * @param iconName\n\t * @return the icon, or null if iconName was null\n\t */\n",
    "100879": "\t/**\n\t * Get an icon for this tridas remark\n\t * @param remark\n\t * @return the icon, lazily loaded, or null\n\t */\n",
    "100880": "\t/**\n\t * Get an icon for this Corina remark (text)\n\t * @param remark\n\t * @return the icon, lazily loaded, or null\n\t */\n",
    "100898": "\t\t/**\n\t\t * Given the TridasObject, populate our internal structure\n\t\t * @param obj\n\t\t */\n",
    "100934": "\t/** Return the Year of the currently selected cell.\n\t @return the selected Year */\n",
    "100935": "\t/**\n\t * Lazily-load this icon\n\t * \n\t * @param iconName\n\t * @return the icon, or null if iconName was null\n\t */\n",
    "100940": "\t/**\n\t * Get an icon for this tridas remark\n\t * @param remark\n\t * @return the icon, lazily loaded, or null\n\t */\n",
    "100943": "\t/**\n\t * Get an icon for this Corina remark (text)\n\t * @param remark\n\t * @return the icon, lazily loaded, or null\n\t */\n",
    "100980": "\t/**\n\t * Add a cell modifier to the table and repaint\n\t * @param modifier\n\t */\n",
    "100987": "\t/**\n\t * Remove a cell modifier from the table and repaint\n\t * @param modifier\n\t */\n",
    "101142": "\t/**\n\t * When using heavyweight components, we have to make sure menus extend over them!\n\t */\n",
    "101178": "\t/**\n\t * Set a server query property for loading\n\t * \n\t * @param propertyName\n\t * @param value\n\t */\n",
    "101179": "\t/**\n\t * Set a server query property for saving\n\t * \n\t * @param propertyName\n\t * @param value\n\t */\n",
    "101195": "\t/**\n\t * Get the sampleDataView\n\t * @return The SampleDataVeiw I am holding\n\t */\n",
    "101202": "\t/**\n\t * Returns null if meta[key] doesn't exist, otherwise calls the object's tostring method\n\t * @param key\n\t * @return\n\t */\n",
    "101204": "\t/**\n\t * Create a default set of TridasValues\n\t * - 1/100th mm\n\t * - Ring widths\n\t * \n\t * @return a representative TridasValues object\n\t */\n",
    "101208": "\t/**\n\t * Create a default set of TridasValues\n\t * - 1/100th mm\n\t * - Ring widths\n\t * \n\t * @return a representative TridasValues object\n\t */\n",
    "101214": "\t/** Get the type of sample */\n",
    "101215": "\t/** Set the type of sample */\n",
    "101216": "\t/**\n\t * Get the attached series\n\t * @return The attached series\n\t */\n",
    "101217": "\t/**\n\t * Attach a different series\n\t * @param series\n\t */\n",
    "101218": "\t/**\n\t * Shortcut for getRemarksForYear(values, year)\n\t * Uses RING_WIDTH variable\n\t * \n\t * @param y the year\n\t * @return a TridasValue for the given year\n\t */\n",
    "101219": "\t/** Get the metadata interface */\n",
    "101220": "\t/**\n\t * Get the display title of this sample\n\t * Generally, this is the lab code\n\t * \n\t * For a menubar title, use toString()\n\t * \n\t * @return a String, probably lab code\n\t */\n",
    "101223": "\t/**\n\t * Get a TridasValue for a given year\n\t * \n\t * @param values\n\t * @param y\n\t * @return a TridasValue for the given year\n\t */\n",
    "101224": "\t/**\n\t * Get the associated tridas identifier\n\t */\n",
    "101231": "\t/** Clear the modified flag. */\n",
    "101239": "\t/**\n\t * Gets the name of the element\n\t * For a FileElement, returns the full path name\n\t * @return\n\t */\n",
    "101240": "\t/**\n\t * Gets the short name of the element\n\t * For a FileElement, returns the file's base name\n\t */\n",
    "101242": "\t/**\n\t * Compares names of one element against another\n\t */\n",
    "101249": "\t/**\n\t Load this Element.  Returns this Element in a Sample object.\n\n\t @return the Sample referenced by this Element\n\t @exception IOException if an IOException occurred while trying\n\t to load it; this can also be the subclasses\n\t FileNotFoundException\n\t */\n",
    "101252": "\t/** Count the total number of rings.  If this is a raw sample,\n\t returns the length.  If this is a summed sample, returns the\n\t sum of the count List.\n\t @return the total number of rings in this sample */\n",
    "101256": "\t/**\n\t Return this Element's filename, with\n\t <code>corina.dir.data</code> replaced by an \"?\", if it's in a\n\t subfolder of that.  (Otherwise, returns the absolute filename.)\n\n\t @return the filename, with ?'s\n\t */\n",
    "101265": "\t/**\n\t * Get the sample type we represent\n\t */\n",
    "101267": "\t/**\n\t * Copy an entire elementlist, preserving activeMap\n\t * @param src\n\t */\n",
    "101271": "\t/**\n\t * Shortcut method: returns a list of only active elements\n\t * @return\n\t */\n",
    "101284": "\t/** Return the default scale factor for graphing.\n\t @return scale factor of 1.0, or 0.1 for indexed files */\n",
    "101287": "\t/** Return the start date for a graph.\n\t @return start date of data to graph */\n",
    "101296": "\t/** \n\t * Return true if the sample is absolutely dated, else false.\n\t * @return true if the sample is absolutely dated \n\t */\n",
    "101300": "\t/** Return true if the sample is indexed, else false.\n\t @return true if the sample is indexed */\n",
    "101302": "\t/** Return true if the file was modified since last save.\n\t @return if the sample has been modified */\n",
    "101306": "\t/** <p>Return true if the sample is summed, else false.  Here\n\t \"summed\" is defined as:</p>\n\t <ul>\n\t <li>has a list of elements, or\n\t <li>has count data\n\t </ul>\n\t @return true if the sample is summed */\n",
    "101312": "\t/**\n\t * Note that getCount() will return a list that has all ones\n\t * when hasCount() can return false\n\t * @return true if counts exist\n\t */\n",
    "101320": "\t/** Set the modified flag. */\n",
    "101330": "\t/** Return a short version of the sample's title (without range info).\n\t @return the \"title\" tag from meta */\n",
    "101352": "  /** \n   * Indicate the progress of the operation being monitored.\n   * If the specified value is >= the maximum, the progress\n   * meter is closed. \n   * @param value an int specifying the current value, between the\n   *        maximum and minimum specified for this component\n   * @see #setMinimum\n   * @see #setMaximum\n   * @see #close\n   */\n",
    "101353": "  /**\n   * Indicate that the operation is complete.  This happens automatically\n   * when the value set by setProgress is >= max, but it may be called\n   * earlier if the operation ends early.\n   */\n",
    "101355": "  /**\n   * Returns the minimum value -- the lower end of the progress value.\n   * @return an int representing the minimum value\n   * @see #setMinimum\n   */\n",
    "101356": "  /**\n   * Specifies the minimum value.\n   * @param m an int specifying the minimum value\n   * @see #getMinimum\n   */\n",
    "101357": "  /**\n   * Returns the maximum value -- the higher end of the progress value.\n   * @return an int representing the maximum value\n   * @see #setMaximum\n   */\n",
    "101358": "  /**\n   * Specifies the maximum value.\n   * @param m an int specifying the maximum value\n   * @see #getMaximum\n   */\n",
    "101361": "  /**\n   * Specifies the amount of time to wait before deciding whether or\n   * not to notify listeners that they should display.\n   * @param millisToDecideToPopup an int specifying the time to wait,\n   *        in milliseconds\n   * @see #getMillisToDecideToPopup\n   */\n",
    "101362": "  /**\n   * Returns the amount of time this object waits before deciding whether\n   * or not to notify listeners to display.\n   * @see #setMillisToDecideToPopup\n   */\n",
    "101363": "  /**\n   * Specifies the amount of time it will take for listeners to be notified\n   * to display. (If the predicted time remaining is less than this time, then\n   * listeners won't be notified to display)\n   * @param millisToPopup  an int specifying the time in milliseconds\n   * @see #getMillisToPopup\n   */\n",
    "101365": "  /**\n   * Returns the amount of time it will take before listeners are notified\n   * to display.\n   * @see #setMillisToPopup\n   */\n",
    "101367": "  /**\n   * Specifies the additional note that is displayed along with the\n   * progress message.\n   * @param note a String specifying the note to display\n   * @see #getNote\n   */\n",
    "101368": "  /**\n   * Returns the additional note that is displayed along with the\n   * progress message.\n   * @return a String specifying the note to display\n   * @see #setNote\n   */\n",
    "101369": "\t/**\n\t * Set a new sort column. This is the index number to match of the headers.\n\t * The null value is allowed.\n\t * \n\t * @param sortColumn\n\t *            the number of the new column which is used for sorting\n\t */\n",
    "101371": "\t/**\n\t * Tell the renderer whether this sort is forward or reverse. If it's\n\t * reversed, the triangle is drawn upside-down.\n\t * \n\t * @param reversed\n\t *            is the sort a reverse-sort?\n\t */\n",
    "101372": "\t/**\n\t * Is this sort column reversed?\n\t * @return\n\t */\n",
    "101550": "    /**\n       Add the \"Labels\" menuitem.\n    */\n",
    "101551": "    /**\n    Add the \"Reports\" menuitem.\n    */\n",
    "101553": "\t /**\n\t Add the \"User and groups\" menuitem.\n\t*/\n",
    "101555": "\t /**\n\t Add the \"Curation\" menuitem.\n\t*/\n",
    "101557": "    /**\n       Add the \"Corina Help\" menuitem.\n    */\n",
    "101558": "    /**\n       Add the \"System Properties...\" menuitem.\n    */\n",
    "101561": "    /**\n       Add the \"About Corina...\" menuitem.\n    */\n",
    "101565": "    /**\n     * Returns the upper value in the range.\n     */\n",
    "101567": "    /**\n     * Sets the upper value in the range.\n     */\n",
    "101603": "    /**\n     * Paints the thumb for the lower value using the specified graphics object.\n     */\n",
    "101605": "    /**\n     * Paints the thumb for the upper value using the specified graphics object.\n     */\n",
    "101607": "    /**\n     * Returns a Shape representing a thumb.\n     */\n",
    "101609": "    /** \n     * Sets the location of the upper thumb, and repaints the slider.  This is\n     * called when the upper thumb is dragged to repaint the slider.  The\n     * <code>setThumbLocation()</code> method performs the same task for the\n     * lower thumb.\n     */\n",
    "101653": "\t/**\n\t * Check if an event changed our validity, and if it did, notify\n\t */\n",
    "101655": "\t/**\n\t * Get the search parameter name\n\t * @return The enum value, or null if not selected\n\t */\n",
    "101656": "\t/**\n\t * Get the search operator\n\t * @return the enum value\n\t */\n",
    "101658": "\t/**\n\t * Get the search value\n\t * @return the search value, or null if it is empty\n\t */\n",
    "101663": "\t/**\n\t * Add a listener for searchproperty changes\n\t * @param listener\n\t */\n",
    "101664": "\t/**\n\t * Remove a listener for search property changes\n\t * @param listener\n\t */\n",
    "101683": "\t/**\n\t * Used if we're actually doing a login!\n\t * @param nonce\n\t */\n",
    "101713": "    /**\n     * Initilize components of the gui\n     */\n",
    "101719": "    /**\n     * Play a beep.  Useful for when a barcode has been scanned.\n     */\n",
    "101731": "    /**\n     * Setup the search panel\n     * \n     */\n",
    "101732": "\t/**\n\t * Rebuild our panel: relayout everything\n\t */\n",
    "101733": "\t/**\n\t * Rebuild a search parameter list, and search if need be\n\t */\n",
    "101744": "\t/**\n\t * Force a re-sort\n\t */\n",
    "101745": "\t/**\n\t * Force a sort...\n\t * @param col the column to sort on\n\t * @param reverse force reverse\n\t */\n",
    "101755": "    /**\n        Return the minimum size required to lay out these components in\n        the parent.\n\n        @param the parent to lay out\n        @return the minimum layout size\n    */\n",
    "101756": "    /**\n        Return the preferred size required to lay out these components\n        in the parent.\n\n        @param the parent to lay out\n        @return the preferred layout size\n    */\n",
    "101757": "    /**\n        Optional, and not implemented.\n    */\n",
    "101758": "    /**\n        Optional, and not implemented.\n    */\n",
    "101821": "\t/**\n\t * Convenience method: Force a JTextField to auto-capitalize \n\t * and not allow any whitespace chars\n\t * @param field\n\t */\n",
    "101828": "\t/**\n\t * Convenience function: makes a JTextField select all\n\t * when it receives focus\n\t * @param field\n\t */\n",
    "101831": "\t/**\n\t * Set a component's maximum height to its preferred height\n\t * @param comp\n\t */\n",
    "101832": "\t/**\n\t * Sets the background color of the field depending on its\n\t * valid/invalid status\n\t * @param field\n\t * @param isGood\n\t */\n",
    "101846": "    /**\n     * Called right before we're about to be made visible, \n     * so we can perhaps do some last minute updates?\n     */\n",
    "101851": "    /**\n     * Get the selected object in this panel\n     * DON'T CALL BEFORE verifyAndSelectNextPanel()!!!\n     * @return\n     */\n",
    "101854": "    /**\n     * Called right before we're about to be made visible\n     */\n",
    "101855": "    /**\n     * is our form in a completely valid state?\n     */\n",
    "101856": "    /**\n     * check to see if our combobox is valid or not\n     */\n",
    "101862": "    /**\n     * Is the panel valid (e.g., can we move to the next panel?)\n     * @return\n     */\n",
    "101873": "    /**\n     * called when our child panel's validity state changes\n     */\n",
    "101889": "    /**\n     * adds an element to the list\n     * @param e\n     */\n",
    "101891": "\t/**\n\t * Set the new object to create\n\t * @param obj\n\t */\n",
    "101893": "    /**\n     * Does nothing for the final panel\n     */\n",
    "101896": "\t/**\n\t * Populate our dialog using any necessary information from our parent dialog\n\t */\n",
    "101897": "    /**\n     * Remove the element from all lists that I have\n     * @param e\n     */\n",
    "101898": "\t/**\n\t * Populate our dialog using the supplied prefix\n\t */\n",
    "101899": "\t/**\n\t * Query our webservice to create this object\n\t * \n\t * @param resource\n\t * @returns true if success\n\t */\n",
    "101901": "\t/**\n\t * Did we succeed in creating a new webdb object?\n\t * @return\n\t */\n",
    "101902": "\t/**\n\t * Makes this JTextField call our validateButtons() method\n\t * every time its contents change.\n\t * \n\t * @param field\n\t */\n",
    "101908": "\t/**\n\t * Return the value of our name field, if any\n\t * @return our name field or null\n\t */\n",
    "101909": "\t/**\n\t * Save our changes to the db\n\t */\n",
    "101913": "\t/**\n\t * Called to notify the wizard our 'ok' state has changed\n\t */\n",
    "101918": "    /**\n     * Is this element in the selected list?\n     * @param e\n     * @return true if the selected elements table contains this element\n     */\n",
    "101922": "\t/**\n\t * Causes the dialog to update the resource given instead of\n\t * creating a new resource.\n\t * \n\t * @param obj\n\t */\n",
    "101924": "\t/**\n\t * Steal the identify of our updating object, if it's set\n\t * @param obj\n\t */\n",
    "101926": "\t/**\n\t * Intended to be overridden by a function that enables/disables buttons.\n\t * Called by anything that has been added with setFieldValidateButtons\n\t */\n",
    "101929": "    /**\n     * How many elements need to be selected before we allow continuing?\n     * (defaults to 1, increase for sums?)\n     * @param value\n     */\n",
    "101935": "    /**\n     * Selects the site indicated by \"code\"\n     * No effect if code is invalid\n     * @param code\n     */\n",
    "101945": "    /**\n     * Get the JPanel that comprises space between invert...OK\n     * Not initialized; must be laid out manually\n     * @return\n     */\n",
    "101960": "    /**\n     * Return a default object for this class, if one exists\n     */\n",
    "101975": "\t\t/**\n\t\t * Show the search label (or not...)\n\t\t * @param shouldShow\n\t\t * @param hasProgress\n\t\t */\n",
    "102153": "\t/**\n\t * Get the name of the series\n\t * @return The name of the series\n\t */\n",
    "102160": "\t/**\n\t * Check if the fields exist; show a dialog and focus if they don't.\n\t * \n\t * @param valuesRequired\n\t * @return true if the values are satisfied, false otherwise\n\t */\n",
    "102238": "\t/**\n\t * Perform this action\n\t * \n\t * @param source\n\t */\n",
    "102239": "\t/** Called when our selection state changes */\n",
    "102240": "\t/**\n\t * Associate a toggleable button with this action's internal toggle state\n\t * \n\t * @param button the button to associate with\n\t * @param defaultValue the default boolean value, or null if we should try to automatically figure this out\n\t */\n",
    "102242": "\t/**\n\t * Associate a toggleable button with this action's internal toggle state\n\t * (Guess defaults!)\n\t * @param button\n\t */\n",
    "102262": "\t/**\n\t * Set the type of crossdate to display (e.g., TScore.class, RScore.class)\n\t * @param clazz\n\t */\n",
    "102264": "    /**\n     * Show an open dialog as a child of a frame\n     * @param parent\n     * @param preexistingElements\n     */\n",
    "102271": "\t/**\n\t * Get the number of items in the fullest bucket.\n\t * \n\t * @return the number of items in the fullest bucket\n\t */\n",
    "102273": "\t/**\n\t * Get the number of buckets. This is a compile-time constant.\n\t * \n\t * @see Histogram#NUMBER_OF_BUCKETS\n\t * @return the number of buckets\n\t */\n",
    "102274": "\t/**\n\t * Get the range spanned by a bucket. This is returned as a string, in the\n\t * format \"a - b\". The ends of the span are formatted in the provided\n\t * format.\n\t * \n\t * @param bucket\n\t *            which bucket to look at\n\t * @return the range spanned by that bucket, as a string \"a - b\"\n\t */\n",
    "102275": "\t/**\n\t * Gets the minimum value in a bucket\n\t * \n\t * @param bucket\n\t * @return\n\t */\n",
    "102276": "\t/**\n\t * Get the number of items in a bucket.\n\t * \n\t * @param bucket\n\t *            which bucket to look at\n\t * @return the number of items in that bucket\n\t */\n",
    "102278": "\t/** Return a prettier name for this cross: \"T-Score\".\n\t @return the name of this cross, \"T-Score\" */\n",
    "102279": "\t/** A format string for T-scores.\n\t @return a format string for T-scores */\n",
    "102291": "\t/**\n\t * Given the row and column, get a pairing.\n\t * \n\t * @param row\n\t * @param col\n\t * @return\n\t * @throws ArrayIndexOutOfBoundsException\n\t */\n",
    "102297": "\t/**\n\t * Find a pairing of the two given samples\n\t * \n\t * This can be time consuming with a huge amount of pairs...\n\t * \n\t * @param s1\n\t * @param s2\n\t * @return the pairing, or null if not found\n\t */\n",
    "102301": "\t/**\n\t   Returns a list of all fixed samples.\n\n\t   @return all fixed samples of this sequence\n\t */\n",
    "102302": "\t/**\n\t   Returns a list of all moving samples.\n\n\t   @return all moving samples of this sequence\n\t */\n",
    "102310": "\t/**\n\t   Return a new crossdate of the current pairing.\n\n\t   @exception IOException if one of the samples needed to make\n\t   this crossdate could not be loaded\n\t   @exception IllegalArgumentException if one of the algorithms\n\t   used by this Sequence isn't a valid crossdate (i.e.,\n\t   Cross.makeCross() throws an exception)\n\t */\n",
    "102311": "\t/**\n\t   Sets the algorithms to use for this sequence.  The format is an\n\t   array of Strings containing (fully-qualified) names of classes\n\t   which subclass corina.cross.Cross.  The order used is the order\n\t   they'll be presented to the user.\n\n\t   @param algorithms the new algorithms to use\n\t */\n",
    "102312": "\t/**\n\t   Go to the next pairing.  If already at the end, does nothing.\n\t */\n",
    "102314": "\t/**\n\t   Go to the previous pairing.  If already at the beginning, does\n\t   nothing.\n\t */\n",
    "102315": "\t/**\n\t   Is the current pairing the first pairing?\n\n\t   @return true, if this is the first pairing\n\t */\n",
    "102318": "\t/**\n\t   Is the current pairing the last pairing?\n\n\t   @return true, if this is the last pairing\n\t */\n",
    "102353": "\t/**\n\t Make a printable object for this crossdating grid.\n\n\t @return a Printable for this Grid\n\t */\n",
    "102376": "    /** Get notified when the graph changes */\n",
    "102412": "\t/**\n\t Make a printable object for this crossdating table.\n\n\t @return a Printable for this Table\n\t */\n",
    "102436": "    /**\n       Change the view to a different crossdate.\n\n       @param crossdate the new crossdate to view\n    */\n",
    "102445": "\t/**\n\t The number of samples in this Grid.  Add one to this value to\n\t get the number of cells high or wide the grid is.\n\n\t @return the number of samples in this Grid\n\t */\n",
    "102447": "\t/**\n\t Get a Cell from the grid.\n\n\t @param row the row\n\t @param column the column\n\t @return the cell at (row, column)\n\t */\n",
    "102454": "\t/**\n\t Get the error that occurred while computing the grid.  The\n\t run() method in Runnable can't throw any exceptions, so we just\n\t store them here for later use.\n\n\t @return an Exception, if one occurred, else null\n\t */\n",
    "102457": "\t/**\n\t A short preview for file dialogs.  Displays \"Crossdating Grid\",\n\t and lists the first few elements.\n\n\t @return a preview component for this grid\n\t */\n",
    "102549": "  /**\n   * Make a new graph (in a new window) from the selected crossdate.\n   */\n",
    "102598": "    /**\n       Make a new graph (in a new window) from the selected crossdate.\n    */\n",
    "102611": "\t/**\n\t * Get the score at this row, col\n\t * \n\t * @param row\n\t * @param col\n\t * @return\n\t */\n",
    "102613": "\t/**\n\t * Given the cell at row, col, give a range for\n\t * the secondary sample that produced that score\n\t * \n\t * @param row\n\t * @param col\n\t * @return\n\t */\n",
    "102615": "\t/**\n\t * Gets a redated sample, given a cell\n\t * \n\t * @param row\n\t * @param col\n\t * @return\n\t */\n",
    "102620": "\t/**\n\t * Get the overlap, given a range already\n\t * \n\t * @param newRange\n\t * @return\n\t */\n",
    "102637": "\t/** Return a prettier name for this cross: \"R-Value\".\n\t @return the name of this cross, \"R-Value\" */\n",
    "102639": "\t/** A format string for R-values.\n\t @return a format string for R-values */\n",
    "102645": "\t/** Compute the mean of an array of floats.\n\t @param array the array of floats to average\n\t @return the average (arithmetic mean) of the given array */\n",
    "102658": "\t/**\n\t * Get a crossdate score.\n\t * \n\t * Used only inside cross implementation by other crosses\n\t * \n\t * @param index\n\t *            the index of the score to get\n\t * @return the score at that index\n\t */\n",
    "102662": "\t/**\n\t * Get a crossdate score.\n\t * \n\t * TODO -- (what if you want data.length? use getRange().span().)\n\t * \n\t * @param year\n\t *            the end year of the moving sample\n\t * @return the score at that position\n\t */\n",
    "102665": "\t/**\n\t * Get a crossdate score signifigance.\n\t * \n\t * @param year\n\t *            the end year of the moving sample\n\t * @return the score signifigance at that position\n\t */\n",
    "102671": "\t/**\n\t * Returns the fixed sample.\n\t * \n\t * @return the fixed sample\n\t */\n",
    "102674": "\t/**\n\t * Returns the moving sample.\n\t * \n\t * @return the moving sample\n\t */\n",
    "102677": "\t/**\n\t * Is the run finished?\n\t * \n\t * @return true, if the crossdate is finished being run\n\t */\n",
    "102692": "\t/**\n\t * Crossdate preamble: any setup that needs to be done before the main loop\n\t * to compute individual scores.\n\t * \n\t * ----deprecated the preamble was always kind of silly\n\t * Not really - it's nice to separate this stuff!\n\t */\n",
    "102701": "\t/**\n\t * Returns the redated (secondary) sample for the specific row\n\t * \n\t * @param row\n\t * @return\n\t */\n",
    "102703": "\t/**\n\t * Returns the redated (secondary) sample range for the specific row\n\t * \n\t * @param row\n\t * @return\n\t */\n",
    "102769": "    /**\n       Save a sample into the database.  This operation is atomic.\n\n       @param sample the sample to save\n       @exception SQLException if an SQL exception occurs\n    */\n",
    "102773": "    /**\n       Import all files from a folder into the database.  All files in\n       sub-folders will be imported, as well.  Non-dendro files are\n       ignored.  The entire import is atomic.\n\n       @param folder the folder to import\n       @exception SQLException if there is an SQL exception while\n       importing data\n    */\n",
    "102828": "    /**\n     * Format this XML as pretty or not\n     * Returns self, so you can do:\n     *    new XMLBody(in).setPretty(true)...\n     * @param pretty\n     * @return\n     */\n",
    "102907": "\t/**\n\t * Get the current pageFormat\n\t * @return the pageFormat\n\t */\n",
    "102909": "\t/**\n\t * Change the associated page format\n\t * @param pageFormat\n\t */\n",
    "102910": "\t/**\n\t * Shortcut method for changing page orientation\n\t * Works the same as calling getPageFormat().setOrientation(orientation)\n\t * @see PageFormat#setOrientation(int)\n\t * @param orientation one of PageFormat.LANDSCAPE, PageFormat.PORTRIAT, PageFormat.REVERSE_LANDSCAPE, etc\n\t */\n",
    "102913": "\t/**\n\t * Actually print the PDF\n\t * @throws PrinterException\n\t */\n",
    "102966": "    /** Watch for mouse-pressed popup events.  Mac systems generate\n\tpopup events on mouse-down.\n\t@param e the mouse-pressed event\n    */\n",
    "102967": "    /** Watch for mouse-released popup events.  Windows systems\n\tgenerate popup events on mouse-up, because Windows supports\n\twhat is perhaps the weirdest and most counterintuitive user\n\tinteraction ever conceived: the\n\tright-click-drag-release-select-from-menu.\n\t@param e the mouse-released event\n    */\n",
    "102971": "    /**\n       Called when a popup mouse event is generated.  Implement this\n       method to do what you want on popup events.\n\n       <p>The default behavior is:</p>\n       <ul>\n         <li>if a JTable was clicked on, and the row that was clicked\n         on was not selected, select it (and deselect the rows that\n         were selected)\n\n\t <li>show the popup here (assuming it's non-null)\n       </ul>\n\n       <p>Remember, you can get the position of the click with\n       e.getX() and e.getY(), and the component that was clicked on\n       with e.getComponent().</p>\n\n       @param e the popup mouse event\n    */\n",
    "102997": "    /**\n       A \"document changed\" update occured.  Calls update().\n       @param e the document event\n    */\n",
    "102999": "    /**\n       A \"document insert\" update occured.  Calls update().\n       @param e the document event\n    */\n",
    "103001": "    /**\n       A \"document remove\" update occured.  Calls update().\n       @param e the document event\n    */\n",
    "103011": "\t/**\n\t * Convenience method to recreate a list without making a new one\n\t * @param c\n\t */\n",
    "103018": "\t/**\n\t * Return a sanitized filename\n\t * @return\n\t */\n",
    "103029": "\t/**\n\t * Output the XML document to a string\n\t */\n",
    "103033": "\t/**\n\t * Implementation of the ListModel interface\n\t */\n",
    "103035": "\t/**\n\t * Implementation of the ListModel interface\n\t */\n",
    "103038": "\t/**\n\t * Implementation of the method in the ListModel interface\n\t * @param listener ListDataListener\n\t */\n",
    "103041": "\t/**\n\t * Implementation of the method in the ListModel interface\n\t * @param listener ListDataListener\n\t */\n",
    "103043": "\t/**\n\t * Return the type of bug and message for this bug report\n\t */\n",
    "103054": "    /**\n       The compare method used by Comparator.  Simply calls\n<pre>\n   return compare((String) o1, (String) o2);\n</pre>\n\n       @param o1 the first string to compare\n       @param o2 the second string to compare\n       @return the result of their comparison\n    */\n",
    "103093": "    /** Write a portion of a character array, except <code>'\\r'</code>\n\tcharacters.\n\t@param cbuf the character array to read from\n\t@param off the offset into the array to start reading\n\t@param len the number of characters to read out of the array */\n",
    "103096": "    /**\n     * Is the given log level currently enabled?\n     *\n     * @param logLevel is this level enabled?\n     */\n",
    "103101": "    /**\n     * <p> Log a message with debug log level.</p>\n     */\n",
    "103108": "    /**\n     * <p> Log an error with debug log level.</p>\n     */\n",
    "103109": "\t/**\n\t * Get the starting year of this range.\n\t * \n\t * @return the starting year\n\t */\n",
    "103110": "\t/**\n\t * Get the ending year of this range.\n\t * \n\t * @return the ending year\n\t */\n",
    "103111": "    /**\n     * <p> Log a message with debug log level.</p>\n     */\n",
    "103112": "\t/**\n\t * Set the starting year of the range, and adjust the ending year to\n\t * maintain the same length.\n\t * \n\t * @param y\n\t *            new starting year for the range\n\t * @see #redateEndTo\n\t */\n",
    "103113": "\t/**\n\t * Redate a range by a certain number of years. Usually, you'll use\n\t * redateStartTo() or redateEndTo(), which are more convenient.\n\t * \n\t * @param dy\n\t *            the number of years to shift this range by\n\t */\n",
    "103114": "    /**\n     * <p> Log an error with debug log level.</p>\n     */\n",
    "103116": "\t/**\n\t * Return the number of years spanned by this range. For example, the range\n\t * 1001 - 1005 spans 5 years.\n\t * \n\t * @return the span of this range (difference between start and end,\n\t *         inclusive)\n\t */\n",
    "103118": "    /**\n     * <p> Log a message with info log level.</p>\n     */\n",
    "103119": "\t/**\n\t * Compute the number of rows this Range will take to display, assuming rows\n\t * are marked off as the row() method does.\n\t * \n\t * @return the number of rows this range spans\n\t */\n",
    "103121": "    /**\n     * <p> Log an error with info log level.</p>\n     */\n",
    "103122": "\t/**\n\t * Return a string representation of the range, including the span, like\n\t * \"(1001 - 1036, n=36)\".\n\t * \n\t * @return a string representation of the range, including span\n\t */\n",
    "103123": "    /**\n     * <p> Log a message with warn log level.</p>\n     */\n",
    "103124": "\t/**\n\t * Return true if (and only if) the given year is inside the range,\n\t * inclusive.\n\t * \n\t * @param y\n\t *            year to check\n\t * @return true if <code>y</code> is in the range, else false\n\t */\n",
    "103125": "\t/**\n\t * Return true if (and only if) the given range is completely inside the\n\t * range, inclusive.\n\t * \n\t * @param r\n\t *            range to check\n\t * @return true if <code>r</code> is entirely in the range, else false\n\t */\n",
    "103126": "    /**\n     * <p> Log an error with warn log level.</p>\n     */\n",
    "103127": "\t/**\n\t * Return true, iff this year is the start of a row. (Year 1 is considered\n\t * the start of that row.)\n\t * \n\t * @return true, iff this year is the start of a row\n\t */\n",
    "103129": "\t/**\n\t * Return true, iff this year is the end of a row.\n\t * \n\t * @return true, iff this year is the end of a row\n\t */\n",
    "103130": "    /**\n     * <p> Log a message with error log level.</p>\n     */\n",
    "103131": "\t/**\n\t * Return the number of years overlap between this range and the given\n\t * range.\n\t * \n\t * @param r\n\t *            range to compare\n\t * @return number of years overlap\n\t */\n",
    "103133": "\t/**\n\t * The intersection of this range with r. If they don't overlap, returns an\n\t * empty range (1 - -1).\n\t * \n\t * @see #union\n\t * @param r\n\t *            the range to intersect with this range\n\t * @return the intersection of this and r\n\t */\n",
    "103134": "\t/**\n\t * The union of this range with r. Since there is no concept of\n\t * \"range with a gap\" in Corina, it assumes they overlap.\n\t * \n\t * @see #intersection\n\t * @param r\n\t *            the range to union with this range\n\t * @return the union of this and r\n\t */\n",
    "103135": "    /**\n     * <p> Log an error with error log level.</p>\n     */\n",
    "103138": "    /**\n     * <p> Log a message with fatal log level.</p>\n     */\n",
    "103139": "\t/**\n\t * Compares this and o, for placing in fallback order. Fallback order sorts\n\t * ranges by their ending year, latest to earliest, and then by their\n\t * length, longest to shortest. (This is usually what people want when\n\t * looking at bargraphs.)\n\t * \n\t * @param o\n\t *            Object to compare\n\t * @return >0, ==0, or <0 if this is greater-than, equal-to, or less-than o\n\t * @throws ClassCastException\n\t *             if o is not a Range\n\t */\n",
    "103141": "    /**\n     * <p> Log an error with fatal log level.</p>\n     */\n",
    "103156": "        /**\n         * Method added by PHIL. [Thanks, PHIL. -Rob]\n         * This pads the buffer without closing the stream.\n         * @throws java.io.IOException  if there's an error.\n         */\n",
    "103183": "        /**\n         * Suspends encoding of the stream.\n         * May be helpful if you need to embed a piece of\n         * base64-encoded data in a stream.\n         *\n         * @throws java.io.IOException  if there's an error flushing\n         * @since 1.5.1\n         */\n",
    "103194": "        /**\n         * Resumes encoding of the stream.\n         * May be helpful if you need to embed a piece of\n         * base64-encoded data in a stream.\n         *\n         * @since 1.5.1\n         */\n",
    "103213": "\t/**\n\t * Save a single sample.\n\t * Pops up a dialog box asking for the file name to save to, exports to the type \n\t * passed in 'format' (ie, corina.Formats.Tucson)\n\t * \n\t * @param exportee the sample to export\n\t * @return The full path of the exported file name, or null if not saved\n\t */\n",
    "103221": "\t/**\n\t * Save a list of samples in packed format.\n\t * Pops up a dialog box asking for the file name to save to, exports to the type chosen in the\n\t * visible popup menu.\n\t * \n\t * @param exportee the sample to export\n\t * @return the full path of the saved packed sample, or null if not saved\n\t */\n",
    "103232": "\t/**\n\t * Saves multiple samples.\n\t * Pops up a dialog box asking for a folder to save to;\n\t * files are dumped in to this folder with a default extension added, ie:\n\t * ACM123.PIK becomes ACM123.PIK.TUC\n\t * \n\t * @param slist a List of samples\n\t * @return a List of saved file names, or null if not saved.\n\t */\n",
    "103334": "\t/**\n\t * Same as calling scaleToFitHeight(1)\n\t */\n",
    "103346": "\t/**\n\t * Set this as the default\n\t */\n",
    "103347": "\t/**\n\t * Get the internationalization tag for this plot agent\n\t * @return \"agent_xxx\"\n\t */\n",
    "103425": "    /**\n     * Set the plotting agent\n     * @param agent\n     */\n",
    "103430": "    /**\n     * Set the highlighted state of this graph\n     * @param highlighted\n     */\n",
    "103432": "    /**\n     * Is this graph mouseover highlighted\n     * @return true on highlgiht\n     */\n",
    "103433": "    /**\n     * Get the plotter\n     * @return The plotter used to graph this\n     */\n",
    "103445": "\t/**\n\t * Acquire a printing version of this graphInfo\n\t * \n\t * @return a GraphInfo copy for printing\n\t */\n",
    "103448": "\t/**\n\t * Reset graph colors to their default values\n\t */\n",
    "103498": "\t/**\n\t * Get the associated graph\n\t * @return a Graph structure\n\t */\n",
    "103500": "\t/**\n\t * Get the event type\n\t * @return a GrapherEvent.Type\n\t */\n",
    "103552": "\t/**\n\t * Get the graph height (via the panel, or the printHeight if printing)\n\t * @param panel\n\t * @return the height, in pixels\n\t */\n",
    "103668": "    /** Run all the indexes. */\n",
    "103691": "\t/**\n\t * Apply an index directly to a sample, not using a server...\n\t * @param index\n\t */\n",
    "103716": "\t/**\n\t   Return the name of this index in a user-readable format.  This\n\t   abstract class returns the name of the instantiated class (like\n\t   \"CubicSpline\")\n\n\t   @return the name of this index\n\t */\n",
    "103779": "\t/**\n\t * Method to determine if this field is a list (ie, combobox)\n\t * \n\t * @return true if this field contains a list of values, \n\t * false if it is free-editable (ie, a text field)\n\t */\n",
    "103833": "\t/**\n\t * Update the master list\n\t * @param masterList a new list, can't be null\n\t */\n",
    "103835": "\t/**\n\t * Resets the internal values list\n\t * @param in\n\t */\n",
    "103838": "\t/**\n\t * Resets the internal count list\n\t * @param in\n\t */\n",
    "103839": "\t/** \n\t * Get the actual underlying size of the count list\n\t * (size() is overridden to match the master list)\n\t * @return the actual size\n\t */\n",
    "103840": "\t/**\n\t * Get the actual underlying empty status\n\t * @return true if no count exists, false otherwise\n\t */\n",
    "103857": "\t/**\n\t * Get the WJ string for this index\n\t * Does no range checking\n\t * @param index\n\t * @return A weiserjahre value in \"incr/decr\" form\n\t */\n",
    "103863": "\t/**\n\t * Recursively add all objects to the list\n\t * Deals with the object tree being n-deep\n\t * @param obj\n\t * @param view\n\t */\n",
    "103868": "\t/**\n\t * Find a tridas object by site code\n\t * \n\t * @param siteCode\n\t * @return a tridas object\n\t */\n",
    "103884": "\t/**\n\t * Gets a key for this parent object\n\t * @param parentObject\n\t * @return\n\t */\n",
    "103891": "\t/**\n\t * Replace a property by identity (==).\n\t *  \n\t * @param oldProp the property to replace\n\t * @param newProp the property to replace it with\n\t */\n",
    "103897": "\t/**\n\t * Remove the geometry\n\t */\n",
    "103899": "\t/**\n\t * Pop up a dialog and select a new geometry\n\t */\n",
    "103918": "\t/**\n\t * Does this class represent an enum property?\n\t * If true, getEnumType() can be called\n\t * @return true if this class represents an enum property\n\t */\n",
    "103948": "\t/**\n\t * Set the type of the class\n\t * \n\t * Checks to see if we have dictionary mappings and\n\t * other annotations.\n\t * \n\t * @param clazz\n\t * @param field\n\t */\n",
    "103956": "\t/**\n\t * Writes the value of the Property to the given object. It uses reflection\n\t * and looks for a method starting with \"set\" followed by the capitalized\n\t * Property name and with one parameter with the same type as the Property.\n\t */\n",
    "103964": "\t/**\n\t * Translate the value for external representation\n\t * (how it's supposed to be represented in the object)\n\t * @return\n\t */\n",
    "103966": "\t/**\n\t * Remove the popup from the screen\n\t * @param resetFilter remove a filter, if true\n\t */\n",
    "103967": "\t/**\n\t * Translate the value for internal representation\n\t * (This is what we display in our property table)\n\t * @param value\n\t * @return\n\t */\n",
    "103979": "\t/**\n\t * Get the information in this dialog as represented by a TridasLocationGeometry\n\t * @return a geometry\n\t * @throws IllegalStateException if the dialog hasn't been used properly\n\t */\n",
    "103981": "\t/**\n\t * Called when the text in the search field changes\n\t */\n",
    "104003": "\t/**\n\t * Change the message when the graph is empty\n\t * @param emptyGraphText\n\t */\n",
    "104014": "\t/**\n\t * Paint a \"Nothing to graph\" when there's nothing available\n\t * @param g\n\t */\n",
    "104052": "\t/** \n\t * Clear the list of site codes\n\t */\n",
    "104054": "\t/** Scale an icon down to 20x20 */\n",
    "104066": "\t/**\n\t * Compare two string values, but try them as integers\n\t * \n\t * @param o1\n\t * @param o2\n\t * @return -1, 0, or 1, if o1 is less than, equal to, or greater than o2\n\t */\n",
    "104073": "\t/**\n\t * Determines if this is a top level object (has no parent)\n\t * @return true if this is a top level object\n\t */\n",
    "104075": "\t/**\n\t * Get the parent object\n\t * @return The parent object, or null if it doesn't exist\n\t */\n",
    "104076": "\t/**\n\t * Determines if this has any children\n\t * @return true of there are any sub-object children\n\t */\n",
    "104077": "\t/**\n\t * Does this object have a lab code?\n\t * @return true if getLabCode would return a valid labcode\n\t */\n",
    "104081": "\t/**\n\t * Sets the graph plot agent for all non-density graphs\n\t * Must call update(true) for graphs to be redrawn\n\t * @param agent\n\t */\n",
    "104083": "\t/**\n\t * Get a text representation of this site\n\t * @return A string in the form of '[CODE] title'\n\t */\n",
    "104101": "\t/**\n\t * Preprocess the query response\n\t * \n\t * Use this to check for things such as validity, login errors, etc, \n\t * and handle them appropriately. The default implementation always\n\t * returns success.\n\t * \n\t * If a failure occurs, throw a descriptive ResourceException. \n\t * Returning FAILURE just throws a generic ResourceException.\n\t * \n\t * @param object\n\t * @return a PreprocessResult\n\t * @throws ResourceException \n\t * @throws UserCancelledException \n\t * @see PreprocessResult for stuff\n\t */\n",
    "104102": "\t/**\n\t * Internal method: called when the query succeeds\n\t * \n\t * @param object\n\t */\n",
    "104103": "\t/**\n\t * Called by either button press to update the UI state\n\t */\n",
    "104104": "\t/**\n\t * Internal method: called when the query fails\n\t * \n\t * @param e the exception of failure!\n\t */\n",
    "104106": "\t/**\n\t * Called if processQueryResult returns true\n\t * \n\t * @param object The successful in object\n\t */\n",
    "104107": "\t/**\n\t * Called when the 'Change' button is pressed\n\t * Activates the combo box, allowing for changes\n\t */\n",
    "104108": "\t/**\n\t * In this function, handle any failure condition.\n\t * This is only called if processQueryResult() is not called.\n\t */\n",
    "104109": "\t/**\n\t * This procedure simply starts a new thread and calls queryWait\n\t */\n",
    "104115": "\t/**\n\t * Populate any parameters in a newly created entity\n\t * @param type the current EditType\n\t * @param entity the corresponding entity\n\t */\n",
    "104117": "\t/**\n\t * Associate an owner window with this resource (can be null)\n\t * @param window\n\t */\n",
    "104119": "\t/**\n\t * Get the associated owner window (can be null)\n\t * @return\n\t */\n",
    "104121": "\t/**\n\t * Whether the graph should scroll vertically\n\t * Defaults to false\n\t * \n\t * @param useVerticalScrollbar\n\t */\n",
    "104128": "\t/**\n\t * Set a property to the given value\n\t * @param propertyName\n\t * @param value\n\t */\n",
    "104130": "\t/**\n\t * Add all the properties in the given map\n\t * @param newProperties\n\t */\n",
    "104132": "\t/**\n\t * Check to see if this property is set\n\t * @param propertyName\n\t * @return true if this property exists, false otherwise\n\t */\n",
    "104133": "\t/**\n\t * Set the schema to validate against\n\t * @param schema the schema, or null for no validation\n\t */\n",
    "104141": "\t/**\n\t * Set the type associated with this result\n\t * @param associatedResult\n\t */\n",
    "104144": "\t/**\n\t * Get the type associated with this result\n\t * @return\n\t */\n",
    "104146": "\t/**\n\t * Sort a list of ITridas objects\n\t * \n\t * @param list\n\t */\n",
    "104160": "\t/**\n\t * Get the numeric code associated with this error\n\t * \n\t * @return The code associated with this error\n\t */\n",
    "104162": "\t/**\n\t * Gets the entity we're submitting to the server\n\t * for create or update.\n\t * <p>\n\t * Used by SeriesResource to handle version changes. \n\t * \n\t * @return the create or update entity, or null if it isn't present\n\t */\n",
    "104164": "\t/**\n\t * Checks to see if the entity is in the given list\n\t * \n\t * @param entity\n\t * @param list\n\t * @return The entity in the list (may be another instance) or null\n\t */\n",
    "104167": "\t/**\n\t * Retrieve the server's nonce\n\t * @return\n\t */\n",
    "104168": "\t/**\n\t * Retrieve the server's nonce sequence\n\t * @return\n\t */\n",
    "104169": "\t/**\n\t * Compute an md5 hash of this string\n\t * \n\t * @param in\n\t * @return an md5 hash, in string format\n\t */\n",
    "104175": "\t/**\n\t * Find a sample in our results that matches this identifier\n\t * \n\t * @param identifier\n\t * @return a sample, or null\n\t */\n",
    "104189": "\t/**\n\t * DANGER: do not use this during the processing of a query\n\t * \n\t * @param queryType the queryType to set\n\t */\n",
    "104192": "\t/**\n\t * Populate the combo box with a list\n\t * @param goRemote ensure we have remote stuff in the list\n\t */\n",
    "104193": "\t/**\n\t * Concatenate the contents of a WSIMessage\n\t * \n\t * @param msg\n\t * @return\n\t */\n",
    "104194": "\t/**\n\t * Set to true to return all objects of type 'returnObject'\n\t * Useful to search for all sites, for instance\n\t * @param all\n\t */\n",
    "104205": "\t/**\n\t * Marshall the object to disk...\n\t * \n\t * @param obj\n\t */\n",
    "104207": "\t/**\n\t * Populate this cookie store from an Apache cookie store\n\t * @param cs\n\t */\n",
    "104209": "\t/**\n\t * Suggest a selection for the given mode\n\t * \n\t * @param mode the mode\n\t * @param list a list of acceptable options for the mode\n\t * @return null to choose 'new', a member of the list, or really any ITridas derived thing\n\t */\n",
    "104221": "\t/**\n\t * The important part of this: query the server. This is a blocking call.\n\t * \n\t * @return A DOM document\n\t * @throws IOException\n\t */\n",
    "104223": "\t/**\n\t * Quick and dirty debug: gets a stack trace\n\t * @return\n\t */\n",
    "104224": "\t/**\n\t * Gets the schema object that we use for validation\n\t * \n\t * @return the schema object, or null for no validation\n\t */\n",
    "104225": "\t/**\n\t * Get the JAXB context for this accessor\n\t * \n\t * @return the jaxb context\n\t * @throws JAXBException\n\t */\n",
    "104226": "\t/**\n\t * Disable buttons below, enable buttons above\n\t * @param type\n\t */\n",
    "104228": "\t/**\n\t * Get a namespace prefix mapper for this instance\n\t * @return\n\t */\n",
    "104229": "\t/**\n\t * Set the object to use as an output request\n\t * \n\t * @param reqObj\n\t */\n",
    "104232": "\t/**\n\t * Creates a button to the button panel\n\t * @param type\n\t * @return\n\t */\n",
    "104235": "\t/**\n\t * Meant to be overridden:\n\t * \n\t * @param parentPreferredDimensions JPanel's idea of what our size should be\n\t * @param scrollExtentDimensions our parent JScrollPane viewport's size\n\t * @return our preferred dimensions\n\t */\n",
    "104238": "\t/** Return the folder the browser is currently viewing.\n\t @return the folder currently being browsed */\n",
    "104248": "\t\t/** \n\t\t * Get an entity from the sample\n\t\t * \n\t\t * @param s\n\t\t * @return\n\t\t */\n",
    "104253": "\t\t/**\n\t\t * Called when the status of the horizontal scrollbar chaged\n\t\t */\n",
    "104255": "\t\t/**\n\t\t * Associate a button with this type\n\t\t * @param button\n\t\t */\n",
    "104256": "\t\t/**\n\t\t * Get the associated button\n\t\t * @return\n\t\t */\n",
    "104258": "\t\t/**\n\t\t * Called when the status of the vertical axis changed\n\t\t */\n",
    "104259": "\t\t/**\n\t\t * Enable or disable the associated button\n\t\t * Has no effect on series\n\t\t * @param enabled\n\t\t */\n",
    "104262": "\t\t/**\n\t\t * Called when our underlying property changes\n\t\t */\n",
    "104265": "\t/**\n\t * Add a grapher listener to this graph\n\t * @param listener\n\t */\n",
    "104268": "\t/**\n\t * Remove a grapher listener from this graph\n\t * @param listener\n\t */\n",
    "104274": "    /**\n        Return the currently selected folder.\n\n        @return the selected folder\n    */\n",
    "104275": "    /**\n        Get the top-level folder of this popup.\n\n        @return the top-level folder of this popup\n    */\n",
    "104282": "    /**\n        Add a new listener.\n\n        @param listener the listener to add\n    */\n",
    "104284": "    /**\n        Remove a listener.\n\n        @param listener the listener to remove\n    */\n",
    "104286": "\t\t/**\n\t\t * Gets the previous EditType in the order\n\t\t * @return\n\t\t */\n",
    "104290": "\t\t/**\n\t\t * Gets the next EditType in the order\n\t\t * @return\n\t\t */\n",
    "104305": "\t/**\n\t * Called when someone changes something on our property list\n\t */\n",
    "104319": "    /**\n        Set a new sort column.  This is the text string to\n        match of the headers.  The null value is not allowed.\n\n        @param sortColumn the name of the new column which\n        is used for sorting\n    */\n",
    "104381": "    /** Add a \"New Folder\" menuitem. */\n",
    "104411": "    /** Add a \"Page Setup...\" menuitem. */\n",
    "104430": "\t/**\n\t * This function actually does the SQL Insert work...\n\t * Trust that our newVMeasurementID contains no ' chars?\n\t */\n",
    "104433": "\t/**\n\t * Closes all prepared statements.\n\t * @throws SQLException\n\t */\n",
    "104437": "\t/**\n\t Return the one selected row.  If more than one row is selected,\n\t usually this is the last row the user clicked on, and has a white\n\t outline or something like that around it - but you shouldn't\n\t expect just one row when there's actually more than one.  If\n\t nothing is selected, an exception is thrown.\n\n\t @return the selected row\n\t @exception NoSuchElementException if nothing is selected\n\t */\n",
    "104438": "\t/**\n\t * Starts the recursive process that gets the VMeasurementResult UUID\n\t * \n\t * Why a routine for 'safe' cleanup? Well, cleanup works under the native pl/java driver,\n\t * but doesn't work under the postgresql jdbc driver. Thus making testing a nightmare!\n\t * \n\t * @param VMeasurementID\n\t * @param safe true if we should attempt to rollback on failure\n\t * @throws SQLException\n\t */\n",
    "104454": "\t/**\n\t Return an Iterator that emits all of the selected Rows.\n\t @return an Iterator that goes throw all of the selected Rows\n\t */\n",
    "104482": "\t/**\n\t * Compute and populate our output variable. Results available via getOutput()\n\t * \n\t * In our base class, we do some sanity checking.\n\t * We cannot index twice, as some things rely on being set up properly first. This could be fixed,\n\t * but seems unnecessary.\n\t */\n",
    "104509": "    /**\n     * Gets the value of the addressLine1 property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104513": "    /**\n     * Sets the value of the addressLine1 property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104519": "    /**\n     * Gets the value of the addressLine2 property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104520": "    /**\n     * Sets the value of the addressLine2 property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104521": "    /**\n     * Gets the value of the type property.\n     * \n     * @return\n     *     possible object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "104523": "    /**\n     * Gets the value of the cityOrTown property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104524": "    /**\n     * Sets the value of the type property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "104525": "    /**\n     * Sets the value of the cityOrTown property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104529": "    /**\n     * Gets the value of the stateProvinceRegion property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104530": "    /**\n     * Sets the value of the stateProvinceRegion property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104533": "    /**\n     * Gets the value of the postalCode property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104534": "    /**\n     * Sets the value of the postalCode property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104538": "    /**\n     * Gets the value of the country property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104540": "    /**\n     * Sets the value of the country property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104542": "    /**\n     * Gets the value of the linkSeries property.\n     * \n     * @return\n     *     possible object is\n     *     {@link SeriesLinksWithPreferred }\n     *     \n     */\n",
    "104545": "    /**\n     * Sets the value of the linkSeries property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link SeriesLinksWithPreferred }\n     *     \n     */\n",
    "104559": "    /**\n     * Gets the value of the value property.\n     * \n     * @return\n     *     possible object is\n     *     {@link XMLGregorianCalendar }\n     *     \n     */\n",
    "104560": "    /**\n     * Sets the value of the value property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link XMLGregorianCalendar }\n     *     \n     */\n",
    "104561": "    /**\n     * Gets the value of the taxon property.\n     * \n     * @return\n     *     possible object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "104563": "    /**\n     * Gets the value of the certainty property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Certainty }\n     *     \n     */\n",
    "104564": "    /**\n     * Sets the value of the certainty property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Certainty }\n     *     \n     */\n",
    "104566": "    /**\n     * Sets the value of the taxon property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "104575": "    /**\n     * Gets the value of the shape property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasShape }\n     *     \n     */\n",
    "104578": "    /**\n     * Sets the value of the shape property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasShape }\n     *     \n     */\n",
    "104580": "    /**\n     * Gets the value of the normalTridas property.\n     * \n     * @return\n     *     possible object is\n     *     {@link NormalTridasRemark }\n     *     \n     */\n",
    "104583": "    /**\n     * Sets the value of the normalTridas property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link NormalTridasRemark }\n     *     \n     */\n",
    "104585": "    /**\n     * Gets the value of the inheritedCount property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104586": "    /**\n     * Gets the value of the dimensions property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasDimensions }\n     *     \n     */\n",
    "104587": "    /**\n     * Sets the value of the inheritedCount property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104589": "    /**\n     * Sets the value of the dimensions property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasDimensions }\n     *     \n     */\n",
    "104597": "    /**\n     * Gets the value of the authenticity property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104600": "    /**\n     * Sets the value of the authenticity property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104604": "    /**\n     * Gets the value of the type property.\n     * \n     * @return\n     *     possible object is\n     *     {@link NormalTridasDatingType }\n     *     \n     */\n",
    "104606": "    /**\n     * Sets the value of the type property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link NormalTridasDatingType }\n     *     \n     */\n",
    "104611": "    /**\n     * Gets the value of the location property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasLocation }\n     *     \n     */\n",
    "104617": "    /**\n     * Sets the value of the location property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasLocation }\n     *     \n     */\n",
    "104624": "    /**\n     * Gets the value of the processing property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104627": "    /**\n     * Sets the value of the processing property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104634": "    /**\n     * Gets the value of the marks property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104637": "    /**\n     * Sets the value of the marks property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104642": "    /**\n     * Gets the value of the altitude property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Double }\n     *     \n     */\n",
    "104645": "    /**\n     * Sets the value of the altitude property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Double }\n     *     \n     */\n",
    "104654": "    /**\n     * Gets the value of the slope property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasSlope }\n     *     \n     */\n",
    "104658": "    /**\n     * Sets the value of the slope property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasSlope }\n     *     \n     */\n",
    "104664": "    /**\n     * Gets the value of the normalTridas property.\n     * \n     * @return\n     *     possible object is\n     *     {@link NormalTridasVariable }\n     *     \n     */\n",
    "104665": "    /**\n     * Sets the value of the normalTridas property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link NormalTridasVariable }\n     *     \n     */\n",
    "104666": "    /**\n     * Gets the value of the soil property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasSoil }\n     *     \n     */\n",
    "104673": "    /**\n     * Sets the value of the soil property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasSoil }\n     *     \n     */\n",
    "104680": "    /**\n     * Gets the value of the value property.\n     * \n     * @return\n     *     possible object is\n     *     {@link BigInteger }\n     *     \n     */\n",
    "104681": "    /**\n     * Sets the value of the value property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link BigInteger }\n     *     \n     */\n",
    "104683": "    /**\n     * Gets the value of the bedrock property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasBedrock }\n     *     \n     */\n",
    "104688": "    /**\n     * Gets the value of the suffix property.\n     * \n     * @return\n     *     possible object is\n     *     {@link DatingSuffix }\n     *     \n     */\n",
    "104689": "    /**\n     * Sets the value of the bedrock property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasBedrock }\n     *     \n     */\n",
    "104690": "    /**\n     * Sets the value of the suffix property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link DatingSuffix }\n     *     \n     */\n",
    "104705": "    /**\n     * Gets the value of the dating property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasDating }\n     *     \n     */\n",
    "104707": "    /**\n     * Sets the value of the dating property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasDating }\n     *     \n     */\n",
    "104710": "    /**\n     * Gets the value of the firstYear property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Year }\n     *     \n     */\n",
    "104712": "    /**\n     * Sets the value of the firstYear property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Year }\n     *     \n     */\n",
    "104715": "    /**\n     * Gets the value of the lastYear property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Year }\n     *     \n     */\n",
    "104716": "    /**\n     * Sets the value of the lastYear property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Year }\n     *     \n     */\n",
    "104718": "    /**\n     * Sets the value of the files property.\n     * \n     * @param files\n     *     allowed object is\n     *     {@link TridasFile }\n     *     \n     */\n",
    "104720": "    /**\n     * Gets the value of the datingReference property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasDatingReference }\n     *     \n     */\n",
    "104721": "    /**\n     * Sets the value of the datingReference property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasDatingReference }\n     *     \n     */\n",
    "104722": "    /**\n     * Sets the value of the genericFields property.\n     * \n     * @param genericFields\n     *     allowed object is\n     *     {@link TridasGenericField }\n     *     \n     */\n",
    "104730": "    /**\n     * Gets the value of the pithYear property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Year }\n     *     \n     */\n",
    "104731": "    /**\n     * Sets the value of the pithYear property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Year }\n     *     \n     */\n",
    "104734": "    /**\n     * Gets the value of the deathYear property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Year }\n     *     \n     */\n",
    "104736": "    /**\n     * Sets the value of the deathYear property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Year }\n     *     \n     */\n",
    "104739": "    /**\n     * Gets the value of the provenance property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104741": "    /**\n     * Sets the value of the provenance property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104744": "    /**\n     * Sets the value of the statFoundations property.\n     * \n     * @param statFoundations\n     *     allowed object is\n     *     {@link TridasStatFoundation }\n     *     \n     */\n",
    "104764": "    /**\n     * Gets the value of the statValue property.\n     * \n     * @return\n     *     possible object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "104766": "    /**\n     * Sets the value of the statValue property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "104772": "    /**\n     * Gets the value of the significanceLevel property.\n     * \n     * @return\n     *     possible object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "104774": "    /**\n     * Sets the value of the significanceLevel property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "104777": "    /**\n     * Gets the value of the usedSoftware property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104779": "    /**\n     * Sets the value of the usedSoftware property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104797": "    /**\n     * Gets the value of the category property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasCategory }\n     *     \n     */\n",
    "104798": "    /**\n     * Gets the value of the measuringDate property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Date }\n     *     \n     */\n",
    "104800": "    /**\n     * Sets the value of the measuringDate property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Date }\n     *     \n     */\n",
    "104801": "    /**\n     * Sets the value of the category property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasCategory }\n     *     \n     */\n",
    "104805": "    /**\n     * Gets the value of the derivationDate property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Date }\n     *     \n     */\n",
    "104806": "    /**\n     * Gets the value of the investigator property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104807": "    /**\n     * Sets the value of the derivationDate property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Date }\n     *     \n     */\n",
    "104808": "    /**\n     * Sets the value of the investigator property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104813": "    /**\n     * Gets the value of the woodCompleteness property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasWoodCompleteness }\n     *     \n     */\n",
    "104814": "    /**\n     * Gets the value of the period property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104816": "    /**\n     * Sets the value of the woodCompleteness property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasWoodCompleteness }\n     *     \n     */\n",
    "104817": "    /**\n     * Sets the value of the period property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104821": "    /**\n     * Gets the value of the analyst property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104822": "    /**\n     * Gets the value of the requestDate property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Date }\n     *     \n     */\n",
    "104823": "    /**\n     * Sets the value of the analyst property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104824": "    /**\n     * Sets the value of the requestDate property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Date }\n     *     \n     */\n",
    "104828": "    /**\n     * Gets the value of the dendrochronologist property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104829": "    /**\n     * Gets the value of the commissioner property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104830": "    /**\n     * Sets the value of the dendrochronologist property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104831": "    /**\n     * Sets the value of the commissioner property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104836": "    /**\n     * Gets the value of the measuringMethod property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasMeasuringMethod }\n     *     \n     */\n",
    "104838": "    /**\n     * Sets the value of the measuringMethod property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasMeasuringMethod }\n     *     \n     */\n",
    "104849": "    /**\n     * Gets the value of the linkSeries property.\n     * \n     * @return\n     *     possible object is\n     *     {@link SeriesLinks }\n     *     \n     */\n",
    "104851": "    /**\n     * Sets the value of the linkSeries property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link SeriesLinks }\n     *     \n     */\n",
    "104857": "    /**\n     * Gets the value of the objective property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104860": "    /**\n     * Sets the value of the objective property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104863": "    /**\n     * Sets the value of the types property.\n     * \n     * @param types\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "104864": "    /**\n     * Gets the value of the standardizingMethod property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104867": "    /**\n     * Sets the value of the standardizingMethod property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104868": "    /**\n     * Sets the value of the laboratories property.\n     * \n     * @param laboratories\n     *     allowed object is\n     *     {@link TridasLaboratory }\n     *     \n     */\n",
    "104870": "    /**\n     * Sets the value of the references property.\n     * \n     * @param references\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104873": "    /**\n     * Gets the value of the author property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104874": "    /**\n     * Sets the value of the researches property.\n     * \n     * @param researches\n     *     allowed object is\n     *     {@link TridasResearch }\n     *     \n     */\n",
    "104875": "    /**\n     * Sets the value of the author property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104880": "    /**\n     * Gets the value of the version property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104882": "    /**\n     * Sets the value of the version property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104887": "    /**\n     * Gets the value of the interpretationUnsolved property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasInterpretationUnsolved }\n     *     \n     */\n",
    "104889": "    /**\n     * Sets the value of the interpretationUnsolved property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasInterpretationUnsolved }\n     *     \n     */\n",
    "104895": "    /**\n     * Gets the value of the interpretation property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasInterpretation }\n     *     \n     */\n",
    "104898": "    /**\n     * Sets the value of the interpretation property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasInterpretation }\n     *     \n     */\n",
    "104901": "    /**\n     * Create an instance of {@link TridasIdentifier }\n     * \n     */\n",
    "104904": "    /**\n     * Create an instance of {@link TridasFile }\n     * \n     */\n",
    "104907": "    /**\n     * Create an instance of {@link SeriesLink }\n     * \n     */\n",
    "104911": "    /**\n     * Gets the value of the missingHeartwoodRingsToPith property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104912": "    /**\n     * Create an instance of {@link TridasCoverage }\n     * \n     */\n",
    "104913": "    /**\n     * Sets the value of the missingHeartwoodRingsToPith property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104916": "    /**\n     * Gets the value of the missingHeartwoodRingsToPithFoundation property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104917": "    /**\n     * Sets the value of the missingHeartwoodRingsToPithFoundation property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104920": "    /**\n     * Create an instance of {@link TridasSlope }\n     * \n     */\n",
    "104921": "    /**\n     * Gets the value of the presence property.\n     * \n     * @return\n     *     possible object is\n     *     {@link ComplexPresenceAbsence }\n     *     \n     */\n",
    "104922": "    /**\n     * Sets the value of the presence property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link ComplexPresenceAbsence }\n     *     \n     */\n",
    "104926": "    /**\n     * Create an instance of {@link TridasPith }\n     * \n     */\n",
    "104932": "    /**\n     * Create an instance of {@link ControlledVoc }\n     * \n     */\n",
    "104939": "    /**\n     * Create an instance of {@link TridasVocabulary }\n     * \n     */\n",
    "104940": "    /**\n     * Gets the value of the content property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104941": "    /**\n     * Sets the value of the content property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104944": "    /**\n     * Gets the value of the presence property.\n     * \n     * @return\n     *     possible object is\n     *     {@link PresenceAbsence }\n     *     \n     */\n",
    "104945": "    /**\n     * Sets the value of the presence property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link PresenceAbsence }\n     *     \n     */\n",
    "104948": "    /**\n     * Create an instance of {@link TridasElement }\n     * \n     */\n",
    "104957": "    /**\n     * Create an instance of {@link TridasBedrock }\n     * \n     */\n",
    "104967": "    /**\n     * Create an instance of {@link TridasLaboratory }\n     * \n     */\n",
    "104969": "    /**\n     * Sets the value of the values property.\n     * \n     * @param values\n     *     allowed object is\n     *     {@link TridasValues }\n     *     \n     */\n",
    "104975": "    /**\n     * Create an instance of {@link TridasProject }\n     * \n     */\n",
    "104979": "    /**\n     * Create an instance of {@link TridasSoil }\n     * \n     */\n",
    "104984": "    /**\n     * Create an instance of {@link TridasLastRingUnderBark }\n     * \n     */\n",
    "104987": "    /**\n     * Create an instance of {@link TridasHeartwood }\n     * \n     */\n",
    "104992": "    /**\n     * Create an instance of {@link TridasValues }\n     * \n     */\n",
    "104995": "    /**\n     * Create an instance of {@link TridasDerivedSeries }\n     * \n     */\n",
    "104999": "    /**\n     * Create an instance of {@link TridasMeasurementSeriesPlaceholder }\n     * \n     */\n",
    "105002": "    /**\n     * Create an instance of {@link TridasAddress }\n     * \n     */\n",
    "105011": "    /**\n     * Create an instance of {@link TridasValue }\n     * \n     */\n",
    "105019": "    /**\n     * Create an instance of {@link TridasGenericField }\n     * \n     */\n",
    "105026": "    /**\n     * Create an instance of {@link TridasLocation }\n     * \n     */\n",
    "105037": "    /**\n     * Create an instance of {@link Year }\n     * \n     */\n",
    "105042": "    /**\n     * Gets the value of the polygon property.\n     * \n     * @return\n     *     possible object is\n     *     {@link PolygonType }\n     *     \n     */\n",
    "105043": "    /**\n     * Sets the value of the polygon property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link PolygonType }\n     *     \n     */\n",
    "105046": "    /**\n     * Create an instance of {@link TridasMeasuringMethod }\n     * \n     */\n",
    "105055": "    /**\n     * Create an instance of {@link Date }\n     * \n     */\n",
    "105062": "    /**\n     * Create an instance of {@link TridasObject }\n     * \n     */\n",
    "105066": "    /**\n     * Create an instance of {@link TridasWoodCompleteness }\n     * \n     */\n",
    "105072": "    /**\n     * Create an instance of {@link SeriesLinks }\n     * \n     */\n",
    "105076": "    /**\n     * Create an instance of {@link TridasSample }\n     * \n     */\n",
    "105080": "    /**\n     * Create an instance of {@link TridasLocationGeometry }\n     * \n     */\n",
    "105085": "    /**\n     * Create an instance of {@link TridasVariable }\n     * \n     */\n",
    "105089": "    /**\n     * Gets the value of the creator property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105090": "    /**\n     * Create an instance of {@link TridasStatFoundation }\n     * \n     */\n",
    "105091": "    /**\n     * Sets the value of the creator property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105096": "    /**\n     * Create an instance of {@link TridasUnitless }\n     * \n     */\n",
    "105097": "    /**\n     * Gets the value of the owner property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105098": "    /**\n     * Sets the value of the owner property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105100": "    /**\n     * Create an instance of {@link TridasRemark }\n     * \n     */\n",
    "105103": "    /**\n     * Gets the value of the coverage property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasCoverage }\n     *     \n     */\n",
    "105104": "    /**\n     * Sets the value of the coverage property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasCoverage }\n     *     \n     */\n",
    "105105": "    /**\n     * Create an instance of {@link TridasBark }\n     * \n     */\n",
    "105110": "    /**\n     * Create an instance of {@link TridasInterpretationUnsolved }\n     * \n     */\n",
    "105114": "    /**\n     * Create an instance of {@link TridasDating }\n     * \n     */\n",
    "105118": "    /**\n     * Create an instance of {@link TridasCategory }\n     * \n     */\n",
    "105123": "    /**\n     * Create an instance of {@link TridasSapwood }\n     * \n     */\n",
    "105127": "    /**\n     * Create an instance of {@link TridasDatingReference }\n     * \n     */\n",
    "105132": "    /**\n     * Create an instance of {@link TridasMeasurementSeries }\n     * \n     */\n",
    "105136": "    /**\n     * Create an instance of {@link TridasRadiusPlaceholder }\n     * \n     */\n",
    "105140": "    /**\n     * Create an instance of {@link TridasUnit }\n     * \n     */\n",
    "105145": "    /**\n     * Create an instance of {@link TridasDimensions }\n     * \n     */\n",
    "105149": "    /**\n     * Create an instance of {@link TridasTridas }\n     * \n     */\n",
    "105153": "    /**\n     * Create an instance of {@link TridasInterpretation }\n     * \n     */\n",
    "105156": "    /**\n     * Create an instance of {@link TridasRadius }\n     * \n     */\n",
    "105160": "    /**\n     * Create an instance of {@link DateTime }\n     * \n     */\n",
    "105163": "    /**\n     * Gets the value of the nrOfSapwoodRings property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105164": "    /**\n     * Sets the value of the nrOfSapwoodRings property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105168": "    /**\n     * Create an instance of {@link TridasShape }\n     * \n     */\n",
    "105169": "    /**\n     * Gets the value of the lastRingUnderBark property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasLastRingUnderBark }\n     *     \n     */\n",
    "105170": "    /**\n     * Sets the value of the lastRingUnderBark property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasLastRingUnderBark }\n     *     \n     */\n",
    "105173": "    /**\n     * Gets the value of the missingSapwoodRingsToBark property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105174": "    /**\n     * Sets the value of the missingSapwoodRingsToBark property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105175": "    /**\n     * Create an instance of {@link TridasResearch }\n     * \n     */\n",
    "105178": "    /**\n     * Gets the value of the missingSapwoodRingsToBarkFoundation property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105179": "    /**\n     * Sets the value of the missingSapwoodRingsToBarkFoundation property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105181": "    /**\n     * Create an instance of {@link SeriesLinksWithPreferred }\n     * \n     */\n",
    "105184": "    /**\n     * Gets the value of the angle property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105186": "    /**\n     * Sets the value of the angle property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105189": "    /**\n     * Gets the value of the azimuth property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105190": "    /**\n     * Sets the value of the azimuth property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105212": "    /**\n     * Gets the value of the unit property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasUnit }\n     *     \n     */\n",
    "105213": "    /**\n     * Sets the value of the unit property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasUnit }\n     *     \n     */\n",
    "105217": "    /**\n     * Gets the value of the height property.\n     * \n     * @return\n     *     possible object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "105221": "    /**\n     * Sets the value of the height property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "105227": "    /**\n     * Gets the value of the width property.\n     * \n     * @return\n     *     possible object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "105231": "    /**\n     * Sets the value of the width property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "105235": "    /**\n     * Gets the value of the locationGeometry property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasLocationGeometry }\n     *     \n     */\n",
    "105236": "    /**\n     * Gets the value of the depth property.\n     * \n     * @return\n     *     possible object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "105237": "    /**\n     * Sets the value of the locationGeometry property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasLocationGeometry }\n     *     \n     */\n",
    "105238": "    /**\n     * Sets the value of the depth property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "105242": "    /**\n     * Gets the value of the locationType property.\n     * \n     * @return\n     *     possible object is\n     *     {@link NormalTridasLocationType }\n     *     \n     */\n",
    "105243": "    /**\n     * Gets the value of the diameter property.\n     * \n     * @return\n     *     possible object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "105244": "    /**\n     * Sets the value of the locationType property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link NormalTridasLocationType }\n     *     \n     */\n",
    "105245": "    /**\n     * Sets the value of the diameter property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "105248": "    /**\n     * Gets the value of the locationPrecision property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105251": "    /**\n     * Sets the value of the locationPrecision property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105254": "    /**\n     * Gets the value of the locationComment property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105256": "    /**\n     * Sets the value of the locationComment property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105261": "    /**\n     * Gets the value of the address property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasAddress }\n     *     \n     */\n",
    "105263": "    /**\n     * Sets the value of the address property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasAddress }\n     *     \n     */\n",
    "105273": "    /**\n     * Gets the value of the normalTridas property.\n     * \n     * @return\n     *     possible object is\n     *     {@link NormalTridasUnit }\n     *     \n     */\n",
    "105275": "    /**\n     * Sets the value of the normalTridas property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link NormalTridasUnit }\n     *     \n     */\n",
    "105286": "    /**\n     * Gets the value of the count property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105290": "    /**\n     * Sets the value of the count property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105311": "    /**\n     * Gets the value of the normalStd property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105313": "    /**\n     * Sets the value of the normalStd property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105318": "    /**\n     * Gets the value of the normalId property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105321": "    /**\n     * Sets the value of the normalId property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105327": "    /**\n     * Gets the value of the normal property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105330": "    /**\n     * Sets the value of the normal property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105336": "    /**\n     * Gets the value of the lang property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105339": "    /**\n     * Sets the value of the lang property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105351": "    /**\n     * Gets the value of the preferredSeries property.\n     * \n     * @return\n     *     possible object is\n     *     {@link SeriesLink }\n     *     \n     */\n",
    "105353": "    /**\n     * Sets the value of the preferredSeries property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link SeriesLink }\n     *     \n     */\n",
    "105382": "    /**\n     * Gets the value of the azimuth property.\n     * \n     * @return\n     *     possible object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "105383": "    /**\n     * Sets the value of the xLink property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link SeriesLink.XLink }\n     *     \n     */\n",
    "105384": "    /**\n     * Sets the value of the azimuth property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "105388": "    /**\n     * Sets the value of the idRef property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link SeriesLink.IdRef }\n     *     \n     */\n",
    "105419": "        /**\n         * Gets the value of the ref property.\n         * \n         * @return\n         *     possible object is\n         *     {@link Object }\n         *     \n         */\n",
    "105423": "        /**\n         * Sets the value of the ref property.\n         * \n         * @param value\n         *     allowed object is\n         *     {@link Object }\n         *     \n         */\n",
    "105429": "    /**\n     * Gets the value of the depth property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Double }\n     *     \n     */\n",
    "105431": "    /**\n     * Sets the value of the depth property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Double }\n     *     \n     */\n",
    "105459": "    /**\n     * Sets the value of the projectCategory property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.ProjectCategory }\n     *     \n     */\n",
    "105475": "    /**\n     * Sets the value of the projectType property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.ProjectType }\n     *     \n     */\n",
    "105484": "    /**\n     * Gets the value of the domain property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105485": "    /**\n     * Sets the value of the domain property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105502": "    /**\n     * Gets the value of the variable property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasVariable }\n     *     \n     */\n",
    "105503": "    /**\n     * Sets the value of the variable property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVariable }\n     *     \n     */\n",
    "105505": "    /**\n     * Sets the value of the objectType property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.ObjectType }\n     *     \n     */\n",
    "105512": "    /**\n     * Gets the value of the unitless property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasUnitless }\n     *     \n     */\n",
    "105513": "    /**\n     * Sets the value of the unitless property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasUnitless }\n     *     \n     */\n",
    "105519": "    /**\n     * Sets the value of the values property.\n     * \n     * @param values\n     *     allowed object is\n     *     {@link TridasValue }\n     *     \n     */\n",
    "105532": "    /**\n     * Sets the value of the elementType property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.ElementType }\n     *     \n     */\n",
    "105549": "    /**\n     * Gets the value of the samplingDate property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Date }\n     *     \n     */\n",
    "105550": "    /**\n     * Sets the value of the sampleType property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.SampleType }\n     *     \n     */\n",
    "105552": "    /**\n     * Sets the value of the samplingDate property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Date }\n     *     \n     */\n",
    "105555": "    /**\n     * Gets the value of the position property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105557": "    /**\n     * Sets the value of the position property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105562": "    /**\n     * Gets the value of the state property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105564": "    /**\n     * Sets the value of the state property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105565": "    /**\n     * Sets the value of the derivedSeriesType property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.DerivedSeriesType }\n     *     \n     */\n",
    "105576": "    /**\n     * Gets the value of the knots property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Boolean }\n     *     \n     */\n",
    "105583": "    /**\n     * Sets the value of the knots property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Boolean }\n     *     \n     */\n",
    "105597": "    /**\n     * Gets the value of the normalTridas property.\n     * \n     * @return\n     *     possible object is\n     *     {@link NormalTridasShape }\n     *     \n     */\n",
    "105599": "    /**\n     * Sets the value of the normalTridas property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link NormalTridasShape }\n     *     \n     */\n",
    "105602": "    /**\n     * Sets the value of the elementTaxon property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.ElementTaxon }\n     *     \n     */\n",
    "105612": "    /**\n     * Gets the value of the radiusPlaceholder property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasRadiusPlaceholder }\n     *     \n     */\n",
    "105620": "    /**\n     * Sets the value of the radiusPlaceholder property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasRadiusPlaceholder }\n     *     \n     */\n",
    "105634": "    /**\n     * Sets the value of the elementShape property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.ElementShape }\n     *     \n     */\n",
    "105635": "    /**\n     * Gets the value of the normalTridas property.\n     * \n     * @return\n     *     possible object is\n     *     {@link NormalTridasCategory }\n     *     \n     */\n",
    "105636": "    /**\n     * Sets the value of the normalTridas property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link NormalTridasCategory }\n     *     \n     */\n",
    "105652": "    /**\n     * Gets the value of the coverageTemporal property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105653": "    /**\n     * Sets the value of the coverageTemporal property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105656": "    /**\n     * Gets the value of the coverageTemporalFoundation property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105657": "    /**\n     * Sets the value of the coverageTemporalFoundation property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105665": "    /**\n     * Sets the value of the measurementSeriesMeasuringMethod property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.MeasurementSeriesMeasuringMethod }\n     *     \n     */\n",
    "105672": "    /**\n     * Gets the value of the ringCount property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105673": "    /**\n     * Sets the value of the ringCount property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105677": "    /**\n     * Gets the value of the averageRingWidth property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Double }\n     *     \n     */\n",
    "105678": "    /**\n     * Sets the value of the averageRingWidth property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Double }\n     *     \n     */\n",
    "105681": "    /**\n     * Gets the value of the nrOfUnmeasuredInnerRings property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105683": "    /**\n     * Sets the value of the nrOfUnmeasuredInnerRings property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105685": "    /**\n     * Sets the value of the valuesVariable property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.ValuesVariable }\n     *     \n     */\n",
    "105687": "    /**\n     * Gets the value of the nrOfUnmeasuredOuterRings property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105689": "    /**\n     * Sets the value of the nrOfUnmeasuredOuterRings property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105692": "    /**\n     * Gets the value of the pith property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasPith }\n     *     \n     */\n",
    "105693": "    /**\n     * Sets the value of the pith property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasPith }\n     *     \n     */\n",
    "105697": "    /**\n     * Gets the value of the heartwood property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasHeartwood }\n     *     \n     */\n",
    "105698": "    /**\n     * Gets the value of the measurementSeriesPlaceholder property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasMeasurementSeriesPlaceholder }\n     *     \n     */\n",
    "105699": "    /**\n     * Sets the value of the measurementSeriesPlaceholder property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasMeasurementSeriesPlaceholder }\n     *     \n     */\n",
    "105700": "    /**\n     * Sets the value of the heartwood property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasHeartwood }\n     *     \n     */\n",
    "105705": "    /**\n     * Gets the value of the sapwood property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasSapwood }\n     *     \n     */\n",
    "105707": "    /**\n     * Sets the value of the valuesRemark property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.ValuesRemark }\n     *     \n     */\n",
    "105709": "    /**\n     * Sets the value of the sapwood property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasSapwood }\n     *     \n     */\n",
    "105714": "    /**\n     * Gets the value of the bark property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasBark }\n     *     \n     */\n",
    "105716": "    /**\n     * Sets the value of the bark property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasBark }\n     *     \n     */\n",
    "105733": "    /**\n     * Sets the value of the locationType property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.LocationType }\n     *     \n     */\n",
    "105743": "    /**\n     * Sets the value of the series property.\n     * \n     * @param series\n     *     allowed object is\n     *     {@link SeriesLink }\n     *     \n     */\n",
    "105773": "    /**\n     * Gets the value of the normalTridas property.\n     * \n     * @return\n     *     possible object is\n     *     {@link NormalTridasMeasuringMethod }\n     *     \n     */\n",
    "105774": "    /**\n     * Sets the value of the normalTridas property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link NormalTridasMeasuringMethod }\n     *     \n     */\n",
    "105775": "    /**\n     * Sets the value of the name property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasLaboratory.Name }\n     *     \n     */\n",
    "105780": "    /**\n     * Sets the value of the globalUnit property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.GlobalUnit }\n     *     \n     */\n",
    "105795": "    /**\n     * Gets the value of the vocabulary property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasVocabulary }\n     *     \n     */\n",
    "105796": "    /**\n     * Sets the value of the vocabulary property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary }\n     *     \n     */\n",
    "105817": "    /**\n     * Gets the value of the linkSeries property.\n     * \n     * @return\n     *     possible object is\n     *     {@link SeriesLink }\n     *     \n     */\n",
    "105818": "    /**\n     * Sets the value of the linkSeries property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link SeriesLink }\n     *     \n     */\n",
    "105831": "        /**\n         * Gets the value of the acronym property.\n         * \n         * @return\n         *     possible object is\n         *     {@link String }\n         *     \n         */\n",
    "105835": "        /**\n         * Sets the value of the acronym property.\n         * \n         * @param value\n         *     allowed object is\n         *     {@link String }\n         *     \n         */\n",
    "105886": "  /**\n   * Returns string representation.\n   */\n",
    "105917": "/**\n * Materialization strategy that just renders on demand\n * @author Aaron Hamid (aaron at users dot sf dot net)\n */\n",
    "105979": "    /**\n     * Takes a source-code with OCL-contrains in\n     * annotations and inserts methods and calls to check\n     * these contrains.<br/>\n     * Used by {@link #generateForSource(File, File)}\n     * @param source the source-code to parse\n     * @return the modified source-code or null on error\n     */\n",
    "105981": "    /**\n     * Takes a source-code with OCL-contrains in\n     * annotations and inserts methods and calls to check\n     * these contrains.<br/>\n     * Used by {@link #generateForSource(File, File)}\n     * @param source the source-code to parse\n     * @throws BadLocationException on Errors inserting the generated source-code\n     */\n",
    "105983": "    /**\n     * Takes a source-code with OCL-contrains in\n     * annotations and inserts methods and calls to check\n     * these contrains.<br/>\n     * Used by {@link #generateForSource(File, File)}\n     * @param source the source-code to parse\n     * @param cunit (may be null!) Optional existing compilation-unit representing source\n     * @return the modified source-code\n     */\n",
    "106061": "    /**\n     * Tests if a method returns void.\n     * @param assertedMethod the method to test\n     * @return true if it returns void\n     */\n",
    "106063": "        /**\n         * Sets the value of the shapes property.\n         * \n         * @param shapes\n         *     allowed object is\n         *     {@link TridasShape }\n         *     \n         */\n",
    "106064": "    /**\n     * We meight have a comment as the last statement and a return before\n     * that so this method looks for a return from the last statement to\n     * the first ignoring comments and returns true if the first real statement\n     * found that way is a return-statement.\n     * @param statements the statements of a block\n     * @return true if the last executable statement is a return-statement\n     */\n",
    "106090": "    /**\n     * For a paramatrized type with 1 parameter, get the parameter-type.\n     * @param paramType the parametrized type\n     * @return the fully qualified Class-Name\n     */\n",
    "106091": "    /**\n     * For a paramatrized type with 2 parameter, get the parameter-type.\n     * @param paramType the parametrized type\n     * @return the fully qualified Class-Name\n     */\n",
    "106093": "    /**\n     * Using the imports, find the fully qualified class-name.\n     * @param unqualifiedName name of the class\n     * @return fully qualified name of the class\n     */\n",
    "106142": "    /**\n     * Takes a lastSource-code with OCL-contrains in\n     * annotations and inserts methods and calls to check\n     * these contrains.\n     * @param type the class-decl to work on\n     * @param mon (may be null) Listener to progress-information\n     */\n",
    "106152": "    /**\n     * Is save to call even if it's unneeded because\n     * ${@link #deferedCodeInsertion} is falsw (default) and\n     * thus generated code is inserted the moment it is ready to.<br/>\n     * This method does not work in parallel because code-insertions are fast.\n     * @see ${@link #deferedCodeInsertion}\n     */\n",
    "106153": "    /**\n     * Takes a lastSource-code with OCL-contrains in\n     * annotations and inserts methods and calls to check\n     * these contrains.<br/>\n     * Used by {@link #generateForSource(File, File)}\n     * @param lastSource the lastSource-code to parse\n     * @param cunit (may be null!) Optional existing compilation-lastUnit representing lastSource\n     * @return the modified lastSource-code\n     */\n",
    "106154": "    /**\n     * Takes a lastSource-code with OCL-contrains in\n     * annotations and inserts methods and calls to check\n     * these contrains.<br/>\n     * Used by {@link #generateForSource(File, File)}\n     * @param lastSource the lastSource-code to parse\n     * @return the modified lastSource-code\n     */\n",
    "106182": "    /**\n     * Remove the parent-statement of node if the MethodInvocation\n     * is inside an 'assert' or 'if'.\n     * @param node the method-invocation to parse\n     */\n",
    "106187": "    /**\n     * Is save to call even if it's unneeded because\n     * ${@link #deferedCodeInsertion} is falsw (default) and\n     * thus generated code is inserted the moment it is ready to.<br/>\n     * This method does not work in parallel because code-insertions are fast.\n     * @see ${@link #deferedCodeInsertion}\n     */\n",
    "106188": "    /**\n     * Takes a lastSource-code with OCL-contrains in\n     * annotations and inserts methods and calls to check\n     * these contrains.<br/>\n     * Used by {@link #generateForSource(File, File)}\n     * @param lastSource the lastSource-code to parse\n     * @param cunit (may be null!) Optional existing compilation-lastUnit representing lastSource\n     * @return the modified lastSource-code\n     */\n",
    "106189": "    /**\n     * Takes a lastSource-code with OCL-contrains in\n     * annotations and inserts methods and calls to check\n     * these contrains.<br/>\n     * Used by {@link #generateForSource(File, File)}\n     * @param lastSource the lastSource-code to parse\n     * @return the modified lastSource-code\n     */\n",
    "106227": "    /** if a then b else c endif   <br>\n     *  Ocl? result=(a.isTrue()) ? (b) : (c);\n     *  <p>\n     *  For each if expression a new variable is generated.\n     */\n",
    "106238": "    /** a + b <br>\n     *  Ocl? result=Ocl.toOcl?(a).add(Ocl.toOcl?(b)); <br>\n     *  with Ocl? = OclReal | OclInteger | OclSet\n     *  <p>\n     *  A variable is generated for each AAdditiveExpression with tail.\n     */\n",
    "106242": "  /** This method is implemented to update the default context for the\n   *  FeatureCall's FeatureCallParameter node if the feature call is a\n   *  call to an iterating method.\n   */\n",
    "106243": "    /** not a <br>\n     *  OclBoolean result=a.not();\n     *  <p>\n     *  A variable is generated for each AUnaryUnaryExpression.\n     */\n",
    "106254": "    /** This method breaks the usual pattern of generating Java code postfix\n     *  since the collection must be declared and instanciated prior to setting\n     *  its contents (in <CODE>outAExpressionListOrRange</CODE>).\n     */\n",
    "106271": "    /**\n     * Determine if code ala \"A.featurePathName\" can be used or\n     * if we have to use A.getFeature(\"featurePathName\")\n     *\n     * @param appliedTo\n     * @param featurePathName\n     * @return\n     */\n",
    "106285": "    /** append the Java code for an AActualParameterList, excluding the\n     *  parentheses\n     *\n     *  @param apl may be null, then nothing is done\n     */\n",
    "106311": "        /**\n         * Sets the value of the units property.\n         * \n         * @param units\n         *     allowed object is\n         *     {@link TridasUnit }\n         *     \n         */\n",
    "106312": "  /** adds all expression types of an AActualParameterList to a List\n   *\n   *  @param recurse <code>apply(this)</code> is called for all these expressions\n   */\n",
    "106390": "  /** This method calls <CODE>union(OclSequence seq)</CODE> if the argument\n   *  <CODE>col</CODE> is of type <CODE>OclSequence</CODE>.\n   *  Return an undefined value, if not.\n   *\n   *  @see #union(OclSequence seq)\n   */\n",
    "106413": "  /** Please consult the documentation of <CODE>OclRoot.getFeatureAsCollection\n   *  </CODE> for a detailed explanation.\n   *\n   *  @see OclRoot#getFeatureAsCollection(String name)\n   */\n",
    "106439": "  /** This method checks the uniqueness of a given expression, evaluated for\n   *  all members of the collection. This is done by storing all evaluation\n   *  results in a HashSet. If an element is added that was already contained\n   *  in the HashSet, execution is stopped and FALSE returned.\n   *\n   *  @return OclBoolean.TRUE iff the OCL expression represented by parameter <CODE>eval</CODE>\n   *          returns different results for all members of the set\n   */\n",
    "106444": "        /**\n         * Sets the value of the locationTypes property.\n         * \n         * @param locationTypes\n         *     allowed object is\n         *     {@link NormalTridasLocationType }\n         *     \n         */\n",
    "106449": "  /** This method is the most general one of the iterating methods. All others\n   *  can be expressed through this.\n   *\n   *  @param accum the initial value of the accumulator that is updated\n   *         every iteration step by the result of eval\n   *  @see OclContainer\n   */\n",
    "106453": "  /** This method does almost the complete work necessary to implement\n   *  <CODE>select</CODE>. The only thing that has to be done in subclasses is\n   *  to call this method, get the result of the select operation as\n   *  a java.lang.List and wrap the result in the correct Ocl Collection.\n   *\n   *  @return <code>null</code> if this collection is undefined\n   */\n",
    "106467": "  /** This method does almost the complete work necessary to implement\n   *  <CODE>collect</CODE>. The only thing that has to be done in subclasses is\n   *  to call this method, get the result of the select operation as\n   *  a java.lang.List and wrap the result in the correct Ocl Collection.\n   *\n   *  @return <code>null</code> if this collection is undefined\n   */\n",
    "106476": "  /** checks if this collection contains the element given as argument\n   *  (i.e., if this collection contains an OclRoot that is equal to\n   *  the argument)\n   *\n   *  @see OclRoot#isEqualTo(Object o)\n   */\n",
    "106488": "\t/**\n\t * Remove the Ocl4Java-Builder from the Project\n\t */\n",
    "106493": "  /** check if there are any elements in the collection; an undefined\n   *  collection is not considered empty\n   */\n",
    "106500": "  /** This method sums up all elements of the collection. If any element does\n   *  not implement the interface <CODE>OclAddable</CODE>, the result is undefined.\n   *  If the collection is empty, an OclInteger representing 0 is returned.\n   *\n   *  @see OclAddable\n   */\n",
    "106515": "\t/**\n\t * This method is called upon plug-in activation\n\t */\n",
    "106516": "\t/**\n\t * This method is called when the plug-in is stopped\n\t */\n",
    "106521": "  /** an OclIterator is necessary to invoke the \"iterating methods\", e.g.\n   *  collect, forAll, iterate\n   */\n",
    "106546": "  /** Sets this collection to contain the range from <code>begin</code> to\n   *  <code>end</code>. This method is not specified as operation of the OCL\n   *  type but is necessary to convert range collection literals to Java. It\n   *  is not implemented side-effect free as the collection operations defined\n   *  in the OCL specification but changes the state of the OclCollection\n   *  called. Elements that are in the collection prior to the call to this\n   *  method remain there.\n   *\n   *  Makes this Collection undefined if begin is greater than end.\n   */\n",
    "106550": "  /** Sets this collection to contain the the object given as parameter.\n   *  This method is not specified as operation of the OCL type but is\n   *  necessary to convert collection literals to Java. It is not implemented\n   *  side-effect free but changes the called OclCollection. Elements that\n   *  are in the collection prior to the call to this\n   *  method remain there.\n   */\n",
    "106552": "\t/**\n\t * Remove all problem-markers we added.\n\t * @param file the file to remove all markers from\n\t */\n",
    "106574": "        /**\n         * Implements the IResourceDeltaVisitor-contract.\n         * @see org.eclipse.core.resources.IResourceDeltaVisitor#visit(org.eclipse.core.resources.IResourceDelta)\n         */\n",
    "106578": "        /**\n         * Implements the IResourceVisitor-contract.\n         * @see IResourceVisitor#visit(org.eclipse.core.resources.IResource)\n         */\n",
    "106594": "    /**\n     * Check if the user canceled the build.\n     * @param monitor\n     */\n",
    "106683": "        /**\n         * Sets the value of the measuringMethods property.\n         * \n         * @param measuringMethods\n         *     allowed object is\n         *     {@link TridasMeasuringMethod }\n         *     \n         */\n",
    "106905": "    /**\n     * Test code to fill something into the cache.\n     */\n",
    "106906": "    /**\n     * Signals that an article with a given mapKey is available.\n     */\n",
    "106907": "    /**\n     * Checks wheter an article with a given mapKey is available.\n     */\n",
    "106977": "    /**\n     * Authenticate by username and password\n     */\n",
    "107066": "    /**\n     * Returns true if the native evaluation library is loaded.\n     */\n",
    "107073": "    /**\n     * Get a numerical ranking of this hand. Uses a Native Method. (Make sure\n     * the feval library is installed!) Uses GNU Poker Lib: eval.h\n     * \n     * @param h\n     *            a 5-7 card hand\n     * @return a unique number representing the hand strength of the best 5-card\n     *         poker hand in the given 7 cards. The higher the number, the\n     *         better the hand is.\n     */\n",
    "107079": "    /**\n     * Get the size of the hand.\n     * \n     * @return the number of cards in the hand\n     */\n",
    "107080": "    /**\n     * Get a numerical ranking of this hand. Uses a Native Method. (Make sure\n     * the feval library is installed!) Uses GNU Poker Lib: eval.h\n     * \n     * @param c1\n     *            first hole card\n     * @param c2\n     *            second hole card\n     * @param h\n     *            a 3-5 card hand\n     * @return a unique number representing the hand strength of the best 5-card\n     *         poker hand in the given cards and board. The higher the number,\n     *         the better the hand is.\n     */\n",
    "107081": "    /**\n     * Remove the last card in the hand.\n     */\n",
    "107082": "    /**\n     * Remove the all cards from the hand.\n     */\n",
    "107083": "    /**\n     * Add a card to the hand. (if there is room)\n     * \n     * @param c\n     *            the card to add\n     * @return true if the card was added, false otherwise\n     */\n",
    "107084": "    /**\n     * Add a card to the hand. (if there is room)\n     * \n     * @param i\n     *            the index value of the card to add\n     * @return true if the card was added, false otherwise\n     */\n",
    "107085": "    /**\n     * Get the a specified card in the hand\n     * \n     * @param pos\n     *            the position (1..n) of the card in the hand\n     * @return the card at position pos\n     */\n",
    "107086": "    /**\n     * Add a card to the hand. (if there is room)\n     * \n     * @param c\n     *            the card to add\n     * @return true if the card was added, false otherwise\n     */\n",
    "107087": "    /**\n     * Bubble Sort the hand to have cards in descending order, but card index.\n     * Used for database indexing.\n     */\n",
    "107088": "    /**\n     * Get a string representation of this CardGroup.\n     */\n",
    "107089": "    /**\n     * Compares two 7 card hands against each other.\n     * \n     * @param h1\n     *            The first hand\n     * @param h2\n     *            The second hand\n     * @return 1 = first hand is best, 2 = second hand is best, 0 = tie\n     */\n",
    "107096": "    /**\n     * Compares two 5-7 card hands against each other.\n     * \n     * @param h1\n     *            The rank of the first hand\n     * @param h2\n     *            The second hand\n     * @return 1 = first hand is best, 2 = second hand is best, 0 = tie\n     */\n",
    "107101": "    /**\n     * Get a numerical ranking of this hand. Uses a Native Method. (Make sure\n     * the feval library is installed!) Uses GNU Poker Lib: eval7.h\n     * \n     * @param h\n     *            a 7 card hand\n     * @return a unique number representing the hand strength of the best 5-card\n     *         poker hand in the given 7 cards. The higher the number, the\n     *         better the hand is.\n     */\n",
    "107106": "    /**\n     * Calculates the probability of having the best hand against several\n     * opponents.\n     * \n     * @param c1\n     *            hole card 1\n     * @param c2\n     *            hole card 2\n     * @param h\n     *            the board\n     * @param np\n     *            the number of active opponents in the hand\n     * @return probability of having the best hand.\n     */\n",
    "107119": "    /**\n     * Get the number of hands worse than the last hand ranked.\n     */\n",
    "107120": "    /**\n     * Adds new row in the table with respective columns.\n     * @param pColumns Columns data of the new poker table.\n     */\n",
    "107121": "    /**\n     * Removes poker table from the list.\n     * @param pKey\tKey to identify poker table row.\n     */\n",
    "107122": "    /**\n     * Selects a poker table and send an notify to the listeners .\n     * @param pKey\tKey to identify poker table row.\n     */\n",
    "107123": "    /**\n     * Get the number of hands better than the last hand ranked.\n     */\n",
    "107124": "    /**\n     * Changes name of the poker table.\n     * @param pKey \tKey to identify poker table row.\n     * @param pName\tNew name.\n     */\n",
    "107126": "    /**\n     * Get the number of hands tied with the last hand ranked.\n     */\n",
    "107135": "    /**\n     * Get the best 5 card poker hand from a 7 card hand\n     * \n     * @param h\n     *            Any 7 card poker hand\n     * @return A CardGroup containing the highest ranked 5 card hand possible\n     *         from the input.\n     */\n",
    "107143": "    /**\n     * Get a string from a hand type.\n     * \n     * @param handtype\n     *            number coding a hand type\n     * @return name of hand type\n     */\n",
    "107249": "    /**\n     * Return the integer index for this card.\n     * \n     * @return the card's index value\n     */\n",
    "107251": "    /**\n     * Change the index of the card.\n     * \n     * @param index\n     *            the new index of the card\n     */\n",
    "107253": "    /**\n     * Change this card to another. This is more practical than creating a new\n     * object for optimization reasons.\n     * \n     * @param rank\n     *            face value of the card\n     * @param suit\n     *            suit of the card\n     */\n",
    "107256": "    /**\n     * Obtain the rank of this card\n     * \n     * @return rank\n     */\n",
    "107259": "    /**\n     * Obtain the suit of this card\n     * \n     * @return suit\n     */\n",
    "107261": "    /**\n     * Obtain a String representation of this Card\n     * \n     * @return A string for this card\n     */\n",
    "107267": "        /**\n         * Sets the value of the categories property.\n         * \n         * @param categories\n         *     allowed object is\n         *     {@link TridasCategory }\n         *     \n         */\n",
    "107346": "    /**\n     * Removes <code>newChild</code> from its present parent (if it has a\n     * parent), sets the child's parent to this node, and then adds the child\n     * to this node's child array at index <code>childIndex</code>.\n     * <code>newChild</code> must not be null and must not be an ancestor of\n     * this node.\n     *\n     * @param\tnewChild\tthe MutableTreeNode to insert under this node\n     * @param\tchildIndex\tthe index in this node's child array\n     *\t\t\t\twhere this node is to be inserted\n     * @exception\tArrayIndexOutOfBoundsException\tif\n     *\t\t\t\t<code>childIndex</code> is out of bounds\n     * @exception\tIllegalArgumentException\tif\n     *\t\t\t\t<code>newChild</code> is null or is an\n     *\t\t\t\tancestor of this node\n     * @exception\tIllegalStateException\tif this node does not allow\n     *\t\t\t\t\t\tchildren\n     * @see\t#isNodeDescendant\n     */\n",
    "107357": "    /**\n     * Removes the child at the specified index from this node's children\n     * and sets that node's parent to null. The child node to remove\n     * must be a <code>MutableTreeNode</code>.\n     *\n     * @param\tchildIndex\tthe index in this node's child array\n     *\t\t\t\tof the child to remove\n     * @exception\tArrayIndexOutOfBoundsException\tif\n     *\t\t\t\t<code>childIndex</code> is out of bounds\n     */\n",
    "107362": "    /**\n     * Sets this node's parent to <code>newParent</code> but does not \n     * change the parent's child array.  This method is called from\n     * <code>insert()</code> and <code>remove()</code> to\n     * reassign a child's parent, it should not be messaged from anywhere\n     * else.\n     *\n     * @param\tnewParent\tthis node's new parent\n     */\n",
    "107368": "    /**\n     * Returns this node's parent or null if this node has no parent.\n     *\n     * @return\tthis node's parent TreeNode, or null if this node has no parent\n     */\n",
    "107373": "    /**\n     * Returns the child at the specified index in this node's child array.\n     *\n     * @param\tindex\tan index into this node's child array\n     * @exception\tArrayIndexOutOfBoundsException\tif <code>index</code>\n     *\t\t\t\t\t\tis out of bounds\n     * @return\tthe TreeNode in this node's child array at  the specified index\n     */\n",
    "107378": "    /**\n     * Returns the number of children of this node.\n     *\n     * @return\tan int giving the number of children of this node\n     */\n",
    "107383": "    /**\n     * Returns the index of the specified child in this node's child array.\n     * If the specified node is not a child of this node, returns\n     * <code>-1</code>.  This method performs a linear search and is O(n)\n     * where n is the number of children.\n     *\n     * @param\taChild\tthe TreeNode to search for among this node's children\n     * @exception\tIllegalArgumentException\tif <code>aChild</code>\n     *\t\t\t\t\t\t\tis null\n     * @return\tan int giving the index of the node in this node's child \n     *          array, or <code>-1</code> if the specified node is a not\n     *          a child of this node\n     */\n",
    "107393": "    /**\n     * Creates and returns a forward-order enumeration of this node's\n     * children.  Modifying this node's child array invalidates any child\n     * enumerations created before the modification.\n     *\n     * @return\tan Enumeration of this node's children\n     */\n",
    "107402": "    /**\n     * Determines whether or not this node is allowed to have children. \n     * If <code>allows</code> is false, all of this node's children are\n     * removed.\n     * <p>\n     * Note: By default, a node allows children.\n     *\n     * @param\tallows\ttrue if this node is allowed to have children\n     */\n",
    "107413": "    /**\n     * Returns true if this node is allowed to have children.\n     *\n     * @return\ttrue if this node allows children, else false\n     */\n",
    "107421": "    /**\n     * Sets the user object for this node to <code>userObject</code>.\n     *\n     * @param\tuserObject\tthe Object that constitutes this node's \n     *                          user-specified data\n     * @see\t#getUserObject\n     * @see\t#toString\n     */\n",
    "107429": "    /**\n     * Returns this node's user object.\n     *\n     * @return\tthe Object stored at this node by the user\n     * @see\t#setUserObject\n     * @see\t#toString\n     */\n",
    "107430": "\t/**\n\t * This method initializes jToggleButton\t\n\t * \t\n\t * @return javax.swing.JToggleButton\t\n\t */    \n",
    "107435": "\t/**\n\t * This method initializes jTextArea1\t\n\t * \t\n\t * @return javax.swing.JTextArea\t\n\t */    \n",
    "107438": "    /**\n     * Removes the subtree rooted at this node from the tree, giving this\n     * node a null parent.  Does nothing if this node is the root of its\n     * tree.\n     */\n",
    "107445": "    /**\n     * Removes <code>aChild</code> from this node's child array, giving it a\n     * null parent.\n     *\n     * @param\taChild\ta child of this node to remove\n     * @exception\tIllegalArgumentException\tif <code>aChild</code>\n     *\t\t\t\t\tis null or is not a child of this node\n     */\n",
    "107453": "    /**\n     * Removes all of this node's children, setting their parents to null.\n     * If this node has no children, this method does nothing.\n     */\n",
    "107473": "    /**\n     * Returns true if <code>anotherNode</code> is an ancestor of this node\n     * -- if it is this node, this node's parent, or an ancestor of this\n     * node's parent.  (Note that a node is considered an ancestor of itself.)\n     * If <code>anotherNode</code> is null, this method returns false.  This\n     * operation is at worst O(h) where h is the distance from the root to\n     * this node.\n     *\n     * @see\t\t#isNodeDescendant\n     * @see\t\t#getSharedAncestor\n     * @param\tanotherNode\tnode to test as an ancestor of this node\n     * @return\ttrue if this node is a descendant of <code>anotherNode</code>\n     */\n",
    "107482": "    /**\n     * Returns true if <code>anotherNode</code> is a descendant of this node\n     * -- if it is this node, one of this node's children, or a descendant of\n     * one of this node's children.  Note that a node is considered a\n     * descendant of itself.  If <code>anotherNode</code> is null, returns\n     * false.  This operation is at worst O(h) where h is the distance from the\n     * root to <code>anotherNode</code>.\n     *\n     * @see\t#isNodeAncestor\n     * @see\t#getSharedAncestor\n     * @param\tanotherNode\tnode to test as descendant of this node\n     * @return\ttrue if this node is an ancestor of <code>anotherNode</code>\n     */\n",
    "107505": "    /**\n     * Returns the depth of the tree rooted at this node -- the longest\n     * distance from this node to a leaf.  If this node has no children,\n     * returns 0.  This operation is much more expensive than\n     * <code>getLevel()</code> because it must effectively traverse the entire\n     * tree rooted at this node.\n     *\n     * @see\t#getLevel\n     * @return\tthe depth of the tree whose root is this node\n     */\n",
    "107513": "    /**\n     * Returns the number of levels above this node -- the distance from\n     * the root to this node.  If this node is the root, returns 0.\n     *\n     * @see\t#getDepth\n     * @return\tthe number of levels above this node\n     */\n",
    "107521": "    /**\n     * Returns the root of the tree that contains this node.  The root is\n     * the ancestor with a null parent.\n     *\n     * @see\t#isNodeAncestor\n     * @return\tthe root of the tree that contains this node\n     */\n",
    "107530": "    /**\n     * Returns true if this node is the root of the tree.  The root is\n     * the only node in the tree with a null parent; every tree has exactly\n     * one root.\n     *\n     * @return\ttrue if this node is the root of its tree\n     */\n",
    "107542": "    /**\n     * Returns the node that follows this node in a preorder traversal of this\n     * node's tree.  Returns null if this node is the last node of the\n     * traversal.  This is an inefficient way to traverse the entire tree; use\n     * an enumeration, instead.\n     *\n     * @see\t#preorderEnumeration\n     * @return\tthe node that follows this node in a preorder traversal, or\n     *\t\tnull if this node is last\n     */\n",
    "107555": "    /**\n     * Returns the node that precedes this node in a preorder traversal of\n     * this node's tree.  Returns <code>null</code> if this node is the\n     * first node of the traversal -- the root of the tree. \n     * This is an inefficient way to\n     * traverse the entire tree; use an enumeration, instead.\n     *\n     * @see\t#preorderEnumeration\n     * @return\tthe node that precedes this node in a preorder traversal, or\n     *\t\tnull if this node is the first\n     */\n",
    "107560": "    /**\n     * Creates and returns an enumeration that traverses the subtree rooted at\n     * this node in preorder.  The first node returned by the enumeration's\n     * <code>nextElement()</code> method is this node.<P>\n     *\n     * Modifying the tree by inserting, removing, or moving a node invalidates\n     * any enumerations created before the modification.\n     *\n     * @see\t#postorderEnumeration\n     * @return\tan enumeration for traversing the tree in preorder\n     */\n",
    "107567": "    /**\n     * Creates and returns an enumeration that traverses the subtree rooted at\n     * this node in postorder.  The first node returned by the enumeration's\n     * <code>nextElement()</code> method is the leftmost leaf.  This is the\n     * same as a depth-first traversal.<P>\n     *\n     * Modifying the tree by inserting, removing, or moving a node invalidates\n     * any enumerations created before the modification.\n     *\n     * @see\t#depthFirstEnumeration\n     * @see\t#preorderEnumeration\n     * @return\tan enumeration for traversing the tree in postorder\n     */\n",
    "107575": "    /**\n     * Creates and returns an enumeration that traverses the subtree rooted at\n     * this node in breadth-first order.  The first node returned by the\n     * enumeration's <code>nextElement()</code> method is this node.<P>\n     *\n     * Modifying the tree by inserting, removing, or moving a node invalidates\n     * any enumerations created before the modification.\n     *\n     * @see\t#depthFirstEnumeration\n     * @return\tan enumeration for traversing the tree in breadth-first order\n     */\n",
    "107579": "  /**\n  * Show the splash screen to the end user.\n  *\n  * <P>Once this method returns, the splash screen is realized, which means \n  * that almost all work on the splash screen should proceed through the event \n  * dispatch thread. In particular, any call to <code>dispose</code> for the \n  * splash screen must be performed in the event dispatch thread.\n  */\n",
    "107581": "  /**\n  * Centers the frame on the screen.\n  *\n  * This centering service is more or less in {@link UiUtil}; this duplication \n  * is justified only because the use of {@link UiUtil} would entail more \n  * class loading, which is not desirable for a splash screen.\n  */\n",
    "107582": "    /**\n     * Creates and returns an enumeration that traverses the subtree rooted at\n     * this node in depth-first order.  The first node returned by the\n     * enumeration's <code>nextElement()</code> method is the leftmost leaf.\n     * This is the same as a postorder traversal.<P>\n     *\n     * Modifying the tree by inserting, removing, or moving a node invalidates\n     * any enumerations created before the modification.\n     *\n     * @see\t#breadthFirstEnumeration\n     * @see\t#postorderEnumeration\n     * @return\tan enumeration for traversing the tree in depth-first order\n     */\n",
    "107599": "    /**\n     * Creates and returns an enumeration that follows the path from\n     * <code>ancestor</code> to this node.  The enumeration's\n     * <code>nextElement()</code> method first returns <code>ancestor</code>,\n     * then the child of <code>ancestor</code> that is an ancestor of this\n     * node, and so on, and finally returns this node.  Creation of the\n     * enumeration is O(m) where m is the number of nodes between this node\n     * and <code>ancestor</code>, inclusive.  Each <code>nextElement()</code>\n     * message is O(1).<P>\n     *\n     * Modifying the tree by inserting, removing, or moving a node invalidates\n     * any enumerations created before the modification.\n     *\n     * @see\t\t#isNodeAncestor\n     * @see\t\t#isNodeDescendant\n     * @exception\tIllegalArgumentException if <code>ancestor</code> is\n     *\t\t\t\t\t\tnot an ancestor of this node\n     * @return\tan enumeration for following the path from an ancestor of\n     *\t\tthis node to this one\n     */\n",
    "107611": "    /**\n     * Returns true if <code>aNode</code> is a child of this node.  If\n     * <code>aNode</code> is null, this method returns false.\n     *\n     * @return\ttrue if <code>aNode</code> is a child of this node; false if \n     *  \t\t<code>aNode</code> is null\n     */\n",
    "107626": "    /**\n     * Returns this node's first child.  If this node has no children,\n     * throws NoSuchElementException.\n     *\n     * @return\tthe first child of this node\n     * @exception\tNoSuchElementException\tif this node has no children\n     */\n",
    "107640": "    /**\n     * Returns this node's last child.  If this node has no children,\n     * throws NoSuchElementException.\n     *\n     * @return\tthe last child of this node\n     * @exception\tNoSuchElementException\tif this node has no children\n     */\n",
    "107648": "    /**\n     * Returns the child in this node's child array that immediately\n     * follows <code>aChild</code>, which must be a child of this node.  If\n     * <code>aChild</code> is the last child, returns null.  This method\n     * performs a linear search of this node's children for\n     * <code>aChild</code> and is O(n) where n is the number of children; to\n     * traverse the entire array of children, use an enumeration instead.\n     *\n     * @see\t\t#children\n     * @exception\tIllegalArgumentException if <code>aChild</code> is\n     *\t\t\t\t\tnull or is not a child of this node\n     * @return\tthe child of this node that immediately follows\n     *\t\t<code>aChild</code>\n     */\n",
    "107658": "    /**\n     * Returns the child in this node's child array that immediately\n     * precedes <code>aChild</code>, which must be a child of this node.  If\n     * <code>aChild</code> is the first child, returns null.  This method\n     * performs a linear search of this node's children for <code>aChild</code>\n     * and is O(n) where n is the number of children.\n     *\n     * @exception\tIllegalArgumentException if <code>aChild</code> is null\n     *\t\t\t\t\t\tor is not a child of this node\n     * @return\tthe child of this node that immediately precedes\n     *\t\t<code>aChild</code>\n     */\n",
    "107668": "    /**\n     * Returns true if <code>anotherNode</code> is a sibling of (has the\n     * same parent as) this node.  A node is its own sibling.  If\n     * <code>anotherNode</code> is null, returns false.\n     *\n     * @param\tanotherNode\tnode to test as sibling of this node\n     * @return\ttrue if <code>anotherNode</code> is a sibling of this node\n     */\n",
    "107693": "    /**\n     * Returns the number of siblings of this node.  A node is its own sibling\n     * (if it has no parent or no siblings, this method returns\n     * <code>1</code>).\n     *\n     * @return\tthe number of siblings of this node\n     */\n",
    "107709": "    /**\n     * Returns the next sibling of this node in the parent's children array.\n     * Returns null if this node has no parent or is the parent's last child.\n     * This method performs a linear search that is O(n) where n is the number\n     * of children; to traverse the entire array, use the parent's child\n     * enumeration instead.\n     *\n     * @see\t#children\n     * @return\tthe sibling of this node that immediately follows this node\n     */\n",
    "107721": "    /**\n     * Returns the previous sibling of this node in the parent's children\n     * array.  Returns null if this node has no parent or is the parent's\n     * first child.  This method performs a linear search that is O(n) where n\n     * is the number of children.\n     *\n     * @return\tthe sibling of this node that immediately precedes this node\n     */\n",
    "107732": "    /**\n     * Returns true if this node has no children.  To distinguish between\n     * nodes that have no children and nodes that <i>cannot</i> have\n     * children (e.g. to distinguish files from empty directories), use this\n     * method in conjunction with <code>getAllowsChildren</code>\n     *\n     * @see\t#getAllowsChildren\n     * @return\ttrue if this node has no children\n     */\n",
    "107744": "    /**\n     * Finds and returns the first leaf that is a descendant of this node --\n     * either this node or its first child's first leaf.\n     * Returns this node if it is a leaf.\n     *\n     * @see\t#isLeaf\n     * @see\t#isNodeDescendant\n     * @return\tthe first leaf in the subtree rooted at this node\n     */\n",
    "107757": "    /**\n     * Finds and returns the last leaf that is a descendant of this node --\n     * either this node or its last child's last leaf. \n     * Returns this node if it is a leaf.\n     *\n     * @see\t#isLeaf\n     * @see\t#isNodeDescendant\n     * @return\tthe last leaf in the subtree rooted at this node\n     */\n",
    "107773": "    /**\n     * Returns the leaf after this node or null if this node is the\n     * last leaf in the tree.\n     * <p>\n     * In this implementation of the <code>MutableNode</code> interface,\n     * this operation is very inefficient. In order to determine the\n     * next node, this method first performs a linear search in the \n     * parent's child-list in order to find the current node. \n     * <p>\n     * That implementation makes the operation suitable for short\n     * traversals from a known position. But to traverse all of the \n     * leaves in the tree, you should use <code>depthFirstEnumeration</code>\n     * to enumerate the nodes in the tree and use <code>isLeaf</code>\n     * on each node to determine which are leaves.\n     *\n     * @see\t#depthFirstEnumeration\n     * @see\t#isLeaf\n     * @return\treturns the next leaf past this node\n     */\n",
    "107783": "    /**\n     * Returns the leaf before this node or null if this node is the\n     * first leaf in the tree.\n     * <p>\n     * In this implementation of the <code>MutableNode</code> interface,\n     * this operation is very inefficient. In order to determine the\n     * previous node, this method first performs a linear search in the \n     * parent's child-list in order to find the current node. \n     * <p>\n     * That implementation makes the operation suitable for short\n     * traversals from a known position. But to traverse all of the \n     * leaves in the tree, you should use <code>depthFirstEnumeration</code>\n     * to enumerate the nodes in the tree and use <code>isLeaf</code>\n     * on each node to determine which are leaves.\n     *\n     * @see\t\t#depthFirstEnumeration\n     * @see\t\t#isLeaf\n     * @return\treturns the leaf before this node\n     */\n",
    "107787": "    /**\n     * Returns the total number of leaves that are descendants of this node.\n     * If this node is a leaf, returns <code>1</code>.  This method is O(n)\n     * where n is the number of descendants of this node.\n     *\n     * @see\t#isNodeAncestor\n     * @return\tthe number of leaves beneath this node\n     */\n",
    "107791": "    /**\n     * Returns the result of sending <code>toString()</code> to this node's\n     * user object, or null if this node has no user object.\n     *\n     * @see\t#getUserObject\n     */\n",
    "107795": "    /**\n     * Overridden to make clone public.  Returns a shallow copy of this node;\n     * the new node has no parent or children and has a reference to the same\n     * user object, if any.\n     *\n     * @return\ta copy of this node\n     */\n",
    "108139": "    /**\n     * Returns the row specification that is used to separate component lines.\n     *  \n     * @return the <code>RowSpec</code> that is used to separate lines \n     */\n",
    "108143": "    /**\n     * Sets the size of gaps between component lines using the given \n     * constant size.<p>\n     * \n     * <strong>Examples:</strong><pre>\n     * builder.setLineGapSize(Sizes.ZERO);\n     * builder.setLineGapSize(Sizes.DLUY9);\n     * builder.setLineGapSize(Sizes.pixel(1));\n     * </pre>\n     *  \n     * @param lineGapSize   the <code>ConstantSize</code> that describes \n     *     the size of the gaps between component lines\n     */\n",
    "108145": "    /**\n     * Sets the size of gaps between paragraphs using the given \n     * constant size.<p>\n     * \n     * <strong>Examples:</strong><pre>\n     * builder.setParagraphGapSize(Sizes.DLUY14);\n     * builder.setParagraphGapSize(Sizes.dluY(22));\n     * builder.setParagraphGapSize(Sizes.pixel(42));\n     * </pre>\n     *  \n     * @param paragraphGapSize   the <code>ConstantSize</code> that describes \n     *     the size of the gaps between paragraphs\n     */\n",
    "108149": "    /**\n     * Returns the offset of the leading column, often 0 or 1.\n     * \n     * @return the offset of the leading column\n     */\n",
    "108152": "    /**\n     * Sets the offset of the leading column, often 0 or 1.\n     * \n     * @param columnOffset  the new offset of the leading column\n     */\n",
    "108155": "    /**\n     * Returns whether new data rows are being grouped or not.\n     * \n     * @return true indicates grouping enabled, false disabled\n     */\n",
    "108156": "\t/**\n     * Adds a text label and component to the panel; the component will span\n     * the specified number columns. Proceeds to the next data column.\n     * <p>\n     * The created label is labelling the given component; so the component\n     * gets the focus if the (optional) label mnemonic is pressed.\n     *\n     * If Component is Persistent glue label with component (iniPersistentLabel\n     *   \n     * @param textWithMnemonic  the label's text - may mark a mnemonic\n     * @param c                 the component to add, is a Persistent Component!?\n     * @param columnSpan        number of columns the component shall span\n     * @return the added label\n     * @see JLabel#setLabelFor(java.awt.Component)\n     */    \n",
    "108158": "    /**\n     * Enables or disables the grouping of new data rows.\n     * \n     * @param enabled  indicates grouping enabled, false disabled\n     */\n",
    "108161": "    /**\n     * Adds a component to the panel using the default constraints.\n     * Proceeds to the next data column.\n     * \n     * @param component\tthe component to add\n     */\n",
    "108165": "    /**\n     * Adds a component to the panel using the default constraints with\n     * the given columnSpan. Proceeds to the next data column.\n     * \n     * @param component the component to append\n     * @param columnSpan    the column span used to add \n     */\n",
    "108168": "    /**\n     * Adds two components to the panel; each component will span a single\n     * data column. Proceeds to the next data column.\n     * \n     * @param c1    the first component to add\n     * @param c2    the second component to add\n     */    \n",
    "108171": "    /**\n     * Adds three components to the panel; each component will span a single\n     * data column. Proceeds to the next data column.\n     * \n     * @param c1    the first component to add\n     * @param c2    the second component to add\n     * @param c3    the third component to add\n     */    \n",
    "108173": "    /**\n     * Adds a text label to the panel and proceeds to the next column.\n     * \n     * @param textWithMnemonic  the label's text - may mark a mnemonic\n     * @return the added label\n     */\n",
    "108176": "    /**\n     * Adds a text label and component to the panel. \n     * Then proceeds to the next data column.\n     * \n     * @param textWithMnemonic  the label's text - may mark a mnemonic\n     * @param component         the component to add\n     * @return the added label\n     */    \n",
    "108178": "    /**\n     * Adds a text label and component to the panel; the component will span\n     * the specified number columns. Proceeds to the next data column.\n     * <p>\n     * The created label is labelling the given component; so the component\n     * gets the focus if the (optional) label mnemonic is pressed.\n     * \n     * @param textWithMnemonic  the label's text - may mark a mnemonic\n     * @param c                 the component to add\n     * @param columnSpan        number of columns the component shall span\n     * @return the added label\n     * @see JLabel#setLabelFor(java.awt.Component)\n     */    \n",
    "108181": "    /**\n     * Adds a text label and two components to the panel; each component\n     * will span a single column. Proceeds to the next data column.\n     * \n     * @param textWithMnemonic  the label's text - may mark a mnemonic\n     * @param c1    the first component to add\n     * @param c2    the second component to add\n     * @return the added label\n     */    \n",
    "108184": "    /**\n     * Adds a text label and two components to the panel; each component\n     * will span a single column. Proceeds to the next data column.\n     * \n     * @param textWithMnemonic  the label's text - may mark a mnemonic\n     * @param c1      the first component to add\n     * @param c2      the second component to add\n     * @param colSpan the column span for the second component\n     */    \n",
    "108186": "    /**\n     * Adds a text label and three components to the panel; each component\n     * will span a single column. Proceeds to the next data column.\n     * \n     * @param textWithMnemonic  the label's text - may mark a mnemonic\n     * @param c1    the first component to add\n     * @param c2    the second component to add\n     * @param c3    the third component to add\n     * @return the added label\n     */    \n",
    "108190": "    /**\n     * Adds a text label and four components to the panel; each component\n     * will span a single column. Proceeds to the next data column.\n     * \n     * @param textWithMnemonic  the label's text - may mark a mnemonic\n     * @param c1    the first component to add\n     * @param c2    the second component to add\n     * @param c3    the third component to add\n     * @param c4    the fourth component to add\n     * @return the added label\n     */    \n",
    "108194": "    /**\n     * Adds an internationalized (i15d) text label to the panel using \n     * the given resource key and proceeds to the next column.\n     * \n     * @param resourceKey      the resource key for the the label's text\n     * @return the added label\n     */\n",
    "108207": "    /**\n     * Adds an internationalized (i15d) text label and component to the panel. \n     * Then proceeds to the next data column.\n     * \n     * @param resourceKey  the resource key for the text to add\n     * @param component  the component to add\n     * @return the added label\n     */    \n",
    "108212": "    /**\n     * Adds an internationalized (i15d) text label and component to the panel. \n     * Then proceeds to the next data column.\n     * Goes to the next line if the boolean flag is set.\n     * \n     * @param resourceKey  the resource key for the text to add\n     * @param component    the component to add\n     * @param nextLine     true forces a next line\n     * @return the added label\n     */    \n",
    "108221": "    /**\n     * Adds an internationalized (i15d) text label and four components to the panel; \n     * each component will span a single column. Proceeds to the next data column.\n     * \n     * @param resourceKey  the resource key for the text to add\n     * @param c1    the first component to add\n     * @param c2    the second component to add\n     * @param c3    the third component to add\n     * @param c4    the third component to add\n     * @return the added label\n     */    \n",
    "108223": "    /**\n     * Adds a title label to the panel and proceeds to the next column.\n     * \n     * @param textWithMnemonic  the label's text - may mark a mnemonic\n     * @return the added title label\n     */\n",
    "108225": "    /**\n     * Adds an internationalized title label to the panel and \n     * proceeds to the next column.\n     * \n     * @param resourceKey   the resource key for the title's text\n     * @return the added title label\n     */\n",
    "108227": "    /**\n     * Adds a separator without text that spans all columns.\n     * \n     * @return the added titled separator \n     */\n",
    "108231": "    /**\n     * Adds a separator with the given text that spans all columns.\n     * \n     * @param text      the separator title text\n     * @return the added titled separator \n     */\n",
    "108233": "    /**\n     * Appends an internationalized titled separator for \n     * the given resource key that spans all columns.\n     * \n     * @param resourceKey   the resource key for the separator title's text\n     */\n",
    "108235": "    /**\n     * Returns the leading column. Unlike the superclass this method\n     * honors the column offset.\n     * \n     * @return the leading column\n     */\n",
    "108237": "    /**\n     * Ensures that the cursor is in the grid. In case it's beyond the \n     * form's right hand side, the cursor is moved to the leading column\n     * of the next line.\n     */\n",
    "108239": "    /**\n     * Ensures that we have a gap row before the next component row.\n     * Checks if the current row is the given <code>RowSpec</code>\n     * and appends this row spec if necessary.\n     * \n     * @param gapRowSpec  the row specification to check for\n     */\n",
    "108242": "    /**\n     * Ensures that the form has a component row. Adds a component row\n     * if the cursor is beyond the form's bottom.\n     */\n",
    "108244": "    /**\n     * Looks up and returns the row specification of the current row.\n     *  \n     * @return the row specification of the current row\n     */\n",
    "108246": "\t/**\n\t * Adds a title , gradient color.\n\t * \n\t * @param text      the separator title text\n\t * @return the added titled gradient \n\t */\n",
    "108294": "        /**\n         * Sets the value of the variables property.\n         * \n         * @param variables\n         *     allowed object is\n         *     {@link TridasVariable }\n         *     \n         */\n",
    "108525": "    /**\n     * Checks and answers whether the given class supports bound properties, \n     * i.e. it provides a pair of multicast event listener registration methods \n     * for <code>PropertyChangeListener</code>s:\n     * <pre>\n     * public void addPropertyChangeListener(PropertyChangeListener x);\n     * public void removePropertyChangeListener(PropertyChangeListener x);\n     * </pre> \n     * \n     * @param clazz    the class to test\n     * @return true if the class supports bound properties, false otherwise\n     */\n",
    "109107": "\t/**\n     * Adds a text label and component to the panel; the component will span\n     * the specified number columns. Proceeds to the next data column.\n     * <p>\n     * The created label is labelling the given component; so the component\n     * gets the focus if the (optional) label mnemonic is pressed.\n     *\n     * If Component is Persistent glue label with component (iniPersistentLabel\n     *   \n     * @param textWithMnemonic  the label's text - may mark a mnemonic\n     * @param c                 the component to add, is a Persistent Component!?\n     * @param columnSpan        number of columns the component shall span\n     * @return the added label\n     * @see JLabel#setLabelFor(java.awt.Component)\n     */    \n",
    "109201": "\t/**\n\t * Adds a title , gradient color.\n\t * \n\t * @param text      the separator title text\n\t * @return the added titled gradient \n\t */\n",
    "110585": "\t/**\n\t * Returns the plugin's resource bundle,\n\t */\n",
    "110970": "    /**\n     * makes the TableCursor visible again.\n     * \n     * @see org.eclipse.jface.viewers.ICellEditorListener#applyEditorValue()\n     */\n",
    "110974": "    /**\n     * makes the TableCursor visible again.\n     * \n     * @see org.eclipse.jface.viewers.ICellEditorListener#cancelEditor()\n     */\n",
    "110983": "    /**\n     * subclass can override double click behavior.\n     * default activates cell editor\n     */\n",
    "111034": "    /**\n     * Adds the listener to the collection of listeners who will be notified\n     * when the receiver's selection changes, by sending it one of the messages\n     * defined in the <code>SelectionListener</code> interface.\n     * <p>\n     * When <code>widgetSelected</code> is called, the item field of the event\n     * object is valid. If the reciever has <code>SWT.CHECK</code> style set\n     * and the check selection changes, the event object detail field contains\n     * the value <code>SWT.CHECK</code>.<code>widgetDefaultSelected</code>\n     * is typically called when an item is double-clicked.\n     * </p>\n     * \n     * @param listener\n     *            the listener which should be notified\n     * \n     * @exception IllegalArgumentException\n     *                <ul>\n     *                <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n     *                </ul>\n     * @exception SWTException\n     *                <ul>\n     *                <li>ERROR_WIDGET_DISPOSED - if the receiver has been\n     *                disposed</li>\n     *                <li>ERROR_THREAD_INVALID_ACCESS - if not called from the\n     *                thread that created the receiver</li>\n     *                </ul>\n     * \n     * @see SelectionListener\n     * @see SelectionEvent\n     * @see #removeSelectionListener(SelectionListener)\n     *  \n     */\n",
    "111068": "    /**\n     * adds a figure or connection to the collection of figures which should be\n     * printed\n     */\n",
    "111090": "\t/**\n\t * Returns the end offset of the line that contains the specified offset or\n\t * if the offset is inside a line delimiter, the end offset of the next line.\n\t *\n\t * @param offset the offset whose line end offset must be computed\n\t * @return the line end offset for the given offset\n\t * @exception BadLocationException if offset is invalid in the current document\n\t */\n",
    "111140": "    /**\n     * Removes the listener from the collection of listeners who will be\n     * notified when the receiver's selection changes.\n     * \n     * @param listener\n     *            the listener which should no longer be notified\n     * \n     * @exception IllegalArgumentException\n     *                <ul>\n     *                <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n     *                </ul>\n     * @exception SWTException\n     *                <ul>\n     *                <li>ERROR_WIDGET_DISPOSED - if the receiver has been\n     *                disposed</li>\n     *                <li>ERROR_THREAD_INVALID_ACCESS - if not called from the\n     *                thread that created the receiver</li>\n     *                </ul>\n     * \n     * @see SelectionListener\n     * @see #addSelectionListener(SelectionListener)\n     * \n     * @since 3.0\n     */\n",
    "111158": "    /**\n     * Returns the column over which the TableCursor is positioned.\n     * \n     * @return the column for the current position\n     * \n     * @exception SWTException\n     *                <ul>\n     *                <li>ERROR_WIDGET_DISPOSED - if the receiver has been\n     *                disposed</li>\n     *                <li>ERROR_THREAD_INVALID_ACCESS - if not called from the\n     *                thread that created the receiver</li>\n     *                </ul>\n     */\n",
    "111164": "    /**\n     * Returns the row over which the TableCursor is positioned.\n     * \n     * @return the item for the current position\n     * \n     * @exception SWTException\n     *                <ul>\n     *                <li>ERROR_WIDGET_DISPOSED - if the receiver has been\n     *                disposed</li>\n     *                <li>ERROR_THREAD_INVALID_ACCESS - if not called from the\n     *                thread that created the receiver</li>\n     *                </ul>\n     */\n",
    "111307": "\t/**\n\t *  Add a CheckoutModuleData in the CheckoutData object\n\t *\n\t * @param  iModuleName          The name of the module to be added\n\t * @param  iCheckoutModuleData  The CheckoutData related to this module\n\t */\n",
    "111311": "\t/**\n\t *  remove a CheckoutModuleData in the CheckoutData object\n\t *\n\t * @param  iModuleName  Description of the Parameter\n\t */\n",
    "111347": "\t/**\n\t *  Check if all CheckoutModules are correct, i.e. if each CheckoutModuleDataField of each CheckoutModuleData for each CheckoutModule is valid.\n\t *\n\t * @return    true if all CheckoutModuleDataFields are correct, otherwise false.\n\t * @see CheckoutModuleData#isCorrect()\n\t */\n",
    "111351": "\t/**\n\t *  Sets all CheckoutModuleDataFields (for each module) to UNVERIFIED\n\t */\n",
    "111355": "\t/**\n\t *  Returns the max step of the checkout.\n\t * \n\t *  Each module has fields, and each field is associated with a step.\n\t * This method asks each module his max step, and returns the max step for all modules.\n\t *\n\t * @return    The maxStep for all modules\n\t */\n",
    "111357": "\t/**\n\t *  Returns the CheckoutModuleData associated with the specified module name \n\t *\n\t * @param  iKey  The name of the CheckoutModule\n\t * @return       The moduleData for this CheckoutModule, null if the module doesn't exist\n\t */\n",
    "111361": "\t/**\n\t *  Gets the modulesIterator attribute of the CheckoutData object\n\t *\n\t * @return    The modulesIterator value\n\t */\n",
    "111367": "\t/**\n\t *  Adds a feature to the InitError attribute of the CheckoutData object\n\t *\n\t * @param  iMap  The feature to be added to the InitError attribute\n\t */\n",
    "111371": "\t/**\n\t *  Clear all initialisation errors\n\t *  This method is called at the end of streamError().\n\t */\n",
    "111373": "\t/**\n\t *  Sets the label attribute of the CheckoutModuleDataField object\n\t *\n\t * @param  iLocale  The new label value\n\t * @param  iString  The new label value\n\t */\n",
    "111376": "\t/**\n\t *  Check if ther is no initialisation error\n\t *\n\t * @return    true if ther is no initialisation error, or false otherwise\n\t */\n",
    "111378": "\t/**\n\t *  Gets the label attribute of the CheckoutModuleDataField object\n\t *\n\t * @param  iLocale  Description of the Parameter\n\t * @return          The label value\n\t */\n",
    "111385": "\t/**\n\t *  Sets the askedStep attribute of the CheckoutData object\n\t *\n\t * @param  iStep  The new askedStep value\n\t */\n",
    "111386": "\t/**\n\t *  Sets the message attribute of the CheckoutModuleDataField object\n\t *\n\t * @param  iLocale  The new message value\n\t * @param  iString  The new message value\n\t */\n",
    "111387": "\t/**\n\t *  Gets the askedStep attribute of the CheckoutData object\n\t *\n\t * @return    The askedStep value\n\t */\n",
    "111389": "\t/**\n\t *  Gets the message attribute of the CheckoutModuleDataField object\n\t *\n\t * @param  iLocale  Description of the Parameter\n\t * @return          The message value\n\t */\n",
    "111390": "\t/**\n\t *  Sets the externalPayment attribute of the CheckoutData object\n\t *  If external payment is not null, then the PaymentProcessorCheckoutModule need to stream all the mandatory informations for the payment (URI, amount, company accounts...)with the setPaymentParameters(Map) method. \n\t *\n\t * @param  iExternalPayment  The new externalPayment value\n\t * @see #setPaymentParameters(Map)\n\t */\n",
    "111392": "\t/**\n\t *  Gets the externalPayment attribute of the CheckoutData object\n\t *\n\t * @return    The externalPayment value\n\t */\n",
    "111395": "\t/**\n\t *  Sets the orderLogStatus attribute of the CheckoutData object\n\t *  Used by the OrderLogCheckoutModule to know if the orderlog (in db for example) is correct. \n\t *\n\t * @param  iLog  The new orderLogStatus value\n\t */\n",
    "111396": "\t/**\n\t *  Sets the status attribute of the CheckoutModuleDataField object\n\t *\n\t * @param  iStatus  The new status value\n\t */\n",
    "111398": "\t/**\n\t *  Clear the orderLogStatus attribute.\n\t */\n",
    "111399": "\t/**\n\t *  Gets the status attribute of the CheckoutModuleDataField object\n\t *\n\t * @return    The status value\n\t */\n",
    "111400": "\t/**\n\t *  Gets the orderLogStatus attribute of the CheckoutData object\n\t *\n\t * @return    The orderLogStatus value\n\t */\n",
    "111402": "\t/**\n\t *  Sets the type attribute of the CheckoutModuleDataField object\n\t *\n\t * @param  iType  The new type value\n\t */\n",
    "111403": "\t/**\n\t *  Sets the orderNumber attribute of the CheckoutData object\n\t *\n\t * @param  iOrderNumber  The new orderNumber value\n\t */\n",
    "111406": "\t/**\n\t *  Gets the orderNumber attribute of the CheckoutData object\n\t *\n\t * @return    The orderNumber value\n\t */\n",
    "111431": "\t/**\n\t** Generates a string with a utility string buffer\n\t**/\n",
    "111456": "\t/**\n\t *  Gets the documentViewer attribute of the Thing object\n\t *\n\t * @param  ioDocumentData  Description of the Parameter\n\t * @return                 The documentViewer value\n\t */\n",
    "111462": "\t/**\n\t *  Gets the ontologyName name of the Thing object\n\t *\n\t * @return    The string \"thing\"\n\t */\n",
    "111468": "\t/**\n\t *  Always return null\n\t *\n\t * @param  iViewer           viewer object\n\t * @param  ioConnection      SQL connection\n\t * @param  uStringBuffer     StringBuffer utility object\n\t * @return                   null\n\t * @exception  SQLException  Description of the Exception\n\t */\n",
    "111500": "\t/**\n\t** Get initparameters in web.xml, convert the name of the parameters, and put the name and the value in jsMap\n\t**/\n",
    "111537": "\t/**\n\t*\tset Doc810 e-mail header\n\t*/\n",
    "111728": "\t/**\n\t* Get all Items.\n\t*/\n",
    "111967": "    /**\n     * Returns a dataisland object \n     * @param dataislandPrimitiveName the name of the dataisland primitive\n     * @param value object to be converted\n     * @return Returns a dataisland object corresponding to the primitive name\n     */\n",
    "112013": "    /**\n     * Iterates through a collection of potentially localizable (LocalizableEntity).\n     *\n     * @param localizableObjectCollection\n     * @param localizationContext\n     */\n",
    "112042": "    /**\n     * Compares this object with the specified object for order. Returns a\n     * negative integer, zero, or a positive integer as this object is less\n     * than, equal to, or greater than the specified object.\n     * @param o the Object to be compared.\n     * @return a negative integer, zero, or a positive integer as this object\n     *         is less than, equal to, or greater than the specified object\n     */\n",
    "112048": "    /**\n     * Compares this object with the specified object for order. Returns a\n     * negative integer, zero, or a positive integer as this object is less\n     * than, equal to, or greater than the specified object.\n     * @param o the Object to be compared.\n     * @return a negative integer, zero, or a positive integer as this object\n     *         is less than, equal to, or greater than the specified object\n     */\n",
    "112082": "\t/**\n\t* Retrieves the data island object that is able to generate the desired document.\n\t*\n\t* @return the data object.\n\t*/\n",
    "112083": "\t/**\n\t* Retrieves the key object that uniquely represent the information set of the document.\n\t*\n\t* @return the data object.\n\t*/\n",
    "112084": "\t/**\n\t* Sets the document type for this instance.\n\t*\n\t* Also invalidate the cached string representation.\n\t*\n\t* @param iDocumentType The document type for this instance.\n\t*/\n",
    "112085": "\t/**\n\t* Retrieves the last modification date of the document generated from the given parameters.\n\t*\n\t* @return the last modification date.\n\t*/\n",
    "112088": "\t/**\n\t* Gets the document type for this instance.\n\t*\n\t* @return The document type for this instance.\n\t*/\n",
    "112089": "\t/**\n\t* Retrieves the view of this document's serial number.\n\t*\n\t* @return the view object.\n\t*/\n",
    "112091": "\t/**\n\t* Retrieves the locale of this document's serial number.\n\t*\n\t* @return the locale object.\n\t*/\n",
    "112093": "\t/**\n\t* Sets the locale for this instance.\n\t*\n\t* Also invalidate the cached string representation.\n\t*\n\t* @param iLocale The locale for this instance.\n\t*/\n",
    "112094": "\t/**\n\t* Retrieves the document type of this document's serial number.\n\t*\n\t* @return the document type object.\n\t*/\n",
    "112095": "\t/**\n\t* Sets the data object.\n\t*\n\t* @param iDataIsland The data island object that is able to generate the desired document.\n\t*/\n",
    "112097": "\t/**\n\t* Sets the data object.\n\t*\n\t* @param iData The document data object.\n\t*/\n",
    "112098": "\t/**\n\t* Gets the locale for this instance.\n\t*\n\t* @return The locale for this instance.\n\t*/\n",
    "112099": "\t/**\n\t* Sets the last modification date of the document generated from the given parameters.\n\t*\n\t* @param iLastModified the last modification date.\n\t*\n\t* @throw IllegalArgumentException if the last changed date is null.\n\t*/\n",
    "112100": "\t/**\n\t* Sets the key object that uniquely represent the information set of the document.\n\t*\n\t* @param iKey The data key.\n\t*/\n",
    "112101": "\t/**\n\t* Sets the mode for this instance.\n\t*\n\t* Also invalidate the cached string representation.\n\t*\n\t* @param iMode The mode for this instance.\n\t*/\n",
    "112103": "\t/**\n\t* Sets the view of this document's serial number.\n\t*\n\t* @param iview The document locale to be set for this instance of the data island object.\n\t*\n\t* @throw IllegalArgumentException if any of the view or its locale or document type are null.\n\t*/\n",
    "112105": "\t/**\n\t* Gets the mode for this instance.\n\t*\n\t* @return The mode string for this instance.\n\t*/\n",
    "112112": "\t/**\n\t* Generate a textual representattion of this view.\n\t*\n\t* @return a String representation of this view\n\t*/\n",
    "112119": "\t/**\n\t* Indicates whether some other object is \"equal to\" this view.\n\t*\n\t* @param obj The object to be tested.\n\t*\n\t* @return true if both objects are equal\n\t*/\n",
    "112125": "\t/**\n\t* Returns the hash code value for this view (based on the string representation).\n\t*\n\t* @return the hash code value for this view.\n\t*/\n",
    "112148": "\t/**\n\t* Returns a view that with an XML document type, generated from a locale.\n\t*\n\t* @param locale The reference locale.\n\t*\n\t* @return the view.\n\t*/\n",
    "112161": "\t/**\n\t* Returns a list of locales extracted from a list of views.\n\t*\n\t* @param iViews The reference views.\n\t*\n\t* @return the list of locales.\n\t*\n\t* @see java.util.Locale\n\t*/\n",
    "112222": "\t/**\n\t* Internal initialization method.\n\t*\n\t* <p>All of the public constructors invoke this method.</p>\n\t*\n\t* @param oWriter The output destination. Throws IllegalArgumentException.\n\t*/\n",
    "112223": "\t/**\n\t* Return true if both objects are either null or equal (equals() function)\n\t*\n\t* @return true if both objects match.\n\t*/\n",
    "112224": "\t/**\n\t* Internal initialization method.\n\t*\n\t* <p>All of the public constructors invoke this method.</p>\n\t*\n\t* @param oWriter The output destination. Throws IllegalArgumentException.\n\t*/\n",
    "112227": "    /**\n    * Gets the query string.\n    *\n    * @return the query string or <code>null</code> if there is no parameter specified.\n    */\n",
    "112228": "\t/**\n\t* Set a new output destination for the document.\n\t*\n\t* @param oWriter The output destination.\n\t*/\n",
    "112236": "\t/**\n\t* Initializes the dataisland instance with the provided parameters.\n\t*\n\t* NOTE : this implementation simply does nothing.\n\t*\n\t* @param iParameters The initialization parameters for this data island instance.\n\t*/\n",
    "112249": "\t/**\n\t** Gets the DataIsland Includer context for this servlet concext\n\t**/\n",
    "112269": "\t/**\n\t* Returns the SAX2 content handler for the viewer.\n\t*/\n",
    "112277": "\t/**\n\t* Gets the best view for this viewer from a list of views.\n\t*/\n",
    "112278": "\t/**\n\t* Gets the best locale for this viewer from a list of locales.\n\t*/\n",
    "112282": "\t/**\n\t* Returns the SAX2 content handler for the viewer.\n\t*/\n",
    "112299": "\t/**\n\t** Remove the given parameter name from the reserved name list.\n\t**/\n",
    "112304": "\t/**\n\t* Sets the name  (root element type, or if is not xml, its extension).\n\t*\n\t* @param iName The name for this document type.\n\t*/\n",
    "112308": "\t/**\n\t* Indicates whether some other object is \"equal to\" this document type.\n\t*\n\t* @param iO - the reference object with which to compare.\n\t*\n\t* @return true if both document types are equal.\n\t*/\n",
    "112309": "\t/**\n\t* Generate a textual representattion of this document type.\n\t*\n\t* @return a String representation of this document type\n\t*/\n",
    "112330": "\t/**\n\t* Gets the directory object where the stylesheets (*.xsl) will be taken from.\n\t*\n\t*/\n",
    "112336": "\t/**\n\t* Sets the directory object where the stylesheets (*.xsl) will be taken from.\n\t*\n\t* @param iRepositoryDirectory The directory object where the stylesheets (*.xsl) will be taken from.\n\t*\n\t*/\n",
    "112338": "\t/**\n\t* Gets the common directory object where the stylesheets (*.xsl) will be taken from.\n\t*\n\t*/\n",
    "112339": "\t/**\n\t* Sets the directory object where the cache xml files will be dumped.\n\t*\n\t* @param repositoryDirectory The directory object where the cache xml files will be dumped.\n\t*/\n",
    "112342": "\t/**\n\t* Sets the directory object where the common stylesheets (*.xsl) will be taken from.\n\t*\n\t* @param iCommonRepositoryDirectory The directory object where the stylesheets (*.xsl) will be taken from.\n\t*\n\t*/\n",
    "112492": " \t/**\n    * Appends the parameters from the given query string to the given Map\n    *\n    * @param query The source query string (must not be <code>.\n    * @param parameters The destination <code>Map</map> instance.\n    */\n",
    "113156": "    /**\n     * Save detached group instance into database.\n     *\n     * @param group\n     * @return\n     * @throws org.dataisland.cms.exception.DataIslandCMSException\n     *\n     */\n",
    "113160": "    /**\n     * Fetch list of database group instances.\n     *\n     * @return\n     * @throws org.dataisland.cms.exception.DataIslandCMSException\n     *\n     */\n",
    "113162": "    /**\n     * Delete the group.\n     *\n     * @param group\n     * @throws org.dataisland.cms.exception.DataIslandCMSException\n     *\n     */\n",
    "113171": "    /**\n     * Save detached role instance into database.\n     *\n     * @param role\n     * @return\n     * @throws org.dataisland.cms.exception.DataIslandCMSException\n     *\n     */\n",
    "113174": "    /**\n     * Fetch list of database role instances.\n     *\n     * @return\n     * @throws org.dataisland.cms.exception.DataIslandCMSException\n     *\n     */\n",
    "113176": "    /**\n     * Delete the role.\n     *\n     * @param role\n     * @throws org.dataisland.cms.exception.DataIslandCMSException\n     *\n     */\n",
    "113185": "    /**\n     * Fetch list of database user instances.\n     *\n     * @return\n     * @throws DataIslandCMSException\n     */\n",
    "113188": "    /**\n     * Delete the user.\n     *\n     * @param user\n     * @throws DataIslandCMSException\n     */\n",
    "113197": "    /**\n     * Create Object from XML tag\n     * @param obj\n     * @param uctx\n     * @return\n     * @throws JiBXException\n     */\n",
    "113217": "    /**\n     * updates role bean according to actionForm\n     *\n     * @param actionForm\n     */\n",
    "113226": "    /**\n     * Populate form according to a group bean.\n     *\n     * @param actionForm\n     * @param group\n     */\n",
    "113229": "    /**\n     * Populate form according to a role bean.\n     *\n     * @param actionForm\n     * @param role\n     */\n",
    "113262": "    /**\n     * Populate form according to a user bean.\n     *\n     * @param actionForm\n     * @param user\n     */\n",
    "113265": "    /**\n     * Return a Role instance Set from an array of IDs.\n     *\n     * @param roleIds\n     * @return\n     * @throws DataIslandCMSException\n     */\n",
    "113292": "    /**\n     * The setter method for this user's id.\n     *\n     * @param id\n     */\n",
    "113294": "    /**\n     * The setter method for this user's password.\n     *\n     * @param password\n     */\n",
    "113296": "    /**\n     * The getter method for this user's login name.\n     *\n     * @return\n     * @hibernate.property unique=\"true\"\n     * column=\"LOGIN\"\n     */\n",
    "113297": "    /**\n     * The setter method for this user's login name.\n     *\n     * @param login\n     */\n",
    "113301": "    /**\n     * The getter method for this user's group.\n     *\n     * @return\n     * @hibernate.many-to-one column=\"SYSTEMGROUP_FK\"\n     */\n",
    "113303": "    /**\n     * The setter method for this user's group.\n     *\n     * @param group\n     */\n",
    "113305": "    /**\n     * The getter method for this user's email.\n     *\n     * @return\n     * @hibernate.property column=\"EMAIL\"\n     */\n",
    "113307": "    /**\n     * The setter method for this user's group.\n     *\n     * @param email\n     */\n",
    "113308": "    /**\n     * The getter method for this user's system status (system dependability).\n     *\n     * @return\n     * @hibernate.property column=\"SYSTEM\"\n     */\n",
    "113309": "    /**\n     * The setter method for this user's system status (system dependability).\n     *\n     * @param system\n     */\n",
    "113310": "    /**\n     * Get the context stack that is stored in the session\n     *\n     * @param contextStackKey\n     * @param httpServletRequest\n     * @return\n     */\n",
    "113330": "    /**\n     * Redirect the context stack key in the request\n     *\n     * @param contextStackKey\n     * @param httpServletRequest\n     */\n",
    "113347": "    /**\n     * The getter method for this group's role collection.\n     *\n     * @return\n     * @hibernate.set table=\"SYSTEMGROUP_ROLES\"\n     * @hibernate.collection-key column=\"SYSTEMGROUP_FK\"\n     * @hibernate.collection-many-to-many column=\"SYSTEMROLE_FK\"\n     * class=\"org.dataisland.cms.bean.Role\"\n     */\n",
    "113348": "    /**\n     * The getter method for this role's human readable key.\n     *\n     * @return\n     * @hibernate.property column=\"HUMAN_READABLE_KEY\"\n     */\n",
    "113349": "    /**\n     * The setter method for this group's role collection.\n     *\n     * @param roles\n     */\n",
    "113464": "   /**\n    * Add/replace the service context to the request.\n    *\n    * Service-contexts are not ordered in any way.\n    * \n    * @param serviceContext\n    */\n",
    "113470": "   /**\n    * The interceptor method that decodes the incoming message on the Server side.\n    *\n    * @param interfaceName The target interface class name\n    * @param methodName    The method name\n    * @param arguments     The arguments\n    * @param argumentTypes The argument class names to be used to identify an implementation Method\n    * @param contextList   The Context List to be set to Current\n    * @return The Response of the method invocation\n    */\n",
    "113473": "   /**\n    * This is not an action!!\n    *\n    * @return the exception to be returned to the client\n    */\n",
    "113474": "   /**\n    * This probably is only optional.\n    *\n    * @return the server object\n    */\n",
    "113475": "   /**\n    * Add/replace the service context to the request.\n    *\n    * Service-contexts are not ordered in any way.\n    *\n    * @param serviceContext\n    */\n",
    "113478": "   /**\n    * Get the Remote interface via a user-specified naming key.\n    *\n    * @param name The naming key for the remote interface\n    * @return the remote interface reference\n    * @throws net.sf.extrmi.naming.RMINamingException\n    *         if any error occurs (from server-side naming implementation)\n    */\n",
    "113480": "   /**\n    * The return value is always a stub.\n    *\n    * @param name The key\n    * @return the reference to the RMI stub of the lcoal RMI server object, return null if not found\n    */\n",
    "113481": "   /**\n    * The return value is never a stub.\n    *\n    * @param name The key\n    * @return the reference to the local RMI server object, return null if not found\n    */\n",
    "113488": "   /**\n    * Get the Remote interface via a user-specified naming key.\n    *\n    * @param name The naming key for the remote interface\n    * @return the remote interface reference\n    * @throws net.sf.extrmi.naming.RMINamingException\n    *                                  if any error occurs (from server-side naming implementation)\n    * @throws java.rmi.RemoteException\n    */\n",
    "113495": "   /**\n    * Get the Remote interface via a user-specified naming key.\n    *\n    * @param name The naming key for the remote interface\n    * @return the remote interface reference\n    * @throws net.sf.extrmi.naming.RMINamingException\n    *          if any error occurs. The implementation of this interface is\n    *          required to convert any underlying exception to this generic exception type\n    */\n",
    "113496": "   /**\n    * Returns the the cause of this exception (the <code>Throwable</code>\n    * instance wrapped in this <code>RMINamingException</code>,\n    * which may be <tt>null</tt>).\n    *\n    * @return the cause of this exception\n    */\n",
    "113499": "   /**\n    * Get the underlying RMINamingManager instance.\n    *\n    * @return The user provided naming function encapsulation\n    */\n",
    "113513": "   /**\n    * Check if the current context is of a Context id.\n    *\n    * @param id The context id\n    * @return true if the current context is of this context id\n    */\n",
    "113514": "   /**\n    * Get the xid as int value.\n    *\n    * @return xid\n    */\n",
    "113515": "   /**\n    * Get the context id.\n    *\n    * @return context id\n    */\n",
    "113517": "   /**\n    * Get the context data.\n    *\n    * @return context data. It can be null.\n    * @see #setContextData\n    */\n",
    "113520": "   /**\n    * Re-iterate what's in base class.\n    *\n    * @return null\n    */\n",
    "113521": "   /**\n    * To Object Id.\n    *\n    * @return String\n    */\n",
    "113523": "   /**\n    * the template method.\n    */\n",
    "113525": "   /**\n    * The template method.\n    */\n",
    "113526": "   /**\n    * The template method.\n    */\n",
    "113528": "   /**\n    * Start the dispatch thread.\n    */\n",
    "113537": "   /**\n    * Inovked from state sync timer.\n    */\n",
    "113545": "   /**\n    * Override to invoke the call-back.\n    */\n",
    "113546": "   /**\n      Called by JGroups to notify the target object of a change of membership.\n   */\n",
    "113547": "   /**\n    * Get the server states.\n    */\n",
    "113549": "   /** Called when a member is suspected */\n",
    "113550": "   /**\n    * Set the server states.\n    */\n",
    "113551": "   /** Block sending and receiving of messages until viewAccepted() is called */\n",
    "113552": "   /**\n    * The in-bound service-contexts. It saves the contexts to Current.\n    *\n    * @param requestInfo\n    */\n",
    "113553": "   /**\n    * The in-bound request. <p>\n    *\n    * It shall execute in the same thread as the target invocation.\n    *\n    * @param requestInfo\n    */\n",
    "113555": "   /**\n    * The out-bound reply. <p>\n    *\n    * It allows an interceptor to query reply information and modify the\n    * reply service context after the target operation has been invoked and before the\n    * reply is returned to the client. It shall execute in the same thread as the\n    * target invocation.\n    *\n    * @param requestInfo\n    */\n",
    "113557": "   /**\n    * The out-bound exception.\n    *\n    * @param requestInfo\n    */\n",
    "113561": "   /**\n    * The last request Id when this state is generated.\n    * @param requestId\n    */\n",
    "113563": "      /**\n       * Assign a new id. It is simply a counter.\n       *\n       * @return a new id\n       */\n",
    "113566": "   /**\n    * The template method.\n    */\n",
    "113570": "   /**\n    * The template method.\n    */\n",
    "113571": "   /**\n    * The in-bound reply. It allows the interceptor the query the reply information before\n    * control is returned to client.\n    *\n    * @param requestInfo\n    */\n",
    "113572": "   /**\n    * In case viewAccepted too late.\n    */\n",
    "113573": "   /**\n    * The in-bound exception.\n    *\n    * @param requestInfo\n    */\n",
    "113577": "   /**\n    * The in-bound reply. It allows the interceptor the query the reply information before\n    * control is returned to client.\n    *\n    * @param requestInfo\n    */\n",
    "113579": "   /**\n    * The in-bound exception.\n    *\n    * @param requestInfo\n    */\n",
    "113580": "   /**\n    * The in-bound reply. It allows the interceptor the query the reply information before\n    * control is returned to client.\n    *\n    * @param requestInfo\n    */\n",
    "113581": "   /**\n    * The in-bound exception.\n    *\n    * @param requestInfo\n    */\n",
    "113582": "   /**\n    * The in-bound service-contexts. It saves the contexts to Current.\n    * Only transaction-context is relevant here.\n    *\n    * @param requestInfo\n    */\n",
    "113583": "   /**\n    * The in-bound service-contexts. It saves the contexts to Current.\n    * Only transaction-context is relevant here.\n    *\n    * @param requestInfo\n    */\n",
    "113584": "   /**\n    * The in-bound request. <p>\n    *\n    * It shall execute in the same thread as the target invocation.\n    *\n    * @param requestInfo\n    */\n",
    "113585": "   /**\n    * The in-bound request. <p>\n    *\n    * It shall execute in the same thread as the target invocation.\n    *\n    * @param requestInfo\n    */\n",
    "113586": "   /**\n    * The out-bound reply. <p>\n    *\n    * It allows an interceptor to query reply information and modify the\n    * reply service context after the target operation has been invoked and before the\n    * reply is returned to the client. It shall execute in the same thread as the\n    * target invocation.\n    *\n    * @param requestInfo\n    */\n",
    "113587": "   /**\n    * The out-bound reply. <p>\n    *\n    * It allows an interceptor to query reply information and modify the\n    * reply service context after the target operation has been invoked and before the\n    * reply is returned to the client. It shall execute in the same thread as the\n    * target invocation.\n    *\n    * @param requestInfo\n    */\n",
    "113588": "   /**\n    * The out-bound exception.\n    *\n    * @param requestInfo\n    */\n",
    "113589": "   /**\n    * The out-bound exception.\n    *\n    * @param requestInfo\n    */\n",
    "113591": "   /**\n    * The object implements the writeExternal method to save its contents\n    * by calling the methods of DataOutput for its primitive values or\n    * calling the writeObject method of ObjectOutput for objects, strings,\n    * and arrays.\n    *\n    * @serialData Overriding methods should use this tag to describe\n    *             the data layout of this Externalizable object.\n    *             List the sequence of element types and, if possible,\n    *             relate the element to a public/protected field and/or\n    *             method of this Externalizable class.\n    *\n    * @param out the stream to write the object to\n    * @exception java.io.IOException Includes any I/O exceptions that may occur\n    */\n",
    "113594": "   /**\n    * The object implements the readExternal method to restore its\n    * contents by calling the methods of DataInput for primitive\n    * types and readObject for objects, strings and arrays.  The\n    * readExternal method must read the values in the same sequence\n    * and with the same types as were written by writeExternal.\n    *\n    * @param in the stream to read data from in order to restore the object\n    * @exception IOException if I/O errors occur\n    * @exception ClassNotFoundException If the class for an object being\n    *              restored cannot be found.\n    */\n",
    "113599": "   /**\n    * This is an extention. It clears the service context from the context list if any match.\n    *\n    * @param contextId\n    *\n    * @return a copy of the service context with the given id that is associated with\n    * the request. Return null otherwise.\n    */\n",
    "113602": "   /**\n    * Get the service context by contextId. The return value is a copy.\n    *\n    * @param contextId\n    *\n    * @return the service context if found, or null otherwise\n    */\n",
    "113603": "   /**\n    * Add/replace the service context.\n    *\n    * @param serviceContext\n    */\n",
    "113614": "   /**\n    * Remove a client-side request interceptor.\n    *\n    * For maintenance purpose only.\n    *\n    * @param name The interceptor name\n    */\n",
    "113615": "   /**\n    * The object implements the writeExternal method to save its contents\n    * by calling the methods of DataOutput for its primitive values or\n    * calling the writeObject method of ObjectOutput for objects, strings,\n    * and arrays.\n    *\n    * @serialData Overriding methods should use this tag to describe\n    *             the data layout of this Externalizable object.\n    *             List the sequence of element types and, if possible,\n    *             relate the element to a public/protected field and/or\n    *             method of this Externalizable class.\n    *\n    * @param out the stream to write the object to\n    * @exception java.io.IOException Includes any I/O exceptions that may occur\n    */\n",
    "113616": "   /**\n    * Get a client-side request interceptor by name.\n    *\n    * @param name The interceptor name\n    *\n    * @return the interceptor if any\n    */\n",
    "113617": "   /**\n    * The object implements the readExternal method to restore its\n    * contents by calling the methods of DataInput for primitive\n    * types and readObject for objects, strings and arrays.  The\n    * readExternal method must read the values in the same sequence\n    * and with the same types as were written by writeExternal.\n    *\n    * @param in the stream to read data from in order to restore the object\n    * @exception IOException if I/O errors occur\n    * @exception ClassNotFoundException If the class for an object being\n    *              restored cannot be found.\n    */\n",
    "113618": "   /**\n    * Get the property.\n    */\n",
    "113620": "   /**\n    * Set the property.\n    */\n",
    "113621": "   /**\n    * Remove a server-side request interceptor.\n    *\n    * For maintenance purpose only.\n    *\n    * @param name The interceptor name\n    */\n",
    "113622": "   /**\n    * Get the target Remote reference naming key.\n    */\n",
    "113623": "   /**\n    * Get a server-side request interceptor by name.\n    *\n    * @param name The interceptor name\n    *\n    * @return the interceptor if any\n    */\n",
    "113626": "   /**\n    * Add a client-side message interceptor. Only one is supported, and existing one\n    * will be overwritten.\n    *\n    * No overwritting checking here.\n    *\n    * @param interceptor\n    */\n",
    "113628": "   /**\n    * Process a reflection exception.\n    *\n    * @throws InvocationTargetException a wrapped exception\n    */\n",
    "113629": "   /**\n    * Remove the client-side message interceptor, if any.\n    *\n    * For maintenance purpose only.\n    *\n    * @param name The interceptor name, and optional for now (pass null)\n    */\n",
    "113630": "   /**\n    * Get a client-side message interceptor by name.\n    *\n    * @param name The interceptor name, optionl for now\n    *\n    * @return the interceptor if any\n    */\n",
    "113633": "   /**\n    * Get the registered client-side message interceptor.\n    *\n    * @return the registered interceptors\n    */\n",
    "113636": "   /**\n    * Add a server-side message interceptor. Only one is supported, and existing one\n    * will be overwritten.\n    *\n    * No overwritting checking here.\n    *\n    * @param interceptor\n    */\n",
    "113639": "   /**\n    * Remove the server-side message interceptor, if any.\n    *\n    * For maintenance purpose only.\n    *\n    * @param name The interceptor name, and optional for now (pass null)\n    */\n",
    "113642": "   /**\n    * Get a server-side message interceptor by name.\n    *\n    * @param name The interceptor name, optionl for now\n    *\n    * @return the interceptor if any\n    */\n",
    "113646": "   /**\n    * Get the registered server-side message interceptor.\n    *\n    * @return the registered interceptors\n    */\n",
    "113676": "   /**\n    * Get the Remote interface via a user-specified naming key.\n    *\n    * @param name The naming key for the remote interface\n    * @return the remote interface reference\n    *\n    * @throws net.sf.extrmi.naming.RMINamingException if any error occurs (from server-side naming implementation)\n    * @throws java.rmi.RemoteException\n    */\n",
    "113696": "   /**\n    * Check if the current context is of a service id.\n    *\n    * @param id The service id\n    * @return true if the current context is of this service id\n    */\n",
    "113697": "   /**\n    * Get the service id.\n    *\n    * @return service id\n    */\n",
    "113702": "   /**\n    * To Object Id.\n    *\n    * @return String\n    */\n",
    "113717": "   /**\n    * The template method.\n    */\n",
    "113719": "   /**\n    * Send (async) the invocation via multicast and receive (sync) the response via unicast.\n    */\n",
    "113725": "   /**\n    * The in-bound exception.\n    *\n    * @param requestInfo\n    */\n",
    "113729": "   /**\n    * The out-bound request.\n    *\n    * <pre>\n    * Possible functions:\n    * - modify service context.\n    * </pre>\n    *\n    * @param requestInfo\n    */\n",
    "113733": "   /**\n    * The in-bound service-contexts. It saves the contexts to Current.\n    * Only transaction-context is relevant here.\n    *\n    * @param requestInfo\n    */\n",
    "113749": "   /**\n    * This is an extention. It clears the service context from the context list if any match.\n    *\n    * @param serviceId\n    *\n    * @return a copy of the service context with the given id that is associated with\n    * the request. Return null otherwise.\n    */\n",
    "113751": "   /**\n    * Get the service context by serviceId. The return value is a copy.\n    *\n    * @param serviceId\n    *\n    * @return the service context if found, or null otherwise\n    */\n",
    "113766": "   /**\n    * The object implements the writeExternal method to save its contents\n    * by calling the methods of DataOutput for its primitive values or\n    * calling the writeObject method of ObjectOutput for objects, strings,\n    * and arrays.\n    *\n    * @serialData Overriding methods should use this tag to describe\n    *             the data layout of this Externalizable object.\n    *             List the sequence of element types and, if possible,\n    *             relate the element to a public/protected field and/or\n    *             method of this Externalizable class.\n    *\n    * @param out the stream to write the object to\n    * @exception java.io.IOException Includes any I/O exceptions that may occur\n    */\n",
    "113768": "   /**\n    * The object implements the readExternal method to restore its\n    * contents by calling the methods of DataInput for primitive\n    * types and readObject for objects, strings and arrays.  The\n    * readExternal method must read the values in the same sequence\n    * and with the same types as were written by writeExternal.\n    *\n    * @param in the stream to read data from in order to restore the object\n    * @exception IOException if I/O errors occur\n    * @exception ClassNotFoundException If the class for an object being\n    *              restored cannot be found.\n    */\n",
    "113811": "   /**\n    * Get the service context by serviceId. The return value is a copy.\n    *\n    * @param serviceId\n    *\n    * @return the service context if found, or null otherwise\n    */\n",
    "113812": "   /**\n    * Remove a client-side request interceptor.\n    *\n    * For maintenance purpose only.\n    *\n    * @param name The interceptor name\n    */\n",
    "113813": "   /**\n    * Add/replace the service context.\n    *\n    * @param serviceContext\n    */\n",
    "113817": "   /**\n    * The out-bound request.\n    *\n    * <pre>\n    * Possible functions:\n    * - modify service context.\n    * </pre>\n    *\n    * @param requestInfo\n    */\n",
    "113906": "   /**\n    * The in-bound service-contexts.\n    *\n    * @param requestInfo\n    */\n",
    "113922": "   /**\n    * The out-bound request.\n    *\n    * <pre>\n    * Possible functions:\n    * - modify service context.\n    * </pre>\n    *\n    * @param requestInfo\n    */\n",
    "113937": "   /**\n      Called by JGroups to notify the target object of a change of membership.\n   */\n",
    "113945": "   /** Block sending and receiving of messages until viewAccepted() is called */\n",
    "114218": "   /**\n    * Invoked from processMessage.\n    */\n",
    "114219": "   /**\n    * Inovked from state sync timer.\n    */\n",
    "114233": "   /**\n    * Get the server states.\n    */\n",
    "114237": "   /**\n    * Set the server states.\n    */\n",
    "114250": "   /**\n    * The template method.\n    */\n",
    "114339": "   /**\n    * The object implements the writeExternal method to save its contents\n    * by calling the methods of DataOutput for its primitive values or\n    * calling the writeObject method of ObjectOutput for objects, strings,\n    * and arrays.\n    *\n    * @serialData Overriding methods should use this tag to describe\n    *             the data layout of this Externalizable object.\n    *             List the sequence of element types and, if possible,\n    *             relate the element to a public/protected field and/or\n    *             method of this Externalizable class.\n    *\n    * @param out the stream to write the object to\n    * @exception java.io.IOException Includes any I/O exceptions that may occur\n    */\n",
    "114343": "   /**\n    * The object implements the readExternal method to restore its\n    * contents by calling the methods of DataInput for primitive\n    * types and readObject for objects, strings and arrays.  The\n    * readExternal method must read the values in the same sequence\n    * and with the same types as were written by writeExternal.\n    *\n    * @param in the stream to read data from in order to restore the object\n    * @exception IOException if I/O errors occur\n    * @exception ClassNotFoundException If the class for an object being\n    *              restored cannot be found.\n    */\n",
    "114411": "   /**\n    * The object implements the writeExternal method to save its contents\n    * by calling the methods of DataOutput for its primitive values or\n    * calling the writeObject method of ObjectOutput for objects, strings,\n    * and arrays.\n    *\n    * @serialData Overriding methods should use this tag to describe\n    *             the data layout of this Externalizable object.\n    *             List the sequence of element types and, if possible,\n    *             relate the element to a public/protected field and/or\n    *             method of this Externalizable class.\n    *\n    * @param out the stream to write the object to\n    * @exception java.io.IOException Includes any I/O exceptions that may occur\n    */\n",
    "114415": "   /**\n    * The object implements the readExternal method to restore its\n    * contents by calling the methods of DataInput for primitive\n    * types and readObject for objects, strings and arrays.  The\n    * readExternal method must read the values in the same sequence\n    * and with the same types as were written by writeExternal.\n    *\n    * @param in the stream to read data from in order to restore the object\n    * @exception IOException if I/O errors occur\n    * @exception ClassNotFoundException If the class for an object being\n    *              restored cannot be found.\n    */\n",
    "114539": "   /**\n    * Get the Remote interface via a user-specified naming key.\n    *\n    * @param name The naming key for the remote interface\n    * @return the remote interface reference\n    * @throws net.sf.extrmi.naming.RMINamingException\n    *         if any error occurs (from server-side naming implementation)\n    */\n",
    "114544": "   /**\n    * Get the Remote interface via a user-specified naming key.\n    *\n    * @param name The naming key for the remote interface\n    * @return the remote interface reference\n    * @throws net.sf.extrmi.naming.RMINamingException\n    *         if any error occurs (from server-side naming implementation)\n    */\n",
    "114549": "   /**\n    * The object group id this RMI server 0bject is associated with. This is\n    * considered an application concern in this framework.\n    *\n    * @param name The key of the server object\n    *\n    * @return its associated object group id, null if not specified\n    */\n",
    "114557": "   /**\n    * A new coordinator is installed - indicating a Home naming change.\n    */\n",
    "114560": "   /**\n    * A new coordinator is installed - indicating a Home naming change.\n    */\n",
    "114576": "    /**\n     * Method getNextException\n     *\n     *\n     * @return\n     *\n     */\n",
    "114578": "    /**\n     * Method setLogTarget\n     *\n     *\n     * @param target The the new log destination to be used.\n     *\n     */\n",
    "114579": "    /**\n     * Method getLogTarget\n     *\n     *\n     * @return The PrintStream used as the current log target\n     *\n     */\n",
    "114583": "    /**\n     * Method printStackTrace\n     *\n     *\n     * @param e\n     *\n     */\n",
    "114593": "    /**\n     * Method printStackTrace\n     *\n     *\n     * @param e\n     *\n     */\n",
    "114632": "   /**\n    * Get the local naming interface.\n    */\n",
    "114648": "   /**\n    * Check the object group, if already discovered.\n    *\n    * @param grpId\n    */\n",
    "114649": "   /**\n    * Check the object group queue.\n    *\n    * @param grpId\n    * @return an existing one or a new one\n    */\n",
    "114652": "   /**\n    * Clear the object group queue.\n    *\n    * @param grpId\n    * @return true if queue is actually empty\n    */\n",
    "114657": "   /**\n    * Override to invoke the call-back.\n    */\n",
    "114665": "   /**\n    * Set the server states.\n    */\n",
    "114671": "      /**\n       * Stop the thread in a safe manner.\n       * <p/>\n       * We don't interrupt the handler directly, which may be in application code.\n       */\n",
    "114682": "   /**\n    * In case viewAccepted too late.\n    */\n",
    "114702": "   /**\n    * Upon each view/coordinator change, register all the local stubs with the coordinator.\n    *\n    * @param serverId The server Id\n    * @param mgrProxyStub The mgr proxy stub\n    *\n    * @throws RemoteException\n    */\n",
    "114832": "\t\t/**\n\t\t* Slightly different symantics than normal read just for convenience.  This\n\t\t* is guaranteed to read _buffer.length many bytes from the stream (as opposed\n\t\t* to reading \"up to\" _buffer.length many bytes from the stream.\n\t\t*/\n",
    "114855": "\t/**\n\t * Copies the components of this vector into the specified array. The \n\t * item at index <tt>k</tt> in this vector is copied into component \n\t * <tt>k</tt> of <tt>anArray</tt>. The array must be big enough to hold \n\t * all the objects in this vector, else an \n\t * <tt>IndexOutOfBoundsException</tt> is thrown.\n\t *\n\t * @param   anArray   the array into which the components get copied.\n\t * @throws  NullPointerException if the given array is null.\n\t */\n",
    "114860": "\t/**\n\t * Trims the capacity of this vector to be the vector's current \n\t * size. If the capacity of this vector is larger than its current \n\t * size, then the capacity is changed to equal the size by replacing \n\t * its internal data array, kept in the field <tt>elementData</tt>, \n\t * with a smaller one. An application can use this operation to \n\t * minimize the storage of a vector. \n\t */\n",
    "114869": "\t/**\n\t * Increases the capacity of this vector, if necessary, to ensure \n\t * that it can hold at least the number of components specified by \n\t * the minimum capacity argument.\n\t *\n\t * <p>If the current capacity of this vector is less than\n\t * <tt>minCapacity</tt>, then its capacity is increased by replacing its\n\t * internal data array, kept in the field <tt>elementData</tt>, with a\n\t * larger one.  The size of the new data array will be the old size plus\n\t * <tt>capacityIncrement</tt>, unless the value of\n\t * <tt>capacityIncrement</tt> is less than or equal to zero, in which case\n\t * the new capacity will be twice the old capacity; but if this new size\n\t * is still smaller than <tt>minCapacity</tt>, then the new capacity will\n\t * be <tt>minCapacity</tt>.\n\t *\n\t * @param minCapacity the desired minimum capacity.\n\t */\n",
    "114873": "\t/** Determines the ordering of objects in this priority queue.  Subclasses\n\t  must define this one method. */\n",
    "114874": "\t/**\n\t * This implements the unsynchronized semantics of ensureCapacity.\n\t * Synchronized methods in this class can internally call this \n\t * method for ensuring capacity without incurring the cost of an \n\t * extra synchronization.\n\t *\n\t * @see java.util.Vector#ensureCapacity(int)\n\t */\n",
    "114882": "\t/**\n\t * Converts the buffer's contents into a string, translating bytes into\n\t * characters according to the platform's default character encoding.\n\t *\n\t * @return String translated from the buffer's contents.\n\t * @since   JDK1.1\n\t */\n",
    "114883": "\t/**\n\t * Sets the size of this vector. If the new size is greater than the \n\t * current size, new <code>null</code> items are added to the end of \n\t * the vector. If the new size is less than the current size, all \n\t * components at index <code>newSize</code> and greater are discarded.\n\t *\n\t * @param   newSize   the new size of this vector.\n\t * @throws  ArrayIndexOutOfBoundsException if new size is negative.\n\t */\n",
    "114886": "\t/**\n\t * Converts the buffer's contents into a string, translating bytes into\n\t * characters according to the specified character encoding.\n\t *\n\t * @param   enc  a character-encoding name.\n\t * @return String translated from the buffer's contents.\n\t * @throws UnsupportedEncodingException\n\t *         If the named encoding is not supported.\n\t * @since   JDK1.1\n\t */\n",
    "114889": "\t/**\n\t * Creates a newly allocated string. Its size is the current size of\n\t * the output stream and the valid contents of the buffer have been\n\t * copied into it. Each character <i>c</i> in the resulting string is\n\t * constructed from the corresponding element <i>b</i> in the byte\n\t * array such that:\n\t * <blockquote><pre>\n\t *     c == (char)(((hibyte &amp; 0xff) &lt;&lt; 8) | (b &amp; 0xff))\n\t * </pre></blockquote>\n\t *\n\t * @deprecated This method does not properly convert bytes into characters.\n\t * As of JDK&nbsp;1.1, the preferred way to do this is via the\n\t * <code>toString(String enc)</code> method, which takes an encoding-name\n\t * argument, or the <code>toString()</code> method, which uses the\n\t * platform's default character encoding.\n\t *\n\t * @param      hibyte    the high byte of each resulting Unicode character.\n\t * @return     the current contents of the output stream, as a string.\n\t * @see        java.io.ByteArrayOutputStream#size()\n\t * @see        java.io.ByteArrayOutputStream#toString(String)\n\t * @see        java.io.ByteArrayOutputStream#toString()\n\t */\n",
    "114890": "\t/**\n\t * Returns the current capacity of this vector.\n\t *\n\t * @return  the current capacity (the length of its internal \n\t *          data array, kept in the field <tt>elementData</tt> \n\t *          of this vector).\n\t */\n",
    "114892": "\t/**\n\t * Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in\n\t * this class can be called after the stream has been closed without\n\t * generating an <tt>IOException</tt>.\n\t * <p>\n\t *\n\t */\n",
    "114900": "\t/**\n\t * Returns the number of components in this vector.\n\t *\n\t * @return  the number of components in this vector.\n\t */\n",
    "114902": "    /**\n     * Sets the body object for this fragment. The body object contains the\n     * actual information for the fragment.\n     *\n     * @param body the body object\n     */\n",
    "114903": "    /**\n     * Returns the body object for this fragment. The body object contains the\n     * actual information for the fragment.\n     *\n     * @return the body object\n     */\n",
    "114905": "    /**\n     * Returns true if this object and its body equals the argument and its\n     * body. this object is equal if and only if they are the same class and\n     * have the same <code>getIdentifier</code> id string.\n     *\n     * @param obj object to determine equality of\n     *\n     * @return true if this object and its body equals the argument and its\n     *         body.\n     */\n",
    "114906": "\t/**\n\t * Tests if this vector has no components.\n\t *\n\t * @return  <code>true</code> if and only if this vector has \n\t *          no components, that is, its size is zero;\n\t *          <code>false</code> otherwise.\n\t */\n",
    "114908": "\t/**\n\t * Tests if the specified object is a component in this vector.\n\t *\n\t * @param   elem   an object.\n\t * @return  <code>true</code> if and only if the specified object \n\t * is the same as a component in this vector, as determined by the \n\t * <tt>equals</tt> method; <code>false</code> otherwise.\n\t */\n",
    "114910": "\t/**\n\t * Searches for the first occurence of the given argument, testing \n\t * for equality using the <code>equals</code> method. \n\t *\n\t * @param   elem   an object.\n\t * @return  the index of the first occurrence of the argument in this\n\t *          vector, that is, the smallest value <tt>k</tt> such that \n\t *          <tt>elem.equals(elementData[k])</tt> is <tt>true</tt>; \n\t *          returns <code>-1</code> if the object is not found.\n\t * @see     Object#equals(Object)\n\t */\n",
    "114913": "\t/**\n\t * Searches for the first occurence of the given argument, beginning \n\t * the search at <code>index</code>, and testing for equality using \n\t * the <code>equals</code> method. \n\t *\n\t * @param   elem    an object.\n\t * @param   index   the non-negative index to start searching from.\n\t * @return  the index of the first occurrence of the object argument in\n\t *          this vector at position <code>index</code> or later in the\n\t *          vector, that is, the smallest value <tt>k</tt> such that \n\t *          <tt>elem.equals(elementData[k]) && (k &gt;= index)</tt> is \n\t *          <tt>true</tt>; returns <code>-1</code> if the object is not \n\t *          found. (Returns <code>-1</code> if <tt>index</tt> &gt;= the\n\t *          current size of this <tt>Vector</tt>.)\n\t * @exception  IndexOutOfBoundsException  if <tt>index</tt> is negative.\n\t * @see     Object#equals(Object)\n\t */\n",
    "114916": "\t/**\n\t * Returns the index of the last occurrence of the specified object in\n\t * this vector.\n\t *\n\t * @param   elem   the desired component.\n\t * @return  the index of the last occurrence of the specified object in\n\t *          this vector, that is, the largest value <tt>k</tt> such that \n\t *          <tt>elem.equals(elementData[k])</tt> is <tt>true</tt>; \n\t *          returns <code>-1</code> if the object is not found.\n\t */\n",
    "114917": "\t/**\n\t * Searches backwards for the specified object, starting from the \n\t * specified index, and returns an index to it. \n\t *\n\t * @param  elem    the desired component.\n\t * @param  index   the index to start searching from.\n\t * @return the index of the last occurrence of the specified object in this\n\t *          vector at position less than or equal to <code>index</code> in\n\t *          the vector, that is, the largest value <tt>k</tt> such that \n\t *          <tt>elem.equals(elementData[k]) && (k &lt;= index)</tt> is \n\t *          <tt>true</tt>; <code>-1</code> if the object is not found.\n\t *          (Returns <code>-1</code> if <tt>index</tt> is negative.)\n\t * @exception  IndexOutOfBoundsException  if <tt>index</tt> is greater\n\t *             than or equal to the current size of this vector.\n\t */\n",
    "114920": "\t/**\n\t * Returns the component at the specified index.<p>\n\t *\n\t * This method is identical in functionality to the get method\n\t * (which is part of the List interface).\n\t *\n\t * @param      index   an index into this vector.\n\t * @return     the component at the specified index.\n\t * @exception  ArrayIndexOutOfBoundsException  if the <tt>index</tt> \n\t *             is negative or not less than the current size of this \n\t *             <tt>Vector</tt> object.\n\t *             given.\n\t * @see\t   #get(int)\n\t * @see\t   List\n\t */\n",
    "114922": "    /**\n     * Sets the filename tag for this MP3 File. Refer to\n     * <code>TagUtilities.parseFileName</code> and\n     * <code>TagUtilities.createID3v2Tag</code> for more information about\n     * parsing file names into <code>ID3v2_4</code> objects.\n     *\n     * @param filenameTag parsed <code>ID3v2_4</code> filename tag\n     */\n",
    "114923": "\t/**\n\t * Returns the first component (the item at index <tt>0</tt>) of \n\t * this vector.\n\t *\n\t * @return     the first component of this vector.\n\t * @exception  NoSuchElementException  if this vector has no components.\n\t */\n",
    "114924": "\t/**\n\t * Returns the last component of the vector.\n\t *\n\t * @return  the last component of the vector, i.e., the component at index\n\t *          <code>size()&nbsp;-&nbsp;1</code>.\n\t * @exception  NoSuchElementException  if this vector is empty.\n\t */\n",
    "114926": "    /**\n     * Sets the filename tag for this MP3 File. Refer to\n     * <code>TagUtilities.parseFileName</code> and\n     * <code>TagUtilities.createID3v2Tag</code> for more information about\n     * parsing file names into <code>ID3v2_4</code> objects.\n     *\n     * @return parsed <code>ID3v2_4</code> filename tag\n     */\n",
    "114927": "\t/**\n\t * Sets the component at the specified <code>index</code> of this \n\t * vector to be the specified object. The previous component at that \n\t * position is discarded.<p>\n\t *\n\t * The index must be a value greater than or equal to <code>0</code> \n\t * and less than the current size of the vector. <p>\n\t *\n\t * This method is identical in functionality to the set method\n\t * (which is part of the List interface). Note that the set method reverses\n\t * the order of the parameters, to more closely match array usage.  Note\n\t * also that the set method returns the old value that was stored at the\n\t * specified position.\n\t *\n\t * @param      obj     what the component is to be set to.\n\t * @param      index   the specified index.\n\t * @exception  ArrayIndexOutOfBoundsException  if the index was invalid.\n\t * @see        #size()\n\t * @see        List\n\t * @see\t   #set(int, java.lang.Object)\n\t */\n",
    "114929": "\t/**\n\t * Deletes the component at the specified index. Each component in \n\t * this vector with an index greater or equal to the specified \n\t * <code>index</code> is shifted downward to have an index one \n\t * smaller than the value it had previously. The size of this vector \n\t * is decreased by <tt>1</tt>.<p>\n\t *\n\t * The index must be a value greater than or equal to <code>0</code> \n\t * and less than the current size of the vector. <p>\n\t *\n\t * This method is identical in functionality to the remove method\n\t * (which is part of the List interface).  Note that the remove method\n\t * returns the old value that was stored at the specified position.\n\t *\n\t * @param      index   the index of the object to remove.\n\t * @exception  ArrayIndexOutOfBoundsException  if the index was invalid.\n\t * @see        #size()\n\t * @see\t   #remove(int)\n\t * @see\t   List\n\t */\n",
    "114930": "    /**\n     * Sets all four (id3v1, lyrics3, filename, id3v2) tags in this instance to\n     * the <code>frame</code> argument if the tag exists. This method does not\n     * use the options inside the <code>tagOptions</code> object.\n     *\n     * @param frame frame to set / replace in all four tags.\n     *\n     * @todo this method is very inefficient.\n     */\n",
    "114934": "\t/**\n\t * Inserts the specified object as a component in this vector at the \n\t * specified <code>index</code>. Each component in this vector with \n\t * an index greater or equal to the specified <code>index</code> is \n\t * shifted upward to have an index one greater than the value it had \n\t * previously. <p>\n\t *\n\t * The index must be a value greater than or equal to <code>0</code> \n\t * and less than or equal to the current size of the vector. (If the\n\t * index is equal to the current size of the vector, the new element\n\t * is appended to the Vector.)<p>\n\t *\n\t * This method is identical in functionality to the add(Object, int) method\n\t * (which is part of the List interface). Note that the add method reverses\n\t * the order of the parameters, to more closely match array usage.\n\t *\n\t * @param      obj     the component to insert.\n\t * @param      index   where to insert the new component.\n\t * @exception  ArrayIndexOutOfBoundsException  if the index was invalid.\n\t * @see        #size()\n\t * @see\t   #add(int, Object)\n\t * @see\t   List\n\t */\n",
    "114936": "\t/**\n\t * Adds the specified component to the end of this vector, \n\t * increasing its size by one. The capacity of this vector is \n\t * increased if its size becomes greater than its capacity. <p>\n\t *\n\t * This method is identical in functionality to the add(Object) method\n\t * (which is part of the List interface).\n\t *\n\t * @param   obj   the component to be added.\n\t * @see\t   #add(Object)\n\t * @see\t   List\n\t */\n",
    "114940": "\t/**\n\t * Removes the first (lowest-indexed) occurrence of the argument \n\t * from this vector. If the object is found in this vector, each \n\t * component in the vector with an index greater or equal to the \n\t * object's index is shifted downward to have an index one smaller \n\t * than the value it had previously.<p>\n\t *\n\t * This method is identical in functionality to the remove(Object) \n\t * method (which is part of the List interface).\n\t *\n\t * @param   obj   the component to be removed.\n\t * @return  <code>true</code> if the argument was a component of this\n\t *          vector; <code>false</code> otherwise.\n\t * @see\tList#remove(Object)\n\t * @see\tList\n\t */\n",
    "114942": "\t/**\n\t * Removes all components from this vector and sets its size to zero.<p>\n\t *\n\t * This method is identical in functionality to the clear method\n\t * (which is part of the List interface).\n\t *\n\t * @see\t#clear\n\t * @see\tList\n\t */\n",
    "114944": "\t/**\n\t * Returns a clone of this vector. The copy will contain a\n\t * reference to a clone of the internal data array, not a reference \n\t * to the original internal data array of this <tt>Vector</tt> object. \n\t *\n\t * @return  a clone of this vector.\n\t */\n",
    "114945": "    /**\n     * Sets the <code>ID3v1</code> tag for this object. A new\n     * <code>ID3v1_1</code> object is created from the argument and then used\n     * here.\n     *\n     * @param mp3tag Any MP3Tag object can be used and will be converted into a\n     *        new ID3v1_1 object.\n     */\n",
    "114947": "\t/**\n\t * Returns the element at the specified position in this Vector.\n\t *\n\t * @param index index of element to return.\n\t * @return object at the specified index\n\t * @exception ArrayIndexOutOfBoundsException index is out of range (index\n\t * \t\t  &lt; 0 || index &gt;= size()).\n\t * @since 1.2\n\t */\n",
    "114950": "\t/**\n\t * Replaces the element at the specified position in this Vector with the\n\t * specified element.\n\t *\n\t * @param index index of element to replace.\n\t * @param element element to be stored at the specified position.\n\t * @return the element previously at the specified position.\n\t * @exception ArrayIndexOutOfBoundsException index out of range\n\t *\t\t  (index &lt; 0 || index &gt;= size()).\n\t * @since 1.2\n\t */\n",
    "114952": "\t/**\n\t * Appends the specified element to the end of this Vector.\n\t *\n\t * @param o element to be appended to this Vector.\n\t * @return true (as per the general contract of Collection.add).\n\t * @since 1.2\n\t */\n",
    "114953": "    /**\n     * Returns the <code>ID3v1</code> tag for this object.\n     *\n     * @return the <code>ID3v1</code> tag for this object\n     */\n",
    "114954": "\t/**\n\t * Removes the first occurrence of the specified element in this Vector\n\t * If the Vector does not contain the element, it is unchanged.  More\n\t * formally, removes the element with the lowest index i such that\n\t * <code>(o==null ? get(i)==null : o.equals(get(i)))</code> (if such\n\t * an element exists).\n\t *\n\t * @param o element to be removed from this Vector, if present.\n\t * @return true if the Vector contained the specified element.\n\t * @since 1.2\n\t */\n",
    "114956": "    /**\n     * Sets the <code>ID3v2</code> tag for this object. A new\n     * <code>ID3v2_4</code> object is created from the argument and then used\n     * here.\n     *\n     * @param mp3tag Any MP3Tag object can be used and will be converted into a\n     *        new ID3v2_4 object.\n     */\n",
    "114957": "\t/**\n\t * Inserts the specified element at the specified position in this Vector.\n\t * Shifts the element currently at that position (if any) and any\n\t * subsequent elements to the right (adds one to their indices).\n\t *\n\t * @param index index at which the specified element is to be inserted.\n\t * @param element element to be inserted.\n\t * @exception ArrayIndexOutOfBoundsException index is out of range\n\t *\t\t  (index &lt; 0 || index &gt; size()).\n\t * @since 1.2\n\t */\n",
    "114962": "\t/**\n\t * Removes all of the elements from this Vector.  The Vector will\n\t * be empty after this call returns (unless it throws an exception).\n\t *\n\t * @since 1.2\n\t */\n",
    "114964": "\t/**\n\t * Compares the specified Object with this Vector for equality.  Returns\n\t * true if and only if the specified Object is also a List, both Lists\n\t * have the same size, and all corresponding pairs of elements in the two\n\t * Lists are <em>equal</em>.  (Two elements <code>e1</code> and\n\t * <code>e2</code> are <em>equal</em> if <code>(e1==null ? e2==null :\n\t * e1.equals(e2))</code>.)  In other words, two Lists are defined to be\n\t * equal if they contain the same elements in the same order.\n\t *\n\t * @param o the Object to be compared for equality with this Vector.\n\t * @return true if the specified Object is equal to this Vector\n\t */\n",
    "114965": "    /**\n     * Returns the <code>ID3v2</code> tag for this object.\n     *\n     * @return the <code>ID3v2</code> tag for this object\n     */\n",
    "114966": "\t/**\n\t * Removes from this List all of the elements whose index is between\n\t * fromIndex, inclusive and toIndex, exclusive.  Shifts any succeeding\n\t * elements to the left (reduces their index).\n\t * This call shortens the ArrayList by (toIndex - fromIndex) elements.  (If\n\t * toIndex==fromIndex, this operation has no effect.)\n\t *\n\t * @param fromIndex index of first element to be removed.\n\t * @param toIndex index after last element to be removed.\n\t */\n",
    "114978": "    /**\n     * Sets the <code>Lyrics3</code> tag for this object. A new\n     * <code>Lyrics3v2</code> object is created from the argument and then\n     * used here.\n     *\n     * @param mp3tag Any MP3Tag object can be used and will be converted into a\n     *        new Lyrics3v2 object.\n     */\n",
    "115001": "    /**\n     * Returns the <code>ID3v1</code> tag for this object.\n     *\n     * @return the <code>ID3v1</code> tag for this object\n     */\n",
    "115062": "    /**\n     * Gets the value of the frame identified by identifier\n     *\n     * @param identifier The three letter code\n     *\n     * @return The value associated with the identifier\n     */\n",
    "115072": "    /**\n     * Sets the factor to increase the id3v2 padding size. When the ID3v2 tag\n     * padding length is calculated and is not large enough to fit the current\n     * ID3v2 tag, the padding length will be multiplied by this number until\n     * it is large enough.\n     *\n     * @param mult new factor to increase the id3v2 padding size.\n     */\n",
    "115077": "    /**\n     * Returns the factor to increase the id3v2 padding size. When the ID3v2\n     * tag padding length is calculated and is not large enough to fit the\n     * current ID3v2 tag, the padding length will be multiplied by this number\n     * until it is large enough.\n     *\n     * @return the factor to increase the id3v2 padding size\n     */\n",
    "115081": "    /**\n     * Returns true if there are any unsynchronized tags in this object. A\n     * fragment is unsynchronized if it exists in two or more tags but is not\n     * equal across all of them.\n     *\n     * @return true of any fragments are unsynchronized.\n     *\n     * @todo there might be a faster way to do this, other than calling\n     *       <code>getUnsynchronizedFragments</code>\n     */\n",
    "115082": "    /**\n     * Sets the initial ID3v2 padding length. This will be the minimum padding\n     * length of the ID3v2 tag. The <code>willShorten</code> setting will not\n     * make the length shorter than this value.\n     *\n     * @param size the new initial ID3v2 padding length\n     */\n",
    "115087": "    /**\n     * Returns the initial ID3v2 padding length. This will be the minimum\n     * padding length of the ID3v2 tag. The <code>willShorten</code> setting\n     * will not make the length shorter than this value.\n     *\n     * @return the initial ID3v2 padding length\n     */\n",
    "115125": "    /**\n     * This method calls <code>toString</code> for all it's objects and appends\n     * them without any newline characters.\n     *\n     * @return brief description string\n     */\n",
    "115126": "    /**\n     * This method calls <code>toString</code> for all it's objects and appends\n     * them. It contains new line characters and is more suited for display\n     * purposes\n     *\n     * @return formatted description string\n     */\n",
    "115127": "    /**\n     * Sets the all objects of identifier type to <code>obj</code> argument.\n     *\n     * @param identifier <code>MP3Object</code> identifier\n     * @param obj new object value\n     */\n",
    "115128": "    /**\n     * Returns the object of the <code>MP3Object</code> with the specified\n     * <code>identifier</code>\n     *\n     * @param identifier <code>MP3Object</code> identifier\n     *\n     * @return the object of the <code>MP3Object</code> with the specified\n     *         <code>identifier</code>\n     */\n",
    "115132": "    /**\n     * Returns true if this instance and its entire <code>MP3Object</code>\n     * array list is a subset of the argument. This class is a subset if it is\n     * the same class as the argument.\n     *\n     * @param obj object to determine subset of\n     *\n     * @return true if this instance and its entire object array list is a\n     *         subset of the argument.\n     */\n",
    "115133": "    /**\n     * Returns true if this object and its entire <code>MP3Object</code> array\n     * list equals the argument. This object is equal to the argument if they\n     * are the same class.\n     *\n     * @param obj object to determine equality of\n     *\n     * @return true if this object and its entire <code>MP3Object</code> array\n     *         list equals the argument.\n     */\n",
    "115134": "    /**\n     * Returns an iterator of the <code>MP3Object</code> object list.\n     *\n     * @return iterator of the <code>MP3Object</code> object list.\n     */\n",
    "115138": "    /**\n     * Calls <code>toString</code> for all <code>MP3Object</code> objects and\n     * creates a string with a new line character.\n     *\n     * @return description string\n     */\n",
    "115143": "    /**\n     * Returns true if this object contains an filename pseudo-tag\n     *\n     * @return true if this object contains an filename pseudo-tag\n     */\n",
    "115147": "    /**\n     * This method is not yet supported.\n     *\n     * @throws java.lang.UnsupportedOperationException This method is not yet\n     *         supported\n     */\n",
    "115149": "    /**\n     * Returns true if this object contains an <code>Id3v1</code> tag\n     *\n     * @return true if this object contains an <code>Id3v1</code> tag\n     */\n",
    "115153": "    /**\n     * Sets the default language for any ID3v2 tag frames which require it.\n     * While the value will already exist when reading from a file, this value\n     * will be used when a new ID3v2 Frame is created from scratch.\n     *\n     * @param lang language ID, [ISO-639-2] ISO/FDIS 639-2 definition\n     */\n",
    "115161": "    /**\n     * Returns true if this object contains an <code>Id3v2</code> tag\n     *\n     * @return true if this object contains an <code>Id3v2</code> tag\n     */\n",
    "115166": "    /**\n     * Returns the default language for any ID3v2 tag frames which require it.\n     *\n     * @return language ID, [ISO-639-2] ISO/FDIS 639-2 definition\n     */\n",
    "115177": "    /**\n     * Returns true if this object contains an <code>Lyrics3</code> tag\n     *\n     * @return true if this object contains an <code>Lyrics3</code> tag\n     */\n",
    "115225": "    /**\n     * Sets if we should save the Lyrics3 field. Defaults to true.\n     *\n     * @param id Lyrics3 id string\n     * @param save true if you want to save this specific Lyrics3 field.\n     */\n",
    "115240": "    /**\n     * Returns true if we should save the Lyrics3 field asked for in the\n     * argument. Defaults to true.\n     *\n     * @param id Lyrics3 id string\n     *\n     * @return true if we should save the Lyrics3 field.\n     */\n",
    "115281": "    /**\n     * Returns the MP3 frame size for the file this object refers to. It\n     * assumes that <code>seekNextMP3Frame</code> has already been called.\n     *\n     * @return MP3 Frame size in bytes.\n     */\n",
    "115338": "    /**\n     * Sets the default play counter size for the PCNT ID3v2 frame. While the\n     * value will already exist when reading from a file, this value will be\n     * used when a new ID3v2 Frame is created from scratch.\n     *\n     * @param size the default play counter size for the PCNT ID3v2 frame\n     */\n",
    "115356": "    /**\n     * Returns the default play counter size for the PCNT ID3v2 frame.\n     *\n     * @return the default play counter size for the PCNT ID3v2 frame\n     */\n",
    "115377": "    /**\n     * Sets the default text encoding for any ID3v2 tag frames which require\n     * it. While the value will already exist when reading from a file, this\n     * value will be used when a new ID3v2 Frame is created from scratch.\n     * \n     * <P>\n     * $00   ISO-8859-1 [ISO-8859-1]. Terminated with $00.<BR> $01   UTF-16\n     * [UTF-16] encoded Unicode [UNICODE] with BOM. All strings in the same\n     * frame SHALL have the same byteorder. Terminated with $00 00.<BR> $02\n     * UTF-16BE [UTF-16] encoded Unicode [UNICODE] without BOM. Terminated\n     * with $00 00.<BR> $03   UTF-8 [UTF-8] encoded Unicode [UNICODE].\n     * Terminated with $00.<BR>\n     * </p>\n     *\n     * @param enc new default text encoding\n     */\n",
    "115386": "    /**\n     * Returns the default text encoding format for ID3v2 tags which require\n     * it.\n     * \n     * <P>\n     * $00   ISO-8859-1 [ISO-8859-1]. Terminated with $00.<BR> $01   UTF-16\n     * [UTF-16] encoded Unicode [UNICODE] with BOM. All strings in the same\n     * frame SHALL have the same byteorder. Terminated with $00 00.<BR> $02\n     * UTF-16BE [UTF-16] encoded Unicode [UNICODE] without BOM. Terminated\n     * with $00 00.<BR> $03   UTF-8 [UTF-8] encoded Unicode [UNICODE].\n     * Terminated with $00.<BR>\n     * </p>\n     *\n     * @return the default text encoding\n     */\n",
    "115399": "    /**\n     * Sets the default time stamp format for ID3v2 tags which require it.\n     * While the value will already exist when reading from a file, this value\n     * will be used when a new ID3v2 Frame is created from scratch.\n     * \n     * <P>\n     * $01  Absolute time, 32 bit sized, using MPEG frames as unit<br>\n     * $02  Absolute time, 32 bit sized, using milliseconds as unit<br>\n     * </p>\n     *\n     * @param tsf the new default time stamp format\n     */\n",
    "115416": "    /**\n     * Returns the default time stamp format for ID3v2 tags which require it.\n     * \n     * <P>\n     * $01  Absolute time, 32 bit sized, using MPEG frames as unit<br>\n     * $02  Absolute time, 32 bit sized, using milliseconds as unit<br>\n     * </p>\n     *\n     * @return the default time stamp format\n     */\n",
    "115660": "    /**\n     * Creates a new ObjectLyrics3TimeStamp object.\n     *\n     * @param timeStamp DOCUMENT ME!\n     * @param timeStampFormat DOCUMENT ME!\n     */\n",
    "115693": "    /**\n     * Returns true if the string has matching parenthesis. This method matches\n     * all four parenthesis and also enclosed parenthesis.\n     *\n     * @param str string to test\n     *\n     * @return true if the string has matching parenthesis\n     */\n",
    "115696": "    /**\n     * Reconstruct the filename that is represented by this composite.\n     *\n     * @return the filename that is represented by this composite.\n     */\n",
    "115699": "    /**\n     * Sets the composite that this tag will use.\n     *\n     * @param composite the composite that this tag will use.\n     */\n",
    "115701": "    /**\n     * Given an object, try to return it as a <code>long</code>. This tries to\n     * parse a string, and takes <code>Long, Short, Byte, Integer</code>\n     * objects and gets their value. An exception is not explicityly thrown\n     * here because it would causes too many other methods to also throw it.\n     *\n     * @param value object to find long from.\n     *\n     * @return <code>long</code> value\n     *\n     * @throws IllegalArgumentException DOCUMENT ME!\n     */\n",
    "115703": "    /**\n     * Returns the composite that this tag will use.\n     *\n     * @return the composite that this tag will use.\n     */\n",
    "115709": "    /**\n     * Sets the ID3v2 frame body that this token represents\n     *\n     * @param id3v2FrameBodyClass the ID3v2 frame body that this token\n     *        represents\n     */\n",
    "115710": "    /**\n     * Sets the frame of this tag\n     *\n     * @param frame the frame to set\n     */\n",
    "115711": "    /**\n     * Returns the ID3v2 frame body that this token represents\n     *\n     * @return the ID3v2 frame body that this token represents\n     */\n",
    "115712": "    /**\n     * Returns a frame of this tag\n     *\n     * @param identifier ID3v2_4 ID of frame to get\n     *\n     * @return a frame of this tag\n     */\n",
    "115713": "    /**\n     * Sets the token that this class contains\n     *\n     * @param token the token that this class contains\n     */\n",
    "115716": "    /**\n     * Return the token that this class contains\n     *\n     * @return the token that this class contains\n     */\n",
    "115717": "    /**\n     * Sets the ID3v2_4 representation of this tag.\n     *\n     * @param id3tag the ID3v2_4 representation of this tag\n     */\n",
    "115718": "    /**\n     * Reconstruct the filename that is represented by this composite.\n     *\n     * @return the filename that is represented by this composite.\n     */\n",
    "115720": "    /**\n     * Returns the ID3v2_4 representation of this tag\n     *\n     * @return the ID3v2_4 representation of this tag\n     */\n",
    "115721": "    /**\n     * Returns an iterator through each <code>FilenameToken</code> in this\n     * composite in the correct order for the file name.\n     *\n     * @return an iterator through each <code>FilenameToken</code> in this\n     *         composite\n     */\n",
    "115728": "    /**\n     * Returns a string containing debug information about this class\n     *\n     * @return a string containing debug information about this class\n     */\n",
    "115731": "    /**\n     * Returns true if the iteration has more elements. (In other words,\n     * returns true if next would return an element rather than throwing an\n     * exception.)\n     *\n     * @return true if the iteration has more elements\n     */\n",
    "115732": "    /**\n     * Returns the next element in the iteration.\n     *\n     * @return the next element in the iteration.\n     *\n     * @throws NoSuchElementException DOCUMENT ME!\n     */\n",
    "115734": "    /**\n     * This method is not supported in this iterator.\n     *\n     * @throws java.lang.UnsupportedOperationException This method is not\n     *         supported in this iterator\n     */\n",
    "115737": "    /**\n     * Returns true if the iteration has more elements. (In other words,\n     * returns true if next would return an element rather than throwing an\n     * exception.)\n     *\n     * @return true if the iteration has more elements\n     */\n",
    "115739": "    /**\n     * Returns the next element in the iteration.\n     *\n     * @return the next element in the iteration.\n     *\n     * @throws NoSuchElementException DOCUMENT ME!\n     */\n",
    "115742": "    /**\n     * Sets the original string that this composite represents.\n     *\n     * @param originalToken the original string that this composite represents.\n     */\n",
    "115743": "    /**\n     * Get the original string that this composite represents.\n     *\n     * @return the original string that this composite represents.\n     */\n",
    "115744": "    /**\n     * Returns true if the iteration has more elements. (In other words,\n     * returns true if next would return an element rather than throwing an\n     * exception.)\n     *\n     * @return true if the iteration has more elements\n     */\n",
    "115746": "    /**\n     * Returns the next element in the iteration.\n     *\n     * @return the next element in the iteration.\n     *\n     * @throws NoSuchElementException DOCUMENT ME!\n     */\n",
    "115748": "    /**\n     * Replace the Unix end of line character with the DOS end of line\n     * character.\n     *\n     * @param text string to search and replace\n     *\n     * @return replaced string\n     */\n",
    "115751": "    /**\n     * Sets the composite that goes between the parenthesis\n     *\n     * @param middleComposite the composite that goes between the parenthesis\n     */\n",
    "115753": "    /**\n     * Returnsthe composite that goes between the parenthesis\n     *\n     * @return the composite that goes between the parenthesis\n     */\n",
    "115754": "    /**\n     * Sets the opening parenthesis\n     *\n     * @param openDelimiter the opening parenthesis\n     */\n",
    "115756": "    /**\n     * Returns the opening parenthesis\n     *\n     * @return the opening parenthesis\n     */\n",
    "115757": "    /**\n     * Reconstruct the filename that is represented by this composite.\n     *\n     * @return the filename that is represented by this composite.\n     */\n",
    "115761": "    /**\n     * Returns an iterator through each <code>FilenameToken</code> in this\n     * composite in the correct order for the file name.\n     *\n     * @return an iterator through each <code>FilenameToken</code> in this\n     *         composite\n     */\n",
    "115763": "    /**\n     * Match all elements of this composite against the keywords for this class\n     * type found in <code>TagOptionSingleton</code>. If the\n     * <code>FilenameToken</code> matches the keyword, the token's class is\n     * set.\n     *\n     * @param id3v2FrameBodyClass Class of keywords to match against.\n     */\n",
    "115765": "    /**\n     * Match all elements of this composite against the given tag. If any\n     * element of <code>matchTag</code> matches any element of this tag's\n     * composite, then this tag's composite leaf node's class is set.\n     *\n     * @param matchTag Tag to match against\n     */\n",
    "115771": "    /**\n     * Remove all occurances of the given character from the string argument.\n     *\n     * @param str String to search\n     * @param ch character to remove\n     *\n     * @return new String without the given charcter\n     */\n",
    "115775": "    /**\n     * Sets the composite that comes after the delimiter.\n     *\n     * @param afterComposite The composite that comes after the delimiter.\n     */\n",
    "115776": "    /**\n     * Returns the composite that comes after the delimiter.\n     *\n     * @return the composite that comes after the delimiter.\n     */\n",
    "115777": "    /**\n     * Sets the composite that comes before the delimiter\n     *\n     * @param beforeComposite the composite that comes before the delimiter\n     */\n",
    "115778": "    /**\n     * Traverse the composite and set the class field to match keywords found\n     * in TagOptionSingleton.\n     *\n     * @param composite composite to update.\n     */\n",
    "115779": "    /**\n     * Returns the composite that comes before the delimiter\n     *\n     * @return the composite that comes before the delimiter\n     */\n",
    "115780": "    /**\n     * Sets the delimiter that splits the two halves of this composite\n     *\n     * @param delimiter delimiter that splits the two halves of this composite\n     */\n",
    "115781": "    /**\n     * Traverse the composite and set the class field to match frames from all\n     * three other tags that are already found in the MP3 file.\n     *\n     * @param composite composite to update\n     * @param mp3File mp3file to match all it's tags against.\n     */\n",
    "115782": "    /**\n     * Returns the delimiter that splits the two halfs of this composite\n     *\n     * @return the delimiter that splits the two halfs of this composite\n     */\n",
    "115786": "    /**\n     * Create the filename that this composite represents\n     *\n     * @return the filename that this composite represents\n     */\n",
    "115791": "    /**\n     * Returns an iterator through each <code>FilenameToken</code> in this\n     * composite in the correct order for the file name.\n     *\n     * @return an iterator through each <code>FilenameToken</code> in this\n     *         composite\n     */\n",
    "115794": "    /**\n     * Match all elements of this composite against the keywords for this class\n     * type found in <code>TagOptionSingleton</code>. If the\n     * <code>FilenameToken</code> matches the keyword, the token's class is\n     * set.\n     *\n     * @param id3v2FrameBodyClass Class of keywords to match against.\n     */\n",
    "115797": "    /**\n     * Match all elements of this composite against the given tag. If any\n     * element of <code>matchTag</code> matches any element of this tag's\n     * composite, then this tag's composite leaf node's class is set.\n     *\n     * @param matchTag Tag to match against\n     */\n",
    "115820": "    /**\n     * Capitalize the word with the first letter upper case and all others\n     * lower case.\n     *\n     * @param word word to capitalize.\n     * @param keepUppercase if true, keep a word if it is already all in\n     *        uppercase\n     *\n     * @return new capitalized word.\n     */\n",
    "116237": "    /**\n     * Adjust this position.\n     * This is useful in cases that an amount of text is inserted\n     * or removed before this position.\n     *\n     * @param adjustment amount (either positive or negative) to adjust this position.\n     * @return the DocPosition, adjusted properly.\n     */\n",
    "116238": "    /**\n     * Two DocPositions are equal iff they have the same internal position.\n     *\n     * @return if this DocPosition represents the same position as another.\n     */\n",
    "116241": "    /**\n     * A string representation useful for debugging.\n     *\n     * @return A string representing the position.\n     */\n",
    "116242": "    /**\n     * Does this Comparator equal another?\n     * Since all DocPositionComparators are the same, they\n     * are all equal.\n     *\n     * @return true for DocPositionComparators, false otherwise.\n     */\n",
    "116243": "    /**\n     * Compare two DocPositions\n     *\n     * @param o1 first DocPosition\n     * @param o2 second DocPosition\n     * @return negative if first < second, 0 if equal, positive if first > second\n     */\n",
    "116248": "\t/**\n\t * The colorer runs forever and may sleep for long periods of time. It\n\t * should be interrupted every time there is something for it to do.\n\t */\n",
    "116263": "\t/**\n\t * Color or recolor the entire document\n\t */\n",
    "116264": "\t/**\n\t * Color a section of the document. The actual coloring will start somewhere\n\t * before the requested position and continue as long as needed.\n\t * \n\t * @param position\n\t *            the starting point for the coloring.\n\t * @param adjustment\n\t *            amount of text inserted or removed at the starting point.\n\t */\n",
    "116268": "    /**\n     * Modifying the document while the reader is working is like\n     * pulling the rug out from under the reader.  Alerting the\n     * reader with this method (in a nice thread safe way, this\n     * should not be called at the same time as a read) allows\n     * the reader to compensate.\n     */\n",
    "116269": "    /**\n     * Has no effect.  This reader can be used even after\n     * it has been closed.\n     */\n",
    "116271": "    /**\n     * Save a position for reset.\n     *\n     * @param readAheadLimit ignored.\n     */\n",
    "116272": "    /**\n     * This reader support mark and reset.\n     *\n     * @return true\n     */\n",
    "116273": "    /**\n     * Read a single character.\n     *\n     * @return the character or -1 if the end of the document has been reached.\n     */\n",
    "116275": "    /**\n     * Read and fill the buffer.\n     * This method will always fill the buffer unless the end of the document is reached.\n     *\n     * @param cbuf the buffer to fill.\n     * @return the number of characters read or -1 if no more characters are available in the document.\n     */\n",
    "116276": "    /**\n     * Read and fill the buffer.\n     * This method will always fill the buffer unless the end of the document is reached.\n     *\n     * @param cbuf the buffer to fill.\n     * @param off offset into the buffer to begin the fill.\n     * @param len maximum number of characters to put in the buffer.\n     * @return the number of characters read or -1 if no more characters are available in the document.\n     */\n",
    "116281": "    /**\n     * Skip characters of input.\n     * This method will always skip the maximum number of characters unless\n     * the end of the file is reached.\n     *\n     * @param n number of characters to skip.\n     * @return the actual number of characters skipped.\n     */\n",
    "116283": "    /**\n     * Seek to the given position in the document.\n     *\n     * @param n the offset to which to seek.\n     */\n",
    "116287": "    /**\n     * Checks this token to see if it is a reserved word.\n     * Reserved words are explained in <A Href=http://java.sun.com/docs/books/jls/html/>Java\n     * Language Specification</A>.\n     *\n     * @return true if this token is a reserved word, false otherwise\n     */\n",
    "116291": "    /**\n     * Checks this token to see if it is an identifier.\n     * Identifiers are explained in <A Href=http://java.sun.com/docs/books/jls/html/>Java\n     * Language Specification</A>.\n     *\n     * @return true if this token is an identifier, false otherwise\n     */\n",
    "116294": "    /**\n     * Checks this token to see if it is a literal.\n     * Literals are explained in <A Href=http://java.sun.com/docs/books/jls/html/>Java\n     * Language Specification</A>.\n     *\n     * @return true if this token is a literal, false otherwise\n     */\n",
    "116299": "    /**\n     * Checks this token to see if it is a Separator.\n     * Separators are explained in <A Href=http://java.sun.com/docs/books/jls/html/>Java\n     * Language Specification</A>.\n     *\n     * @return true if this token is a Separator, false otherwise\n     */\n",
    "116302": "    /**\n     * Checks this token to see if it is a Operator.\n     * Operators are explained in <A Href=http://java.sun.com/docs/books/jls/html/>Java\n     * Language Specification</A>.\n     *\n     * @return true if this token is a Operator, false otherwise\n     */\n",
    "116309": "    /**\n     * Checks this token to see if it is a comment.\n     *\n     * @return true if this token is a comment, false otherwise\n     */\n",
    "116315": "    /**\n     * Checks this token to see if it is White Space.\n     * Usually tabs, line breaks, form feed, spaces, etc.\n     *\n     * @return true if this token is White Space, false otherwise\n     */\n",
    "116320": "    /**\n     * Checks this token to see if it is an Error.\n     * Unfinished comments, numbers that are too big, unclosed strings, etc.\n     *\n     * @return true if this token is an Error, false otherwise\n     */\n",
    "116325": "    /**\n     * A description of this token.  The description should\n     * be appropriate for syntax highlighting.  For example\n     * \"comment\" is returned for a comment.\n     *\n     * @return a description of this token.\n     */\n",
    "116711": "    /**\n     * Closes the lookup service.\n     */\n",
    "116716": "    /**\n     * Returns the country the IP address is in.\n     *\n     * @param ipAddress String version of an IP address, i.e. \"127.0.0.1\"\n     * @return the country the IP address is from.\n     */\n",
    "116721": "    /**\n     * Returns true if the database is the premium version.\n     *\n     * @return true if the premium version of the database.\n     */\n",
    "116722": "    /**\n     * Returns the date of the database.\n     *\n     * @return the date of the database.\n     */\n",
    "116724": "    /**\n     * Returns the country the IP address is in.\n     *\n     * @param ipAddress the IP address.\n     * @return the country the IP address is from.\n     */\n",
    "116727": "    /**\n     * Returns the ISO two-letter country code of this country.\n     *\n     * @return the country code.\n     */\n",
    "116733": "    /**\n     * Returns the country the IP address is in.\n     *\n     * @param ipAddress the IP address in long format.\n     * @return the country the IP address is from.\n     */\n",
    "116854": "\t/**\n\t * The wizard owning this page is responsible for calling this method with the\n\t * current selection. The selection is used to initialize the fields of the wizard \n\t * page.\n\t * \n\t * @param selection used to initialize the fields\n\t */\n",
    "117158": "\t/**\n\t * This method is called upon plug-in activation\n\t */\n",
    "117161": "\t/**\n\t * This method is called when the plug-in is stopped\n\t */\n",
    "117164": "\t/**\n\t * Get the root Preferences node\n\t * @return\n\t */\n",
    "117170": "\t/**\n\t * Adds a child node to this node and sets its parent link \n\t * @param child node to be added to this node\n\t */\n",
    "117172": "\t/**\n\t * Removes a chlid node from this node and removes the parent link \n\t * @param child node to be removed from this node\n\t */\n",
    "117175": "\t/** \n\t * Checks if this TreeNode has chlidren\n\t * @return true if this node has chlidren\n\t */\n",
    "117177": "\t/**\n\t * Removes all Children form this node\n\t *\n\t */\n",
    "117186": "\t/**\n\t * Sets the parent of this node\n\t * @param parent the new parent of this node\n\t */\n",
    "117188": "\t/**\n\t * Gets the parent node of this node\n\t * @return the parent of this node\n\t */\n",
    "117194": "\t/**\n\t * Returns the adapter\n\t * Required by the IAdaptable interface\n\t */\n",
    "117197": "\t/**\n\t * Add a new server to the model\n\t * @param server server to add to the tree\n\t */\t\n",
    "117204": "    /**\n\t * Disconnects and Removes a new server to the model\n\t * @param server server to remove from the tree\n\t */\t\n",
    "117208": "\t/**\n\t * Refeshes all Servers\n\t * @throws NotConnectedException\n\t * @throws CommunicationException\n\t */\n",
    "117220": "\t/**\n\t * This callback allows to create the viewer and initialize it.\n\t */\n",
    "117229": "\t/**\n\t * Hooks and registers the context menu \n\t *\n\t */\n",
    "117242": "\t/**\n\t * Invokes the methods which fill the toolbar\n\t *\n\t */\n",
    "117247": "\t/**\n\t * returns a control which consists of the ui elements of this page\n\t */\n",
    "117250": "\t/**\n\t * Fills the pulldown in the toolbar\n\t * \n\t */\n",
    "117252": "\t/**\n\t * performes the ok action for this property page\n\t */\n",
    "117262": "\t/**\n\t * Fills the toolbar\n\t * \n\t */\n",
    "117271": "\t/**\n\t * Defines the status of the available commands related to the tree entries\n\t * Updates the detail view if a new server or domain is selected\n\t * Registeres the listener for selection change evenets\n\t */\n",
    "117280": "\t/**\n\t * Helper mothod for displaying messages\n\t * @param message String to output\n\t */\n",
    "117282": "\t/**\n\t * Sets this processor's set of characters triggering the activation of the\n\t * completion proposal computation.\n\t *\n\t * @param activationSet the activation set\n\t */\n",
    "117284": "\t/**\n\t * Adds a server to the model\n\t * @param server to be added\n\t */\n",
    "117285": "\t/**\n\t * Tells this processor to restrict its proposal to those element\n\t * visible in the actual invocation context.\n\t *\n\t * @param restrict <code>true</code> if proposals should be restricted\n\t */\n",
    "117288": "\t/**\n\t * Tells this processor to order the proposals alphabetically.\n\t *\n\t * @param order <code>true</code> if proposals should be ordered.\n\t */\n",
    "117289": "\t/**\n\t * Removes the ModelChangedHandler\n\t */\n",
    "117290": "\t/**\n\t * Tells this processor to restrict is proposals to those\n\t * starting with matching cases.\n\t *\n\t * @param restrict <code>true</code> if proposals should be restricted\n\t */\n",
    "117293": "\t/**\n\t * Passing the focus request to the viewer's control.\n\t */\n",
    "117448": "    /**\n     * Update the endabled/disabled state of this Action. \n     * Overwrite it, so that the action is enabled when it\n     * makes sense\n     */\n",
    "117574": "    /**\n     * Defines the initial layout for the ChatApps perspective.  \n     *\n     * @param layout the factory used to add views to the perspective\n     */\n",
    "117883": "\t/** Opens the url <a href=\"http://www.jgpd.com/\">http://www.jgpd.com/</a>.\n\t * \n\t * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)\n\t */\n",
    "117886": "\t/** Opens the url <a href=\"http://sourceforge.net/tracker/?func=add&group_id=90011&atid=592210\">http://sourceforge.net/tracker/?func=add&group_id=90011&atid=592210</a>.\n\t * \n\t * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)\n\t */\n",
    "117898": "\t/** Remove all nodes except the root node. */\n",
    "117901": "\t/** Remove the currently selected node. */\n",
    "117904": "\t/** Add child to the currently selected node. */\n",
    "117949": "\t/**\n\t * Handles events from the editor button and from\n\t * the dialog's OK button.\n\t */\n",
    "118318": "\t/**\n\t * Create a clone of the cell. The cloning of the\n\t * user object is deferred to the cloneUserObject()\n\t * method.\n\t *\n\t * @return Object  a clone of this object.\n\t */\n",
    "118322": "\t/**\n\t * Create a clone of the user object. This is provided for\n\t * subclassers who need special cloning. This implementation\n\t * simply returns a reference to the original user object.\n\t *\n\t * @return Object  a clone of this cells user object.\n\t */\n",
    "118327": "    /**\n     * Returns the name of this algorithm.\n     */\n",
    "118332": "    /**\n     * returns the layout Algorithm\n     */\n",
    "118338": "/**\n * Transforms a string value in a boolean value. The string has be \"true\" or\n * \"false\". Lower or upper case doesn't matter.\n * \n * @param boolValue A String, consisting of the word \"true\" or \"false\".\n * @return The boolean expression of the string.\n */\n",
    "118341": "    /** \n     * Called by pressing the cancel button. Leaves the dialog without\n     * saving.\n     */\n",
    "118352": "    /**\n     * Returns true if the dialog has been canceled.\n     */\n",
    "118354": "/**\n * Sets the initial Values, gained from the {@link #config configuration} \n * into the Cells.\n * \n * @return Because the progress dialog is allready visible during the \n * initialisation, <b><code>true</code><b> is returned when cancel is pressed\n * on it.\n */\n",
    "118360": "/**\n * Sets the initial values for one Cell.\n * \n * @param view Cell, the initial values should be set for.\n */\n",
    "118368": "/**\n * Helps updating the progress dialog.\n * \n * @param phase Identifies the phase, the algorithmis doing.\n * @param round current round, the algorithm is performing\n * @param maxRound maximum number of rounds, the algorithm could perform\n */\n",
    "118372": "/**\n * Calculates the current impulse for the given cell.\n * \n * @param view Cell, the current impulse should be calculated\n * @see #computeImpulse(CellView)\n */    \n",
    "118377": "/**\n * Calculates the last impulse for the given cell. This is only nesessary while\n * initializing the cells.\n * \n * @param view Cell, the last impulse should be calculated\n * @see #computeImpulse(CellView)\n */\n",
    "118393": "    /** Closes the dialog \n     * @see #action_cancel\n     * */\n",
    "118400": "/**\n * Clears the temporary data from the cells in {@link #cellList} (all cells).\n */\n",
    "118410": "/**\n * Moves the graph to the upper left corner of the drawing space. This is done,\n * after a successfull run of the algorithm, to correct it's output.\n */\n",
    "118414": "/**\n * Computes the bounding box of the whole graph. The result is a Rectangle, \n * parallel to the X- and Y-axises of the drawing system, closing about the \n * whole graph.\n * @return Rectangle, that contains the whole graph.\n * @see #getBoundingBox(ArrayList) \n */\n",
    "118421": "/**\n * Returns the temperature of a cell contained in a given list.\n * \n * @param index Identifies the cell. This is the index of the cell in \n * a given list of CellViews\n * @param list List containing only CellViews\n * @see #getAttribute(int,String,ArrayList)\n */\n",
    "118438": "/**\n * Method for Classes that extend this Algorithm. Will be called when performing\n * {@link #computeImpulse(CellView)}.\n */\n",
    "118453": "/**\n * Recalculates the position of a cluster. The position of a cluster is defined\n * by the barycenter of the clustered vertices.\n * \n * @param cluster Cell, that has to be a cluster, should be repositioned.\n */\n",
    "118459": "/**\n * Returns <code><b>true</b></code> when a cell is a cluster, else \n * <code<b>false</b></code>. A cell is a cluster when it has under it's \n * attributes a attribute with the boolean value <code><b>true</b></code> under\n * the key {@link #KEY_IS_CLUSTER}.\n * \n * @param cell cell, that should be researched wheather it is a cluster or not.\n * @return <code><b>true</b></code> if cell is a cluster, else \n * <code><b>false</b></code>.\n */\n",
    "118473": "\t/** calculates the attractive forces\n\t */\n",
    "118475": "\t/** calculates the repulsive forces\n\t */\n",
    "118476": "\t/** Calculates the euklidische Norm\n\t *  for the point p.\n\t *\n\t */\n",
    "118485": "    /** Called by pressing the ok button\n     *\n     */\n",
    "118486": "    /**\n     * Returns true if the dialog has been canceled.\n     */\n",
    "118487": "    /**\n     * Returns the value of the \"Horizontal spacing\" as text.\n     */\n",
    "118488": "    /**\n     * Returns the value of the \"Vertical spacing\" as text.\n     */\n",
    "118489": "    /**\n     * Set the value of the \"Horizontal spacing\" text field.\n     */\n",
    "118490": "    /**\n     * Set the value of the \"Vertical Spacing\" text field.\n     */\n",
    "118506": "/**\n * Runs the Algorithm as a optimization Algorithm of another Algorithm\n * @param applyList List of all Cells, a new Layout should be found for.\n * @param allCellList List of all Cells of the Graph\n * @param allEdgeList List of all Edges of the Graph\n * @param dialog Progress Dialog of the Algorithm, this Algorithm is a \n * Optimizer for.\n * @return when Cancel is pressed during the optimization, the method returns\n * <code><b>true</b></code>, else, for a successfull run, \n * <code><b>false</b></code>.\n */\n",
    "118512": "/**\n * Method of classes extending this class, that want to load their initial\n * values from the configuration.\n * \n * @param configSwitch Determines which configurationvalues have to be loaded\n * Possible values are {@link #CONFIG_KEY_RUN} and \n * {@link #CONFIG_KEY_LAYOUT_UPDATE}\n * @see #loadConfiguration(int)\n */\n",
    "118524": "/**\n * Removes the temporary Data from the Cells of the graph. During the run of the\n * Algorithm there has been plenty of Data stored in the Cells. These are\n * removed here, if the Algorithm is canceled or finished.\n */\n",
    "118530": "/**\n * Runs the Algorithm until {@link #temperature} is lower than \n * {@link #minTemperature} or cancel on the progressdialog is pressed.\n * \n * @return When the Algorithm is Canceled, the Method breaks and returns \n * <code><b>true</b></code>.\n */\n",
    "118539": "/**\n * Method for classes that extends this Algorithm. Calls the Costfunctions of\n * the extending class.\n * @return costs generated with the additional costfunctions\n * @see #getGlobalCosts(double[])\n */\n",
    "118542": "/**\n * Calculates a break condition for {@link #performRound()} if uphill moves\n * are allowed. This is computed by a formular from Bolzman:<p>\n * <blockquote><blockquote><code>\n * random < e^(oldEnergy-newEnergy)\n * </code></blockquote></blockquote>\n * @param oldEnergy The Energy before the Energy has increased, so it's the \n * lower one, of the two values.\n * @param newEnergy The Energy after the Energy has increased, so it's the\n * higher one, of the two values\n * @return sometimes <code><b>true</b></code> when the random number is\n * smaler than <code>e^(oldEnergy-newEnergy)</code>\n */\n",
    "118544": "/**\n * Calculates the maximal number of rounds, by flattening the actual \n * {@link #temperature} with the temperature scaling factor \n * {@link #tempScaleFactor}\n * \n * @param actualTemperature The Temperature of the actual Graph\n * @return The number of Rounds that have to be performed until \n * {@link #temperature} falls under {@link #minTemperature}.\n */\n",
    "118568": "/**\n * Returns all Edges that are connected with cells, member of \n * {@link #applyCellList}, except the edges connected the the given cell.\n * @param except Edges connected to this cell are not of interest\n * @return List of all interesting Edges\n */\n",
    "118570": "/**\n * Sets the position of a CellView to the given Position\n * \n * @param view The CellView, the position should be set\n * @param pos New Position\n * @see #setAttribute(CellView,String,Object)\n */\n",
    "118574": "/**\n * Sets the position of a CellView member of {@link #applyCellList} to the given\n * position.\n * \n * @param index ID of the CellView in {@link #applyCellList}\n * @param x X-Coordinate of the new position\n * @param y Y-Coordinate of the new position\n * @see #setPosition(CellView,double,double)\n */\n",
    "118579": "/**\n * Sets the position of a CellView to the given Position\n * \n * @param view The CellView, the position should be set\n * @param x X-Coordinate of the new position\n * @param y Y-Coordinate of the new position\n * @see #setPosition(CellView,Point2D.Double)\n */\n",
    "118582": "/**\n * Sets an attribute in a CellView\n * \n * @param view CellView, the attribute should be set\n * @param key The attribute will be stored in the CellView under that key.\n * @param obj Object representing the attribute, that should be stored.\n */\n",
    "118584": "/**\n * Returns an attribute from a CellView\n * \n * @param view CellView, that stores the attribute\n * @param key The attribute is stored in the CellView with this key\n * @return Object stored with the given key in the given CellView\n */\n",
    "118591": "/**\n * Retrieves the Cells that are directly connected to the given Cell and\n * member of the given list.\n * @param list Only relatives from this List are allowed\n * @param view Relatives from this view are requested\n * @return Relatives from view that are in the list\n * @see #getRelatives(CellView)\n */\n",
    "118684": "        /** initializes the dialog\n         */\n",
    "118685": "        /** Fills the List with the LayoutControllers\n         *  from the LayoutRegistry.\n         *  \n         *  @see LayoutRegistry\n         */\n",
    "118686": "        /** Will call if the user cancels the dialog\n         *\n         */\n",
    "118687": "        /** Will call if the user finishs the dialog\n         *\n         */\n",
    "118689": "        /** Will call if the user clicks on the configuration button.\n         *  if the layout controller is configurable the method\n         *  calls the configure method at the controller.\n         * \n         *  @see LayoutController#configure\n         *\n         */\n",
    "118692": "        /** Returns the selected \n         *  LayoutController of null if\n         *  no LayoutController was selected\n         *\n         */\n",
    "118703": "        /** calls the cancel method\n         *  @see #cancel\n         */\n",
    "118722": "\t/** Debugdisplay for the edge crosses indicators on the System out\n\t */\n",
    "118724": "\t/** Debugdisplay for the grid positions on the System out\n\t */\n",
    "118725": "\t/** Debugdisplay for the priorities on the System out\n\t */\n",
    "118735": "\t/** Updates the progress based on the movements count\n\t *\n\t */\n",
    "118773": "\t/** sets the minimum value to the progressbar\n\t */\n",
    "118774": "\t/** sets the maximum value to the progressbar\n\t */\n",
    "118775": "\t/** sets the progressbar to the maximumvalue\n\t */\n",
    "118776": "\t/**\n\t * Returns whether or not the specified data flavor is supported for\n\t * this object.\n\t * @param flavor the requested flavor for the data\n\t * @return boolean indicating whether or not the data flavor is supported\n\t */\n",
    "118777": "\t/** sets the specified value to the progressbar\n\t */\n",
    "118780": "\t/** returns the current value from the progressbar\n\t */\n",
    "118782": "\t/** sets the progress message\n\t */\n",
    "118784": "\t/** returns true if the user\n\t *  has clicked on the cancel button\n\t */\n",
    "118785": "\t/**\n\t * Returns whether or not the specified data flavor is an HTML flavor that\n\t * is supported.\n\t * @param flavor the requested flavor for the data\n\t * @return boolean indicating whether or not the data flavor is supported\n\t */\n",
    "118786": "\t/** sets the cancel button visible or not\n\t *\n\t *  @param visible the parameter specifies state\n\t */\n",
    "118787": "\t/**\n\t * Should the HTML flavors be offered?  If so, the method\n\t * getHTMLData should be implemented to provide something reasonable.\n\t */\n",
    "118788": "\t/** sets the cancel button enabled or not\n\t *\n\t *  @param visible the parameter specifies state\n\t */\n",
    "118789": "\t/** Returns the cancel button\n\t */\n",
    "118790": "\t/**\n\t * Fetch the data in a text/html format\n\t */\n",
    "118791": "\t/**\n\t * called to save the state of a component in case it needs to\n\t * be restored because a drop is not performed.\n\t */\n",
    "118792": "\t/**\n\t * Returns whether or not the specified data flavor is an plain flavor that\n\t * is supported.\n\t * @param flavor the requested flavor for the data\n\t * @return boolean indicating whether or not the data flavor is supported\n\t */\n",
    "118794": "\t/**\n\t * called to restore the state of a component in case a drop\n\t * is not performed.\n\t */\n",
    "118795": "\t/**\n\t * Should the plain text flavors be offered?  If so, the method\n\t * getPlainData should be implemented to provide something reasonable.\n\t */\n",
    "118796": "\t/**\n\t * called to restore the state of a component in case a drop\n\t * is performed.\n\t */\n",
    "118797": "\t/**\n\t * called to set the insertion location to match the current\n\t * mouse pointer coordinates.\n\t */\n",
    "118798": "\t/**\n\t * Fetch the data in a text/plain format.\n\t */\n",
    "118799": "\t/**\n\t * Initializes the internal properties if they haven't been already\n\t * inited. This is done lazily to avoid loading of desktop properties.\n\t */\n",
    "118800": "\t/**\n\t * Returns whether or not the specified data flavor is a String flavor that\n\t * is supported.\n\t * @param flavor the requested flavor for the data\n\t * @return boolean indicating whether or not the data flavor is supported\n\t */\n",
    "118806": "\t/**\n\t * Cleans up internal state after the drop has finished (either succeeded\n\t * or failed).\n\t */\n",
    "118807": "\t/**\n\t * Sets the GraphModel. This invokes <code>updateSize</code>.\n\t */\n",
    "118808": "\t/** Creates a frame for this Graphpad panel\n\t *\n\t */\n",
    "118812": "\t/**\n\t * Sets the GraphLayoutCache (geometric pattern).\n\t * This invokes <code>updateSize</code>.\n\t */\n",
    "118816": "\t/**\n\t * Sets the marquee handler.\n\t */\n",
    "118817": "\t/** Returns the current Action Map\n\t */\n",
    "118820": "\t/**\n\t * Find the hosting frame, for the file-chooser dialog.\n\t */\n",
    "118821": "\t/**\n\t * Resets the selection model. The appropriate listeners are installed\n\t * on the model.\n\t */\n",
    "118825": "\t/**\n\t * Returns the handle that is currently active, or null, if no\n\t * handle is currently active. Typically, the returned objects\n\t * are instances of the RootHandle inner class.\n\t */\n",
    "118827": "\t/** Show a dialog with the given error message.\n\t * */\n",
    "118828": "\t/**\n\t * Returns the current graph.\n\t * @return GPGraph\n\t */\n",
    "118829": "\t/**\n\t * Returns the cell that has the focus.\n\t */\n",
    "118833": "\t/**\n\t * Returns the current export model.\n\t * @return GPGraph\n\t */\n",
    "118836": "\t/**\n\t * Returns the currently selected internal frame\n\t * If no one is selected, then the first one will be select.\n\t *\n\t * @return GPDocument\n\t */\n",
    "118837": "\t/**\n\t * Returns the current location of the Drag-and-Drop activity.\n\t */\n",
    "118839": "\t/**\n\t * Returns the currently selected document.\n\t * If no one is selected, then the first one will be select.\n\t * @return GPDocument\n\t */\n",
    "118841": "\t/**\n\t * Returns the undoAction.\n\t * @return UndoAction\n\t */\n",
    "118842": "\t/**\n\t * Sets the current location for Drag-and-Drop activity. Should be\n\t * set to null after a drop. Used from within DropTargetListener.\n\t */\n",
    "118843": "\t/**\n\t * Returns the redoAction.\n\t *\n\t * @return RedoAction\n\t */\n",
    "118856": "\t/** Adds a new Internal Frame to the Graphpad\n\t */\n",
    "118862": "\t/** removes the specified Internal Frame from the Graphpad\n\t */\n",
    "118867": "\t/** Adds a new Document based on the GraphModelProvider.\n\t *\n\t */\n",
    "118868": "\t/**\n\t * Messaged to update the selection based on a MouseEvent over a\n\t * particular cell. If the event is a toggle selection event, the\n\t * cell is either selected, or deselected. Otherwise the cell is\n\t * selected.\n\t */\n",
    "118871": "\t/** Adds a new Document based on the GraphModelProvider.\n\t *\n\t */\n",
    "118874": "\t/** Adds a new Document based on the GraphModelProvider.\n\t *\n\t */\n",
    "118876": "\t/**\n\t * Messaged to update the selection based on a toggle selection\n\t * event, which means the cell's selection state is inverted.\n\t */\n",
    "118878": "\t/** Adds a new Document based on the GraphModelProvider.\n\t *\n\t */\n",
    "118881": "\t/** Adds a new Document based on the GraphModelProvider.\n\t *\n\t */\n",
    "118884": "\t/**\n\t * Returning true signifies that cells are added to the selection.\n\t */\n",
    "118891": "\t/**\n\t * Returning true signifies a mouse event on the cell should toggle\n\t * the selection of only the cell under mouse.\n\t */\n",
    "118899": "\t/**\n\t  * Returns the first cell.\n\t  */\n",
    "118901": "\t/**\n\t * Returns true if the first cell has been added to the selection,\n\t * a return value of false means the first cell has been\n\t * removed from the selection.\n\t */\n",
    "118902": "\t/**\n\t * Returns true if the cell identified by cell was added to the\n\t * selection. A return value of false means the cell was in the\n\t * selection but is no longer in the selection. This will raise if\n\t * cell is not one of the cells identified by this event.\n\t */\n",
    "118903": "\t/**\n\t * Returns true if the cell identified by <code>index</code> was added to\n\t * the selection. A return value of false means the cell was in the\n\t * selection but is no longer in the selection. This will raise if\n\t * index < 0 || >= <code>getPaths</code>.length.\n\t *\n\t * @since 1.3\n\t */\n",
    "118904": "\t/**\n\t * Returns a copy of the receiver, but with the source being newSource.\n\t */\n",
    "118905": "\t/**\n\t * Returns the object that constitues the change.\n\t */\n",
    "118907": "\t/**\n\t * Returns the barFactory.\n\t * @return GPBarFactory\n\t */\n",
    "118909": "\t/**\n\t * Returning true signifies the marquee handler has precedence over\n\t * other handlers, and is receiving subsequent mouse events.\n\t */\n",
    "118910": "\t/**\n\t * Sets the barFactory.\n\t * @param barFactory The barFactory to set\n\t */\n",
    "118912": "\t/**\n\t * Returning true signifies a move should only be\n\t * applied to one direction.\n\t */\n",
    "118913": "\t/**\n\t * Returns the L&F object that renders this component.\n\t * @return the GraphUI object that renders this component\n\t */\n",
    "118914": "\t/**\n\t * Returns the marqueeHandler.\n\t * @return JGpdMarqueeHandler\n\t */\n",
    "118916": "\t/**\n\t * Sets the L&F object that renders this component.\n\t * @param ui the GraphUI L&F object\n\t * @see javax.swing.UIDefaults#getUI(JComponent)\n\t *\n\t */\n",
    "118917": "\t/**\n\t  * Returns true if the graph is being edited.  The item that is being\n\t  * edited can be returned by getEditingPath().\n\t  */\n",
    "118920": "\t/**\n\t * Notification from the <code>UIManager</code> that the L&F has changed.\n\t * Replaces the current UI object with the latest version from the\n\t * <code>UIManager</code>. Subclassers can override this to support\n\t * different GraphUIs.\n\t * @see JComponent#updateUI\n\t *\n\t */\n",
    "118922": "\t/**\n\t  * Stops the current editing session.  This has no effect if the\n\t  * graph isn't being edited.  Returns true if the editor allows the\n\t  * editing session to stop.\n\t  */\n",
    "118924": "\t/**\n\t * Returns true if the edge shape intersects the given rectangle.\n\t */\n",
    "118925": "\t/**\n\t * Returns the bounds of the edge shape.\n\t */\n",
    "118926": "\t/**\n\t * Returns the name of the L&F class that renders this component.\n\t * @return the string \"GraphUI\"\n\t * @see JComponent#getUIClassID\n\t *\n\t */\n",
    "118927": "\t/**\n\t * Returns the label bounds of the specified view in the given graph.\n\t */\n",
    "118929": "\t/**\n\t  * Cancels all current editing sessions.\n\t  */\n",
    "118930": "\t/**\n\t * Returns the label size of the specified view in the given graph.\n\t */\n",
    "118932": "\t/**\n\t * Returns a map of (cell, clone)-pairs for all <code>cells</code>\n\t * and their children. Special care is taken to replace the anchor\n\t * references between ports. (Iterative implementation.)\n\t */\n",
    "118934": "\t/**\n\t * Returns the bounds of the edge shape without label\n\t */\n",
    "118935": "\t/**\n\t  * Selects the cell and tries to edit it.  Editing will\n\t  * fail if the CellEditor won't allow it for the selected item.\n\t  */\n",
    "118938": "\t/**\n\t * Returns the topmost cell at the specified location.\n\t * @param x an integer giving the number of pixels horizontally from\n\t * the left edge of the display area, minus any left margin\n\t * @param y an integer giving the number of pixels vertically from\n\t * the top of the display area, minus any top margin\n\t * @return the topmost cell at the specified location\n\t */\n",
    "118941": "\t/**\n\t * Returns the element that is being edited.\n\t */\n",
    "118943": "\t/**\n\t * Returns the cell at the specified location that is \"behind\" the\n\t * <code>current</code> cell. Returns the topmost cell if there are\n\t * no more cells behind <code>current</code>.\n\t */\n",
    "118945": "\t/**\n\t * Overridden for performance reasons.\n\t * See the <a href=\"#override\">Implementation Note</a>\n\t * for more information.\n\t */\n",
    "118947": "\t/**\n\t * Returns the bounding rectangle of the specified cell.\n\t */\n",
    "118948": "\t/**\n\t * Overridden for performance reasons.\n\t * See the <a href=\"#override\">Implementation Note</a>\n\t * for more information.\n\t */\n",
    "118949": "\t/**\n\t * Overridden for performance reasons.\n\t * See the <a href=\"#override\">Implementation Note</a>\n\t * for more information.\n\t */\n",
    "118950": "\t/**\n\t * Overridden for performance reasons.\n\t * See the <a href=\"#override\">Implementation Note</a>\n\t * for more information.\n\t */\n",
    "118951": "\t/**\n\t * Returns the bounding rectangle of the specified cells.\n\t */\n",
    "118953": "\t/**\n\t * Invoked after the <code>graph</code> instance variable has been\n\t * set, but before any defaults/listeners have been installed.\n\t */\n",
    "118957": "\t/**\n\t * Returns the next view at the specified location wrt. <code>current</code>.\n\t * This is used to iterate overlapping cells, and cells that are grouped.\n\t * The current selection affects this method.\n\t */\n",
    "118959": "\t/**\n\t * Invoked from installUI after all the defaults/listeners have been\n\t * installed.\n\t */\n",
    "118964": "\t/**\n\t * Invoked as part from the boilerplate install block. This\n\t * sets the look and feel specific variables in JGraph.\n\t */\n",
    "118966": "\t/**\n\t * Convenience method to return the port at the specified location.\n\t */\n",
    "118970": "\t/**\n\t  * Includes the specified startPoint in the marquee selection. Calls\n\t  * overlay.\n\t  */\n",
    "118972": "\t/** \n\t\t* Called after the component was repainted (ie. after autoscroll).\n\t  * This is used to indicate that the graphics is no more dirty.\n\t  */\n",
    "118974": "\t/**\n\t  * Start the marquee at the specified startPoint. This invokes\n\t  * expandMarqueeToPoint to initialize marquee selection.\n\t  */\n",
    "118976": "\t/**\n\t * Returns the currentPoint.\n\t * @return Point\n\t */\n",
    "118977": "\t/**\n\t * Returns the marqueeBounds.\n\t * @return Rectangle\n\t */\n",
    "118978": "\t/**\n\t * Returns the portview at the specified location.\n\t */\n",
    "118979": "\t/**\n\t * Returns the previousCursor.\n\t * @return Cursor\n\t */\n",
    "118980": "\t/**\n\t * Returns the startPoint.\n\t * @return Point\n\t */\n",
    "118981": "\t/**\n\t * Sets the currentPoint.\n\t * @param currentPoint The currentPoint to set\n\t */\n",
    "118982": "\t/**\n\t * Sets the marqueeBounds.\n\t * @param marqueeBounds The marqueeBounds to set\n\t */\n",
    "118983": "\t/**\n\t * Invoked as part from the boilerplate install block.\n\t */\n",
    "118984": "\t/**\n\t * Sets the previousCursor.\n\t * @param previousCursor The previousCursor to set\n\t */\n",
    "118985": "\t/**\n\t * Sets the startPoint.\n\t * @param startPoint The startPoint to set\n\t */\n",
    "118987": "\t/**\n\t * Overrides the parent method to udpate the cached points,\n\t * source and target port. If the source or target is removed,\n\t * a point is inserted into the array of points.\n\t */\n",
    "118988": "\t/**\n\t * Converts the specified value to string. If the value is an instance of\n\t * CellView or the current GraphLayoutCache returns a mapping for value, then\n\t * then value attribute of that CellView is used. (The value is retrieved using\n\t * getAllAttributes.) If the value is an instance\n\t * of DefaultMutableTreeNode (e.g. DefaultGraphCell), then the userobject\n\t * is returned as a String.\n\t */\n",
    "118989": "\t/**\n\t * Update attributes and recurse children.\n\t */\n",
    "118990": "\t/**\n\t * Returns true if this view intersects the given rectangle.\n\t */\n",
    "118991": "\t/**\n\t * Intalls the subcomponents of the graph, which is the renderer pane.\n\t */\n",
    "118992": "\t/**\n\t * Returns the location for this portview.\n\t */\n",
    "118994": "\t/**\n\t * Returns the local renderer. Do not access the renderer\n\t * field directly. Use this method instead!\n\t */\n",
    "118995": "\t/**\n\t * Returns the given point applied to the grid.\n\t * @param p a point in screen coordinates.\n\t * @return the same point applied to the grid.\n\t */\n",
    "118996": "\t/**\n\t * Returns a renderer for the class.\n\t */\n",
    "118997": "\t/**\n\t * Returns a cell handle for the view.\n\t */\n",
    "118998": "\t/**\n\t * Creates an instance of TransferHandler. Used for subclassers\n\t * to provide different TransferHandler.\n\t */\n",
    "118999": "\t/**\n\t * Returns the CellView that represents the source of the edge.\n\t */\n",
    "119000": "\t/**\n\t * Returns the given point applied to the grid.\n\t * @param p a point in screen coordinates.\n\t * @return the same point applied to the grid.\n\t */\n",
    "119001": "\t/**\n\t * Sets the <code>sourceView</code> of the edge.\n\t */\n",
    "119002": "\t/**\n\t * Returns the CellView that represents the target of the edge.\n\t */\n",
    "119003": "\t/**\n\t * Sets the <code>targetView</code> of the edge.\n\t */\n",
    "119004": "\t/**\n\t * Creates a listener that is responsible to update the UI based on\n\t * how the graph's bounds properties change.\n\t */\n",
    "119005": "\t/**\n\t * Returns a point that describes the position of the label.\n\t */\n",
    "119006": "\t/**\n\t * Upscale the given point in place, ie.\n\t * using the given instance.\n\t * @param p the point to be upscaled\n\t * @return the upscaled point instance\n\t */\n",
    "119007": "\t/**\n\t * Sets the description of the label position.\n\t */\n",
    "119008": "\t/**\n\t * Returns the number of point for this edge.\n\t */\n",
    "119010": "\t/**\n\t * Returns the cached points for this edge.\n\t */\n",
    "119011": "\t/**\n\t * Creates the listener responsible for calling the correct handlers\n\t * based on mouse events, and to select invidual cells.\n\t */\n",
    "119012": "\t/**\n\t * Sets the point at <code>index</code> to <code>p</code>.\n\t */\n",
    "119013": "\t/**\n\t * Downscale the given point in place, ie.\n\t * using the given instance.\n\t * @param p the point to be downscaled\n\t * @return the downscaled point instance\n\t */\n",
    "119015": "\t/**\n\t * Removes the point at position <code>index</code>.\n\t */\n",
    "119016": "\t/**\n\t * Returning true signifies a mouse event adds a new point to an edge.\n\t */\n",
    "119017": "\t/**\n\t * Upscale the given rectangle in place, ie.\n\t * using the given instance.\n\t * @param rect the rectangle to be upscaled\n\t * @return the upscaled rectangle instance\n\t */\n",
    "119018": "\t/**\n\t * Creates the listener reponsible for getting key events from\n\t * the graph.\n\t */\n",
    "119023": "\t/**\n\t * Downscale the given rectangle in place, ie.\n\t * using the given instance.\n\t * @param rect the rectangle to be downscaled\n\t * @return the down-scaled rectangle instance\n\t */\n",
    "119024": "\t/**\n\t * Creates the listener that updates the display based on selection change\n\t * methods.\n\t */\n",
    "119028": "\t/**\n\t * Constructs a view for the specified cell and associates it\n\t * with the specified object using the specified CellMapper.\n\t * This calls refresh on the created CellView to create all\n\t * dependent views.<p>\n\t * Note: The mapping needs to be available before the views\n\t * of child cells and ports are created.\n\t *\n\t * @param cell reference to the object in the model\n\t */\n",
    "119030": "\t/**\n\t * Creates a listener to handle events from the current editor.\n\t */\n",
    "119034": "\t/**\n\t * Computes and updates the size for <code>view</code>.\n\t */\n",
    "119035": "\t\t/**\n\t\t * Invoked when the mouse pointer has been moved on a component\n\t\t * (with no buttons down).\n\t\t */\n",
    "119036": "\t/**\n\t * Creates and returns a new ComponentHandler.\n\t */\n",
    "119039": "\t/**\n\t * Constructs an EdgeView view for the specified object.\n\t */\n",
    "119041": "\t/**\n\t * Returns the renderer pane that renderer components are placed in.\n\t */\n",
    "119043": "\t/**\n\t * Constructs a PortView view for the specified object.\n\t */\n",
    "119045": "\t/**\n\t * Returns the graph associated with the view.\n\t */\n",
    "119046": "\t/**\n\t * Returns the model associated with the view.\n\t */\n",
    "119047": "\t/**\n\t * Returns a listener that can update the graph when the view changes.\n\t */\n",
    "119048": "\t/**\n\t * Returns the cell mapper associated with the view.\n\t */\n",
    "119049": "\t/**\n\t * Returns the model object that this view represents.\n\t */\n",
    "119051": "\t/**\n\t * Constructs an EdgeView view for the specified object.\n\t *\n\t * @deprecated\treplaced by {@link #createEdgeView(Object,CellMapper)}\n\t *\t\tsince JGraph no longer exposes dependecies on\n\t * \t\tGraphCell subclasses (Port, Edge)\n\t */\n",
    "119053": "\t/**\n\t * Update attributes and recurse children.\n\t */\n",
    "119054": "\t/**\n\t * This method implements the merge between the\n\t * cell's and the view's attributes. The view's\n\t * attributes override the cell's attributes\n\t * with one exception.\n\t */\n",
    "119056": "\t/**\n\t * Returns the parent view for this view.\n\t */\n",
    "119057": "\t/**\n\t * Returns a listener that can update the graph when the model changes.\n\t */\n",
    "119058": "\t/**\n\t * Removes this view from the list of childs of the parent.\n\t */\n",
    "119060": "\t/**\n\t * Returns true if the view is a leaf.\n\t */\n",
    "119061": "\t/**\n\t * Constructs a PortView view for the specified object.\n\t*\n\t* @deprecated\treplaced by {@link #createPortView(Object,CellMapper)}\n\t*\t\tsince JGraph no longer exposes dependecies on\n\t* \t\tGraphCell subclasses (Port, Edge)\n\t */\n",
    "119062": "\t/**\n\t * Return the attributes of the view.\n\t */\n",
    "119063": "\t/**\n\t * Returns the attributes of the view combined with the\n\t * attributes of the corresponding cell. The view's attributes\n\t * override the cell's attributes with the same key.\n\t */\n",
    "119064": "\t/**\n\t * Applies <code>change</code> to the attributes of the view\n\t * and calls update.\n\t */\n",
    "119069": "\t/**\n\t * Constructs a VertexView view for the specified object.\n\t */\n",
    "119070": "\t/**\n\t * Returns true if the view intersects the given rectangle.\n\t */\n",
    "119072": "\t/**\n\t * Returns a cell editor for the view.\n\t */\n",
    "119073": "\t/**\n\t * Returns an iterator of the edges connected\n\t * to the port.\n\t */\n",
    "119074": "\t/**\n\t * Adds <code>edge</code> to the list of ports.\n\t */\n",
    "119075": "\t/**\n\t * Removes <code>edge</code> from the list of ports.\n\t */\n",
    "119076": "\t/**\n\t * Returns the anchor of this port.\n\t */\n",
    "119077": "\t/**\n\t * Sets the anchor of this port.\n\t */\n",
    "119078": "\t/**\n\t * Returns the anchor of this port.\n\t */\n",
    "119079": "\t/**\n\t * Sets the anchor of this port.\n\t */\n",
    "119080": "\t/**\n\t * Returns the number of clicks for editing to start.\n\t */\n",
    "119081": "\t/**\n\t * Create a clone of the cell. The cloning of the\n\t * user object is deferred to the cloneUserObject()\n\t * method.\n\t *\n\t * @return Object  a clone of this object.\n\t */\n",
    "119092": "\t/**\n\t * Sets the number of clicks for editing to start.\n\t */\n",
    "119101": "\t/**\n\t * Returns true if the graph accepts drops/pastes from external sources.\n\t */\n",
    "119102": "\t/**\n\t * Returns the number of roots in the model.  Returns 0 if the\n\t * model is empty.\n\t *\n\t * @return  the number of roots in the model\n\t */\n",
    "119104": "\t/**\n\t * Returns the root at index <I>index</I> in the model.\n\t * This should not return null if <i>index</i> is a valid\n\t * index for the model (that is <i>index</i> >= 0 &&\n\t * <i>index</i> < getRootCount()).\n\t *\n\t * @return  the root of at index <I>index</I>\n\t */\n",
    "119105": "\t/**\n\t * Returns the index of <code>root</code> in the model.\n\t * If root is <code>null</code>, returns -1.\n\t * @param parent a root in the model, obtained from this data source\n\t * @return the index of the root in the model, or -1\n\t *    if the parent is <code>null</code>\n\t */\n",
    "119106": "\t/**\n\t * Sets if the graph accepts drops/pastes from external sources.\n\t */\n",
    "119107": "\t/**\n\t * Returns <code>true</code> if <code>node</code> or one of its\n\t * ancestors is in the model.\n\t *\n\t * @return <code>true</code> if  <code>node</code> is in the model\n\t */\n",
    "119108": "\t/**\n\t * Uninstalls the renderer pane.\n\t */\n",
    "119109": "\t/**\n\t * Returns a <code>Map</code> that represents the attributes for\n\t * the specified cell. This attributes have precedence over each\n\t * view's attributes, regardless of isAttributeStore.\n\t *\n\t * @return attributes of <code>node</code> as a <code>Map</code>\n\t */\n",
    "119110": "\t/**\n\t * Returns true if the graph uses Drag-and-Drop to move cells.\n\t */\n",
    "119111": "\t/**\n\t * Returns the source of <code>edge</code>. <I>edge</I> must be an object\n\t * previously obtained from this data source.\n\t *\n\t * @return <code>Object</code> that represents the source of <i>edge</i>\n\t */\n",
    "119113": "\t/**\n\t * Returns the target of <code>edge</code>. <I>edge</I> must be an object\n\t * previously obtained from this data source.\n\t *\n\t * @return <code>Object</code> that represents the target of <i>edge</i>\n\t */\n",
    "119115": "\t/**\n\t * Sets if the graph uses Drag-and-Drop to move cells.\n\t */\n",
    "119116": "\t/**\n\t * Returns <code>true</code> if <code>port</code> is a valid source\n\t * for <code>edge</code>. <I>edge</I> and <I>port</I> must be\n\t * objects previously obtained from this data source.\n\t *\n\t * @return <code>true</code> if <code>port</code> is a valid source\n\t *                           for <code>edge</code>.\n\t */\n",
    "119117": "\t/**\n\t * Returns <code>true</code> if <code>port</code> is a valid target\n\t * for <code>edge</code>. <I>edge</I> and <I>port</I> must be\n\t * objects previously obtained from this data source.\n\t *\n\t * @return <code>true</code> if <code>port</code> is a valid target\n\t *                           for <code>edge</code>.\n\t */\n",
    "119120": "\t/**\n\t * Returns an iterator of the edges connected to <code>port</code>.\n\t * <I>port</I> must be a object previously obtained from\n\t * this data source. This method never returns null.\n\t *\n\t * @param   port  a port in the graph, obtained from this data source\n\t * @return  <code>Iterator</code> that represents the connected edges\n\t */\n",
    "119123": "\t/**\n\t * Sets if the graph allows movement of cells.\n\t */\n",
    "119124": "\t/**\n\t * Paint the background of this graph. Calls paintGrid.\n\t */\n",
    "119126": "\t/**\n\t * Returns true if the graph allows adding/removing/modifying points.\n\t */\n",
    "119127": "\t/**\n\t * Returns the parent of <I>child</I> in the model.\n\t * <I>child</I> must be a node previously obtained from\n\t * this data source. This returns null if <i>child</i> is\n\t * a root in the model.\n\t *\n\t * @param   child  a node in the graph, obtained from this data source\n\t * @return  the parent of <I>child</I>\n\t */\n",
    "119130": "\t/**\n\t * Returns the index of child in parent.\n\t * If either the parent or child is <code>null</code>, returns -1.\n\t * @param parent a note in the tree, obtained from this data source\n\t * @param child the node we are interested in\n\t * @return the index of the child in the parent, or -1\n\t *    if either the parent or the child is <code>null</code>\n\t */\n",
    "119133": "\t/**\n\t * Sets if the graph allows adding/removing/modifying points.\n\t */\n",
    "119134": "\t/**\n\t * Paint the foreground of this graph. Calls paintPorts.\n\t */\n",
    "119135": "\t/**\n\t * Returns the number of children of <I>parent</I>.  Returns 0 if the node\n\t * is a leaf or if it has no children.  <I>parent</I> must be a node\n\t * previously obtained from this data source.\n\t *\n\t * @param   parent  a node in the tree, obtained from this data source\n\t * @return  the number of children of the node <I>parent</I>\n\t */\n",
    "119136": "\t/**\n\t * Returns whether the specified node is a leaf node.\n\t * The way the test is performed depends on the.\n\t *\n\t * @param node the node to check\n\t * @return true if the node is a leaf node\n\t */\n",
    "119137": "\t/**\n\t * Returns true if the graph allows new connections to be established.\n\t */\n",
    "119140": "\t/**\n\t * Setse if the graph allows new connections to be established.\n\t */\n",
    "119141": "\t/**\n\t * Removes <code>cells</code> from the model.\n\t * Notifies the model- and undo listeners of the change.\n\t */\n",
    "119144": "\t/**\n\t * Update the handle using createHandle.\n\t */\n",
    "119145": "\t/**\n\t * Returns true if the graph allows existing connections to be removed.\n\t */\n",
    "119146": "\t/**\n\t * Sends <code>cells</code> to back.\n\t */\n",
    "119147": "\t/**\n\t * Brings <code>cells</code> to front.\n\t */\n",
    "119149": "\t/**\n\t * Sets if the graph allows existing connections to be removed.\n\t */\n",
    "119152": "\t/**\n\t * Returns true if cells are cloned on CTRL-Drag operations.\n\t */\n",
    "119153": "\t/**\n\t * Constructs the \"root handle\" for <code>context</code>.\n\t *\n\t * @param context reference to the context of the current selection.\n\t */\n",
    "119154": "\t/**\n\t * Returns an edit that represents a remove.\n\t */\n",
    "119156": "\t/**\n\t * Sets if cells are cloned on CTRL-Drag operations.\n\t */\n",
    "119157": "\t/**\n\t * Messages the Graph with <code>graphDidChange</code>.\n\t */\n",
    "119161": "\t/**\n\t * Returns true if the graph allows cells to be resized.\n\t */\n",
    "119164": "\t/**\n\t * Sets if the graph allows cells to be resized.\n\t */\n",
    "119165": "\t/**\n\t * Applies <code>connectionSet</code> to the model. Returns\n\t * a connection set that may be used to undo this change.\n\t */\n",
    "119166": "\t/** Sets the preferred minimum size.\n\t  */\n",
    "119167": "\t/**\n\t * Inserts the specified connection into the model.\n\t */\n",
    "119168": "\t/**\n\t * Returns true if selected edges should be disconnected from\n\t * unselected vertices when they are moved.\n\t */\n",
    "119170": "\t/** Returns the minimum preferred size.\n\t  */\n",
    "119172": "\t/**\n\t * Adds a listener for the GraphModelEvent posted after the graph changes.\n\t *\n\t * @see     #removeGraphModelListener\n\t * @param   l       the listener to add\n\t */\n",
    "119173": "\t/**\n\t * Sets if selected edges should be disconnected from\n\t * unselected vertices when they are moved.\n\t */\n",
    "119175": "\t/**\n\t * Removes a listener previously added with <B>addGraphModelListener()</B>.\n\t *\n\t * @see     #addGraphModelListener\n\t * @param   l       the listener to remove\n\t */\n",
    "119176": "\t/**\n\t * Returns true if selected edges should be disconnected from\n\t * unselected vertices when they are moved.\n\t */\n",
    "119177": "\t/** Returns the preferred size to properly display the graph.\n\t  */\n",
    "119180": "\t/**\n\t * Sets if selected edges should be disconnected from\n\t * unselected vertices when they are moved.\n\t */\n",
    "119181": "\t/**\n\t  * Returns the minimum size for this component.  Which will be\n\t  * the min preferred size or 0, 0.\n\t  */\n",
    "119182": "\t\t/**\n\t\t * Adds the groups that become empty to the cells that\n\t\t * will be removed. (Auto remove empty cells.) Removed\n\t\t * cells will be re-inserted on undo, and the parent-\n\t\t * child relations will be restored.\n\t\t */\n",
    "119184": "\t/**\n\t * Returns true if the grid is active.\n\t * @see #snap\n\t *\n\t */\n",
    "119185": "\t/**\n\t  * Returns the maximum size for this component, which will be the\n\t  * preferred size if the instance is currently in a JGraph, or 0, 0.\n\t  */\n",
    "119187": "\t\t/**\n\t\t * Returns the source of this change. This can either be a\n\t\t * view or a model, if this change is a GraphModelChange.\n\t\t */\n",
    "119188": "\t/**\n\t * If set to true, the grid will be active.\n\t * @see #snap\n\t *\n\t */\n",
    "119189": "\t\t/**\n\t\t * Returns a map that contains (object, map) pairs\n\t\t * of the attributes that have been stored in the model.\n\t\t */\n",
    "119190": "\t/**\n\t * Messages to stop the editing session. If the UI the receiver\n\t * is providing the look and feel for returns true from\n\t * <code>getInvokesStopCellEditing</code>, stopCellEditing will\n\t * invoked on the current editor. Then completeEditing will\n\t * be messaged with false, true, false to cancel any lingering\n\t * editing.\n\t */\n",
    "119192": "\t/**\n\t * Returns the maximum distance between the mousepointer and a cell to\n\t * be selected.\n\t */\n",
    "119193": "\t\t/**\n\t\t * Returns the connectionSet.\n\t\t * @return ConnectionSet\n\t\t */\n",
    "119195": "\t/**\n\t * Sets the maximum distance between the mousepointer and a cell to\n\t * be selected.\n\t */\n",
    "119197": "\t\t/**\n\t\t * Returns the parentMap.\n\t\t * @return ParentMap\n\t\t */\n",
    "119199": "\t/**\n\t * Returns the size of the handles.\n\t */\n",
    "119202": "\t/**\n\t * Sets the size of the handles.\n\t */\n",
    "119203": "\t\t/**\n\t\t * Redoes a change.\n\t\t *\n\t\t * @exception CannotRedoException if the change cannot be redone\n\t\t */\n",
    "119205": "\t\t/**\n\t\t * Undoes a change.\n\t\t *\n\t\t * @exception CannotUndoException if the change cannot be undone\n\t\t */\n",
    "119206": "\t/**\n\t * Returns the miminum amount of pixels for a move operation.\n\t */\n",
    "119208": "\t\t/**\n\t\t * Creates, if necessary, and starts a Timer to check if need to\n\t\t * resize the bounds.\n\t\t */\n",
    "119210": "\t/**\n\t * Sets the miminum amount of pixels for a move operation.\n\t */\n",
    "119212": "\t\t/**\n\t\t * Returns the JScrollPane housing the JGraph, or null if one isn't\n\t\t * found.\n\t\t */\n",
    "119215": "\t/**\n\t * Returns the current grid color.\n\t */\n",
    "119217": "\t\t/**\n\t\t * Public as a result of Timer. If the scrollBar is null, or\n\t\t * not adjusting, this stops the timer and updates the sizing.\n\t\t */\n",
    "119219": "\t/**\n\t * Sets the current grid color.\n\t */\n",
    "119222": "\t/**\n\t * Returns the current handle color.\n\t */\n",
    "119224": "\t\t/**\n\t\t * Allows a <code>GraphLayoutCache</code> to add and execute and\n\t\t * UndoableEdit in this change. This does also work if the\n\t\t * parent edit has already been executed, in which case the\n\t\t * to be added edit will be executed immediately, after\n\t\t * addition.\n\t\t * This is used to handle changes to the view that are \n\t\t * triggered by certain changes of the model. Such implicit\n\t\t * edits may be associated with the view so that they may be\n\t\t * undone and redone correctly, and are stored in the model's\n\t\t * global history together with the parent event as one unit.\n\t\t */\n",
    "119225": "\t/**\n\t * Sets the current handle color.\n\t */\n",
    "119228": "\t\t/**\n\t\t * Returns the views that have not changed explicitly, but\n\t\t * implicitly because one of their dependent cells has changed.\n\t\t */\n",
    "119229": "\t/**\n\t * Returns the current second handle color.\n\t */\n",
    "119231": "\t\t/**\n\t\t * Messaged when the selection changes in the graph we're displaying\n\t\t * for. Stops editing, updates handles and displays the changed cells.\n\t\t */\n",
    "119232": "\t\t/**\n\t\t * Returns the list that exclusively contains <code>view</code>.\n\t\t */\n",
    "119233": "\t/**\n\t * Sets the current second handle color.\n\t */\n",
    "119235": "\t\t/** Messaged when editing has stopped in the graph. */\n",
    "119237": "\t/**\n\t * Returns the current marquee color.\n\t */\n",
    "119240": "\t\t/** Messaged when editing has been canceled in the graph. */\n",
    "119241": "\t/**\n\t * Sets the current marquee color.\n\t */\n",
    "119243": "\t/**\n\t  * Sets the color to use for the border.\n\t  */\n",
    "119244": "\t/**\n\t  * Returns the color the border is drawn.\n\t  */\n",
    "119246": "\t/**\n\t * Sets the font to edit with. null indicates the renderers font should\n\t * be used. This will NOT override any font you have set in the editor\n\t * the receiver was instantied with. If null for an editor was passed in\n\t * a default editor will be created that will pick up this font.\n\t *\n\t * @param font  the editing Font\n\t * @see #getFont\n\t */\n",
    "119247": "\t/**\n\t * Returns the current highlight color.\n\t */\n",
    "119248": "\t/**\n\t * Gets the font used for editing.\n\t *\n\t * @return the editing Font\n\t * @see #setFont\n\t */\n",
    "119250": "\t/**\n\t * Returns the value currently being edited.\n\t */\n",
    "119251": "\t/**\n\t * If the realEditor returns true to this message, prepareForEditing\n\t * is messaged and true is returned.\n\t */\n",
    "119252": "\t/**\n\t * Messages the realEditor for the return value.\n\t */\n",
    "119253": "\t/**\n\t * Sets the current selection highlight color.\n\t */\n",
    "119254": "\t/**\n\t * If the realEditor will allow editing to stop, the realEditor is\n\t * removed and true is returned, otherwise false is returned.\n\t */\n",
    "119256": "\t/**\n\t * Messages cancelCellEditing to the realEditor and removes it from this\n\t * instance.\n\t */\n",
    "119257": "\t/**\n\t * Adds the CellEditorListener.\n\t */\n",
    "119259": "\t/**\n\t  * Removes the previously added CellEditorListener l.\n\t  */\n",
    "119260": "\t/**\n\t * Resets lastPath.\n\t */\n",
    "119261": "\t/**\n\t * Messaged when the timer fires, this will start the editing\n\t * session.\n\t */\n",
    "119263": "\t/**\n\t * Returns the current scale.\n\t * @return the current scale as a double\n\t */\n",
    "119264": "\t/**\n\t * Sets the tree currently editing for. This is needed to add\n\t * a selection listener.\n\t */\n",
    "119266": "\t/**\n\t * Returns true if <code>event</code> is a MouseEvent and the click\n\t * count is 1.\n\t */\n",
    "119268": "\t/**\n\t * Should return true if the passed in location is a valid mouse location\n\t * to start editing from. This is implemented to return false if\n\t * <code>x</code> is <= the width of the icon and icon gap displayed\n\t * by the renderer. In other words this returns true if the user\n\t * clicks over the text part displayed by the renderer, and false\n\t * otherwise.\n\t */\n",
    "119270": "\t/**\n\t * Sets the current scale.\n\t * <p>\n\t * Fires a property change for the SCALE_PROPERTY.\n\t * @param newValue the new scale\n\t */\n",
    "119271": "\t/**\n\t * Invoked just before editing is to start. Will add the\n\t * <code>editingComponent</code> to the\n\t * <code>editingContainer</code>.\n\t */\n",
    "119272": "\t/**\n\t * Creates the container to manage placement of editingComponent.\n\t */\n",
    "119276": "\t/**\n\t * Returns the size of the grid in pixels.\n\t * @return the size of the grid as an int\n\t */\n",
    "119279": "\t\t/**\n\t\t * Overrides <code>JComponent.getBorder</code> to\n\t\t * returns the current border.\n\t\t */\n",
    "119283": "\t/**\n\t * Returns the current grid view mode.\n\t */\n",
    "119284": "\t\t/**\n\t\t * Overrides <code>Container.paint</code> to paint the node's\n\t\t * icon and use the selection color for the background.\n\t\t */\n",
    "119285": "\t\t/**\n\t\t * Lays out this Container.  If editing, the editor will be placed at\n\t\t * offset in the x direction and 0 for y.\n\t\t */\n",
    "119287": "\t\t/**\n\t\t * Returns the preferred size for the Container.  This will be\n\t\t * the preferred size of the editor offset by offset.\n\t\t */\n",
    "119288": "\t\t/**\n\t\t * Invoked when the mouse pointer has been moved on a component\n\t\t * (with no buttons down).\n\t\t */\n",
    "119289": "\t/**\n\t * Overrides the parent method to udpate the cached points.\n\t */\n",
    "119291": "\t/**\n\t * Sets the size of the grid.\n\t * <p>\n\t * Fires a property change for the GRID_SIZE_PROPERTY.\n\t * @param newSize the new size of the grid in pixels\n\t */\n",
    "119292": "\t/**\n\t * Returns the cached bounds for the vertex.\n\t */\n",
    "119298": "\t/**\n\t * Sets the current grid view mode.\n\t *\n\t * @param mode The current grid view mode. Valid values are\n\t *    <CODE>DOT_GRID_MODE</CODE>,\n\t *    <CODE>CROSS_GRID_MODE</CODE>, and\n\t *    <CODE>LINE_GRID_MODE</CODE>.\n\t */\n",
    "119300": "\t/**\n\t * Returns a cell handle for the view, if the graph and the view\n\t * are sizeable.\n\t */\n",
    "119301": "\t/**\n\t * Returns the center of this vertex.\n\t */\n",
    "119302": "\t/**\n\t * Returns the intersection of the bounding rectangle and the\n\t * straight line between the source and the specified point p.\n\t * The specified point is expected not to intersect the bounds.\n\t * Note: You must override this method if you use a different\n\t * renderer. This is because this method relies on the\n\t * VertexRenderer interface, which can not be safely assumed\n\t * for subclassers.\n\t */\n",
    "119305": "\t/**\n\t * Returns true if the grid will be visible.\n\t * @return true if the grid is visible\n\t */\n",
    "119309": "\t\t/**\n\t\t * Invoked when the mouse pointer has been moved on a component\n\t\t * (with no buttons down).\n\t\t */\n",
    "119310": "\t\t/** Process mouse pressed event. */\n",
    "119312": "\t/**\n\t * If set to true, the grid will be visible. <p>\n\t * Fires a property change for the GRID_VISIBLE_PROPERTY.\n\t */\n",
    "119318": "\t/**\n\t * Adds the connections in <code>views</code> to the connection set.\n\t */\n",
    "119319": "\t/**\n\t * Returns true if the ports will be visible.\n\t * @return true if the ports are visible\n\t */\n",
    "119320": "\t/**\n\t * Connect <code>edge</code> to <code>source</code>\n\t * and <code>target</code> in the connection set. The\n\t * previous connections between <code>edge</code> and\n\t * its source and target are replaced in the set.\n\t */\n",
    "119321": "\t/**\n\t * Connect <code>edge</code> to <code>port</code>.\n\t * <code>source</code> indicates if <code>port</code> is the\n\t * source of <code>edge</code>. The previous connections\n\t * between <code>edge</code> and its source or target\n\t * in the set is replaced.\n\t */\n",
    "119322": "\t/**\n\t * Disconnect <code>edge</code> from <code>source</code>\n\t * and <code>target</code> in the connection set. The\n\t * previous connections between <code>edge</code> and\n\t * its source and target are replaced in the set.\n\t */\n",
    "119323": "\t/**\n\t * Disconnect <code>edge</code> from <code>port</code>.\n\t * <code>source</code> indicates if <code>port</code> is the\n\t * source of <code>edge</code>.  The previous connections\n\t * between <code>edge</code> and its source or target\n\t * in the set is replaced.\n\t */\n",
    "119324": "\t/**\n\t * Returns <code>true</code> if the connection set is empty.\n\t */\n",
    "119325": "\t/**\n\t * Returns the number of (edge, port)-pairs.\n\t */\n",
    "119327": "\t/**\n\t * Returns an <code>Iterator</code> for the connections in this set.\n\t */\n",
    "119328": "\t/**\n\t * Returns a <code>Set</code> for the edges in this connection set.\n\t */\n",
    "119329": "\t/**\n\t * If set to true, the ports will be visible. <p>\n\t * Fires a property change for the PORTS_VISIBLE_PROPERTY.\n\t */\n",
    "119330": "\t/**\n\t * Creates a new connection set based on this connection set,\n\t * where the edges, and ports are mapped using <code>map</code>.\n\t * If a port is not found, the old port is used. If both, the\n\t * edge and the port are not in <code>map</code>, the entry\n\t * is ignored.<p>\n\t * <strong>Note:</strong> Consequently, unselected edges are\n\t * only reconnected at the first \"paste\" after a \"cut\", because\n\t * in this case the ConnectionSet is not cloned.\n\t */\n",
    "119331": "\t\t/**\n\t\t * Returns the edge of the connection.\n\t\t */\n",
    "119332": "\t\t/**\n\t\t * Returns the port of the connection.\n\t\t */\n",
    "119333": "\t\t/**\n\t\t *  Returns <code>true</code> if <code>port</code> is the source\n\t\t *  of <code>edge</code>.\n\t\t */\n",
    "119334": "\t\t/**\n\t\t * Two connections are equal if they represent the source\n\t\t * or target of the same edge. That is, if <p>\n\t\t * c1.edge == c2.edge && c1.isSource == c2.isSource.\n\t\t */\n",
    "119335": "\t\t/**\n\t\t * Ensure equality of hashCode wrt. equals().\n\t\t */\n",
    "119336": "\t/**\n\t * Returns true if the graph will be anti aliased.\n\t * @return true if the graph is anti aliased\n\t */\n",
    "119347": "\t/**\n\t * Sets antialiasing on or off based on the boolean value.\n\t * <p>\n\t * Fires a property change for the ANTIALIASED_PROPERTY.\n\t * @param newValue whether to turn antialiasing on or off\n\t */\n",
    "119348": "\t/**\n\t * Sets the selection mode, which must be one of SINGLE_TREE_SELECTION,\n\t */\n",
    "119350": "\t/**\n\t * Returns the selection mode, one of <code>SINGLE_TREE_SELECTION</code>,\n\t * <code>DISCONTIGUOUS_TREE_SELECTION</code> or\n\t * <code>CONTIGUOUS_TREE_SELECTION</code>.\n\t */\n",
    "119351": "\t/**\n\t  * Sets if the selection model allows the selection\n\t  * of children.\n\t  */\n",
    "119352": "\t/**\n\t  * Returns true if the selection model allows the selection\n\t  * of children.\n\t  */\n",
    "119353": "\t/**\n\t * Returns true if the graph is editable, ie. if it allows\n\t * cells to be edited.\n\t * @return true if the graph is editable\n\t */\n",
    "119354": "\t/**\n\t  * Hook for subclassers for fine-grained control over stepping-into cells.\n\t  * This implementation returns <code>childrenSelectable</code>.\n\t  */\n",
    "119355": "\t/**\n\t  * Sets the selection to path. If this represents a change, then\n\t  * the TreeSelectionListeners are notified. If <code>path</code> is\n\t  * null, this has the same effect as invoking <code>clearSelection</code>.\n\t  *\n\t  * @param path new path to select\n\t  */\n",
    "119357": "\t\t/**\n\t\t * Invoked when the mouse pointer has been moved on a component\n\t\t * (with no buttons down).\n\t\t */\n",
    "119358": "\t/**\n\t  * Adds path to the current selection. If path is not currently\n\t  * in the selection the TreeSelectionListeners are notified. This has\n\t  * no effect if <code>path</code> is null.\n\t  *\n\t  * @param path the new path to add to the current selection\n\t  */\n",
    "119359": "\t/**\n\t  * Adds cells to the current selection. If any of the paths in\n\t  * paths are not currently in the selection the TreeSelectionListeners\n\t  * are notified. This has\n\t  * no effect if <code>paths</code> is null.\n\t  * <p>The lead path is set to the last element in <code>paths</code>.\n\t  * <p>If the selection mode is <code>CONTIGUOUS_TREE_SELECTION</code>,\n\t  * and adding the new paths would make the selection discontiguous.\n\t  * Then two things can result: if the TreePaths in <code>paths</code>\n\t  * are contiguous, then the selection becomes these TreePaths,\n\t  * otherwise the TreePaths aren't contiguous and the selection becomes\n\t  * the first TreePath in <code>paths</code>.\n\t  *\n\t  * @param path the new path to add to the current selection\n\t  */\n",
    "119360": "\t/**\n\t * Determines whether the graph is editable. Fires a property\n\t * change event if the new setting is different from the existing\n\t * setting.\n\t * <p>\n\t * Note: Editable determines whether the graph allows editing. This\n\t * is not to be confused with enabled, which allows the graph to\n\t * handle mouse events (including editing).\n\t * @param flag a boolean value, true if the graph is editable\n\t */\n",
    "119361": "\t/**\n\t  * Removes path from the selection. If path is in the selection\n\t  * The TreeSelectionListeners are notified. This has no effect if\n\t  * <code>path</code> is null.\n\t  *\n\t  * @param path the path to remove from the selection\n\t  */\n",
    "119362": "\t/**\n\t  * Removes paths from the selection.  If any of the paths in paths\n\t  * are in the selection the TreeSelectionListeners are notified.\n\t  * This has no effect if <code>paths</code> is null.\n\t  *\n\t  * @param path the path to remove from the selection\n\t  */\n",
    "119363": "\t/**\n\t  * Returns the first cell in the selection. This is useful if there\n\t  * if only one item currently selected.\n\t  */\n",
    "119365": "\t/**\n\t * Returns the number of paths that are selected.\n\t */\n",
    "119366": "\t/**\n\t * Returns the <code>GraphModel</code> that is providing the data.\n\t * @return the model that is providing the data\n\t */\n",
    "119367": "\t/**\n\t  * Returns true if the cell, <code>cell</code>,\n\t  * is in the current selection.\n\t  */\n",
    "119369": "\t/**\n\t  * Returns true if the cell, <code>cell</code>,\n\t  * has selected children.\n\t  */\n",
    "119370": "\t/**\n\t  * Returns true if the selection is currently empty.\n\t  */\n",
    "119371": "\t\t/**\n\t\t * Hook for subclassers to return a different view for a mouse click\n\t\t * at <code>pt</code>. For example, this can be used to return a leaf\n\t\t * cell instead of a group.\n\t\t */\n",
    "119372": "\t/**\n\t * Sets the <code>GraphModel</code> that will provide the data.\n\t * Note: Updates the current GraphLayoutCache's model using setModel if the\n\t * GraphLayoutCache points to a different model. <p>\n\t * Fires a property change for the GRAPH_MODEL_PROPERTY.\n\t * @param newModel the <code>GraphModel</code> that is to provide the data\n\t */\n",
    "119373": "\t/**\n\t  * Empties the current selection.  If this represents a change in the\n\t  * current selection, the selection listeners are notified.\n\t  */\n",
    "119374": "\t/**\n\t  * Returns the number of selected childs for <code>cell</code>.\n\t  */\n",
    "119375": "\t/**\n\t  * Sets the number of selected childs for <code>cell</code>\n\t  * to <code>count</code>.\n\t  */\n",
    "119377": "\t/**\n\t * Returns the <code>GraphLayoutCache</code> that is providing the view-data.\n\t * @return the view that is providing the view-data\n\t */\n",
    "119379": "\t/**\n\t  * Adds x to the list of listeners that are notified each time the\n\t  * set of selected TreePaths changes.\n\t  *\n\t  * @param x the new listener to be added\n\t  */\n",
    "119380": "\t/**\n\t  * Removes x from the list of listeners that are notified each time\n\t  * the set of selected TreePaths changes.\n\t  *\n\t  * @param x the listener to remove\n\t  */\n",
    "119381": "\t/**\n\t * Sets the <code>GraphLayoutCache</code> that will provide the view-data. <p>\n\t * Note: Updates the GraphLayoutCache's model using setModel if the\n\t * GraphLayoutCache points to an other model than this graph. <p>\n\t * Fires a property change for the GRAPH_LAYOUT_CACHE_PROPERTY.\n\t * @param newView the <code>GraphLayoutCache</code> that is to provide the view-data\n\t */\n",
    "119383": "\t/**\n\t * Notifies all listeners that are registered for\n\t * tree selection events on this object.\n\t * @see #addGraphSelectionListener\n\t * @see EventListenerList\n\t */\n",
    "119384": "\t/**\n\t  * Notifies listeners of a change in path. changePaths should contain\n\t  * instances of PathPlaceHolder.\n\t  */\n",
    "119385": "\t/**\n\t * Returns a clone of this object with the same selection.\n\t * This method does not duplicate\n\t * selection listeners and property listeners.\n\t *\n\t * @exception CloneNotSupportedException never thrown by instances of\n\t *                                       this class\n\t */\n",
    "119386": "\t/**\n\t * Returns the <code>MarqueeHandler</code> that will handle\n\t * marquee selection.\n\t */\n",
    "119389": "\t\t/**\n\t\t * Returns the isNew.\n\t\t * @return boolean\n\t\t */\n",
    "119390": "\t\t/**\n\t\t * Sets the cell.\n\t\t * @param cell The cell to set\n\t\t */\n",
    "119391": "\t/**\n\t * Sets the <code>MarqueeHandler</code> that will handle\n\t * marquee selection.\n\t */\n",
    "119393": "\t\t/**\n\t\t * Sets the isNew.\n\t\t * @param isNew The isNew to set\n\t\t */\n",
    "119395": "\t/**\n\t * Returns the number of all objects (cells and children) in this object.\n\t */\n",
    "119397": "\t/**\n\t * Returns <code>true</code> if <code>node</code> or one of\n\t * its ancestors is contained in this object.\n\t */\n",
    "119398": "\t/**\n\t * Returns the <code>CellView</code> that is mapped to <code>cell</code>\n\t * in the graph context. New views are created based on whether cell\n\t * is containes in the context. The <code>create</code>-flag is ignored.\n\t */\n",
    "119399": "\t/**\n\t * Determines what happens when editing is interrupted by selecting\n\t * another cell in the graph, a change in the graph's data, or by some\n\t * other means. Setting this property to <code>true</code> causes the\n\t * changes to be automatically saved when editing is interrupted.\n\t * <p>\n\t * Fires a property change for the INVOKES_STOP_CELL_EDITING_PROPERTY.\n\t * @param newValue true means that <code>stopCellEditing</code> is invoked\n\t * when editing is interruped, and data is saved; false means that\n\t * <code>cancelCellEditing</code> is invoked, and changes are lost\n\t */\n",
    "119402": "\t/**\n\t * Associates <code>cell</code> with <code>view</code>\n\t * in the graph context.\n\t */\n",
    "119403": "\t/**\n\t * Sets the factory that creates the cell views.\n\t */\n",
    "119405": "\t/**\n\t * Returns the indicator that tells what happens when editing is\n\t * interrupted.\n\t * @return the indicator that tells what happens when editing is\n\t * interrupted\n\t * @see #setInvokesStopCellEditing\n\t *\n\t */\n",
    "119407": "\t/**\n\t * Returns the factory that was passed to the constructor.\n\t */\n",
    "119408": "\t/**\n\t * Sets the current model.\n\t */\n",
    "119410": "\t/**\n\t * Returns <code>isEditable</code>. This is invoked from the UI before\n\t * editing begins to ensure that the given cell can be edited. This\n\t * is provided as an entry point for subclassers to add filtered\n\t * editing without having to resort to creating a new editor.\n\t * @return true if the specified cell is editable\n\t * @see #isEditable\n\t *\n\t */\n",
    "119413": "\t/**\n\t * Updates the cached array of ports.\n\t */\n",
    "119414": "\t/**\n\t * Overrides <code>JComponent</code>'s <code>getToolTipText</code>\n\t * method in order to allow the graph to create a tooltip\n\t * for the topmost cell under the mousepointer. This differs from JTree\n\t * where the renderers tooltip is used.\n\t * <p>\n\t * NOTE: For <code>JGraph</code> to properly display tooltips of its\n\t * renderers, <code>JGraph</code> must be a registered component with the\n\t * <code>ToolTipManager</code>.  This can be done by invoking\n\t * <code>ToolTipManager.sharedInstance().registerComponent(graph)</code>.\n\t * This is not done automatically!\n\t * @param event the <code>MouseEvent</code> that initiated the\n\t * <code>ToolTip</code> display\n\t * @return a string containing the  tooltip or <code>null</code>\n\t * if <code>event</code> is null\n\t */\n",
    "119418": "\t/**\n\t * Sets the graph's selection model. When a <code>null</code> value is\n\t * specified an emtpy\n\t * <code>selectionModel</code> is used, which does not allow selections.\n\t * @param selectionModel the <code>GraphSelectionModel</code> to use,\n\t * or <code>null</code> to disable selections\n\t * @see GraphSelectionModel\n\t *\n\t */\n",
    "119423": "\t/**\n\t * Returns the model for selections. This should always return a\n\t * non-<code>null</code> value. If you don't want to allow anything\n\t * to be selected\n\t * set the selection model to <code>null</code>, which forces an empty\n\t * selection model to be used.\n\t * @return the current selection model\n\t * @see #setSelectionModel\n\t *\n\t */\n",
    "119426": "\t/**\n\t * Clears the selection.\n\t */\n",
    "119429": "\t/**\n\t * Adds the specified model root cells to the view.\n\t */\n",
    "119430": "\t/**\n\t * Returns true if the selection is currently empty.\n\t * @return true if the selection is currently empty\n\t */\n",
    "119431": "\t/**\n\t * Returns the view for the specified cell. If create is true\n\t * and no view is found then a view is created using\n\t * createView(Object).\n\t */\n",
    "119433": "\t/**\n\t * Associates the specified model cell with the specified view.\n\t * Updates the portlist if necessary.\n\t */\n",
    "119434": "\t/**\n\t * Adds a listener for <code>GraphSelection</code> events.\n\t * @param tsl the <code>GraphSelectionListener</code> that will be notified\n\t * when a cell is selected or deselected (a \"negative\n\t * selection\")\n\t */\n",
    "119435": "\t/**\n\t * Removes the associaten for the specified model cell and\n\t * returns the view that was previously associated with the cell.\n\t * Updates the portlist if necessary.\n\t */\n",
    "119439": "\t/**\n\t * Removes a <code>GraphSelection</code> listener.\n\t * @param tsl the <code>GraphSelectionListener</code> to remove\n\t */\n",
    "119443": "\t/**\n\t * Notifies all listeners that have registered interest for\n\t * notification on this event type.  The event instance\n\t * is lazily created using the parameters passed into\n\t * the fire method.\n\t * @param e the <code>GraphSelectionEvent</code> generated by the\n\t * <code>GraphSelectionModel</code>\n\t * when a cell is selected or deselected\n\t * @see javax.swing.event.EventListenerList\n\t *\n\t */\n",
    "119447": "\t/**\n\t * Selects the specified cell.\n\t * @param cell the <code>Object</code> specifying the cell to select\n\t */\n",
    "119451": "\t/**\n\t * Selects the specified cells.\n\t * @param cells an array of objects that specifies\n\t * the cells to select\n\t */\n",
    "119455": "\t/**\n\t * Adds the cell identified by the specified <code>Object</code>\n\t * to the current selection.\n\t * @param cell the cell to be added to the selection\n\t */\n",
    "119459": "\t/**\n\t * Adds each cell in the array of cells to the current selection.\n\t * @param cells an array of objects that specifies the cells to add\n\t */\n",
    "119462": "\t/**\n\t * Removes the cell identified by the specified Object from the current\n\t * selection.\n\t * @param cell the cell to be removed from the selection\n\t */\n",
    "119465": "\t/**\n\t * Removes <code>cells</code> from the model. If <code>removeChildren</code>\n\t * is <code>true</code>, the children are also removed.\n\t * Notifies the model- and undo listeners of the change.\n\t */\n",
    "119466": "\t/**\n\t * Returns the first selected cell.\n\t * @return the <code>Object</code> for the first selected cell,\n\t * or <code>null</code> if nothing is currently selected\n\t */\n",
    "119469": "\t/**\n\t * Sends <code>cells</code> to back. Note: This expects an array of cells!\n\t */\n",
    "119470": "\t/**\n\t * Returns the number of cells selected.\n\t * @return the number of cells selected\n\t */\n",
    "119472": "\t/**\n\t * Brings <code>cells</code> to front. Note: This expects an array of cells!\n\t */\n",
    "119473": "\t/**\n\t * Returns true if the cell is currently selected.\n\t * @param cell an object identifying a cell\n\t * @return true if the cell is selected\n\t */\n",
    "119478": "\t/**\n\t * Scrolls to the specified cell. Only works when this\n\t * <code>JGraph</code> is contained in a <code>JScrollPane</code>.\n\t * @param cell the object identifying the cell to bring into view\n\t */\n",
    "119479": "\t\t/**\n\t\t * Returns the source of this change. This can either be a\n\t\t * view or a model, if this change is a GraphModelChange.\n\t\t */\n",
    "119481": "\t/**\n\t * Makes sure the specified point is visible.\n\t * @param p the point that should be visible\n\t */\n",
    "119486": "\t/**\n\t * Returns true if the graph is being edited. The item that is being\n\t * edited can be obtained using <code>getEditingCell</code>.\n\t * @return true if the user is currently editing a cell\n\t * @see #getSelectionCell\n\t *\n\t */\n",
    "119490": "\t/**\n\t * Ends the current editing session.\n\t * (The <code>DefaultGraphCellEditor</code>\n\t * object saves any edits that are currently in progress on a cell.\n\t * Other implementations may operate differently.)\n\t * Has no effect if the tree isn't being edited.\n\t * <blockquote>\n\t * <b>Note:</b><br>\n\t * To make edit-saves automatic whenever the user changes\n\t * their position in the graph, use {@link #setInvokesStopCellEditing}.\n\t * </blockquote>\n\t * @return true if editing was in progress and is now stopped,\n\t * false if editing was not in progress\n\t */\n",
    "119493": "\t/**\n\t * Cancels the current editing session. Has no effect if the\n\t * graph isn't being edited.\n\t */\n",
    "119496": "\t\t/**\n\t\t * Returns the source of this change. This can either be a\n\t\t * view or a model, if this change is a GraphModelChange.\n\t\t */\n",
    "119497": "\t/**\n\t * Selects the specified cell and initiates editing.\n\t * The edit-attempt fails if the <code>CellEditor</code>\n\t * does not allow\n\t * editing for the specified item.\n\t */\n",
    "119498": "\t\t/**\n\t\t * Returns a map of (cell view, attribute) pairs.\n\t\t */\n",
    "119499": "\t\t/**\n\t\t * called to save the state of a component in case it needs to\n\t\t * be restored because a drop is not performed.\n\t\t */\n",
    "119500": "\t/**\n\t * Returns the cell that is currently being edited.\n\t * @return the cell being edited\n\t */\n",
    "119501": "\t\t/**\n\t\t * Redoes a change.\n\t\t *\n\t\t * @exception CannotRedoException if the change cannot be redone\n\t\t */\n",
    "119504": "\t\t/**\n\t\t * called to restore the state of a component\n\t\t * because a drop was not performed.\n\t\t */\n",
    "119505": "\t/**\n\t * Messaged when the graph has changed enough that we need to resize\n\t * the bounds, but not enough that we need to remove the cells\n\t * (e.g cells were inserted into the graph). You should never have to\n\t * invoke this, the UI will invoke this as it needs to. (Note: This\n\t * is invoked by GraphUI, eg. after moving.)\n\t */\n",
    "119506": "\t\t/**\n\t\t * Execute this edit such that the next invocation to this\n\t\t * method will invert the last execution.\n\t\t */\n",
    "119507": "\t\t/**\n\t\t * called to set the insertion location to match the current\n\t\t * mouse pointer coordinates.\n\t\t */\n",
    "119510": "\t\t/**\n\t\t * Returns the list that exclusively contains <code>view</code>.\n\t\t */\n",
    "119513": "\t/**\n\t * Returns the hiddenSet.\n\t * @return Map\n\t */\n",
    "119515": "\t/**\n\t * Returns the hideEdgesOnBecomeInvisible.\n\t * @return boolean\n\t */\n",
    "119516": "\t\t/** Returns a shared instance of an empty selection model. */\n",
    "119518": "\t/**\n\t * Returns the hideEdgesOnHide.\n\t * @return boolean\n\t */\n",
    "119520": "\t\t/** A <code>null</code> implementation that selects nothing. */\n",
    "119521": "\t/**\n\t * Returns the rememberCellViews.\n\t * @return boolean\n\t */\n",
    "119523": "\t/**\n\t * Returns the showAllEdgesForVisibleVertices.\n\t * @return boolean\n\t */\n",
    "119524": "\t\t/** A <code>null</code> implementation that adds nothing. */\n",
    "119525": "\t/**\n\t * Returns the showEdgesOnShow.\n\t * @return boolean\n\t */\n",
    "119527": "\t\t/** A <code>null</code> implementation that removes nothing. */\n",
    "119530": "\t/**\n\t * Sets the hideEdgesOnBecomeInvisible.\n\t * @param hideEdgesOnBecomeInvisible The hideEdgesOnBecomeInvisible to set\n\t */\n",
    "119531": "\t\t/**\n\t\t * Invoked by the <code>GraphSelectionModel</code> when the\n\t\t * selection changes.\n\t\t *\n\t\t * @param e the <code>GraphSelectionEvent</code> generated by the\n\t\t *\t\t<code>GraphSelectionModel</code>\n\t\t */\n",
    "119532": "\t/**\n\t * Sets the hideEdgesOnHide.\n\t * @param hideEdgesOnHide The hideEdgesOnHide to set\n\t */\n",
    "119533": "\t/**\n\t* Returns the preferred display size of a <code>JGraph</code>. The height is\n\t* determined from <code>getPreferredWidth</code>.\n\t* @return the graph's preferred size\n\t*/\n",
    "119534": "\t/**\n\t * Sets the rememberCellViews.\n\t * @param rememberCellViews The rememberCellViews to set\n\t */\n",
    "119536": "\t/**\n\t * Sets the showAllEdgesForVisibleVertices.\n\t * @param showAllEdgesForVisibleVertices The showAllEdgesForVisibleVertices to set\n\t */\n",
    "119539": "\t/**\n\t * Sets the showEdgesOnShow.\n\t * @param showEdgesOnShow The showEdgesOnShow to set\n\t */\n",
    "119542": "\t/**\n\t * Paint the renderer. Overrides superclass paint\n\t * to add specific painting.\n\t */\n",
    "119543": "\t/**\n\t * Provided for subclassers to paint a selection border.\n\t */\n",
    "119552": "\t/**\n\t* Returns false to indicate that the width of the viewport does not\n\t* determine the width of the graph, unless the preferred width of\n\t* the graph is smaller than the viewports width.  In other words:\n\t* ensure that the graph is never smaller than its viewport.\n\t* @return false\n\t* @see Scrollable#getScrollableTracksViewportWidth\n\t*\n\t*/\n",
    "119561": "\t/**\n\t* Returns false to indicate that the height of the viewport does not\n\t* determine the height of the graph, unless the preferred height\n\t* of the graph is smaller than the viewports height.  In other words:\n\t* ensure that the graph is never smaller than its viewport.\n\t* @return false\n\t* @see Scrollable#getScrollableTracksViewportHeight\n\t*\n\t*/\n",
    "119564": "\t/**\n\t * Returns the hideGroups.\n\t * @return boolean\n\t */\n",
    "119565": "\t/**\n\t * Sets the hideGroups.\n\t * @param hideGroups The hideGroups to set\n\t */\n",
    "119567": "\t/**\n\t * Returns the connections between <code>cells</code> (and possibly\n\t * other, unselected cells).\n\t */\n",
    "119569": "\t/**\n\t * Returns a map of (GraphCell, Map)-pairs that represent the\n\t * view attributes for the respecive cells.\n\t */\n",
    "119572": "\t/**\n\t* Returns a string representation of this <code>JGraph</code>.\n\t* This method\n\t* is intended to be used only for debugging purposes, and the\n\t* content and format of the returned string may vary between\n\t* implementations. The returned string may be empty but may not\n\t* be <code>null</code>.\n\t* @return a string representation of this <code>JGraph</code>.\n\t*/\n",
    "119574": "\t/**\n\t * Returns true if the transferable support a text/plain format.\n\t */\n",
    "119575": "\t/**\n\t * Fetch the data in a text/plain format.\n\t */\n",
    "119576": "\t/**\n\t * If this UndoManager is inProgress, undo the last significant\n\t * UndoableEdit wrt. to source, and all insignificant edits back to\n\t * it. Updates indexOfNextAdd accordingly.\n\t *\n\t * <p>If not inProgress, indexOfNextAdd is ignored and super's routine is\n\t * called.</p>\n\t *\n\t * @see UndoManager#undo\n\t */\n",
    "119577": "\t/**\n\t * Returns true if the transferable support a text/html format.\n\t */\n",
    "119579": "\t/**\n\t * Fetch the data in a text/html format.\n\t */\n",
    "119580": "\t/**\n\t * Returns the the next significant edit wrt. to current\n\t * to be undone if undo is called. May return null.\n\t */\n",
    "119582": "\t/**\n\t * If this <code>UndoManager</code> is <code>inProgress</code>,\n\t * redoes the last significant <code>UndoableEdit</code> with\n\t * respect to source or after, and all insignificant\n\t * edits up to it. Updates <code>indexOfNextAdd</code> accordingly.\n\t *\n\t * <p>If not <code>inProgress</code>, <code>indexOfNextAdd</code>\n\t * is ignored and super's routine is called.</p>\n\t */\n",
    "119583": "\t/**\n\t * Returns the source of the edge.\n\t */\n",
    "119585": "\t/**\n\t * Returns the target of the edge.\n\t */\n",
    "119586": "\t/**\n\t * Returns the the next significant edit wrt. to current\n\t * to be redone if redo is called. May return null.\n\t */\n",
    "119587": "\t/**\n\t * Sets the source of the edge.\n\t */\n",
    "119588": "\t/**\n\t * Add a new entry for this child, parent pair to the parent map.\n\t * The child and parent are added to the set of changed nodes.\n\t * Note: The previous parent is changed on execution of this parent\n\t * map and must be added by the GraphModel and reflected by the\n\t * GraphChange.getChanged method.\n\t * TODO: In general, the GraphModel should be in charge of computing\n\t * the set of changed cells.\n\t */\n",
    "119589": "\t/**\n\t * Returns the target of <code>edge</code>.\n\t */\n",
    "119590": "\t/**\n\t * Returns the number of entries.\n\t */\n",
    "119591": "\t/**\n\t * Create a clone of the cell. The cloning of the\n\t * user object is deferred to the cloneUserObject()\n\t * method.\n\t *\n\t * @return Object  a clone of this object.\n\t */\n",
    "119593": "\t/**\n\t * Returns an <code>Iterator</code> for the entries in the map.\n\t */\n",
    "119596": "\t/**\n\t * Returns a <code>Set</code> for the nodes, childs and parents,\n\t * in this parent map.\n\t */\n",
    "119597": "\t/**\n\t * This method ensures a non-null value. If the super method\n\t * returns null then the last valid parent is returned.\n\t * Note: If a vertex is removed, all ports will be replaced\n\t * in connected edges. The ports are replaced by the center\n\t * point of the <i>last</i> valid vertex view.\n\t */\n",
    "119598": "\t/**\n\t * Creates a new parent map based on this parent map,\n\t * where the child and parents are mapped using <code>map</code>.\n\t * If one the cells is not in <code>map</code>, then the original\n\t * cell is used instead.<p>\n\t */\n",
    "119599": "\t/**\n\t * Returns the bounds for the port view.\n\t */\n",
    "119600": "\t\t/**\n\t\t * Returns the child of the relation.\n\t\t */\n",
    "119602": "\t\t/**\n\t\t * Returns the parent of the relation.\n\t\t */\n",
    "119606": "\t/**\n\t * Returns the point that is closest to the port view on\n\t * <code>edge</code>. Returns <code>null</code> if\n\t * <code>edge</code> has less than 2 points.\n\t */\n",
    "119607": "\t/**\n\t * Override parent method to synchronize value property and userObject.\n\t * The following holds for each GraphCell c:<p>\n\t * GraphConstants.getValue(c.getAttributes()) == c.getUserObject()<p>\n\t * <strong>Note:</strong> A cell's userObject can be set using\n\t * GraphModel.edit() with a propertyMap that carries a value entry\n\t * for that cell.\n\t */\n",
    "119608": "\t/**\n\t * Returns the point of <code>edge</code> at index\n\t * <code>index</code>. Avoids calling <code>getLocation</code>\n\t * on the opposite port of <code>edge</code> (possible\n\t * infinite recursion).\n\t */\n",
    "119609": "\t/**\n\t * Provides access to the children list to change ordering.\n\t * This method returns a <code>Collections.EMPTY_LIST</code>\n\t * if the list of childrenpoints to <code>null</code>.\n\t */\n",
    "119615": "\t/**\n\t * Sets the attributes.\n\t * @param attributes The attributes to set\n\t */\n",
    "119617": "\t/**\n\t * Create a clone of the cell. The cloning of the\n\t * user object is deferred to the cloneUserObject()\n\t * method.\n\t *\n\t * @return Object  a clone of this object.\n\t */\n",
    "119620": "\t/**\n\t * Override tool tip method to display URL\n\t *\n\t * @param event  event passed\n\t * @return       tooltip as URL\n\t */\n",
    "119621": "\t/**\n\t * Sets the {3} attribute of the UserProperties object\n\t *\n\t * @param key The new {3} value\n\t * @param buttonRectangle The new {3} value\n\t */\n",
    "119624": "\t/**\n\t * Override Swing's poor label position choice. The new behaviour\n\t * shows the label relative to the current location of the mouse.\n\t *\n\t * @param event  tool tip location event\n\t * @return       tool tip location\n\t */\n",
    "119625": "\t/**\n\t * Gets the {3} attribute of the UserProperties object\n\t *\n\t * @param key Description of Parameter\n\t * @return The {3} value\n\t */\n",
    "119626": "\t/**\n\t * Determines if current mouse location is hovering over a hyperlink.\n\t * Remember, <code>CustomLinkHandler</code> is NOT notified of hyperlink\n\t * events if editing is enabled by defintion in JEditorPane. In otherwords,\n\t * when HTML code is being displayed, then hyperlink tracking is not occuring.\n\t *\n\t * @return   <code>true</code> if mouse if hovering over hyperlink and pane\n\t * is not editable\n\t */\n",
    "119627": "\t/**\n\t * Description of the Method\n\t */\n",
    "119628": "\t/**\n\t * Gets the URL being hovered over.\n\t *\n\t * @return   The URL value if mouse is currently hovering over a URL, or\n\t * <code>null</code> if not currently hovering over a URL\n\t */\n",
    "119630": "\t\t/**\n\t\t * Determines if current mouse location is hovering over a hyperlink.\n\t\t * Remember, <code>CustomLinkHandler</code> is NOT notified of hyperlink\n\t\t * events if editing is enabled by defintion in JEditorPane. In otherwords,\n\t\t * when HTML code is being displayed, then hyperlink tracking is not occuring.\n\t\t *\n\t\t * @return   true if mouse if hovering over hyperlink and pane is not editable\n\t\t */\n",
    "119631": "\t/** Removes the current instance from the  \n\t *  position manager and from\n\t *  the locale change adapter.\n\t *  After that the method calls\n\t *  the super implementation. \n\t *  \n\t * @see java.lang.Object#finalize()\n\t */\n",
    "119632": "\t\t/**\n\t\t * Gets the URL being hovered over.\n\t\t *\n\t\t * @return   The URL value if mouse is currently hovering over a URL, or\n\t\t * <code>null</code> if not currently hovering over a URL\n\t\t */\n",
    "119633": "\t/** Calls the super implementation\n\t *  and makes an update for the\n\t *  component by using the locale\n\t *  change adapter and the \n\t *  position manager.\n\t *  \n\t *  @param name the new name\n\t *  @see PositionManager#updateComponent(Component)\n\t *  @see LocaleChangeAdapter#updateComponent(Component)\n\t *  @see java.awt.Component#setName(java.lang.String)\n\t * \n\t */\n",
    "119636": "\t/** makes an update for the locale\n\t *  dependent values from the whole\n\t *  container and calls\n\t *  the super implementation \n\t *  \n\t * @see java.awt.Component#validate()\n\t * @see LocaleChangeAdapter#updateContainer(Container)\n\t * @see java.awt.Container#validate()\n\t */\n",
    "119638": "\t/** Registers the default \n\t *  window esc action for this\n\t *  frame. \n\t * \n\t *  @see GPEscAction\n\t *  \n\t */\n",
    "119640": "\t/** Registers the specified\n\t *  action for a esc action \n\t *  of this frame. \n\t * \n\t *  @param action the action \n\t *  \n\t */\n",
    "119642": "\t/** Unregisters the esc action \n\t *  of this frame. \n\t *  \n\t */\n",
    "119644": "\t/** Registers the specified button\n\t *  for the default esc button.\n\t * \n\t * @param button\n\t */\t\n",
    "119647": "\t/** Registers the specified button\n\t *  for the default button.\n\t * \n\t * @param button\n\t */\t\n",
    "119649": "\t/**If the button is set, then\n\t * the method will call the do click\n\t * method at the button.\n\t * \n\t * If the event source \n\t * is a JInternalFrame or a Window, then\n\t * the action will call the dispose method. \n\t * \n\t * \n\t * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)\n\t * @see javax.swing.JButton#doClick()\n\t */\n",
    "119653": "\t/** Removes the Split Pane from the \n\t *  position manager and calls\n\t *  the super implementation. \n\t *  \n\t * @see java.lang.Object#finalize()\n\t */\n",
    "119661": "\t/** Will be called from the translator \n\t *  if a locale was changed\n\t *  \n\t */\n",
    "119664": "\t/** returns the keys for the proper names\n\t * \n\t */\n",
    "119666": "\t/** returns the value for a proper name key\n\t * \n\t */\n",
    "119670": "\t/**\n\t *  Sets the bounds attribute of the JFrameP object\n\t *\n\t *@param  buttonRectangle  The new bounds value\n\t */\n",
    "119672": "\t/** Stores the property value for some special\n\t *  properties.\n\t * \n\t *  The method considers the property\n\t *  <ul>\n\t *  <li>{@link JSplitPane#DIVIDER_LOCATION_PROPERTY}</li>\n\t *  </ul> \n\t * \n\t * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)\n\t */\n",
    "119673": "\t/**\n\t *  Sets the location attribute of the JFrameP object\n\t *\n\t *@param  p  The new location value\n\t */\n",
    "119674": "\t/**\n\t * Sets the mode of the snapSelectedView drag operation.\n\t * @param bSnapToGrid specifies if the snap-to-grid mode should be applied during a drag operation.\n\t * If it is enabled,  the view, that is returned by the findViewForPoint(Point pt),\n\t * will be snapped to the grid lines. <br>\n\t * By default, findViewForPoint() returns the first view from the GraphContext whose bounds intersect with snap proximity of a mouse pointer.\n\t * If snap-to-grid mode is disabled, views are moved by a snap increment.\n\t */\n",
    "119675": "\t/**\n\t *  Sets the size attribute of the JFrameP object\n\t *\n\t *@param  d  The new size value\n\t */\n",
    "119680": "\t/**\n\t *  Description of the Method\n\t */\n",
    "119694": "\t/**\n\t *  Description of the Method\n\t */\n",
    "119697": "\t/**\n\t *  Description of the Method\n\t */\n",
    "119701": "\t/**\n\t * Returns the document.\n\t * @return GPDocument\n\t */\n",
    "119704": "\t/**\n\t * Sets the document.\n\t * @param document The document to set\n\t */\n",
    "119715": "\t/**\n\t * Description of the Method\n\t */\n",
    "119731": "\t/**\n\t * Returns the filename.\n\t * @return String\n\t */\n",
    "119734": "\t/**\n\t * Sets the filename.\n\t * @param filename The filename to set\n\t */\n",
    "119750": "\t/**\n\t * Fetch the editor contained in this panel\n\t */\n",
    "119752": "\t/** Returns a file filter for the <tt>pad_xml</tt> extension.\n\t *\n\t * @see org.jgraph.pad.GraphModelFileFormat#getFileFilter()\n\t */\n",
    "119759": "\t/** Returns the compZipSelect object.\n\t *\n\t * @see #compZipSelect\n\t * @see org.jgraph.pad.GraphModelFileFormat#getWriteAccessory()\n\t */\n",
    "119760": "\t/** returns the GPGraph UI\n\t */\n",
    "119762": "\t/** Returns the view from the current graph\n\t *\n\t */\n",
    "119768": "\t/**\n\t * Puts the value from the checkbox into the properties hashtable\n\t *\n\t * @see org.jgraph.pad.GraphModelFileFormat#getWriteProperties(JComponent)\n\t */\n",
    "119805": "\t/** not from Printable interface, but related\n\t */\n",
    "119831": "\t/**\n\t * Returns the graphUndoManager.\n\t * @return GraphUndoManager\n\t */\n",
    "119834": "\t/**\n\t * Sets the graphUndoManager.\n\t * @param graphUndoManager The graphUndoManager to set\n\t */\n",
    "119837": "\t/** Delete element from library.  Caller is responsible for any warning messages\n\t * as this method immediately deletes without any prompts.\n\t */\n",
    "119838": "\t/** Resets the Graph undo manager\n\t */\n",
    "119840": "\t\t/**\n\t\t * Create a Transferable to use as the source for a data transfer.\n\t\t *\n\t\t * @param buttonCircle  The component holding the data to be transfered.  This\n\t\t *  argument is provided to enable sharing of TransferHandlers by\n\t\t *  multiple components.\n\t\t * @return  The representation of the data to be transfered.\n\t\t *\n\t\t */\n",
    "119841": "\t/**\n\t * Returns the graphpad.\n\t * @return GPGraphpad\n\t */\n",
    "119845": "\t/**\n\t * Sets the graphpad.\n\t * @param graphpad The graphpad to set\n\t */\n",
    "119849": "\t/**\n\t * Returns the touch.\n\t * @return Touch\n\t */\n",
    "119852": "\t/**\n\t * Sets the touch.\n\t * @param touch The touch to set\n\t */\n",
    "119858": "\t\t/**\n\t\t * Messaged when the Document has created an edit, the edit is\n\t\t * added to <code>graphUndoManager</code>, an instance of UndoManager.\n\t\t */\n",
    "119859": "\t/**\n\t * Returns the actionMap.\n\t * @return ActionMap\n\t */\n",
    "119861": "\t/**\n\t * Sets the actionMap.\n\t * @param actionMap The actionMap to set\n\t */\n",
    "119862": "  /**\n   * Returns the old Locale\n   */\n",
    "119863": "  /**\n   * Returns the new Locale\n   */\n",
    "119864": "  /** Adds the Propernameprovider and asks him for\n   *  the proper names.\n   *\n   */\n",
    "119866": "  /** removes the propernameprovider\n   *\n   */\n",
    "119869": "  /** merges the keys of any registered ProperNameProvider and returns them.\n   *\n   */\n",
    "119870": "  /** Returns the object for the key or null\n   *\n   */\n",
    "119873": "\t/**\n\t * Returns the findPattern.\n\t * @return String\n\t */\n",
    "119877": "\t/**\n\t * Sets the findPattern.\n\t * @param findPattern The findPattern to set\n\t */\n",
    "119881": "\t/**\n\t * Returns the lastFound.\n\t * @return Object\n\t */\n",
    "119884": "\t/**\n\t * Sets the lastFound.\n\t * @param lastFound The lastFound to set\n\t */\n",
    "119888": "\t/**\n\t * Returns the overviewDialog.\n\t * @return JDialog\n\t */\n",
    "119891": "\t/**\n\t * Returns true if <code>object</code> is a vertex, that is, if it\n\t * is not an instance of Port or Edge, and all of its children are\n\t * ports, or it has no children.\n\t */\n",
    "119892": "\t/**\n\t * Sets the overviewDialog.\n\t * @param overviewDialog The overviewDialog to set\n\t */\n",
    "119893": "\t/**\n\t * Returns true if <code>object</code> is a vertex, that is, if it\n\t * is not an instance of Port or Edge, and all of its children are\n\t * ports, or it has no children.\n\t */\n",
    "119896": "\t/**\n\t * Returns the splitPane.\n\t * @return JSplitPane\n\t */\n",
    "119900": "\t/**\n\t * Sets the splitPane.\n\t * @param splitPane The splitPane to set\n\t */\n",
    "119904": "\t/**\n\t * Returns the scrollPane.\n\t * @return JScrollPane\n\t */\n",
    "119908": "\t/**\n\t * Sets the scrollPane.\n\t * @param scrollPane The scrollPane to set\n\t */\n",
    "119909": "\t/**\n\t * Overrides <code>JComponent</code>'buttonSelect <code>getToolTipText</code>\n\t * method in order to allow the graph controller to create a tooltip\n\t * for the topmost cell under the mousepointer. This differs from JTree\n\t * where the renderers tooltip is used.\n\t * <p>\n\t * NOTE: For <code>JGraph</code> to properly display tooltips of its\n\t * renderers, <code>JGraph</code> must be a registered component with the\n\t * <code>ToolTipManager</code>.  This can be done by invoking\n\t * <code>ToolTipManager.sharedInstance().registerComponent(graph)</code>.\n\t * This is not done automatically!\n\t * @param event the <code>MouseEvent</code> that initiated the\n\t * <code>ToolTip</code> display\n\t * @return a string containing the  tooltip or <code>null</code>\n\t * if <code>event</code> is null\n\t */\n",
    "119913": "\t/**\n\t * Returns the columnRule.\n\t * @return Rule\n\t */\n",
    "119914": "\t/**\n\t * Notification from the <code>UIManager</code> that the L&F has changed.\n\t * Replaces the current UI object with the latest version from the\n\t * <code>UIManager</code>. Subclassers can override this to support\n\t * different GraphUIs.\n\t * @see JComponent#updateUI\n\t *\n\t */\n",
    "119919": "\t/**\n\t * Returns the rowRule.\n\t * @return Rule\n\t */\n",
    "119920": "\t/** Returns true if the given vertices are conntected by a single edge\n\t * in this document.\n\t */\n",
    "119926": "\t/**Overriden, in order to be able to deal with window events*/\n",
    "119927": "\t/**\n\t * Sets the columnRule.\n\t * @param columnRule The columnRule to set\n\t */\n",
    "119934": "\t/**\n\t * Sets the rowRule.\n\t * @param rowRule The rowRule to set\n\t */\n",
    "119940": "\t/**\n\t * Returns the enableTooltips.\n\t * @return boolean\n\t */\n",
    "119947": "\t/**\n\t * Sets the enableTooltips.\n\t * @param enableTooltips The enableTooltips to set\n\t */\n",
    "119950": "\t/** Sets the current text area\n\t *\n\t */\n",
    "119952": "\t/** clears the window\n\t */\n",
    "119953": "\t/**\n\t * Returns the internalFrame.\n\t * @return GPInternalFrame\n\t */\n",
    "119956": "\t/** writes a boolean value to the target\n\t */\n",
    "119958": "\t/** writes a boolean value to the target\n\t *\n\t */\n",
    "119959": "\t/**\n\t * Sets the internalFrame.\n\t * @param internalFrame The internalFrame to set\n\t */\n",
    "119960": "\t\t\t/**\n\t\t\t * Overriting this so that I could modify an eiditor container.\n\t\t\t * see http://sourceforge.net/forum/forum.php?thread_id=781479&forum_id=140880\n\t\t\t */\n",
    "119961": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119962": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119965": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119966": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119968": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119971": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119972": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119973": "\t/**\n\t * Returns the writeProperties.\n\t * @return Hashtable\n\t */\n",
    "119974": "\t/**\n\t * Returns the graphModelProvider.\n\t * @return GraphModelProvider\n\t */\n",
    "119975": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119976": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119977": "\t/**\n\t * Sets the writeProperties.\n\t * @param writeProperties The writeProperties to set\n\t */\n",
    "119979": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119980": "\t/**\n\t * Returns the networkModel.\n\t * @return GraphNetworkModel\n\t */\n",
    "119984": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119986": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119989": "\t/**\n\t * Sets the networkModel.\n\t * @param networkModel The networkModel to set\n\t */\n",
    "119990": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119994": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119997": "\t/** writes the value to the target\n\t *\n\t */\n",
    "120002": "\t/** writes the value to the target\n\t *\n\t */\n",
    "120005": "\t/** writes the value to the target\n\t *\n\t */\n",
    "120016": "\t/**\n\t * Returns the barKey.\n\t * @return String\n\t */\n",
    "120017": "\t/**\n\t * Returns the barValue.\n\t * @return String\n\t */\n",
    "120020": "\t/**\n\t * Returns the pos.\n\t * @return int\n\t */\n",
    "120021": "\t/**\n\t * Sets the barKey.\n\t * @param barKey The barKey to set\n\t */\n",
    "120022": "\t/**\n\t * Sets the barValue.\n\t * @param barValue The barValue to set\n\t */\n",
    "120024": "\t/**\n\t * Sets the pos.\n\t * @param pos The pos to set\n\t */\n",
    "120025": "\t/** Prints the Entry with all properties.\n\t * \n\t */\t\n",
    "120039": "\t/**\n\t * Create the menubar for the app.  By default this pulls the\n\t * definition of the menu from the associated resource file.\n\t */\n",
    "120043": "\t/** creates the popup menu for the graph\n\t */\n",
    "120046": "\t/** creates the popup menu for the library\n\t */\n",
    "120049": "\t/** creates a popup menu for the specified key.\n\t */\n",
    "120050": "\t\t/**\n\t\t * Returns a new map that contains all (key, value)-pairs\n\t\t * of <code>newState</code> where either key is not used\n\t\t * or value is different for key in <code>oldState</code>.\n\t\t * In other words, this method removes the common entries\n\t\t * from oldState and newState, and returns the \"difference\"\n\t\t * between the two.\n\t\t * \n\t\t * This method never returns null.\n\t\t */\n",
    "120052": "\t/** creates a menu for the specified key\n\t */\n",
    "120114": "\t/** updates all Abstract Buttons from this action\n\t */\n",
    "120116": "\t/** Should return presentation Text for the \n\t *  action command or null \n\t *  for the default\n\t */\n",
    "120142": "\t/** Shows a file open dialog and returns the filename. */\n",
    "120146": "\t/** Shows a file save dialog and returns the filename. */\n",
    "120150": "\t\t/** Returns true if the file ends with the full extension or\n\t\t *  if the file is a directory\n\t\t *\n\t\t */\n",
    "120153": "\t\t/** returns the desc\n\t\t */\n",
    "120173": "\t/** Returns the List Cell Renderer for the\n\t *  Items. By default returns null.\n\t *\n\t */\n",
    "120176": "\t/** Returns the item presentation text\n\t *  (buttonEdge.g. for the MenuItem)\n\t *\n\t *  The default Implemenation returns\n\t *  <tt>item.toString()</tt>\n\t *\n\t */\n",
    "120191": "\t/**\n\t * Returns the buttonActivity.\n\t * @return JToggleButton\n\t */\n",
    "120201": "\t/** updates all Abstract Buttons from this action\n\t */\n",
    "120202": "\t/** removes the abstract action from the\n\t *  action control\n\t */\n",
    "120210": "\t/**\n\t * Returns the buttonDecision.\n\t * @return JToggleButton\n\t */\n",
    "120225": "\t/**\n\t * Returns the buttonStart.\n\t * @return JToggleButton\n\t */\n",
    "120244": "\t/**\n\t * Returns the buttonEnd.\n\t * @return JToggleButton\n\t */\n",
    "120265": "\t/** Shows a file chooser with the\n\t *  file filters from the file formats\n\t *  to select a file.\n\t *\n\t *  Furthermore the method uses the selected\n\t *  file format for the read process.\n\t *\n\t *  @see java.awt.event.ActionListener#actionPerformed(ActionEvent)\n\t *  @see GraphModelProviderRegistry\n\t */\n",
    "120268": "\t/**\n\t * Returns the buttonSplit.\n\t * @return JToggleButton\n\t */\n",
    "120277": "\t/**\n\t * Calls the method setMaximum(true) for each\n\t * JInternalFrame.\n\t *\n\t * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)\n\t */\n",
    "120281": "\t/**\n\t * Calls the method setIcon(true) for each\n\t * JInternalFrame.\n\t * \n\t * \n\t * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)\n\t */\n",
    "120291": "\t/**\n\t * Returns the buttonJoin.\n\t * @return JToggleButton\n\t */\n",
    "120313": "\t/**\n\t * Returns the buttonEdge.\n\t * @return JToggleButton\n\t */\n",
    "120314": "\t/**\n\t * Override or implement to map from cells to urls.\n\t * @param cell Cell that should be converted to a URL\n\t * @return String String that can be used as a href\n\t */\n",
    "120316": "\t/**\n\t * Override or implement to map from cells to labels.\n\t * @param cell Cell that should be converted to a label\n\t * @return String String that can be used as a label\n\t */\n",
    "120320": "\t/** Returns the name of the action\n\t *\n\t */\n",
    "120331": "\t/**\n\t * Returns the buttonLine.\n\t * @return JToggleButton\n\t */\n",
    "120337": "\t/**\n\t * Gets the GPInternalFrame from the ActionEvent and sets the\n\t * frame toFront and selected.\n\t *\n\t * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)\n\t */\n",
    "120339": "\t/**Returns a JMenu and stores the JMenu at the menus Vector\n\t *\n\t * @see #menus\n\t * @see org.jgraph.pad.actions.AbstractActionList#getMenuBarComponent()\n\t */\n",
    "120340": "\t/** returns the actionCommand (The presentation file name from the document)\n\t */\n",
    "120343": "\t/** updates the window list at the menu entries\n\t *\n\t */\n",
    "120344": "\t/** Returns a JMenuItem with a link to this action.\n\t */\n",
    "120346": "\t/**\n\t * Returns the buttonSelect.\n\t * @return JToggleButton\n\t */\n",
    "120348": "\t/** Returns a clean JButton which has a link to this action.\n\t *\n\t */\n",
    "120354": "\t/** empty implementation for this typ of action\n\t *\n\t */\n",
    "120357": "\t/** Should return presentation Text for the\n\t *  action command or null\n\t *  for the default\n\t */\n",
    "120363": "\t/**\n\t * Returns the buttonText.\n\t * @return JToggleButton\n\t */\n",
    "120382": "\t/**\n\t * Returns the buttonZoomArea.\n\t * @return JToggleButton\n\t */\n",
    "120385": "\t/**\n\t * Returns the message.\n\t *\n\t * @return The message from the status bar\n\t */\n",
    "120386": "\t/**Returns <tt>Default Graph Model</tt>\n\t *\n\t * @see org.jgraph.pad.GraphModelProvider#getPresentationName()\n\t */\n",
    "120388": "\t/**\n\t * Returns the scale.\n\t * @return JLabel\n\t */\n",
    "120392": "\t/**\n\t * Sets the message.\n\t * @param message The message to set\n\t */\n",
    "120394": "\t/**\n\t * Sets the scale.\n\t * @param scale The scale to set\n\t */\n",
    "120395": "\t/**\n\t * Creates a clean default graph model.\n\t *\n\t * @see DefaultGraphModel\n\t * @see org.jgraph.pad.GraphModelProvider#createCleanGraphModel()\n\t */\n",
    "120397": "\t/** Currently returns every time false.\n\t *\n\t * @see org.jgraph.pad.GraphModelProvider#isMutateAbleTo(Class)\n\t */\n",
    "120404": "\t/**Adds a Port to the model specific vertex object\n\t *\n\t * @see org.jgraph.pad.GraphModelProvider#addPort(Object, Object)\n\t */\n",
    "120408": "\t/**\n\t * Creates a new clean graph for this model provider\n\t *\n\t * @see org.jgraph.pad.GraphModelProvider#createCleanGraph(GraphModel model)\n\t */\n",
    "120412": "\t/**Returns the selected graph model provider\n\t *\n\t */\n",
    "120426": "\t/**\n\t * Returns the answer.\n\t * @return int\n\t */\n",
    "120432": "\t/** shows the select dialog. If only one\n\t *  graph model provider is available the\n\t *  method returns directly.\n\t */\n",
    "120538": "\t/**\n\t * Create a clone of the user object. This is provided for\n\t * subclassers who need special cloning. This implementation\n\t * simply returns a reference to the original user object.\n\t *\n\t * @return Object  a clone of this cells user object.\n\t */\n",
    "120540": "\t/**\n\t * Returns a cell handle for the view, if the graph and the view\n\t * are sizeable.\n\t */\n",
    "120684": "\t/** removes the specified Internal Frame from the Graphpad\n\t */\n",
    "120743": "\t/**\n\t * Returns the marqueeHandler.\n\t * @return JGpdMarqueeHandler\n\t */\n",
    "121353": "\t/**Returns a JMenu and stores the JMenu at the menus Vector\n\t *\n\t * @see #menus\n\t * @see org.jgraph.pad.actions.AbstractActionList#getMenuBarComponent()\n\t */\n",
    "121420": "\t/**\n\t * Creates a new clean graph for this model provider\n\t *\n\t * @see org.jgraph.pad.GraphModelProvider#createCleanGraph(GraphModel model)\n\t */\n",
    "121484": "  /**\n   * This puts a property in the map. It is indexed by its\n   * name and holds the specified value. Stands for Put PROPerty.\n   * @param name String\n   * @param value Object\n   */\n",
    "121487": "  /**\n   * Removes a property from the list. Stands for\n   * Remove PROPerty.\n   * @param name String\n   */\n",
    "121488": "  /**\n   * Gets the property indexed by the name specified.\n   * Stands for Get PROPerty.\n   * @param name String\n   * @return Object\n   */\n",
    "121492": "  /**\n   * Returns a list of all property indexes contained within the\n   * map.\n   * @return LogoList\n   */\n",
    "121494": "  /**\n   * Returns a string of the data within.\n   * @return String\n   */\n",
    "121497": "  /**\n   * Creates a copy of this map and returns it.\n   * @return LogoMap\n   */\n",
    "121502": "  /**\n   * Puts a link at the front of the list.\n   * @param o Object\n   */\n",
    "121505": "  /**\n   * Puts a link at the front of a copied list and returns the\n   * copy.\n   * @param o Object\n   * @return LogoList\n   */\n",
    "121508": "  /**\n   * Puts a link at the end of the list\n   * @param o Object\n   */\n",
    "121512": "  /**\n   * Puts a link at the end of a copied list and returns\n   * the copy\n   * @param o Object\n   * @return LogoList\n   */\n",
    "121516": "  /**\n   * Returns whether there are elements in this list.\n   * @return boolean\n   */\n",
    "121518": "  /**\n   * Returns a reference to the first object in the list\n   * @return Object\n   */\n",
    "121522": "  /**\n   * Returns a reference to the last object in the list\n   * @return Object\n   */\n",
    "121524": "  /**\n   * Returns a list with all but the first element if this list.\n   * @return LogoList\n   */\n",
    "121526": "  /**\n   * Returns a list with all but the last element of this list.\n   * @return LogoList\n   */\n",
    "121527": "  /**\n   * Prepares the object for use.\n   * @param file String\n   * @param out OutputStream\n   * @throws IOException\n   */\n",
    "121528": "  /**\n   * Removes the first element from the list. Returns a reference to this list.\n   * @return LogoList\n   */\n",
    "121531": "  /**\n   * Removes the last element of the list. Returns a reference to this list.\n   * @return LogoList\n   */\n",
    "121533": "  /**\n   * Returns the number of elements in this list.\n   * @return int\n   */\n",
    "121535": "  /**\n   * Removes comments and junk only humans need and puts in LogoList. Step 1\n   * @throws IOException - if file cannot be opened for any reason.\n   * @param file file to preparse\n   */\n",
    "121539": "  /**\n   * Creates a copy of this list and returns it.\n   * @return LogoList\n   */\n",
    "121543": "  /**\n   * Returns a string representation of this list. Conforms to Logo display.\n   * @return String\n   */\n",
    "121546": "  /**\n   * Fast removal of any occurances of \"o\"\n   * @param o Object\n   */\n",
    "121548": "  /**\n   * Imitates a doList command in logo. Pass the ForEachListener with the\n   * appropriate instructions to run on each list item.\n   * @param fel ForEachListener\n   */\n",
    "121551": "  /**\n   * Returns whether the list contains the object requested.\n   * @param o Object\n   * @return boolean\n   */\n",
    "121552": "  /**\n   * Removes all data from this object.\n   */\n",
    "121554": "  /**\n   * Rewrites the type so that the information is correctly formatted for\n   * SQL\n   * @param value String\n   * @param type String\n   * @return String\n   */\n",
    "121567": "  /**\n   * Finite State Machine, Compiler Directive?\n   * Returns if this line is a compiler directive or not.\n   * @param line String\n   * @return boolean\n   */\n",
    "121585": "  /**\n   * Sends output to console if debug is on.\n   * @param text String\n   */\n",
    "121607": "\t/**\n\t * This method initializes jContentPane\n\t * \n\t * @return javax.swing.JPanel\n\t */\n",
    "121610": "\t/**\n\t * This method initializes jJMenuBar\n\t * \n\t * @return javax.swing.JMenuBar\n\t */\n",
    "121612": "\t/**\n\t * This method initializes jMenu\n\t * \n\t * @return javax.swing.JMenu\n\t */\n",
    "121614": "\t/**\n\t * This method initializes jMenu\n\t * \n\t * @return javax.swing.JMenu\n\t */\n",
    "121616": "\t/**\n\t * This method initializes jMenuItem\n\t * \n\t * @return javax.swing.JMenuItem\n\t */\n",
    "121620": "\t/**\n\t * This method initializes jMenuItem\n\t * \n\t * @return javax.swing.JMenuItem\n\t */\n",
    "121627": "\t/**\n\t * This method initializes txtDistance\n\t * \n\t * @return javax.swing.JTextField\n\t */\n",
    "121629": "\t/**\n\t * This method initializes txtConsumption\n\t * \n\t * @return javax.swing.JTextField\n\t */\n",
    "121631": "\t/**\n\t * This method initializes cboDistanceUnit\n\t * \n\t * @return javax.swing.JComboBox\n\t */\n",
    "121633": "\t/**\n\t * This method initializes cboConsumptionUnit\n\t * \n\t * @return javax.swing.JComboBox\n\t */\n",
    "121636": "\t/**\n\t * This method initializes bttnCalculate\n\t * \n\t * @return javax.swing.JButton\n\t */\n",
    "121639": "\t/**\n\t * Calculates the consumption in MPG\n\t * \n\t * @param distanceInKm\n\t *            Distance in kilometers\n\t * @param numberOfLiters\n\t *            Number of liters used\n\t * @return Consumption in MPG\n\t */\n",
    "121642": "\t/**\n\t * Calculates the consumption in MPG\n\t * \n\t * @param distanceInKm\n\t *            Distance in kilometers\n\t * @param numberOfGallons\n\t *            Number of US Gallons used\n\t * @return Consumption in MPG\n\t */\n",
    "121643": "  /**\n   * Rewrites the type so that the information is correctly formatted for\n   * SQL\n   * @param value String\n   * @param type String\n   * @return String\n   */\n",
    "121645": "\t/**\n\t * Calculates the consumption in MPG\n\t * \n\t * @param distanceInMiles\n\t *            Distance in miles\n\t * @param numberOfLiters\n\t *            Number of liters used\n\t * @return Consumption in MPG\n\t */\n",
    "121648": "\t/**\n\t * Calculates the consumption in L100Km\n\t * \n\t * @param distanceInKm\n\t *            Distance in kilometers\n\t * @param numberOfLiters\n\t *            Number of liters used\n\t * @return Consumption in L100Km\n\t */\n",
    "121661": "\t/**\n\t *  Show this dialog\n\t */\n",
    "121663": "\t/**\n\t *  Sets the current attribute (progress value) of the ProgressDialog\n\t *\n\t * @param  aCurrent  The new current (progress) value\n\t */\n",
    "121664": "\t/**\n\t *  Gets the current attribute (progress value) of the ProgressDialog\n\t *\n\t * @return    The current (progress) value\n\t */\n",
    "121665": "\t/**\n\t * A non-polymorphic pack-and-set-visible returning the boolean result\n\t * of the dialog.\n\t *\n\t * @return    User response, {@code true} is \"yes\".\n\t */\n",
    "121666": "\t/**\n\t *  Instances the Listener for user input during progress\n\t *\n\t * @param  aDoCancel  The new doCancel value\n\t */\n",
    "121670": "\t/**\n\t *  Sets the max (complete progress) of the ProgressDialog\n\t *\n\t * @param  aMax  The new max value\n\t */\n",
    "121673": "\t/**\n\t *  Gets the max (complete progress) of the ProgressDialog\n\t *\n\t * @return    The max value\n\t */\n",
    "121675": "\t/**\n\t *  Sets the message attribute of the ProgressDialog object\n\t *\n\t * @param  aMessage  The new message value\n\t */\n",
    "121678": "\t/**\n\t *  Gets the message attribute of the ProgressDialog object\n\t *\n\t * @return    The message value\n\t */\n",
    "121682": "\t/**\n\t *  Sets the min (zero progress) of the ProgressDialog\n\t *\n\t * @param  aMin  The new min value\n\t */\n",
    "121685": "\t/**\n\t *  Gets the min (zero progress)of the ProgressDialog\n\t *\n\t * @return    The min value\n\t */\n",
    "121687": "\t/**\n\t *  Close the dialog\n\t */\n",
    "121699": "\t/**\n\t *  Sets the title attribute of the ProgressDialog\n\t *\n\t * @param  aTitle  The new title value\n\t */\n",
    "121707": "\t/**\n\t * The method sets the background color\n\t *\n\t * @param  background  value to be set\n\t */\n",
    "121714": "\t/**\n\t * Sets the black-white mode attribute\n\t *\n\t * @param  blackWhiteAttribute  new black-white mode attribute\n\t */\n",
    "121722": "\t/**\n\t * Sets the color mode attribute\n\t *\n\t * @param  colorAttribute  new color mode attribute\n\t */\n",
    "121729": "\t/**\n\t * The method sets the foreground color\n\t *\n\t * @param  foreground  value to be set\n\t */\n",
    "121732": "\t/**\n\t * The method gets the foreground color\n\t *\n\t * @return    the foreground color\n\t */\n",
    "121735": "\t/**\n\t *  Represent the character colors as a string\n\t *\n\t * @return    the character colors as a string\n\t */\n",
    "121739": "\t/**\n\t *  Gets the colorName attribute of the CharColor object\n\t *\n\t * @param  index  Description of the Parameter\n\t * @return        The colorName value\n\t */\n",
    "121743": "\t/**\n\t *  Generate a file filter from a string.\n\t *\n\t * @param  filterString  string showing acceptable file patterns\n\t * @return               Filter object modelled on filterString\n\t */\n",
    "121745": "\t/**\n\t *  Gets the modusName attribute of the CharColor object\n\t *\n\t * @param  index  Description of the Parameter\n\t * @return        The modusName value\n\t */\n",
    "121751": "\t/**\n\t * Verify the color attribute as being one we support\n\t *\n\t * @param  attribute                  the color attribute\n\t * @throws  IllegalArgumentException  on unknown color attribute\n\t */\n",
    "121756": "\t/**\n\t * Verify the color attribute as being one we support\n\t *\n\t * @param  color                      the color\n\t * @throws  IllegalArgumentException  on unknown color\n\t */\n",
    "121787": "\t/**\n\t *  Sets the borderColors attribute of the Window object\n\t *\n\t * @param  aColors  The new borderColors value\n\t */\n",
    "121793": "\t/**\n\t *  Gets the borderColors attribute of the Window object\n\t *\n\t * @return    The borderColors value\n\t */\n",
    "121806": "\t/**\n\t * The method defines a new window's closing character. Default is escape.\n\t *\n\t * {@code null} means no closing character\n\t *\n\t * @param  character  new window's closing character - {@code null} means no closing character\n\t */\n",
    "121812": "\t/**\n\t * The method returns the character which, when encountered in the default input handler\n\t * causes JCurses to close this window.\n\t *\n\t * @return    window's closing character - {@code null} means no closing character\n\t */\n",
    "121814": "\t/**\n\t *  Gets the defaultBorderColors attribute of the Window object\n\t *\n\t * @return    The defaultBorderColors value\n\t */\n",
    "121817": "\t/**\n\t *  Gets the defaultTitleColors attribute of the Window object\n\t *\n\t * @return    The defaultTitleColors value\n\t */\n",
    "121830": "\t/**\n\t * Sets the root panel of the window. This is the top most widget container in the window's widget hierarchy. It occupies the entire window out of the border\n\t * (if exists ).\n\t *\n\t * @param  root  a Panel suitable to be a root panel.\n\t */\n",
    "121831": "\t/**\n\t * Sets the text to use by painting separators\n\t *\n\t *\n\t * @param  value  separator string\n\t *\n\t */\n",
    "121832": "\t/**\n\t * Returns the text used by painting separators\n\t *\n\t *\n\t * @return    separator string\n\t *\n\t */\n",
    "121833": "\t/**\n\t * Adds a separator at the specified position\n\t *\n\t *\n\t * @param  index  position to add a separator\n\t *\n\t */\n",
    "121834": "\t/**\n\t * Adds a separator at the end of the list\n\t */\n",
    "121836": "\t/**\n\t *  Gets the itemRepresentation attribute of the MenuList object\n\t *\n\t * @param  item  Description of the Parameter\n\t * @return       The itemRepresentation value\n\t */\n",
    "121838": "\t/**\n\t *  Gets the preferredSize attribute of the MenuList object\n\t *\n\t * @return    The preferredSize value\n\t */\n",
    "121839": "\t/**\n\t * Returns the  root panel of the window. This is the top most widget container in the window's widget hierarchy. It occupies the entire window out of the border\n\t * (if exists ).\n\t *\n\t * @return    the root panel of the window\n\t */\n",
    "121840": "\t/**\n\t *  Gets the selectable attribute of the MenuList object\n\t *\n\t * @param  index  Description of the Parameter\n\t * @return        The selectable value\n\t */\n",
    "121841": "\t/**\n\t *  Description of the Method\n\t *\n\t * @param  ch  Description of the Parameter\n\t * @return     Description of the Return Value\n\t */\n",
    "121843": "\t/**\n\t *  Gets the maxItemLength attribute of the MenuList object\n\t *\n\t * @return    The maxItemLength value\n\t */\n",
    "121847": "\t/**\n\t * The method defines whether the window is to paint with a shadow.\n\t *\n\t * @param  value  true if a shadow is to paint, false otherwise\n\t */\n",
    "121852": "\t/**\n\t *  Indicates whether the window is to paint with a shadow.\n\t *\n\t * @return    true if a shadow is to paint, false otherwise\n\t */\n",
    "121858": "\t/**\n\t *  Sets the titleColors attribute of the Window object\n\t *\n\t * @param  aColors  The new titleColors value\n\t */\n",
    "121863": "\t/**\n\t *  Gets the titleColors attribute of the Window object\n\t *\n\t * @return    The titleColors value\n\t */\n",
    "121868": "\t/**\n\t * The method changes the window's visibility status\n\t *\n\t * @param  aVisible  true, if the window becomes visible, false in other case\n\t */\n",
    "121875": "\t/**\n\t * The method returns the window's visibility status\n\t *\n\t * @return    true, if the window becomes visible, false in other case\n\t */\n",
    "121880": "\t/**\n\t * The method adds a listener to the window\n\t *\n\t * @param  listener  the listener to add\n\t */\n",
    "121887": "\t/**\n\t * The method closed the window, that is removes it from window stack and\n\t * eventually from the rendered display, if the window was visible.\n\t */\n",
    "121893": "\t/**\n\t * The method hides the window\n\t */\n",
    "121895": "\t/**\n\t *  Gets the borderColors attribute of the BorderPanel object\n\t *\n\t * @return    The borderColors value\n\t */\n",
    "121896": "\t/**\n\t *  Sets the borderColors attribute of the BorderPanel object\n\t *\n\t * @param  colors  The new borderColors value\n\t */\n",
    "121898": "\t/**\n\t *  Gets the defaultBorderColors attribute of the BorderPanel object\n\t *\n\t * @return    The defaultBorderColors value\n\t */\n",
    "121899": "\t/**\n\t *  Gets the clientArea attribute of the BorderPanel object\n\t *\n\t * @return    The clientArea value\n\t */\n",
    "121900": "\t/**\n\t * The method moves the window to the top of the stack\n\t */\n",
    "121903": "\t/**\n\t * The method computes new window's layout. The method must already be called, if anything on the window building is changed, for example, an widget is\n\t * removed or isn't more focusable ( because not visible or other ).\n\t */\n",
    "121908": "\t/**\n\t * The method remove a listener from the window\n\t *\n\t * @param  listener  the listener to remove\n\t */\n",
    "121911": "\t/**\n\t * The method shows the window\n\t */\n",
    "121919": "\t/**\n\t * Returns the rectangle occupied by the window.\n\t *\n\t * @return    the rectangle occupied by the window\n\t */\n",
    "121922": "\t/**\n\t * Accounts for shadow is any\n\t *\n\t * @return    the rectangle occupied by the window\n\t */\n",
    "121925": "\t/**\n\t * The method is called, if the window gets focus.\n\t */\n",
    "121928": "\t/**\n\t *  Changes the focus between widgets and propagates the change notification.\n\t *  Internal only, should not be called by application code.\n\t *\n\t * @param  aWidgetIndex  Index of widget to receive focus.\n\t */\n",
    "121931": "\t/**\n\t *  Changes the focus between widgets and propagates the change notification.\n\t *  Internal only, should not be called by application code. \n\t *\n\t * @param  aWidget  the Widge itself to which the focus is to be changed.\n\t */\n",
    "121935": "\t/**\n\t *  Changes the focus between widgets and propagates the change notification\n\t *  merely by incrementing the index, wrapping to zero (0) if necessary.\n\t *  Internal only, should not be called by application code. \n\t */\n",
    "121943": "\t/**\n\t * The method is called, if the window is to be closed.\n\t */\n",
    "121948": "\t/**\n\t * The method is called, if the window loses focus.\n\t */\n",
    "121967": "\t/**\n\t * The method paint's the window\n\t */\n",
    "121986": "\t/**\n\t *  Resize to specified size \n\t *\n\t * @param  width   d'oh\n\t * @param  height  d'oh\n\t */\n",
    "121994": "\t/**\n\t *  Gets the currentWidget attribute of the Window object\n\t *\n\t * @return    The currentWidget value\n\t */\n",
    "121999": "\t/**\n\t *  Gets the defaultClosingChar attribute of the Window object\n\t *\n\t * @return    The defaultClosingChar value\n\t */\n",
    "122003": "\t/**\n\t *  Gets the defaultFocusChangeChar attribute of the Window object\n\t *\n\t * @return    The defaultFocusChangeChar value\n\t */\n",
    "122009": "\t/**\n\t *  Gets the focusableIndex attribute of the Window object\n\t *\n\t * @param  aIdx  Description of the Parameter\n\t * @return       The focusableIndex value\n\t */\n",
    "122010": "\t/**\n\t *  Gets the text of the Label\n\t *\n\t * @return    The text value\n\t */\n",
    "122011": "\t/**\n\t *  Sets the text  of the Label\n\t *\n\t * @param  aText  The new text value\n\t */\n",
    "122012": "\t/**\n\t *  Calculates the preferred size of the Label.\n\t *\n\t * @return    The preferred size\n\t */\n",
    "122013": "\t/**\n\t *  The interface method that draws the label in its rectangle in its colors.\n\t */\n",
    "122015": "    /**\n     * Sets button's label\n     *\n     * @param  aLabel  buttton's label\n     */ \n",
    "122018": "\t/**\n\t * Input handler to identify shortcuts <br>\n\t * There are four important cases:\n\t * <ol>\n\t * <li>Window close key was entered</li>\n\t * <li>Shift focus to next widget key was entered</li>\n\t * <li>Some other defined shortcut key was entered</li>\n\t * <li>Handling input from a child that has the focus</li>\n\t * </ol>\n\t * Behandlung der Eingabe. <br>\n\t * Vier m?gliche F?lle: <br>\n\t * 1. Fenster schliessen. <br>\n\t * 2. Zum n?chsten Widget springen. <br>\n\t * 3. Shortcut bearbeiten. <br>\n\t * 3. Eingabe vom aktuell Fokus habenden Kind bearbeiten lassen.\n\t *\n\t * @param  inp  object instance representing the input char\n\t * @return      true if this char is to be handled as a shortcut\n\t */\n",
    "122023": "    /**\n     * Sets button's shortcut char's colors. If the button has a shortcut char\n     * and this char is contained by the label, than the char within the label will be\n     * painted in different colors, set by this method\n     *\n     * @param  aColor  button's shortcut char's colors\n     */ \n",
    "122024": "    /**\n     * Adds a listener to the button.\n     *\n     * @param  listener  listener to add\n     */ \n",
    "122026": "\t/**\n\t *  Finds a widget from its associated shortcut char\n\t *\n\t * @param  inp  object instance representing the input char.\n\t * @return      The widget indexed in the shortcuts by the input char\n\t */\n",
    "122027": "    /**\n     * Removes a listener from the button.\n     *\n     * @param  listener  listener to remove\n     */ \n",
    "122028": "    /**\n     * Set's button's shortcut char. If this shortcut is typed, then the button\n     * will handle the char, as described by <code>Widget</code>, and generate an\n     * Event as if the button were 'clicked'.\n     *\n     * @param  c  The new shortCut value\n     */ \n",
    "122029": "    /**\n     *  Gets the preferredSize attribute of the Button object\n     *\n     * @return    The preferredSize value\n     */ \n",
    "122032": "    /**\n     *  Gets the shortCutsList attribute of the Button object\n     *\n     * @return    The shortCutsList value\n     */ \n",
    "122033": "\t/**\n\t *  Create (if necessary) a root panel and do some rectangle math on\n\t * the root panel so it fits\n\t */\n",
    "122034": "    /**\n     *  Gets the focusable attribute of the Button object\n     *\n     * @return    The focusable value\n     */ \n",
    "122035": "    /**\n     *  Input handler,just looks for the shortcut char\n     * and performs the action if the shortcut char is encountered.\n     *\n     * @param  ch  Description of the Parameter\n     * @return     Description of the Return Value\n     */ \n",
    "122036": "    /**\n     *  Handle getting focus, paint self.\n     */ \n",
    "122038": "    /**\n     *  Description of the Method\n     */ \n",
    "122039": "    /**\n     *  Gets the shortCut character of the Button object\n     *\n     * @return    The shortCut value\n     */ \n",
    "122041": "    /**\n     *  Description of the Method\n     */ \n",
    "122042": "    /**\n     *  Description of the Method\n     */ \n",
    "122048": "\t/**\n\t * Draw features like border and title if needed\n\t */\n",
    "122057": "\t/**\n\t *  Load and show in order (i.e., changing focus) each of the window's focusable children.\n\t */\n",
    "122063": "\t/**\n\t *  Load the shortcut table\n\t */\n",
    "122067": "\t/**\n\t *  Paint the title\n\t */\n",
    "122076": "\t/**\n\t * Set the Window title\n\t * @param  aTitle  The title to set.\n\t */\n",
    "122080": "\t/**\n\t *  Description of the Method\n\t *\n\t * @param  obj1  Description of the Parameter\n\t * @param  obj2  Description of the Parameter\n\t * @return       Description of the Return Value\n\t */\n",
    "122096": "   /**\n\t* The method returns the page offset for the given index\n\t* \n\t* @param index the index to calculate the page offset\n\t* @return start index\n\t* \n\t*/\n",
    "122256": "    /**\n     * See section 7.10.3 of the EJB 2.0 specification\n     * See section 7.11.3 of the EJB 2.1 specification\n     */\n",
    "122309": "    /**\n     * See section 7.10.3 of the EJB 2.0 specification\n     * See section 7.11.3 of the EJB 2.1 specification\n     */\n",
    "122333": "    /**\n     * See section 7.10.3 of the EJB 2.0 specification\n     * See section 7.11.3 of the EJB 2.1 specification\n     */\n",
    "122380": "    /**\n     * Switches the states\n     */\n",
    "122407": "    /**\n     * Given a String containing the name of the state, it returns\n     * the occupancy number calculated as L/(L+Kd) using the value of \n     * Kd that corresponds to the state.\n     *  \n     * @param state\n     * @return occupancy number corresponding to that state\n     */\n",
    "122426": "    /**\n     * Given a volume, returns the concentration in Mol\n     * @param volume (in liters)\n     * @return [C] = copynumber / (vol * avogadro)\n     */\n",
    "122505": "    /**\n     * Sets the random number seed for this model, and recreates a\n     * uniform distribution with that seed.\n     */\n",
    "122532": "    /**\n     * Counts the number of rotations since last Gram-Schmidt. If the rotationsCount is above\n     * rotationsCountThreshold, Gram-Schmidt is applied to the orientation.\n     */\n",
    "122539": "\t/**\n\t * Read receptors occupation and update stochsim corresponding dynamicValues\n\t */\n",
    "122760": "    /**\n     * Switches the states\n     */\n",
    "122776": "  /**\n   * Sets the model associated with this controller.\n   *\n   * @param model the model associated with this BaseController\n   */\n",
    "122783": "  /**\n   * Returns the SimModel currently associated with this BaseController.\n   */\n",
    "122788": "  /**\n   * Gets the display cell width. The display cell size is the size in pixels\n   * of the cells in which agents, environments and so forth are drawn.\n   *\n   * @return the display cell size\n   */\n",
    "122793": "  /**\n   * Sets the display cell width. The display cell size is the size in pixels\n   * of the cells in which agents, environments and so forth are drawn. Values\n   * between 5 and 50 work well depending on the size of the \"space\"\n   * being displayed.\n   *\n   * @param cellSize the new display cell size\n   * @see #getCellWidth()\n   */\n",
    "122797": "  /**\n   * Gets the display cell height. The display cell size is the size in pixels\n   * of the cells in which agents, environments and so forth are drawn.\n   *\n   * @return the display cell size\n   */\n",
    "122801": "  /**\n   * Sets the display cell height. The display cell size is the size in pixels\n   * of the cells in which agents, environments and so forth are drawn. Values\n   * between 5 and 50 work well depending on the size of the \"space\"\n   * being displayed.\n   *\n   * @param cellSize the new display cell size\n   * @see #getCellHeight()\n   */\n",
    "122806": "  /**\n   * Gets the display cell depth. The display cell size is the size in pixels\n   * of the cells in which agents, environments and so forth are drawn.\n   *\n   * @return the display cell size\n   */\n",
    "122811": "  /**\n   * Sets the display cell depth. The display cell size is the size in pixels\n   * of the cells in which agents, environments and so forth are drawn. Values\n   * between 5 and 50 work well depending on the size of the \"space\"\n   * being displayed.\n   *\n   * @param cellSize the new display cell size\n   * @see #getCellDepth()\n   */\n",
    "122813": "    /**\n     * Tests the PCall.\n     */\n",
    "122818": "  /**\n   * Sets the schedule to be run by the controller.\n   *\n   * @param schedule the schedule to be run by this BaseController.\n   * @see Schedule\n   */\n",
    "122822": "  /**\n   * Returns the Schedule associated with BaseController\n   */\n",
    "122824": "  /**\n   * Gets the current simulation time (tick count) - the current number of\n   * execution cycles completed by main schedule.\n   *\n   * @return the current simulation time\n   */\n",
    "122828": "  /**\n   * Gets the current simulation time (tick count) - the current number of\n   * execution cycles completed by main schedule.\n   *\n   * @return the current simulation time\n   */\n",
    "122830": "    /**\n     * Tests the TS.\n     */\n",
    "122831": "  /**\n   * Sets the random seed for the current model. The random number generator\n   * will be reset each time the model is run.\n   *\n   * @param seed the new random seed\n   * @see SimModelImpl#setRngSeed(long)\n   */\n",
    "122833": "    /**\n     * Tests the TSTypes.\n     */\n",
    "122835": "  /**\n   * Gets the current random seed for the current model\n   */\n",
    "122841": "  /**\n   * Starts the simulation. Fires a START_EVENT before the simulation\n   * thread is actually started.\n   */\n",
    "122844": "  /**\n   * Notifies object monitor that controlls pausing.\n   */\n",
    "122853": "  /**\n   * Gets the parameters of the current loaded model.\n   * @deprecated replaced by ParameterUtilities.#getModelProperties(SimModel)\n   */\n",
    "122859": "  /**\n   * Pauses the simulation\n   */\n",
    "122863": "  /**\n   * Stops the simulation.\n   */\n",
    "122864": "    /**\n     * Tests the TS.\n     */\n",
    "122865": "  /**\n   * Is this a BatchController. Returns false.\n   */\n",
    "122869": "   /**\n   * Adds a SimEventListener to listen for SimEvents broadcast from\n   * this BaseController.\n   *\n   * @param l the SimEventListener to add\n   * @see SimEventListener\n   */\n",
    "122870": "  /**\n   * Removes a SimEventListener from the list of listeners listening for\n   * SimEvents broadcast from this BaseController.\n   *\n   * @param l the SimEventListener to remove.\n   * @see SimEventListener\n   */\n",
    "122874": "   /**\n   * Fires a SimEvent to the registered listeners.\n   *\n   * @param evt the SimEvent to fire\n   */\n",
    "122876": "  /**\n   * Allows for the storage of objects to persist beyond the life of a\n   * single run by objects that do not so persist.\n   *\n   * @param key a unique identifier for the object to store\n   * @param val the actual object to store\n   */\n",
    "122880": "  /**\n   * Gets a stored persistent (over the life of many runs) object.\n   *\n   * @param key the unique identifier for the persistent object\n   */\n",
    "122943": "    /**\n     * Tests the JHelpContextMgr with XML parsing/writing.\n     */\n",
    "122991": "    /**\n     * Decreases this table capacity by C0 (down to C0).\n     * \n     * @throws IllegalStateException if <code>(_size >= _capacity - C0)</code>\n     */\n",
    "122997": "    /**\n     * Returns the hash code value for this list.  The hash code of a list\n     * is defined to be the result of the following calculation:[code]\n     *  h = 1;\n     *  Iterator i = list.iterator();\n     *  while (i.hasNext()) {\n     *      Object obj = i.next();\n     *      h = 31 * h +  this.getValueComparator().hashCodeOf(obj);\n     *  }[/code]\n     *\n     * @return the hash code value for this list.\n     */\n",
    "123095": "    /**\n     * Acquires the lock.\n     */\n",
    "123097": "    /**\n     * Acquires the lock only if it not held by another thread.\n     *\n     * @return <code>true</code> if the lock was free and was acquired by the\n     *         current thread, or the lock was already held by the current\n     *         thread; <code>false</code> otherwise.\n     */\n",
    "123098": "    /**\n     * Attempts to release this lock. The lock is actually released if at\n     * least as many {@link #unlock} as {@link #lock} have been performed\n     * on this {@link ReentrantLock} by the current thread.\n     *\n     * throws IllegalMonitorStateExeception if the current thread does not hold\n     *        this lock.\n     */\n",
    "123099": "    /**\n     * Returns the thread owner of this {@link ReentrantLock}.\n     *\n     * @return the owner of this lock.\n     */\n",
    "123114": "    /**\n     * Returns the value comparator for this collection (default \n     * {@link FastComparator#DEFAULT}).\n     *\n     * @return the comparator to use for value equality (or ordering if \n     *        the collection is ordered)\n     */\n",
    "123115": "    /**\n     * Appends the specified value to the end of this collection\n     * (optional operation).\n     * \n     * <p>Note: This default implementation always throws \n     *          <code>UnsupportedOperationException</code>.</p>\n     * \n     * @param value the value to be appended to this collection.\n     * @return <code>true</code> (as per the general contract of the\n     *         <code>Collection.add</code> method).\n     * @throws UnsupportedOperationException if not supported.\n     */\n",
    "123117": "    /**\n     * Removes the first occurrence in this collection of the specified value\n     * (optional operation).\n     *\n     * @param value the value to be removed from this collection.\n     * @return <code>true</code> if this collection contained the specified\n     *         value; <code>false</code> otherwise.\n     * @throws UnsupportedOperationException if not supported.\n     */\n",
    "123118": "    /**\n     * Removes all of the values from this collection (optional operation).\n     *\n     * @throws UnsupportedOperationException if not supported.\n     */\n",
    "123120": "    /**\n     * Indicates if this map supports concurrent operations without \n     * synchronization (default unshared).\n     * \n     * @return <code>true</code> if this map is thread-safe; <code>false</code> \n     *         otherwise.\n     */\n",
    "123121": "    /**\n     * Indicates if this collection contains the specified value.\n     *\n     * @param value the value whose presence in this collection \n     *        is to be tested.\n     * @return <code>true</code> if this collection contains the specified\n     *         value;<code>false</code> otherwise.\n     */\n",
    "123123": "    /**\n     * Appends all of the values in the specified collection to the end of\n     * this collection, in the order that they are returned by the specified\n     * collection's iterator or the node order if the specified collection\n     * is a {@link FastCollection}.\n     *\n     * @param c collection whose values are to be added to this collection.\n     * @return <code>true</code> if this collection changed as a result of \n     *         the call; <code>false</code> otherwise.\n     */\n",
    "123125": "    /**\n     * Returns the key comparator for this fast map.\n     * \n     * @return the key comparator.\n     */\n",
    "123126": "    /**\n     * Indicates if this collection contains all of the values of the\n     * specified collection.\n     *\n     * @param  c collection to be checked for containment in this collection.\n     * @return <code>true</code> if this collection contains all of the values\n     *         of the specified collection; <code>false</code> otherwise.\n     */\n",
    "123129": "    /**\n     * Returns the value comparator for this fast map.\n     * \n     * @return the value comparator.\n     */\n",
    "123132": "    /**\n     * Removes from this collection all the values that are contained in the\n     * specified collection.\n     *\n     * @param c collection that defines which values will be removed from\n     *          this collection.\n     * @return <code>true</code> if this collection changed as a result of \n     *         the call; <code>false</code> otherwise.\n     */\n",
    "123133": "    /**\n     * Retains only the values in this collection that are contained in the\n     * specified collection.\n     *\n     * @param c collection that defines which values this set will retain.\n     * @return <code>true</code> if this collection changed as a result of \n     *         the call; <code>false</code> otherwise.\n     */\n",
    "123134": "    /**\n     * Compares the specified object with this map for equality.\n     * Returns <code>true</code> if the given object is also a map and the two\n     * maps represent the same mappings (regardless of collection iteration\n     * order).\n     * \n     * @param obj the object to be compared for equality with this map.\n     * @return <code>true</code> if the specified object is equal to this map;\n     *         <code>false</code> otherwise.\n     */\n",
    "123135": "    /**\n     * Returns the textual representation of this collection.\n     * \n     * @return this collection textual representation.\n     */\n",
    "123137": "    /**\n     * Compares the specified object with this collection for equality.  Returns\n     * <code>true</code> if and only both collection contains the same values\n     * regardless of the order; unless this collection is a list instance \n     * in which case both collection must be list with the same order. \n     *\n     * @param obj the object to be compared for equality with this collection.\n     * @return <code>true</code> if the specified object is equal to this\n     *         collection; <code>false</code> otherwise.\n     */\n",
    "123138": "    /**\n     * Returns the hash code value for this map.\n     * \n     * @return the hash code value for this map.\n     */\n",
    "123141": "    /**\n     * Returns the hash code for this collection (independent from the \n     * collection order; unless this collection is a list instance).\n     *\n     * @return the hash code for this collection.\n     */\n",
    "123144": "    /**\n     * Returns the textual representation of this map.\n     * \n     * @return the textual representation of the entry set.\n     */\n",
    "123199": "    /**\n     * Sets the default value for the specified key (typically done at \n     * initialization). \n     * \n     * @param key the key with which the specified value is to be associated.\n     * @param defaultValue the default value to be associated with the \n     *        specified key.\n     * @return the previous default value associated with specified key, or\n     *         <code>null</code> if there was no mapping for key. A\n     *         <code>null</code> return can also indicate that the map\n     *         previously associated <code>null</code> with the specified key.\n     * @throws NullPointerException if the key is <code>null</code>.\n     */\n",
    "123200": "    /**\n     * Returns the number of key-value mappings in this map.\n     * \n     * @return this map's size.\n     */\n",
    "123202": "    /**\n     * Indicates if this map contains no key-value mappings.\n     * \n     * @return <code>true</code> if this map contains no key-value mappings;\n     *         <code>false</code> otherwise.\n     */\n",
    "123203": "    /**\n     * Indicates if this map contains a mapping for the specified key.\n     * \n     * @param key the key whose presence in this map is to be tested.\n     * @return <code>true</code> if this map contains a mapping for the\n     *         specified key; <code>false</code> otherwise.\n     * @throws NullPointerException if the key is <code>null</code>.\n     */\n",
    "123204": "    /**\n     * Indicates if this map associates one or more keys to the \n     * specified value.\n     * \n     * @param value the value whose presence in this map is to be tested.\n     * @return <code>true</code> if this map maps one or more keys to the\n     *         specified value.\n     * @throws NullPointerException if the key is <code>null</code>.\n     */\n",
    "123205": "    /**\n     * Returns the value to which this map associates the specified key.\n     * \n     * @param key the key whose associated value is to be returned.\n     * @return the value to which this map maps the specified key, or\n     *         <code>null</code> if there is no mapping for the key.\n     * @throws NullPointerException if key is <code>null</code>.\n     */\n",
    "123206": "    /**\n     * Associates the specified value with the specified key in this map.\n     * \n     * @param key the key with which the specified value is to be associated.\n     * @param value the value to be associated with the specified key.\n     * @return the previous value associated with specified key, or\n     *         <code>null</code> if there was no mapping for key. A\n     *         <code>null</code> return can also indicate that the map\n     *         previously associated <code>null</code> with the specified key.\n     * @throws NullPointerException if the key is <code>null</code>.\n     */\n",
    "123207": "    /**\n     * Copies all of the mappings from the specified map to this map.\n     * \n     * @param map the mappings to be stored in this map.\n     * @throws NullPointerException the specified map is <code>null</code>,\n     *         or the specified map contains <code>null</code> keys.\n     */\n",
    "123209": "    /**\n     * Removes the mapping for this key from this map if present\n     * (sets the local value to <code>null</code>).\n     * \n     * @param key the key whose value is set to <code>null</code>\n     * @return <code>put(key, null)</code>\n     * @throws NullPointerException if the key is <code>null</code>.\n     */\n",
    "123211": "    /**\n     * Removes all mappings from this map (sets the local values to\n     * <code>null</code>).\n     */\n",
    "123245": "\t/**\n\t * Reads this struct from the specified input stream  \n\t * (convenience method when using Stream I/O). For better performance,\n\t * use of Block I/O (e.g. <code>java.nio.channels.*</code>) is recommended.\n\t *\n\t * @param in the input stream being read from.\n\t * @return the number of bytes read (typically the {@link #size() size}\n\t *         of this struct.\n\t * @throws IOException if an I/O error occurs.\n\t */\n",
    "123247": "\t/**\n\t * Writes this struct to the specified output stream  \n\t * (convenience method when using Stream I/O). For better performance,\n\t * use of Block I/O (e.g. <code>java.nio.channels.*</code>) is recommended.\n\t *\n\t * @param out the output stream to write to.\n\t * @throws IOException if an I/O error occurs.\n\t */\n",
    "123249": "\t/**\n\t * Returns the <code>String</code> representation of this struct\n\t * in the form of its constituing bytes (hexadecimal). For example:[code]\n\t *     public static class Student extends Struct {\n\t *         Utf8String name  = new Utf8String(16);\n\t *         Unsigned16 year  = new Unsigned16();\n\t *         Float32    grade = new Float32();\n\t *     }\n\t *     Student student = new Student();\n\t *     student.name.set(\"John Doe\");\n\t *     student.year.set(2003);\n\t *     student.grade.set(12.5f);\n\t *     System.out.println(student);\n\t *\n\t *     4A 6F 68 6E 20 44 6F 65 00 00 00 00 00 00 00 00\n\t *     07 D3 00 00 41 48 00 00[/code]\n\t *\n\t * @return a hexadecimal representation of the bytes content for this \n\t *         struct.\n\t */\n",
    "123255": "\t/**\n\t * Indicates if this struct's members are mapped to the same location\n\t * in memory (default <code>false</code>). This method is useful for\n\t * applications extending {@link Struct} with new member types in order to \n\t * create unions from these new structs. For example:[code]\n\t * public abstract class FortranStruct extends Struct {\n\t *     public class FortranString extends Member {...}\n     *     protected FortranString[] array(FortranString[] array, int stringLength) { ... }\n\t * }\n\t * public abstract class FortranUnion extends FortranStruct {\n\t *     // Inherits new members and methods.\n\t *     public final isUnion() {\n\t *         return true;\n\t *     }\n\t * }[/code]\n\t *\n\t * @return <code>true</code> if this struct's members are mapped to \n\t *         to the same location in memory; <code>false</code> \n\t *         otherwise.\n\t * @see Union\n\t */\n",
    "123260": "\t/**\n\t * Returns the byte order for this struct (configurable). \n\t * The byte order is inherited by inner structs. Sub-classes may change \n\t * the byte order by overriding this method. For example:[code]\n\t * public class TopStruct extends Struct {\n\t *     ... // Members initialization.\n\t *     public ByteOrder byteOrder() {\n\t *         // TopStruct and its inner structs use hardware byte order.\n\t *         return ByteOrder.nativeOrder();\n\t *    }\n\t * }}[/code]</p></p>\n\t *\n\t * @return the byte order when reading/writing multibyte values\n\t *         (default: network byte order, <code>BIG_ENDIAN</code>).\n\t */\n",
    "123266": "    /**\n     * Adds a new entry for the specified key and value.\n     * \n     * @param hash the hash of the key, generated with {@link #keyHash}.\n     * @param key the entry's key.\n     * @param value the entry's value.\n     */\n",
    "123268": "\t/**\n\t * Indicates if this struct is packed (configurable).\n\t * By default, {@link Member members} of a struct are aligned on the\n\t * boundary corresponding to the member base type; padding is performed\n\t * if necessary. This directive is inherited by inner structs.\n\t * Sub-classes may change the packing directive by overriding this method.\n\t * For example:[code]\n\t * public class TopStruct extends Struct {\n\t *     ... // Members initialization.\n\t *     public boolean isPacked() {\n\t *         // TopStruct and its inner structs are packed.\n\t *         return true;\n\t *     }\n\t * }}[/code]\n\t *\n\t * @return <code>true</code> if alignment requirements are ignored.\n\t *         <code>false</code> otherwise (default).\n\t */\n",
    "123298": "    /**\n     * Requires special handling during serialization process.\n     *\n     * @param  stream the object output stream.\n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123301": "    /**\n     * Tests the testJSCSArray.\n     */\n",
    "123302": "        /**\n         * Indicates if this entry is considered equals to the specified entry\n         * (using default value and key equality comparator to ensure symetry).\n         * \n         * @param that the object to test for equality.\n         * @return <code>true<code> if both entry have equal keys and values.\n         *         <code>false<code> otherwise.\n         */\n",
    "123305": "        /**\n         * Returns the hash code for this entry.\n         * \n         * @return this entry hash code.\n         */\n",
    "123308": "    /**\n     * Tests the testJSCSArray.\n     */\n",
    "123355": "    /**\n     * Sets the byte buffer to use for writing until this writer is closed.\n     *\n     * @param  byteBuffer the destination byte buffer.\n     * @return this UTF-8 writer.\n     * @throws IllegalStateException if this writer is being reused and \n     *         it has not been {@link #close closed} or {@link #reset reset}.\n     */\n",
    "123356": "    /**\n     * Writes a single character. This method supports 16-bits\n     * character surrogates.\n     *\n     * @param  c <code>char</code> the character to be written (possibly\n     *        a surrogate).\n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123357": "    /**\n     * Writes a character given its 31-bits Unicode.\n     *\n     * @param  code the 31 bits Unicode of the character to be written.\n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123360": "    /**\n     * Writes a portion of an array of characters.\n     *\n     * @param  cbuf the array of characters.\n     * @param  off the offset from which to start writing characters.\n     * @param  len the number of characters to write.\n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123361": "    /**\n     * Writes a portion of a string.\n     *\n     * @param  str a String.\n     * @param  off the offset from which to start writing characters.\n     * @param  len the number of characters to write.\n     * @throws IOException if an I/O error occurs\n     */\n",
    "123362": "    /**\n     * Writes the specified character sequence.\n     *\n     * @param  csq the character sequence.\n     * @throws IOException if an I/O error occurs\n     */\n",
    "123363": "    /**\n     * Flushes the stream (this method has no effect, the data is \n     * always directly written to the <code>ByteBuffer</code>).\n     *\n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123367": "    /**\n     * Sets the <code>ByteBuffer</code> to use for reading available bytes\n     * from current buffer position.\n     *\n     * @param  byteBuffer the <code>ByteBuffer</code> source.\n     * @return this UTF-8 reader.\n     * @throws IllegalStateException if this reader is being reused and \n     *         it has not been {@link #close closed} or {@link #reset reset}.\n     */\n",
    "123368": "    /**\n     * Indicates if this stream is ready to be read.\n     *\n     * @return <code>true</code> if the byte buffer has remaining bytes to \n     *         read; <code>false</code> otherwise.\n     * @throws  IOException if an I/O error occurs.\n     */\n",
    "123370": "    /**\n     * Reads a single character.  This method does not block, <code>-1</code>\n     * is returned if the buffer's limit has been reached.\n     *\n     * @return the 31-bits Unicode of the character read, or -1 if there is \n     *         no more remaining bytes to be read.\n     * @throws IOException if an I/O error occurs (e.g. incomplete \n     *         character sequence being read).\n     */\n",
    "123374": "    /**\n     * Reads characters into the specified appendable. This method does not \n     * block.\n     *\n     * <p> Note: Characters between U+10000 and U+10FFFF are represented\n     *     by surrogate pairs (two <code>char</code>).</p>\n     *\n     * @param  dest the destination buffer.\n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123377": "    /**\n     * Sets the output stream to use for writing until this writer is closed.\n     * For example:[code]\n     *     Writer writer = new Utf8StreamWriter().setOutputStream(out);\n     * [/code] is equivalent but writes faster than [code]\n     *     Writer writer = new java.io.OutputStreamWriter(out, \"UTF-8\");\n     * [/code]\n     *\n     * @param  out the output stream.\n     * @return this UTF-8 writer.\n     * @throws IllegalStateException if this writer is being reused and \n     *         it has not been {@link #close closed} or {@link #reset reset}.\n     */\n",
    "123380": "    /**\n     * Writes a character given its 31-bits Unicode.\n     *\n     * @param  code the 31 bits Unicode of the character to be written.\n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123382": "    /**\n     * Writes a portion of an array of characters.\n     *\n     * @param  cbuf the array of characters.\n     * @param  off the offset from which to start writing characters.\n     * @param  len the number of characters to write.\n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123383": "    /**\n     * Writes a portion of a string.\n     *\n     * @param  str a String.\n     * @param  off the offset from which to start writing characters.\n     * @param  len the number of characters to write.\n     * @throws IOException if an I/O error occurs\n     */\n",
    "123384": "    /**\n     * Writes the specified character sequence.\n     *\n     * @param  csq the character sequence.\n     * @throws IOException if an I/O error occurs\n     */\n",
    "123385": "    /**\n     * Flushes the stream.  If the stream has saved any characters from the\n     * various write() methods in a buffer, write them immediately to their\n     * intended destination.  Then, if that destination is another character or\n     * byte stream, flush it.  Thus one flush() invocation will flush all the\n     * buffers in a chain of Writers and OutputStreams.\n     *\n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123389": "    /**\n     * Flushes the internal bytes buffer.\n     *\n     * @throws IOException if an I/O error occurs\n     */\n",
    "123391": "    /**\n     * Sets the input stream to use for reading until this reader is closed.\n     * For example:[code]\n     *     Reader reader = new Utf8StreamReader().setInputStream(inStream);\n     * [/code] is equivalent but reads twice as fast as [code]\n     *     Reader reader = new java.io.InputStreamReader(inStream, \"UTF-8\");\n     * [/code]\n     *\n     * @param  inStream the input stream.\n     * @return this UTF-8 reader.\n     * @throws IllegalStateException if this reader is being reused and \n     *         it has not been {@link #close closed} or {@link #reset reset}.\n     */\n",
    "123392": "    /**\n     * Indicates if this stream is ready to be read.\n     *\n     * @return <code>true</code> if the next read() is guaranteed not to block\n     *         for input; <code>false</code> otherwise.\n     * @throws  IOException if an I/O error occurs.\n     */\n",
    "123395": "    /**\n     * Reads a single character.  This method will block until a character is\n     * available, an I/O error occurs or the end of the stream is reached.\n     *\n     * @return the 31-bits Unicode of the character read, or -1 if the end of\n     *         the stream has been reached.\n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123411": "    /**\n     * Sets this reference to the specified value only if \n     * <code>(value.compareTo(this.get()) &gt; 0)</code>.\n     * \n     * @param value the minimum value for this reference.\n     * @throws IllegalArgumentException if the specified value is not \n     *         {@link Comparable} or an {@link Integer} instance (J2ME).\n     */\n",
    "123414": "    /**\n     * Sets this reference to the specified value only if \n     * <code>(value.compareTo(this.get()) &lt; 0)</code>.\n     * \n     * @param value the maximum value for this reference.\n     * @throws IllegalArgumentException if the specified value is not \n     *         {@link Comparable} or an {@link Integer} instance (J2ME).\n     */\n",
    "123415": "    /**\n     * Returns the string representation of the current value of this \n     * reference.\n     *\n     * @return <code>String.valueOf(this.get())</code>\n     */\n",
    "123416": "    /**\n     * Indicates if the specified character is contained by this character set.\n     * \n     * @param c the character to test.\n     * @return <code>true</code> if this character set contains the specified\n     *         character; <code>false</code> otherwise.\n     */\n",
    "123417": "    /**\n     * Returns the character set containing the characters from this \n     * character set plus the characters from the character set specified.\n     * \n     * @param that the set containing the characters to be added.\n     * @return <code>this + that</code>\n     */\n",
    "123418": "    /**\n     * Returns the character set containing the characters from this \n     * character minus the characters from the character set specified.\n     * \n     * @param that the set containing the character to be removed.\n     * @return <code>this - that</code>\n     */\n",
    "123420": "    /**\n     * Returns the textual representation of this character set.\n     *  \n     * @return the textual representation.\n     */\n",
    "123421": "    /**\n     * Returns a copy of this character set.\n     *  \n     * @return an independant copy.\n     */\n",
    "123443": "    /**\n     * Appends the specified text to this text builder. \n     * If the specified text is <code>null</code> this method \n     * is equivalent to <code>append(\"null\")</code>. \n     *\n     * @param text the text to append or <code>null</code>.\n     * @return <code>this</code>\n     */\n",
    "123456": "    /**\n     * Returns the default textual representation of this realtime object.\n     * \n     * @return the textual representation of this object.\n     */\n",
    "123460": "    /**\n     * Recycles this object and its internals only. This method should only be\n     * called when it can be asserted that this object is not going to be \n     * referenced anymore. \n     * This method affects only local objects and has no effect on heap objects\n     * or objects allocated outside of the current pool context. \n     * Unlike the {@link #move move} operations, recycling is limited to this\n     * object and its internals and has no effect on external \n     * variable members ({@link javolution37.javolution.realtime.Realtime real-time} or not).\n     */\n",
    "123479": "    /**\n     * Clears this context and releases any associated resource. Dead threads\n     * contexts are automatically cleared before finalization.\n     */\n",
    "123484": "    /**\n     * Moves all objects belonging to this pool context to the heap.\n     */\n",
    "123500": "    /**\n     * Returns a factory object possibly recycled or preallocated.\n     * This method is equivalent to <code>object(PoolContext.current())</code>.\n     * \n     * @return a recycled, pre-allocated or new factory object.\n     */\n",
    "123503": "    /**\n     * Cleans-up this factory's objects for future reuse. \n     * When overriden, this method is called on objects being recycled to \n     * dispose of system resources or to clear references to external\n     * objects potentially on the heap (it allows these external objects to\n     * be garbage collected immediately and therefore reduces the memory \n     * footprint).\n     *\n     * @param  obj the object product of this factory being recycled.\n     * @throws UnsupportedOperationException if this factory does not \n     *         support object clean-up (default).\n     */\n",
    "123522": "    /**\n     * Terminates all the concurrent threads associated to this concurrent \n     * context.\n     */\n",
    "123538": "    /**\n     * Returns the original cause of the exception or error.\n     *\n     * @return the exception or error as it has been raised by the\n     *         <code>java.lang.Runnable</code>.\n     */\n",
    "123540": "    /**\n     * Removes all local settings for this context.\n     */\n",
    "123549": "    /**\n     * Returns the text representation of the current value of this \n     * reference.\n     *\n     * @return <code>Text.valueOf(this.get())</code>\n     */\n",
    "123551": "    /**\n     * Overrides parent's <code>toString</code> method.\n     */\n",
    "123557": "    /**\n     * Terminates this thread (called when holder context is disposed).\n     */\n",
    "123558": "    /**\n     * Sets the local value (referent) for this reference.\n     *\n     * @param value the new local value or <code>null</code> to inherit\n     *        the outer value.\n     */\n",
    "123559": "    /**\n     * Returns the default value for this reference.\n     *\n     * @return the defaultValue.\n     */\n",
    "123561": "    /**\n     * Returns the local (non-inherited) value for this reference.\n     *\n     * @return the local value or <code>null</code> if none (value to be \n     *         inherited or not set).\n     */\n",
    "123562": "    /**\n     * Sets the default value for this reference.\n     *\n     * @param  defaultValue the root value.\n     */\n",
    "123563": "    /**\n     * Allows an application to register a real-time content event handler.\n     *\n     * <p> If the application does not register a content handler, all\n     *     content events reported by the SAX parser will be silently\n     *     ignored.</p>\n     *\n     * <p> Applications may register a new or different handler in the\n     *     middle of a parse, and the SAX parser must begin using the new\n     *     handler immediately.</p>\n     *\n     * @param  handler the real-time content handler.\n     * @throws NullPointerException if the handler argument is null.\n     * @see    #getContentHandler\n     */\n",
    "123565": "\t/** \n\t * Sets the xml document writer.\n\t * \n\t * @param writer the document writer.\n\t * @return <code>this</code>\n\t */\n",
    "123566": "    /**\n     * Returns the current real-time content handler.\n     *\n     * @return the current real-time content handler, or <code>null</code>\n     *         if none has been registered.\n     * @see    #setContentHandler\n     */\n",
    "123567": "\t/** \n\t * Sets the indentation sequence (default none).\n\t * \n\t * @param indent a character sequence containing spaces or a tabulation character.\n\t */\n",
    "123569": "\t/** \n\t * Sets the prolog to write at the beginning of the xml document\n\t * (default none).\n\t * \n\t * @param prolog the character sequence to be written at the beginning \n\t *        of the document.\n\t */\n",
    "123571": "    /**\n     * Allows an application to register an error event handler.\n     *\n     * <p> If the application does not register an error handler, all\n     *     error events reported by the SAX parser will be silently\n     *     ignored; however, normal processing may not continue.  It is\n     *     highly recommended that all SAX applications implement an\n     *     error handler to avoid unexpected bugs.</p>\n     *\n     * <p> Applications may register a new or different handler in the\n     *     middle of a parse, and the SAX parser must begin using the new\n     *     handler immediately.</p>\n     *\n     * @param  handler the error handler.\n     * @throws NullPointerException if the handler argument is null.\n     * @see    #getErrorHandler\n     */\n",
    "123574": "    /**\n     * Returns the current error handler.\n     *\n     * @return the current error handler, or <code>null</code> if none\n     *         has been registered.\n     * @see    #setErrorHandler\n     */\n",
    "123578": "    /**\n     * Parses an XML document from the specified input stream (UTF-8 encoding).\n     *\n     * @param in the input stream with UTF-8 encoding.\n     * @throws org.xml.sax.SAXException any SAX exception, possibly\n     *         wrapping another exception.\n     * @throws IOException an IO exception from the parser,\n     *         possibly from a byte stream or character stream\n     *         supplied by the application.\n     * @see    javolution37.javolution.io.Utf8StreamReader\n     */\n",
    "123583": "    /**\n     * Parses an XML document from the specified <code>ByteBuffer</code>\n     * (UTF-8 encoding).\n     *\n     * @param  byteBuffer the byte buffer with UTF-8 encoding.\n     * @throws org.xml.sax.SAXException any SAX exception, possibly\n     *         wrapping another exception.\n     * @throws IOException an IO exception from the parser,\n     *         possibly from a byte stream or character stream\n     *         supplied by the application.\n     * @see    javolution37.javolution.io.Utf8ByteBufferReader\n     */\n",
    "123586": "    /**\n     * Parses an XML document using the specified reader.\n     *\n     * @param  reader the document reader.\n     * @throws SAXException any SAX exception, possibly wrapping another\n     *         exception.\n     * @throws IOException an IO exception from the parser, possibly from\n     *         a byte stream or character stream supplied by the application.\n     */\n",
    "123605": "    /**\n     * Receives notification of a warning. The default behaviour is to take no\n     * action.\n     *\n     * @param  e the warning information encapsulated in a SAX parse exception.\n     * @throws org.xml.sax.SAXException any SAX exception.\n     */\n",
    "123606": "    /**\n     * Allows an application to register an entity resolver (ignored by this\n     * parser).\n     *\n     * @param resolver the entity resolver.\n     */\n",
    "123608": "    /**\n     * Receives notification of recoverable parser error. The default behaviour\n     * is to take no action.\n     *\n     * @param  e the error information encapsulated in a SAX parse exception.\n     * @throws org.xml.sax.SAXException any SAX exception.\n     */\n",
    "123609": "    /**\n     * Reports a fatal XML parsing error. The default behaviour is to throw\n     * the specified exception.\n     *\n     * @param  e the error information encapsulated in a SAX parse exception.\n     * @throws org.xml.sax.SAXException any SAX exception.\n     */\n",
    "123613": "    /**\n     * Returns the current entity resolver.\n     *\n     * @return the current entity resolver, or <code>null</code> if none\n     *         has been registered.\n     * @see    #setEntityResolver\n     */\n",
    "123620": "    /**\n     * Allows an application to register a DTD handler (ignored by this parser).\n     *\n     * @param handler the DTD handler.\n     */\n",
    "123625": "    /**\n     * Returns the current DTD handler.\n     *\n     * @return the current DTD handler, or <code>null</code> if none\n     *         has been registered.\n     * @see    #setDTDHandler\n     */\n",
    "123750": "    /**\n     * Clear the attribute list for reuse.\n     */\n",
    "123753": "    /**\n     * Adds a new attribute whose values is to be hold by the specified \n     * {@link TextBuilder}.\n     * \n     * @param qName the qualified (prefixed) name.\n     * @return an empty text builder to hold the attribute value.\n     */\n",
    "123754": "    /**\n     * Removes the attribute at the specified index.\n     * \n     * @param index \n     * @param value the attribute value.\n     */\n",
    "123755": "    /**\n     * Converts a String to a CharSequence (for J2ME compatibility)\n     * \n     * @param str the String to convert.\n     * @return the corresponding CharSequence instance.\n     */\n",
    "123757": "    /**\n     * Returns the string representation of these attributes.\n     * \n     * @return this attributes textual representation.\n     */\n",
    "123759": "    /**\n     * Sets the document namespaces for this writer.\n     *\n     * @param  prefix the namespace prefix or an empty sequence to set \n     *         the default namespace.\n     * @param  uri the namespace uri.\n     * @throws IllegalArgumentException if the prefix is \"j\" (reserved for \n     *         the \"http://javolution.org\" uri).\n     */\n",
    "123760": "    /**\n     * Maps a namespace to a Java package. The specified prefix is used to \n     * shorten the class name of the object being serialized.\n     *\n     * @param  prefix the namespace prefix or empty sequence to set \n     *         the default namespace.\n     * @param  packageName of the package associated to the specified prefix.\n     * @throws IllegalArgumentException if the prefix is \"j\" (reserved for \n     *         the \"http://javolution.org\" uri).\n     */\n",
    "123761": "    /**\n     * Writes the specified object to the given writer in XML format.\n     * The writer is closed after serialization. To serialize multiple \n     * objects over a persistent connection {@link XmlOutputStream}\n     * should be used instead.\n     *\n     * @param  obj the object to format.\n     * @param  writer the writer to write to.\n     * @throws IOException if there's any problem writing.\n     */\n",
    "123763": "    /**\n     * Writes the specified object to the given output stream in XML format. \n     * The characters are written using UTF-8 encoding. \n     * The output streamwriter is closed after serialization. To serialize \n     * multiple objects over a persistent connection {@link XmlOutputStream}\n     * should be used instead.\n     *\n     * @param  obj the object to format.\n     * @param  out the output stream to write to.\n     * @throws IOException if there's any problem writing.\n     */\n",
    "123769": "    /**\n     * Resets all internal data maintained by this writer including any \n     * namespace associations; objects previously written will not be\n     * referred to, they will be send again.\n     */\n",
    "123771": "    /**\n     * Enables/disables xml elements cross references (default \n     * <code>false</code>).\n     * When enabled, identifiers attributes are added during serialization; \n     * the name of these attributes is defined by {@link XmlFormat#identifier}.\n     * \n     * @param enabled <code>true</code> if an unique identifier attribute is\n     *        added to objects being serialized; <code>false</code> otherwise.\n     */\n",
    "123773": "    /**\n     * Controls whether or not references are expanced (default \n     * <code>false</code>). References are not expanded if currently \n     * being expanded (to avoid infinite recursion).\n     * \n     * @param value <code>true</code> to expand references;\n     *        <code>false</code> otherwise.\n     * @see   XmlFormat#identifier \n     */\n",
    "123775": "    /**\n     * Enables/disables class identifier attributes (default <code>true<code>).\n     * Disabling the class identifier should only be done if the serialized\n     * objects does not need to be deserialized (e.g. pure xml formatting).\n     * \n     * @param enabled <code>true</code> to allow for an additional \"j:class\"\n     *        attribute; <code>false</code> otherwise. \n     * @see   XmlElement#add(Object)\n     * @see   XmlElement#add(Object, String)\n     */\n",
    "123777": "    /**\n     * Sets the element name or the root object.\n     * \n     * @param name the name of the root element.\n     */\n",
    "123778": "    /**\n     * Creates an object from its XML representation read from\n     * the specified <code>Reader</code>. This method reads until the  \n     * end of stream; to read multiple objects over a persistent connection\n     * {@link XmlInputStream} should be used instead.\n     *\n     * @param  reader the reader containing the XML representation of the\n     *         object being created.\n     * @return the object corresponding to the xml root element.\n     * @throws XmlException if the object cannot be created.\n     */\n",
    "123779": "    /**\n     * Creates an object from its XML representation read from\n     * the specified <code>InputStream</code>. This method reads until the  \n     * end of stream; to read multiple objects over a persistent connection\n     * {@link XmlInputStream} should be used instead.\n     *\n     * @param  in the input stream containing the XML representation of the\n     *         object being created.\n     * @return the object corresponding to the xml root element.\n     * @throws XmlException if the object cannot be created.\n     */\n",
    "123780": "    /**\n     * Creates an object from its XML representation read from\n     * the specified <code>ByteBuffer</code>. This method reads from \n     * the current buffer position up to the buffer's limit.\n     *\n     * @param  byteBuffer the byte buffer containing the XML representation \n     *         of the object being created.\n     * @return the object corresponding to the xml root element.\n     * @throws XmlException if the object cannot be created.\n     */\n",
    "123783": "    /**\n     * Resets this object reader; objects previously read cannot be refered to,\n     * they will have to be send again.\n     */\n",
    "123791": "    /**\n     * Returns the length of this character sequence.\n     *\n     * @return the number of characters (16-bits Unicode) composing this\n     *         character sequence.\n     */\n",
    "123792": "    /**\n     * Returns the character at the specified index.\n     *\n     * @param  index the index of the character starting at <code>0</code>.\n     * @return the character at the specified index of this character sequence.\n     * @throws IndexOutOfBoundsException  if <code>((index < 0) || \n     *         (index >= length))</code>\n     */\n",
    "123793": "    /**\n     * Returns a new character sequence that is a subsequence of this sequence.\n     *\n     * @param  start the index of the first character inclusive.\n     * @param  end the index of the last character exclusive.\n     * @return the character sequence starting at the specified\n     *         <code>start</code> position and ending just before the specified\n     *         <code>end</code> position.\n     * @throws IndexOutOfBoundsException if <code>(start < 0) || (end < 0) ||\n     *         (start > end) || (end > this.length())</code>\n     */\n",
    "123794": "    /**\n     * Returns the <code>String<code> corresponding to this character\n     * sequence. The <code>String</code> returned is always allocated on the\n     * heap and can safely be referenced elsewhere.\n     *\n     * @return the <code>java.lang.String</code> for this character sequence.\n     */\n",
    "123795": "    /**\n     * Returns the hash code for this {@link CharSequenceImpl}.\n     *\n     * <p> Note: Returns the same hashCode as <code>java.lang.String</code>\n     *           (consistent with {@link #equals})</p>\n     *\n     * @return the hash code value.\n     */\n",
    "123797": "    /**\n     * Compares this character sequence against the specified object\n     * (<code>String</code> or <code>CharSequence</code>).\n     *\n     * @param  that the object to compare with.\n     * @return <code>true</code> if both objects represent the same sequence;\n     *         <code>false</code> otherwise.\n     */\n",
    "123798": "    /**\n     * Compares this character sequence against the specified\n     * {@link CharSequenceImpl}.\n     *\n     * @param  that the character sequence to compare with.\n     * @return <code>true</code> if both objects represent the same sequence;\n     *         <code>false</code> otherwise.\n     */\n",
    "123799": "    /**\n     * Compares this character sequence against the specified String.\n     * \n     * @param  chars the character sequence to compare with.\n     * @return <code>true</code> if both objects represent the same sequence;\n     *         <code>false</code> otherwise.\n     */\n",
    "123800": "    /**\n     * Compares this character sequence against the specified character\n     * sequence.\n     * \n     * @param  chars the character sequence to compare with.\n     * @return <code>true</code> if both objects represent the same sequence;\n     *         <code>false</code> otherwise.\n     */\n",
    "123804": "    /**\n     * Returns the default namespace.\n     */\n",
    "123805": "    /**\n     * Returns the numbers of elements in the namespace stack for the given\n     * depth.\n     * \n     * @param depth the element depth.\n     */\n",
    "123807": "    /**\n     * Returns the namespace prefix at the specified position.\n     * \n     * @param pos the position in the namespace stack.\n     * @return the namespace prefix.\n     */\n",
    "123808": "    /**\n     * Returns the namespace uri at the specified position.\n     * \n     * @param pos the position in the namespace stack.\n     * @return the namespace uri.\n     */\n",
    "123810": "    /**\n     * Returns the namespace for the specified prefix or the default \n     * namespace is the prefix is <code>null</code>.\n     * \n     * @param prefix the prefix to search for or <code>null</code>.\n     * @return the associated namespace uri.\n     */\n",
    "123811": "    /**\n     * Adds the specified mapping to the current mapping buffer.\n     *\n     * @param  prefix the prefix to be mapped or <code>null</code> to \n     *         map the defaut namespace.\n     * @param  uri the associated uri.\n     * @throws SAXException any SAX exception, possibly wrapping another\n     *         exception.\n     */\n",
    "123813": "    /**\n     * Flushes the current mapping buffer (equivalent to push() then pop()).\n     */\n",
    "123814": "    /**\n     * Sets the byte buffer this parser is going to process\n     * (UTF-8 encoding).\n     *\n     * @param  byteBuffer the byte buffer with UTF-8 encoding.\n     * @see    Utf8ByteBufferReader\n     */\n",
    "123815": "    /**\n     * Pushes the current namespaces.\n     */\n",
    "123816": "    /**\n     * Pops the current namespaces.\n     */\n",
    "123818": "    /**\n     * Resizes internal arrays.\n     */\n",
    "123821": "    /**\n     * Sets the input stream this parser is going to process\n     * (UTF-8 encoding).\n     *\n     * @param in the input stream with UTF-8 encoding.\n     * @see    Utf8StreamReader\n     */\n",
    "123846": "    /**\n     * Sets the underlying input source for this stream.\n     * \n     * @param in the input source.\n     * @return <code>this</code> \n     * @throws IllegalStateException if this stream is being reused and \n     *         it has not been {@link #close closed} or {@link #reset reset}.\n     */\n",
    "123847": "    /**\n     * Reads an object from the underlying stream using an {@link ObjectReader}.\n     * \n     * @return the object read from its xml representation. \n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123851": "    /**\n     * Reads the next byte of data from the input stream.\n     * \n     * @return the next byte of data, or -1 if the end of the stream is reached.\n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123856": "        /**\n         * Resumes reading after an {@link XmlOutputStream#END_UTF8} byte \n         * is encountered. \n         */\n",
    "123859": "    /**\n     * Returns SAX-2 like attributes for the current element.\n     * \n     * @return the attributes of the current element.\n     */\n",
    "123870": "    /**\n     * Returns the Java(tm) class corresponding to this XML element;\n     * the class is identified by the tag name of this xml element or the <code>\n     * \"j:class\" attribute when present. \n     *\n     * @return this XML element's corresponding class.\n     */\n",
    "123873": "    /**\n     * Returns the content handler used during serialization (typically\n     * a {@link javolution37.javolution.xml.sax.WriterHandler WriterHandler}).\n     *\n     * @return the content handler receiving the SAX-2 events.\n     */\n",
    "123877": "    /**\n     * Sets the underlying output destination for this stream.\n     * \n     * @param out the output destination.\n     * @return <code>this</code> \n     * @throws IllegalStateException if this stream is being reused and \n     *         it has not been {@link #close closed} or {@link #reset reset}.\n     */\n",
    "123878": "    /**\n     * Writes an object to the underlying stream using an {@link ObjectWriter}.\n     * \n     * @param obj the object writen using its xml representation. \n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123880": "    /**\n     * Writes the specified byte to this output stream\n     * \n     * @param b the byte. \n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123881": "    /**\n     * Flushes this output stream and forces any buffered output bytes \n     * to be written out.\n     *  \n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123883": "    /**\n     * Writes the specified number of bytes from the specified byte array \n     * starting at the specified offset to this output stream. \n     * \n     * @param b the data.\n     * @param off the start offset in the data.\n     * @param len the number of bytes to write. \n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123892": "    /**\n     * Returns the name to be used when objects associated to this \n     * format are added with no name specified (default <code>null</code>\n     * the element name is the object class name).\n     *\n     * @return the default element name for objects using this format.\n     */\n",
    "123895": "    /**\n     * Returns the index of the first character in this character data.\n     *\n     * @return the first character index.\n     */\n",
    "123898": "    /**\n     * Adds the specified object as a named nested element of known type\n     * (<code>null</code> objects are ignored). \n     *\n     * @param obj the object added as nested element or <code>null</code>.\n     * @param qName the qualified name of the nested element.\n     * @param clazz the class identifying the xml format to use.\n     */\n",
    "123899": "    /**\n     * Returns the character at the specified index.\n     *\n     * @param  index the index of the character.\n     * @return the character at the specified index.\n     * @throws IndexOutOfBoundsException if index is negative, or index \n     *         is equal or greater than <code>this.length()</code>.\n     */\n",
    "123900": "    /**\n     * Returns a subsequence of this character data.\n     *\n     * @param  start the index of the first character inclusive.\n     * @param  end the index of the last character exclusive.\n     * @return a character data subsequence of this one.\n     * @throws IndexOutOfBoundsException if <code>(start < 0) || (end < 0) ||\n     *         (start > end) || (end > this.length())</code>\n     */\n",
    "123902": "    /**\n     * Returns the names of the identifiers attributes when cross-reference \n     * is enabled. The default implementation returns \n     *  <code>isReference ? \"j:ref\" : \"j:id\"</code>. \n     * Format sub-classes may override this method to use different \n     * attribute names. This method may also return <code>null</code> for \n     * objects exclusively manipulated by value (e.g. immutable objects).\n     *\n     * @param isReference indicates if the attribute name returned is for\n     *        a reference or an identifier.\n     * @return the name of the attribute identifier or <code>null</code>\n     *         if references should not be used.\n     * @see ObjectWriter#setReferencesEnabled(boolean)\n     */\n",
    "123903": "    /**\n     * Calls supermethod and updates layout in a new thread. It also set the\n     * symboltables for the childs.\n     */\n",
    "123904": "    /**\n     * Creates a new attribute for this xml element.\n     * \n     * This method allows for custom attribute formatting. For example:[code]\n     *     // Formats the color RGB value in hexadecimal.\n     *     xml.newAttribute(\"color\").append(_color.getRGB(), 16);\n     *     \n     *     // Formats the error using 4 digits.\n     *     xml.newAttribute(\"error\").append(error, 4, false, false);[/code]\n     *\n     * @param  name the attribute name.\n     * @return the text builder to hold the attribute value.\n     */\n",
    "123907": "    /**\n     * Gets the column width of the alpha table.\n     * \n     * @return column width\n     */\n",
    "123908": "    /**\n     * Allocates a new object corresponding to this xml element.\n     * By default, the {@link XmlElement#object} method returns an object \n     * created using the deserialized class public no-arg constructor.\n     * Xml formats may perform custom allocations by overriding this method.  \n     *\n     * @param xml the xml elements.\n     * @return the object corresponding to the specified xml element.\n     */\n",
    "123909": "    /**\n     * Gets the mouse listener of the underlying coefficients tables.\n     * \n     * @return java.awt.event.MouseListener\n     */\n",
    "123910": "    /**\n     * Sets the specified <code>CharSequence</code> attribute\n     * (<code>null</code> values are ignored).\n     *\n     * @param  name the attribute name.\n     * @param  value the attribute value or <code>null</code>.\n     */\n",
    "123912": "    /**\n     * Gets the precision of the underlying coefficients tables.\n     * \n     * @return precision\n     */\n",
    "123913": "    /**\n     * Gets the cell renderer of the underlying coefficients tables.\n     * \n     * @return javax.swing.table.TableCellRenderer\n     */\n",
    "123915": "    /**\n     * Sets the specified <code>String</code> attribute\n     * (<code>null</code> values are ignored).\n     *\n     * @param  name the attribute name.\n     * @param  value the attribute value.\n     */\n",
    "123916": "    /**\n     * Gets the lag that this equation term starts with. Usually this is -1.\n     * \n     * @return int start lag\n     */\n",
    "123917": "\t/**\n\t * Adds only those columns that are in the sub matrix range.\n\t * \n\t * \n\t * @param tc the column to add\n\t */\n",
    "123918": "\t/**\n\t * Gets the index represented by this part.\n\t * \n\t * @return index\n\t */\n",
    "123919": "\t/**\n\t * Gets the number of columns of this table model.\n\t * \n\t * @return col number\n\t */\n",
    "123921": "\t/**\n\t * Sets the index of this part of the equation.\n\t * \n\t * @param arg index\n\t */\n",
    "123923": "\t/**\n\t * Sets the number of columns in this model.\n\t * \n\t * @param arg number of columns\n\t */\n",
    "123924": "    /**\n     * Gets the symbolname for the coefficients.\n     * \n     * @return symbol name\n     */\n",
    "123925": "    /**\n     * Gets the data object storing the subset restrictions or <code>null</code>\n     * if no subset restrictions are set.\n     * \n     * @return data object with subset restrictions\n     */\n",
    "123926": "    /**\n     * Gets the underlying <code>SubMatModel</code>.\n     * \n     * @return sub matrix model\n     */\n",
    "123927": "    /**\n     * Gets the symbolname for the subset restrictions or <code>null</code> if\n     * none was set.\n     * \n     * @return symbol name\n     */\n",
    "123928": "    /**\n     * Gets the symbolname for the lags. Ther underlying data must be a\n     * <code>JSCInt</code>.\n     * \n     * @return symbol name\n     */\n",
    "123929": "    /**\n     * Manages visibility of this component.\n     */\n",
    "123930": "    /**\n     * Sets the column count of this table.\n     * \n     * @param arg\n     *            number of cols\n     */\n",
    "123932": "    /**\n     * Sets the column model for all columns of this table. Works only, if a\n     * submatrix model was set before.\n     * \n     * @param newModel\n     *            the table model\n     * @throws IllegalStateException\n     *             <code>if (subMatrixModel != null)</code>\n     */\n",
    "123933": "    /**\n     * Gets the symbolname for the subset restrictions corresponding to the\n     * coefficients.\n     * \n     * @return symbol name\n     */\n",
    "123934": "    /**\n     * Sets the specified <code>boolean</code> attribute.\n     * \n     * @param  name the attribute name.\n     * @param  value the <code>boolean</code> value for the specified attribute.\n     * @see    #getAttribute(String, boolean)\n     */\n",
    "123935": "    /**\n     * Sets the index denoting the part in the equation for this table.\n     * \n     * @param arg\n     *            equation index\n     */\n",
    "123936": "    /**\n     * Sets the symbol name of the subset restrictions that correspond to the\n     * coefficients displayed in this table. How the restrictions affect the\n     * behaviour of this table is determined by the cell renderer, mouse\n     * listener, editor and table popup.\n     * \n     * @param newSymbolNameSubsetRes\n     * @throws IllegalArgumentException\n     *             if <code>newSymbolNameSubsetRes</code> is not a valid name\n     *             for a symbol\n     */\n",
    "123937": "    /**\n     * Gets the symbolname for the names of the variables.\n     * \n     * @return symbol name\n     */\n",
    "123939": "    /**\n     * Extends the super method by firering the (boolean) property change\n     * \"visible\".\n     * \n     * @param aFlag\n     *            true to make the component visible\n     */\n",
    "123941": "    /**\n     * Manages visibility of this table on table changed events.\n     */\n",
    "123942": "    /**\n     * Gets the popup menu for the underlying coefficients tables.\n     * \n     * @return popup menu\n     */\n",
    "123943": "\t/**\n\t * Gets the column width of the alpha table.\n\t * \n\t * @return column width\n\t */\n",
    "123945": "    /**\n     * Gets whether the underlying coefficients tables are editable.\n     * \n     * @return <code>true</code> if editable\n     */\n",
    "123946": "\t/**\n\t * Gets the mouse listener of the underlying coefficients\n\t * tables.\n\t * \n\t * @return java.awt.event.MouseListener\n\t */\n",
    "123947": "    /**\n     * Sets the specified <code>int</code> attribute.\n     * \n     * @param  name the attribute name.\n     * @param  value the <code>int</code> value for the specified attribute.\n     * @see    #getAttribute(String, int)\n     */\n",
    "123948": "\t/**\n\t * Gets the precision of the underlying coefficients\n\t * tables.\n\t * \n\t * @return precision\n\t */\n",
    "123950": "\t/**\n\t * Gets the cell renderer of the underlying coefficients\n\t * tables.\n\t * \n\t * @return javax.swing.table.TableCellRenderer\n\t */\n",
    "123951": "    /**\n     * Manages visibility of tis term.\n     * \n     * @param evt\n     *            property change event\n     */\n",
    "123952": "\t/**\n\t * Gets the symbolname for the alpha coefficients.\n\t * \n\t * @return symbol name \n\t */\n",
    "123953": "\t/**\n\t * Gets the symbolname for the subset restrictions\n\t * corresponding to the alpha coefficients.\n\t * \n\t * @return symbol name \n\t */\n",
    "123954": "    /**\n     * Sets the column width of the underlying coefficients tables.\n     * \n     * @param colWidth\n     *            column width\n     */\n",
    "123955": "\t/**\n\t * Gets the symbolname for the beta coefficients\n\t * of the endogenous variables.\n\t * \n\t * @return symbol name \n\t */\n",
    "123957": "\t/**\n\t * Gets the symbolname for the beta coefficients\n\t * of the restricted deterministic variables.\n\t * \n\t * @return symbol name \n\t */\n",
    "123958": "\t/**\n\t * Gets the symbolname for the subset restrictions\n\t * corresponding to the beta coefficients of the\n\t * restricted deterministic variables.\n\t * \n\t * @return symbol name \n\t */\n",
    "123959": "    /**\n     * Sets whether the underlying coefficients tables are editable.\n     * \n     * @param isEditable\n     *            <code>true</code> if editable\n     */\n",
    "123960": "    /**\n     * Sets the specified <code>long</code> attribute.\n     * \n     * @param  name the attribute name.\n     * @param  value the <code>long</code> value for the specified attribute.\n     * @see    #getAttribute(String, long)\n     */\n",
    "123961": "\t/**\n\t * Gets the symbolname for the subset restrictions\n\t * corresponding to the beta coefficients of the\n\t * endogenous variables.\n\t * \n\t * @return symbol name \n\t */\n",
    "123962": "\t/**\n\t * Gets the symbolname for the names of the deterministic\n\t * variables.\n\t * \n\t * @return symbol name \n\t */\n",
    "123963": "    /**\n     * Manages visibility of the leading sign label.\n     * \n     * @param isVisible\n     *            <code>true</code> if visible\n     */\n",
    "123965": "\t/**\n\t * Gets the symbolname for the names of the endogenous\n\t * variables.\n\t * \n\t * @return symbol name \n\t */\n",
    "123966": "\t/**\n\t * Gets whether the underlying coefficients tables\n\t * are editable.\n\t * \n\t * @return <code>true</code> if editable\n\t */\n"
}
