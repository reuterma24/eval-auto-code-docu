{
    "321": "\t/**\n\t * Returns the pushes lowerbound of this board position.\n\t * \n\t * @return the pushes lowerbound\n\t */\n",
    "323": "\t/**\n\t * Sets the pushes lowerbound of this board position.\n\t * \n\t * @param pushesLowerbound\n\t */\n",
    "324": "\t\t/**\n\t\t * Play a sound.\n\t\t */\n",
    "343": "\t/**\n\t * Returns the influence value between the positions of the passed boxes.\n\t * <p>\n\t * The LOWER the influence value the more influence has the box on the other box.\n\t * \n\t * @param boxNo1  the position of the first  box whose position is considered\n\t * @param boxNo2  the position of the second box whose position is considered\n\t * @return the influence value \n\t */\n",
    "351": "\t/**\n\t * Sets the box positions and the player position.\n\t *     \n\t * @param positions positions of the boxes and the player\n\t */\n",
    "352": "\t/**\n\t * Returns the player position of this board position.\n\t * \n\t * @return the player position\n\t */\n",
    "355": "\t/**\n\t * Returns the number of the moved box.\n\t * \n\t * @return the number of the moved box\n\t */\n",
    "357": "\t/**\n\t * Returns the start position of the pulled box.\n\t * \n\t * @return the position of the box before it was pulled.\n\t */\n",
    "359": "\t/**\n\t * Returns the target position of the pulled box.\n\t * \n\t * @return the position of the box after it was pulled.\n\t */\n",
    "361": "    /**\n     * Returns the preceding board position of this board position.\n     *\n     * @return the preceding board position of this board position\n     */\n",
    "364": "\t/**\n\t * Compares both board positions. Note: lower values means high priority\n\t * in the <code>PriorityQueue</code>.\n\t */\n",
    "373": "\t/**\n\t * Returns whether the push is a forced push, that means a box \n\t * must be pushed from the start position to the target position.\n\t */\n",
    "376": "\t/**\n\t * Sets the status bar text.\n\t * \n\t * @param text\n\t *            the text to be shown in the status bar\n\t */\n",
    "412": "\t/**\n\t * Returns whether the solver has been stopped due to insufficient memory.\n\t * \n\t * @return <code>true</code> if the solver stopped due to insufficient memory, and\n\t *        <code>false</code> otherwise\n\t */\n",
    "428": "\t/**\n\t * Returns the board position with the shortest determined solution path length.\n\t *\n     * @return board position with the shortest determined solution path length.\n     */\n",
    "437": "\t/**\n\t * Returns the preceding board position of this board position.\n\t * \n\t * @return preceding board position\n\t */\n",
    "440": "\t/**\n\t * Returns the direction the box has been pushed.\n\t * \n\t * @return Direction of the push\n\t */\n",
    "442": "\t/**\n\t * Returns the number of the pushed box.\n\t * \n\t * @return Number of the pushed box\n\t */\n",
    "445": "\t/**\n\t * Gives the name of this solver as used to tag new solutions.\n\t * @return the name of this solver\n\t */\n",
    "446": "\t/**\n\t * Return the player position of this board position.\n\t * \n\t * @return the player position\n\t */\n",
    "448": "\t/**\n\t * Sets the box- and the player positions.\n\t *     \n\t * @param positions Positions of the boxes and the player\n\t */\n",
    "450": "\t/**\n\t * An absolute board position usually hasn't a preceding board position. This method is\n\t * implemented for easier working with linked lists.\n\t *\n\t * @return always null\n\t */\n",
    "454": "\t/**\n\t * Sets the searchdirection of the solutionsearch this class is created in.\n\t * \n\t * @param searchDirection Direction of the search\n\t */\n",
    "458": "\t/**\n\t * For avoiding some casts this method is implemented here. Actually, this method\n\t * is only needed for relative board positions.\n\t *\n\t * @return always 0\n\t */\n",
    "459": "\t/** \n\t * Returns the number of pushes of this board position.\n\t * \n\t * @return number of pushes\n\t */\n",
    "461": "\t/**\n\t * Absolute board positions are only created when no box has been pushed. This value is interpreted \n\t * during a search for a solution (no box has been pushed so no tunnel check has to be performed).\n\t *\n\t * @return always <code>NO_BOX_PUSHED</code>\n\t */\n",
    "463": "\t/**\n\t * Sets the maximum solution length. \n\t * This is a value representing the iteration depth during the search for a solution.\n\t * (first all board positions are created that have a maximum solution length of x pushes.\n\t * Then all board positions are created with a maximum solution length of x+1, ...\n\t *  \n\t * @param maximumSolutionLength\tthe maximum solution length to be set\n\t */\n",
    "464": "\t/**\n\t * Return the player position of this board position.\n\t * \n\t * @return the player position\n\t */\n",
    "466": "\t/**\n\t * Returns the maximum solution length (= iteration depth).\n\t * \n\t * @return\tthe maximum solution length stored in this board position\n\t */\n",
    "467": "\t/**\n\t * Returns the number of pushes that were made to reach this board position.\n\t * An absolute board position is only created at the beginning, so this is\n\t * always 0.\n\t * This number is used in the solving methods.\n\t * \n\t * @return always 0\n\t */\n",
    "472": "\t/**\n\t * Returns a string to be attached to a solution, which says that this\n\t * solver did create the solution at the passed point in time.\n\t * \n\t * @param date the creation time point, or <code>null</code> for \"now\"\n\t * @return string identifying the solver as solution creator\n\t * @see Solution#name\n\t */\n",
    "476": "\t/**\n\t * Sets the number of moves.\n\t * \n\t * @param movesCount\tNumber of moves the player has done\n\t */\n",
    "487": "\t/**\n\t * Returns the index in the packing sequence that has already been reached.\n\t * \n\t * @return index in the packing sequence\n\t */\n",
    "489": "\t/**\n\t * Sets the index in the packing sequence that has been reached.\n\t * \n\t * @param indexPackingSequence the index in the packing sequence\n\t */\n",
    "494": "\t/**\n\t * Returns, whether a box is inactive, and therefore a position value 0\n\t * has to be assumed.\n\t *\n\t * @param  boxNo number of the box to be checked for being inactive\n\t * @return <code>true</code> if the box is inactive, and\n\t * \t\t  <code>false</code> if the box is active\n\t */\n",
    "496": "\t/**\n\t *  Returns whether the pushed box has been inactive.\n\t *\n\t * @return <code>true</code> the box is inactive\n\t * \t\t\t<code>false</code> the box is active\n\t */\n",
    "497": "\t/**\n\t * Mark this board position to be a deadlock.\n\t */\n",
    "498": "\t/**\n\t * Mark this board position not to be a deadlock.\n\t * <p>\n\t * Attention: this board position is only for the current\n\t * investigated corral assumed not to be a deadlock.\n\t * Nevertheless it can be a deadlock, because not all\n\t * deadlocks are detected.\n\t */\n",
    "499": "\t\t/**\n\t\t * Retrieves the current value of the debug variable\n\t\t * described by this object, by using reflection.\n\t\t * \n\t\t * @return current value of the described debug variable\n\t\t */\n",
    "500": "\t/**\n\t * Returns a string to be attached to a solution, which says that this\n\t * solver did create the solution \"now\".\n\t * \n\t * @return string identifying the solver as solution creator\n\t * @see Solution#name\n\t */\n",
    "501": "\t/**\n\t * Sets the number of the corral this board position belongs to.\n\t * \n\t * @param corralNo the number of the corral\n\t */\n",
    "503": "\t/**\n\t * Sets the status bar text.\n\t * \n\t * @param text\n\t *            the text to be shown in the status bar\n\t */\n",
    "504": "\t/**\n\t * Returns the number of the corral this board position belongs to.\n\t * \n\t * @return the number of the corral\n\t */\n",
    "506": "\t/**\n\t * Returns whether this board position has been proven to be a corral deadlock.\n\t * \n\t * @return <code>true</code> if this board position is a corral deadlock, and\n\t * \t     <code>false</code> if this board position has not been proven to be a deadlock\n\t */\n",
    "507": "\t/**\n\t * Returns whether this board position is classified not to be a corral deadlock.\n\t * <p>\n\t * This board position can be a corral deadlock, anyhow. For example the corral\n\t * detection could be aborted due to a reached time limit. Nevertheless it would\n\t * be classified as not to be a corral deadlock.\n\t * \n\t * @return <code>true</code> this board position has been classified not to be a corral deadlock\n\t * \t\t  <code>false</code> otherwise\n\t */\n",
    "508": "\t/**\n\t * Returns whether this board position has been classified (deadlock or no deadlock).\n\t * <p>\n\t * This method returns the same value as <code>!isBeeingAnalyzed()</code>\n\t * \n\t * @return <code>true</code> this board position has been classified.\n\t * \t\t<code>false</code> this board position has not been classified yet.\n\t */\n",
    "510": "\t/**\n\t * Returns whether is currently beeing analyzed to be a corral deadlock or not.\n\t * <p>\n\t * Every corral (= board position) not classified counts as \"beeingAnalyzed\". Due to every\n\t * board position occured during the corral detection getting a corral number - even if it\n\t * isn't a corral at all - finally there can be board positions still having the status\n\t * \"isBeeingAnalyzed\".\n\t * \n\t * @return <code>true</code> if the deadlock status of this board position\n\t *                           is currently beeing analyzed, and\n\t * \t\t  <code>false</code> otherwise\n\t */\n",
    "513": "\t/**\n\t * Returns a deep clone of the current board.\n\t * \n\t * @return the clone of this board\n\t */\n",
    "514": "\t\t/**\n\t\t * Sets the value of the debug variable described by this object\n\t\t * by using reflection.\n\t\t * \n\t\t * @param value  to be assigned to the described debug variable\n\t\t */\n",
    "517": "\t/**\n\t * Returns whether the two box configurations are equal.\n\t * \n\t * @param boxConfigurationNumber logical index into our flat data array\n\t * @param boxConfiguration the candidate box configuration to compare with\n\t * @return <code>true</code> if both box configurations are equal, and<br>\n\t *        <code>false</code> otherwise\n\t */\n",
    "523": "\t/**\n\t * Returns the maximal capacity of this storage.\n\t * \n\t * @return the maximal capacity of this storage\n\t */\n",
    "524": "\t/**\n\t * Adds data to the queue.\n\t * \n\t * @param boardPositionIndex the board position to be added\n\t * @param boardPositionPredecessor the predecessor to be added\n\t */\n",
    "531": "\t/**\n\t * Logically removes all board positions from the queue\n\t * until a board position different to the passed one occurs in the queue.\n\t * \n\t * @param boardPosition the board position to be over jumped\n\t */\n",
    "535": "\t/**\n\t * Retrieves and removes the last board position of this queue.\n\t * \n\t * @return the previous board position\n\t */\n",
    "538": "\t/**\n\t * Jumps backwards in the queue by the passed number of board positions.\n\t * \n\t * @param jumpCount number of board positions to be skipped backwards\n\t */\n",
    "542": "\t/**\n\t * Returns whether the queue is empty.\n\t * \n\t * @return <code>true</code> when queue is empty, and<br>\n\t *        <code>false</code> otherwise\n\t */\n",
    "547": "\t/**\n\t * Returns whether all box configurations could be generated. \n\t * \n\t * @return <code>true</code> if all box configurations have been generated,\n\t * \t      <code>false</code> if there is insufficient memory available,\n\t *        and not all box configurations have been generated.\n\t */\n",
    "551": "\t/**\n\t * Every object of this class gets passed a pushes depth. This depth holds\n\t * the number of pushes needed to reach the box configuration passed\n\t * to the constructor. This value is unique because there is only one\n\t * generation Runnable for every box configuration of the solution\n\t * to be optimized. By reading this value the optimizer can identify\n\t * each object of this class.\n\t * \n\t * @return the pushes depth that has been passed to the constructor of this object\n\t */\n",
    "561": "\t/**\n\t * Determine, whether this solution is better than the passed solution,\n\t * with respect to moves and then pushes.\n\t * \n\t * @param other the other solution we compare against\n\t * @return whether this solution is better\n\t */\n",
    "563": "\t/**\n\t * Determine, whether this solution is better than the passed solution,\n\t * with respect to pushes and then moves.\n\t * \n\t * @param other the other solution we compare against\n\t * @return whether this solution is better\n\t */\n",
    "568": "\t/**\n\t * Adds the specified board position into this priority queue.\n\t */\n",
    "570": "\t/**\n\t * Returns the number of stored <code>OptimizerBoardPositions</code>.\n\t * \n\t * @return the number of stored <code>OptimizerBoardPositions</code>\n\t */\n",
    "572": "\t/**\n\t * Removes and returns the board position having the lowest metrics (moves, pushes, ...).\n\t * \n\t * @return  board position having the lowest metrics \n\t */\n",
    "576": "\t/**\n\t * Adds the passed <code>String</code> to the log texts of the optimizer\n\t * to inform the user about the progress of the optimizer,\n\t * or to inform the developer about statistical data.\n\t * \n\t * @param text       text to be added to the log\n\t * @param stylename  registered name of style to be used\n\t */\n",
    "577": "\t /**\n\t  *Inserts the passed board position at the passed position.\n\t  * <p>\n\t  * This method moves the passed board position down until \n\t  * it is less than or equal to its children (or is a leaf).\n\t  *\n\t  * @param position the position to start the search for the correct position to insert into\n\t  * @param boardPosition the board position to be inserted\n\t  */\n",
    "580": "\t/**\n\t * Returns the number of board positions stored in this hash table.\n\t *\n\t * @return  the number of board positions stored in this hash table.\n\t */\n",
    "601": "\t/**\n\t * Removes all markings of squares.  \n\t */\n",
    "608": "\t/**\n\t * Debug method: without {@link Settings#isDebugModeActivated} nothing\n\t * visible happens.\n\t * In debug mode we print the current statistics to the optimizer logging.\n\t */\n",
    "610": "\t/**\n\t * Returns the box configuration index of the passed board position.\n\t * \n\t * @param boardPositionIndex  the index of the board position\n\t * @return the index the box configuration is stored at in the box configuration storage\n\t */\n",
    "613": "\t/**\n\t * Returns whether the second passed box configuration is a subset\n\t * of the first passed box configuration.\n\t * \n\t * @param boxConfiguration1\n\t *            box configuration 1\n\t * @param boxConfigurationArray\n\t *            array which contains the box configuration to be checked for\n\t *            being a subset\n\t * @param indexInArray\n\t *            index of the box configuration in the array\n\t * \n\t * @return <code>true</code> if the second passed box configuration is a subset\n\t *         of the first passed box configuration, and <code>false</code> otherwise\n\t */\n",
    "617": "\t/**\n\t * Returns the player position of the passed board position.\n\t * \n\t * @param boardPositionIndex  the index of the board position\n\t * @return the player position of the passed board position\n\t */\n",
    "619": "\t\t/**\n\t\t * Doubles the tree size.\n\t\t */\n",
    "626": "\t\t/**\n\t\t * Fills the sorted list with the box configurations from the tree.\n\t\t * \n\t\t * @param indexInTree index of the box configuration in the tree\n\t\t * @param last\t\n\t\t * @return \"lowest\" boxConfiguration at the moment in the tree\n\t\t */\n",
    "637": "\t/**\n\t * Returns the number of the currently selected object.\n\t * \n\t * @return number of the currently selected obj\n\t */\n",
    "638": "\t\t/**\n\t\t * Transforms the tree to a binary heap.\n\t\t * This method destroys the tree. That means:\n\t\t * only the binary heap can be used after this method has been called.\n\t\t */\n",
    "641": "\t/**\n\t * Using the mouse wheel is interpreted as a move through the selectable objects. \n\t *\n\t * @param evt the <code>MouseWheelEvent</code> fired\n\t */\n",
    "643": "\t/**\n\t * Sets the \"is already processed\" status of the passed board position.\n\t * \n\t * @param boardPositionIndex  index of the board position in this storage\n\t * @param processedStatus processed status to set\n\t */\n",
    "648": "    /**\n\t * This method is called when the user selects another view.\n\t */\n",
    "651": "\t\t/**\n\t\t * Sets all variables to null for the garbage collection.\n\t\t */\n",
    "653": "    /**\n\t * This method is called when the user selects another view.\n\t */\n",
    "656": "\t/**\n\t * Creates all things this panel needs.\n\t */\n",
    "663": "\t/**\n\t * Use the current value of the check box to enable or disable\n\t * the text field and label components.\n\t */\n",
    "666": "\t/**\n\t * Returns the value of the input field as double.\n\t * \n\t * @return the value of the input field, or {@code null}\n\t */\n",
    "669": "\t/**\n\t * Returns the value of the input field as integer.\n\t * \n\t * @return the value of the input field, or {@code null}\n\t */\n",
    "670": "\t/**\n\t * Convenience function: enters this object as the default table cell\n\t * renderer for type {@link java.util.Date}.\n\t * This is the expected usage for this class.\n\t * \n\t * @param table\n\t */\n",
    "672": "\t/**\n\t * Adds a level to be displayed\n\t * @param level level to be displayed\n\t */\n",
    "675": "\t/**\n\t * Returns whether the field is set \"active\".\n\t * \n\t * @return <code>true</code> if the field is active, and\n\t *        <code>false</code> otherwise\n\t */\n",
    "676": "\t/**\n\t * Adds a collection of levels to be displayed\n\t * @param collection collection of levels\n\t * @param startNumber index of the start level in the collection\n\t * @param endNumber index of the end level in the collection\n\t */\n",
    "677": "\t/**\n\t * Sets a new value for the display field.<br>\n\t * If the value is higher than the maximum or lower than the minimum,\n\t * the maximum or minimum value is used, respectively.\n\t * In any case the effectively used value is returned.\n\t * \n\t * @param value the value to be set\n\t * @return the set value\n\t */\n",
    "684": "\t/**\n\t * Method for closing the window after the ok-button has been clicked\n\t * \n\t * @param actionevent the action event to be analyzed\n\t */\n",
    "685": "\t/**\n\t * Informs all listeners using objects generated by the passed generator.\n\t * While calling the listener method for this notification this\n\t * ListenerSet object is not synchronized, any more.\n\t * Only the initial copying of the listener list is synchronized.\n\t * \n\t * @param eventgen generates the events to be passed to the listeners\n\t *                  ({@code null} is taken to generate {@code nulls})\n\t */\n",
    "687": "\t/**\n\t * Sets up the button for the \"start\" version.\n\t */\n",
    "688": "\t/**\n\t * Sets up the button for the \"stop\" version.\n\t */\n",
    "690": "\t/**\n\t * Sets up the button for the indicated version.\n\t * \n\t * @param forStart whether to set up for the \"start\" version\n\t */\n",
    "693": "\t/**\n\t * Partial setup regarding the border.\n\t * \n\t * @param forStart whether to set up for the \"start\" version\n\t */\n",
    "694": "\t/**\n\t * Partial setup regarding the background color.\n\t * \n\t * @param forStart whether to set up for the \"start\" version\n\t */\n",
    "696": "\t/**\n\t * Create the border for the indicated version.\n\t * Does <em>not</em> look at {@link #useBorder}.\n\t * \n\t * @param forStart whether to create it for the \"start\" version\n\t * @return         border for the indicated version\n\t */\n",
    "697": "\t/**\n\t * Creates and returns a border for the \"start\" version.\n\t * Does <em>not</em> look at {@link #useBorder}.\n\t * \n\t * @return border for a \"start\" version\n\t */\n",
    "699": "\t/**\n\t * Creates and returns a border for the \"stop\" version.\n\t * Does <em>not</em> look at {@link #useBorder}.\n\t * \n\t * @return border for a \"stop\" version\n\t */\n",
    "703": "\t/**\n\t * Does not have effect before the next {@link #setToStart()}\n\t * or {@link #setToStop()}.\n\t * @param useBorder the useBorder to set\n\t */\n",
    "706": "\t/**\n\t * Does not have effect before the next {@link #setToStart()}\n\t * or {@link #setToStop()}.\n\t * @param useBgColor the useBgColor to set\n\t */\n",
    "710": "\t/**\n\t * Does not have effect before the next {@link #setToStart()}.\n\t * @param borderColorStart the borderColorStart to set\n\t */\n",
    "715": "\t/**\n\t * Does not have effect before the next {@link #setToStop()}.\n\t * @param borderColorStop the borderColorStop to set\n\t */\n",
    "718": "\t/**\n\t * Does not have effect before the next {@link #setToStart()}.\n\t * @param bgColorStart the bgColorStart to set\n\t */\n",
    "721": "\t/**\n\t * Does not have effect before the next {@link #setToStop()}.\n\t * @param bgColorStop the bgColorStop to set\n\t */\n",
    "722": "\t/**\n\t * Computes and returns whether the rectangle given by the left upper corner\n\t * and both dimensions is completely outside the specified clip rectangle.\n\t * When the clip rectangle is missing, it is considered to be arbitrarily large.\n\t * \n\t * @param x    x of upper left corner\n\t * @param y    y of upper left corner\n\t * @param xlen width\n\t * @param ylen height\n\t * @param clip rectangle we compare against\n\t * @return whether (x,y,xlen,ylen) is completely outside of \"clip\"\n\t */\n",
    "741": "\t/**\n\t * Returns whether this shortcut has an alias.\n\t * \n\t * @return <code>true</code> if this shortcut has an alias,\n\t *        <code>false</code> otherwise\n\t */\n",
    "743": "\t/**\n\t * Returns the alias of this shortcut.\n\t * \n\t * @return the alias of this shortcut\n\t */\n",
    "746": "\t/**\n\t * Sets the alias of this shortcut.\n\t * \n\t * @param newAlias the new alias of this shortcut\n\t */\n",
    "747": "\t/**\n\t * Returns the path stored in this shortcut.\n\t * \n\t * @return the path\n\t */\n",
    "750": "\t/**\n\t * Returns the name of this shortcut.\n\t * <p>\n\t * If there is an alias this alias is returned. Otherwise the path is returned.\n\t * \n\t * @return the name of this shortcut\n\t */\n",
    "752": "\t/**\n\t * Returns formatted shortcut's name for display.\n\t *\n\t * @return the display name of this shortcut\n\t */\n",
    "753": "\t/**\n\t * Extracts the graphic specified by the passed name from the passed graphic\n\t * which contains all graphics of the skin.\n\t * <p>\n\t * This method is only used for reducing the lines of code when extracting\n\t * the graphics from the entire graphic containing all skin graphics.\n\t * This method assumes that the position of the graphic to be extracted\n\t * is stored in the settings as \"x, y\" coordinates.\n\t * \n\t * @param entireGraphic  skin graphic containing all skin graphics\n\t * @param graphicName  the name of the graphic to extract\n\t * @return the extracted <code>BufferedImage</code>\n\t */\n",
    "754": "\t/**\n\t * Returns the color of this shortcut.\n\t * \n\t * @return the color of this shortcut\n\t */\n",
    "755": "\t/**\n\t * Sets the color of this shortcut.\n\t * \n\t * @param color color to be set\n\t */\n",
    "756": "\t/**\n\t * Sets the board this GUI shows.\n\t * \n\t * @param board board to be shown\n\t */\n",
    "758": "\t/**\n\t * Returns the <code>String</code> representation of the shortcut's color.\n\t * \n\t * @return color of this shortcut as <code>String</code>\n\t */\n",
    "759": "\t/**\n\t * Extracts the graphic specified by the passed name from the passed graphic\n\t * which contains all graphics of the skin.\n\t * <p>\n\t * This method is only used for reducing the lines of code when extracting\n\t * the graphics from the entire graphic containing all skin graphics.\n\t * This method assumes that only the x-coordinate is relevant for locating\n\t * a sub graphic in the entire graphic. \n\t * \n\t * @param entireGraphic  skin graphic containing all skin graphics\n\t * @param graphicName  the name of the graphic to extract\n\t * @return the extracted <code>BufferedImage</code>\n\t */\n",
    "764": "\t/**\n\t * Erase any comments of the passed property string.\n\t * A comment starts at the first '#' (hash sign).\n\t * Also, blanks and tabs are trimmed from the (right) end of the result.\n\t * \n\t * @param propertyValue value of a property as a String\n\t * @return trimmed value\n\t */\n",
    "772": "\t/**\n\t * Returns the current transformation as String.\n\t * This String is saved into the file of the level as information.\n\t * Note: this string is NOT influenced by any language settings.\n\t * \n\t * @return the transformation as <code>String</code>\n\t * @see #newlevel()\n\t */\n",
    "774": "\t/**\n\t * This default generator implementation just returns the {@link #base}\n\t * object reference.\n\t * That probably works only for immutable types T.\n\t * <p>\n\t * Most implementations should override this method by something that\n\t * clones the {@link #base} or uses it as basis for a constructor.\n\t * E.g. ActionEvents are neither immutable nor do they support cloning.\n\t * \n\t * @return the next generated object\n\t */\n",
    "779": "\t/**\n\t * Creates a button for the tool bar.\n\t * \n\t * @param iconName\t\tthe name of the icon for the button\n\t * @param actionCommand the action command of the button\n\t * @param toolTipText \tthe tool tip text for the button\n\t * @return the created button\n\t * @see #createToolBarButtonByKey(String, String, String)\n\t */\n",
    "781": "\t/**\n\t * Returns the currently used skin.\n\t * \n\t * @return the <code>Skin</code> currently used\n\t */\n",
    "784": "\t/**\n\t * Returns the string corresponding to the passed property name.\n\t * \n\t * @param name name of property\t\n\t * @param defaultValue value to be set if the property value can't be set\n\t * @return value of the property as string or null, if no property is found\n\t */\n",
    "785": "\t/**\n\t * Creates a button for the tool bar.\n\t * \n\t * @param iconName       the name of the icon for the button\n\t * @param actionCommand  the action command of the button\n\t * @param toolTipTextKey the text key for the tool tip text for the button\n\t * @return the created button\n\t * @see #createToolBarButton(String, String, String)\n\t */\n",
    "787": "\t/**\n\t * Sets a new delay for the animations that are shown.\n\t * <p>\n\t * Depending on the skin there may be an animation for a selected box and\n\t * the selected player.\n\t * \n\t * @param delay\n\t *            the delay in milliseconds\n\t */\n",
    "793": "\t/**\n\t * Sets the view direction of the player to the passed direction.\n\t * <p>\n\t * The view direction is important for some skins in order to be able to\n\t * show the correct graphic.\n\t * \n\t * @param viewDirection\n\t *            the view direction of the player\n\t */\n",
    "800": "\t/**\n\t * Sets the maximum factor for scaling the graphics.\n\t * <p>\n\t * Some skins offer bad quality graphics which shouldn't be scaled too much.\n\t * Hence the user can set a maximum scaling factor. This way the graphics\n\t * aren't scaled beyond this factor even if there is enough space for the\n\t * graphics to be drawn.\n\t * \n\t * @param maximumScalingFactor\n\t *            the new factor to be set\n\t */\n",
    "805": "\t/**\n\t * Sets the flag that a recalculation has to be done.\n\t */\n",
    "806": "\t/**\n\t * Transforms the board (rotation and mirroring)\n\t * \n\t * @param transformationValue  kind of transformation\n\t */\n",
    "808": "\t/**\n\t * Sets the passed level as level to be displayed in this Panel.\n\t * \n\t * @param levelToBeDisplayed  the <code>Level</code> to be displayed\n\t */\n",
    "810": "\t/**\n\t * Sets the passed board to be displayed.\n\t * \n\t * @param boardAsString the board data as <code>String</code>\n\t */\n",
    "813": "\t/**\n\t * Sets the flag specifying whether the infobar is to be shown or not.\n\t * \n\t * @param visibleStatus\n\t *            visibility status of the infobar to set\n\t */\n",
    "814": "\t/**\n\t * Sets the passed board to be displayed.\n\t * \n\t * @param board the board to be displayed\n\t */\n",
    "816": "\t/**\n\t * Returns the <code>Board</code> displayed in this class.\n\t * \n\t * @return the <code>Board</code> of this class\n\t */\n",
    "819": "\t/**\n\t * Returns the <code>Level</code> displayed in this class\n\t * \n\t * @return the <code>Level</code> of this class\n\t */\n",
    "821": "\t/**\n\t * Returns the current width of a square from the current scaled skin.\n\t * @return width of a square\n\t */\n",
    "823": "\t/**\n\t * Returns the current height of a square from the current scaled skin.\n\t * @return height of a square\n\t */\n",
    "824": "\t/**\n\t * Sets the flag indication that the sizes must be recalculated.\n\t * If e.g. we switch into editor mode, we have less space for the board,\n\t * since we have to draw some objects for the editor.\n\t */\n",
    "827": "\t/**\n\t * Resets the <code>board</code> and the player position members\n\t * from the <code>boardInitial</code> member.\n\t */\n",
    "835": "\t/**\n\t * Repaints the GUI immediately.\n\t * This is the sledge-hammer method: everything is painted, again.\n\t */\n",
    "840": "\t/**\n\t * Packs the passed unpacked box configuration into a new packed box configuration.\n\t * \n\t * @param newPackedBoxConfiguration\n\t * @param unpackedBoxConfiguration\n\t */\n",
    "856": "\t/**\n\t * Marks the passed board position as visited.\n\t * \n\t * @param boardPositionIndex\n\t *            index of the board position in the visitedData array\n\t */\n",
    "863": "\t/**\n\t * Sets the cursor image to the specified cursor.\n\t * \n\t * @param cursor The value of the cursor to be set\n\t */\n",
    "865": "\t/**\n\t * If the coordinates of the point aren't located on the board\n\t * they are adjusted so they are on the edge of the board.\n\t * \n\t * @param p  <code>Point</code> containing the data which is adjusted\n\t */\n",
    "866": "\t/**\n\t * Repaints part of the GUI immediately.  Only a rectangle inside the board is\n\t * considered to be changed, specified in external board square coordinates.\n\t * But, the number of moves and pushes has also be considered to be changed,\n\t * which implies some more updates.\n\t * \n\t * @param xmin      upper left X of board square rectangle\n\t * @param ymin      upper left Y of board square rectangle\n\t * @param extWidth  width  of rectangle in board squares\n\t * @param extHeight height of rectangle in board squares\n\t */\n",
    "870": "\t/**\n\t * Returns the influence distance between the start and the target square.\n\t * The higher the distance the less influence the target square has\n\t * on the start square.\n\t * \n\t * @param startSquare  position of the start square\n\t * @param targetSquare position of the target square\n\t * \n\t * @return influence distance from the start square to the target square\n\t */\n",
    "871": "\t/**\n\t * This method sets the currently set language in all menu bar\n\t * and tool bar components.\n\t */\n",
    "872": "\t/**\n\t * Returns whether the board position (box + player positions) is marked as\n\t * visited.\n\t * \n\t * @param boardPositionIndex\n\t *            index of the board position in the visitedData array\n\t * @return <code>true</code>board position has already been visited;\n\t *         <code>false</code>otherwise\n\t */\n",
    "874": "\t/**\n\t * Inserts a move of the player into the history.\n\t * \n\t * @param direction\tinto which the player moved\n\t */\n",
    "876": "\t\t/**\n\t\t * Set the collected values back to the initial values,\n\t\t * indicating an empty range.\n\t\t */\n",
    "877": "\t/**\n\t * Returns the next movement from the history,\n\t * and advances the \"current\" pointer to it.\n\t * \n\t * @return <code>null</code>, or the <code>HistoryElement</code> containing the data\n\t *         for the next movement of the history\n\t */\n",
    "878": "\t/**\n\t * Returns the previously executed movement from the history,\n\t * and moves back the \"current\" pointer before it.\n\t * \n\t * @return <code>null</code>, or the <code>HistoryElement</code> containing the data\n\t *         for the previously executed movement \n\t */\n",
    "881": "\t/**\n\t * Returns the movement with the given number.\n\t * \n\t * @param movementNo number of the movement to be returned\n\t * @return  <code>null</code>, or the <code>HistoryElement</code> of the movement\n\t *          with the given number\n\t */\n",
    "882": "\t/**\n\t * Returns the index of the last executed movement.\n\t * That is also the count of the player moves up to now/here. \n\t * \n\t * @return index of the last executed movement\n\t */\n",
    "883": "\t\t/**\n\t\t * Returns whether the collected area is empty.\n\t\t * \n\t\t * @return whether the area is empty\n\t\t */\n",
    "884": "\t/**\n\t * Returns the total count of the stored movements.\n\t * \n\t * @return total count of movements\n\t */\n",
    "885": "\t/**\n\t * Returns the (total) number of pushes contained in the history.\n\t * \n\t * @return number of pushes in the history\n\t */\n",
    "889": "\t/**\n\t * Returns the LURD string of all movements up to the current movement.\n\t * \n\t * @return LURD string till the current movement (inclusive)\n\t * @see #getLURDString(int, int)\n\t */\n",
    "890": "\t\t/**\n\t\t * Adds a point to the area, given by its components.\n\t\t * \n\t\t * @param x\n\t\t * @param y\n\t\t */\n",
    "891": "\t/**\n\t * Returns the complete LURD string of all movements, independent from the\n\t * current point inside of the history.\n\t * \n\t * @return LURD string till the end (inclusive)\n\t * @see #getLURDString(int, int)\n\t */\n",
    "893": "\t/**\n\t * Sets the history to the first movement.\n\t */\n",
    "895": "\t/**\n\t * Sets the \"current\" pointer to the specified index.\n\t * This changes to reference point for further \"undo\" and \"redo\" operations.\n\t * This is the way to quickly jump to an arbitrary point in the history.\n\t *\n\t * @param movementNo the movement number to be set\n\t */\n",
    "897": "\t/**\n\t * Sets the marker which indicates that the next movement will be the start\n\t * of a combined movement.\n\t */\n",
    "898": "\t\t/**\n\t\t * Collect another external position.\n\t\t * External positions are what is handled in the GUI, they reflect screen\n\t\t * positions after any transformation.\n\t\t * \n\t\t * @param externalPos <code>-1</code>. or external position to collect\n\t\t */\n",
    "900": "\t/**\n\t * Sets back the \"current\" pointer to the previous movement.\n\t * This operation is unchecked / unconditional.\n\t */\n",
    "903": "\t/**\n\t * Sets forward the \"current\" pointer to the next movement.\n\t * This operation is unchecked / unconditional.\n\t */\n",
    "904": "\t\t/**\n\t\t * Collect another internal position (from the model).\n\t\t * Before it is collected, it must be translated to an external position\n\t\t * according to the current transformation.\n\t\t * \n\t\t * @param internalPos <code>-1</code>. or internal position to collect\n\t\t */\n",
    "905": "\t/**\n\t * Returns whether there is a preceding movement.\n\t * \n\t * @return <code>true</code>, if there is a  preceding movement,<br>\n\t *   \t  <code>false</code>, if there is no preceding movement\n\t */\n",
    "908": "\t/**\n\t * Returns whether there is a successor movement.\n\t * \n\t * @return <code>true</code> if there is a  successor movement,<br>\n\t * \t\t  <code>false</code> if there is no successor movement\n\t */\n",
    "910": "\t/**\n\t * Repaints part of the GUI.\n\t * Just the number of moves and the number of pushes is considered changed.\n\t */\n",
    "911": "\t/**\n\t * Return the number of steps to the preceding element one can do,\n\t * until the first movement is reached, or one that is marked to be\n\t * the start of a combined movement.\n\t * \n\t * @return length of the last combined movement\n\t */\n",
    "913": "\t/**\n\t * Return the length of the next combined movement, i.e. how many steps\n\t * forward can we do until we find an element which is marked to be\n\t * the start of a combined movement (excluding the current element).\n\t * \n\t * @return length of the next combined movement\n\t */\n",
    "915": "\t/**\n\t * Starting with the current movement, count the number of combined\n\t * segments.  Even when the first (current) movement is not marked\n\t * to be the start of a combined movement, we count it as start\n\t * of such a segment.\n\t * \n\t * @return count of segments starting at current movement\n\t */\n",
    "918": "\t/**\n\t * Starting with the current movement we scan forward and compute the\n\t * average length of combined segments.\n\t * @return average length of movement segments starting at current movement\n\t */\n",
    "932": "\t/**\n\t * Returns if a box has been pushed.\n\t * \n\t * @return true = A box has been pushed, false = no box has been pushed\n\t */\n",
    "939": "\t/**\n\t * Returns the mouse listener for this class.\n\t * \n\t * @return the mouse listener\n\t */\n",
    "941": "\t/**\n\t * Sets whether the editor menu item is enabled.\n\t * @param enabled\n\t */\n",
    "948": "\t/**\n\t * Returns the menu item for saving a level.\n\t * \n\t * @return the <code>JMenuItem</code> for saving a level\n\t */\n",
    "954": "\t/**\n\t * Returns the button for showing info in the menu bar.\n\t * <p>\n\t * The caller can fully access this button.\n\t * \n\t * @return the <code>JMenuItem</code> for saving a level\n\t */\n",
    "960": "\t/**\n\t * Sets the objects enabled or disabled depending on the current mode\n\t * (play or editor mode). \n\t */\n",
    "966": "\t/**\n\t * Displays the passed board position for debug purposes.\n\t * \n\t * @param storage\n\t *            storage the box configuration is stored in\n\t * @param boardPositionIndex\n\t *            index of the board position in the visited data array\n\t * @param graphicOutput\n\t *            flag, indicating whether there should be a graphical display\n\t *            or not\n\t * @param waitForEnter\n\t *            flag, indicating whether the program has to wait for \"enter\"\n\t *            after displaying the box configuration\n\t */\n",
    "969": "\t/**\n\t * Sets a color for the passed <code>Solution</code> in this GUI.\n\t * <p>\n\t * If \"null\" is passed as color the solution is set back to the default color.\n\t * \n\t * @param solution the <code>Solution</code> to be colored\n\t * @param color the <code>Color</code>\n\t */\n",
    "971": "\t/**\n\t * Sets the status of the solver mode dependent objects.\n\t * \n\t * @param enabledStatus <code>true</code>, if the objects are enabled, and\n\t * \t\t\t\t\t\t<code>false</code> if the objects are disabled\n\t */\n",
    "972": "\t\t/**\n\t\t * Returns whether the the current solution type is a valid\n\t\t * and new solution.\n\t\t * @return <code>true</code> if the solution is a valid new solution,\n\t\t *   or<br><code>false</code> otherwise\n\t\t */\n",
    "973": "\t/**\n\t * Sets the background color for all solutions to the default color.\n\t */\n",
    "974": "\t/**\n\t * Makes a single row \"selected\".\n\t * When the passed view row index is negative (e.g. as result of a\n\t * failed conversion) the current selection remains unchanged.\n\t * \n\t * @param viewrowindex the view index of the row to be selected\n\t */\n",
    "976": "\t/**\n\t * Adds the passed {@code ActionListener} to the listeners being informed\n\t * when an action is fired. \n\t * \n\t * @param actionListener  the {@code ActionListener} to be added\n\t */\n",
    "979": "\t/**\n\t * Shows an information dialog with translated title \"note\" and the message text\n\t * for the text key \"solutionList.noSolutionSelected\".\n\t */\n",
    "980": "\t/**\n\t * Removes the passed {@code ActionListener} from the listeners of this object.\n\t * \n\t * @param actionListener  the {@code ActionListener} to be removed\n\t */\n",
    "982": "\t/**\n\t * Displays the passed board position for debug purposes.\n\t * \n\t * @param storage\n\t *            storage the box configuration is stored in\n\t * @param boxConfigurationIndex\n\t *            index of the box configurtaion in the visited data array\n\t * @param playerPosition\n\t * \t\t      position of the player in internal format\n\t * @param graphicOutput\n\t *            flag, indicating whether there should be a graphical display\n\t *            or not\n\t * @param waitForEnter\n\t *            flag, indicating whether the program has to wait for \"enter\"\n\t *            after displaying the box configuration\n\t */\n",
    "984": "\t/**\n\t * Sets the enabled status of the undo buttons.\n\t * \n\t * @param enabledStatus <code>true</code>, if the objects are enabled, and\n\t * \t\t\t\t\t\t<code>false</code> if the objects are disabled\n\t */\n",
    "985": "\t\t/**\n\t\t * Handles the mouse event \"mouseDragged\".\n\t\t * \n\t\t * @param evt  the event that has been fired\n\t\t */\n",
    "987": "\t/**\n\t * This is the kernel of {@link #informListeners(Solution, String)},\n\t * after that method has decided, in which thread we have to work.\n\t * @param solution\n\t * @param action\n\t */\n",
    "989": "\t/**\n\t * Informs all listeners about a change of the stored solutions.\n\t * <p>\n\t * The listeners must know which actions can be caught from this class\n\t * (this avoids an extra interface containing methods for the different actions).\n\t */\n",
    "993": "\t/**\n\t * Sets the visibility of the \"take solution as history\" menu item.\n\t * \n\t * @param isVisible <code>true</code> sets the \"take solution as history\" menu item visible\n\t * \t\t\t\t   <code>false</code> sets the \"take solution as history\" menu item invisible\n\t */\n",
    "996": "\t/**\n\t * Sets the enabled status of the redo buttons.\n\t * \n\t * @param enabledStatus <code>true</code> if the objects are enabled, and\n\t * \t\t\t\t\t   <code>false</code> if the objects are disabled\n\t */\n",
    "1000": "\t\t/**\n\t\t * Add the passed solution as solution to be highlighted.\n\t\t * \n\t\t * @param solution <code>Solution</code> to be highlighted\n\t\t */\n",
    "1002": "\t\t/**\n\t\t * Removes all solutions to be highlighted.\n\t\t */\n",
    "1006": "\t\t/**\n\t\t * Returns the intensity the passed solution is to be highlighted.\n\t\t *\n\t\t * @param solution the <code>Solution</code> whose highlight intensity is returned\n\t\t * @return the highlight intensity or null if the passed solution isn't to be highlighted\n\t\t */\n",
    "1014": "\t/**\n\t * This methods sets the enabled status of specific GUI elements.\n\t * <p>\n\t * If the current loaded level is invalid then some of the GUI elements\n\t * have to be disabled.\n\t * \n\t * @param enabledStatus  whether the GUI elements are to be enabled\n\t */\n",
    "1015": "\t/**\n\t * Tell whether we currently have a valid {@code lastChanged} data.\n\t * \n\t * @return whether the {@code lastChanged} data is valid\n\t */\n",
    "1025": "\t/**\n\t * Sets the debug menu visible or invisible.\n\t * \n\t * @param isToBeVisible <code>true</code>, if the debug menu shall be visible, and\n\t * \t\t\t\t\t\t<code>false</code> if the debug menu shall be invisible\n\t */\n",
    "1035": "\t/**\n\t * Returns the solutions view.\n\t * <p>\n\t * The solutions are shown in an own JPanel at the left of the main GUI.\n\t * \n\t * @return the <code>solutionsGUI</code> displaying the solutions\n\t */\n",
    "1041": "\t/**\n\t * Method used for the SQL commands CREATE, DROP, INSERT and UPDATE\n\t * \n\t * @param expression the SQL command to be executed\n\t */\n",
    "1046": "\t/**\n\t * Wait for the deadlock identification (detection) to be ready.\n\t * This must be done prior to generation of box configurations,\n\t * since the results of deadlock computation are used there\n\t * without any further checks.\n\t */\n",
    "1049": "\t/**\n\t * Saves the passed level using the passed file name.\n\t *\n\t * @param level the <code>Level</code> to save\n\t * @param fileName the file the level is to be saved to\n\t * @throws IOException thrown when the level couldn't be saved\n\t */\n",
    "1055": "\t/**\n\t * Returns the char code of the square at the specified location.\n\t *  \n\t * @param xPosition X coordinate of the square to return a char for\n\t * @param yPosition Y coordinate of the square to return a char for\n\t * @return\t\t\tchar code for the square, or a blank if the position is outside\n\t *                  the implemented part of the board\n\t */\n",
    "1066": "\t/**\n\t * Reload the data of this view from the database.\n\t */\n",
    "1071": "\t\t/**\n\t\t * Return the ID of the stored string.\n\t\t * \n\t\t * @return the ID\n\t\t */\n",
    "1092": "\t/**\n\t * Adds all author names to the author <code>ComboxBox</code>es.\n\t */\n",
    "1097": "\t/**\n     * Close this dialog and return to the caller of this dialog. \n     */\n",
    "1098": "    \t/**\n    \t * Called from the author view when the user has changed data\n    \t * for the authors that is relevant for the other views.\n    \t */\n",
    "1100": "    \t/**\n    \t * Called from collection view when the user has changed something\n    \t * that is relevant for the other views.\n    \t */\n",
    "1102": "    \t/**\n    \t * Called from level assignment view when the user has changed\n    \t * something that is relevant for the other views. \n    \t */\n",
    "1103": "    \t/**\n    \t * Called from level view when the user has changed something that is\n    \t * relevant for the other views.\n    \t */\n",
    "1107": "    \t/**\n    \t * After a view has been refreshed the data is up-to-date again.\n    \t * Hence all update flags for this view can be reset. \n    \t */\n",
    "1108": "    \t/**\n    \t * Marks the passed view for being refreshed because data have changed. \n    \t */\n",
    "1114": "\t/**\n\t * This method is called whenever the additional information of a selected\n\t * level has changed.\n\t * (For example, when a solution has been deleted)\n\t */\n",
    "1115": "\t/**\n\t * Returns the number of board positions in this hash table.\n\t *\n\t * @return  the number of board positions in this hash table.\n\t */\n",
    "1120": "\t/**\n\t * Clears the storage so that it contains no board positions anymore.\n\t */\n",
    "1123": "\t\t/**\n\t\t * Returns the stored board positions.\n\t\t * \n\t\t * @return\tthe board position that is stored in this entry.\n\t\t */\n",
    "1125": "\t/**\n\t * Returns the selected collection.\n\t * \n\t * @return the currently selected collection item\n\t */\n",
    "1127": "\t/** This class has 4 bytes per atom */\n",
    "1129": "\t/** Any multiple of 4 will do, 72 might be common */\n",
    "1135": "\t\t/**\n\t\t * This method should return, if it knows, the number of bytes\n\t\t * that will be decoded. Many formats such as uuencoding provide\n\t\t * this information. By default we return the maximum bytes that\n\t\t * could have been encoded on the line.\n\t\t */\n",
    "1138": "\t\t/**\n\t\t * This method does an actual decode. It takes the decoded bytes and\n\t\t * writes them to the OutputStream. The integer <i>l</i> tells the\n\t\t * method how many bytes are required. This is always <= bytesPerAtom().\n\t\t */\n",
    "1144": "\t\t/**\n\t\t * Alternate decode interface that takes a String containing the encoded\n\t\t * buffer and returns a byte array containing the data.\n\t\t * @exception CEFormatException An error has occurred while decoding\n\t\t */\n",
    "1146": "\t\t/**\n\t\t * Decode the contents of the inputstream into a buffer.\n\t\t */\n",
    "1150": "\t/**\n\t * Sets the basic delay step to be used, in milliseconds.\n\t * \n\t * @param msStep delay time in milliseconds\n\t */\n",
    "1152": "\t/**\n\t * Returns the current delay time in milliseconds.\n\t * \n\t * @return current delay time in milliseconds\n\t */\n",
    "1153": "\t/**\n\t * Sets the intended sequence length of delay steps.\n\t * Positive values are used to somewhat reduce the total time of the\n\t * sequence by reducing the effective single step delay time.\n\t * \n\t * @param len intended sequence length of delay steps\n\t */\n",
    "1155": "\t/**\n\t * Returns the current intended sequence length of delay steps.\n\t * @return the current intended sequence length of delay steps\n\t */\n",
    "1157": "\t/**\n\t * Construct and return a new object for the standard step delay\n\t * from the Settings.\n\t * \n\t * @return new standard <code>Delays</code> object\n\t */\n",
    "1158": "\t/**\n\t * Construct and return a new object for the standard step delay\n\t * from the Settings, and the indicated intended sequence length.\n\t * \n\t * @param seqLength intended length of the sequence\n\t * @return new standard <code>Delays</code> object\n\t */\n",
    "1159": "\t/**\n\t * Construct and return a new object for the undo/redo step delay\n\t * from the Settings, and the indicated intended sequence length.\n\t * \n\t * @return new undo/redo <code>Delays</code> object\n\t */\n",
    "1161": "\t/**\n\t * Handle save button action.\n\t */\n",
    "1162": "\t/**\n\t * Construct and return a new object for the undo/redo step delay\n\t * from the Settings, and the indicated intended sequence length.\n\t * \n\t * @param seqLength intended length of the sequence\n\t * @return new undo/redo <code>Delays</code> object\n\t */\n",
    "1163": "\t/**\n\t * Start the Delay object.  If not yet started, this determines and\n\t * remembers \"now\" as the base time stamp for the next (first) delay.\n\t */\n",
    "1164": "\t/**\n\t * Stops the Delay object.\n\t * This just invalidates the last remembered wall clock time.\n\t */\n",
    "1169": "\t/**\n\t * Based of the mathematical value from {@link #effStep(boolean)}\n\t * we compute a meaningful approximation,\n\t * and return an <code>int</code> value.\n\t * \n\t * @param slowstep whether this delay shall be extra large\n\t * @return integral approximation of current delay in milliseconds\n\t */\n",
    "1172": "\t\t\t/**\n\t\t\t * Starts a new backward search.\n\t\t\t */\n",
    "1173": "\t/**\n\t * The main method of this application.\n\t * <p>\n\t * \n\t * @param argv passed parameters\n\t */\n",
    "1174": "\t/**\n\t * We are going to wait somewhat to create an observable motion.\n\t * If the wait amount is zero, we do not even call {@link Thread#sleep(long)}.\n\t * \n\t * @param reassertIntr whether a possible <code>InterruptedException</code>\n\t *                      is to be reasserted (<em>not</em> rethrown).\n\t *                      Else it is ignored.\n\t */\n",
    "1177": "\t/**\n\t * Decrypts special character regions of the ascii code.\n\t * \n\t * @param c  <code>Character</code> to be decrypted\n\t * @param start minimum ascii value to be used for decrypting\n\t * @param end   maximum ascii value to be used for decrypting\n\t * @param offset  offset the character has to be shifted by\n\t * @return the decrypted <code>Character</code>\n\t */\n",
    "1179": "\t/**\n\t * Restores the last saved properties.\n\t * \n\t * @param evt\n\t */\n",
    "1183": "\t/**\n\t * Inform every listener about the change of the state.\n\t */\n",
    "1186": "\t/**\n\t * Adds the passed listener.\n\t * \n\t * @param listener  listener to be added\n\t */\n",
    "1188": "\t/**\n\t * Returns the value of the spinner as double.\n\t * \n\t * @return the value\n\t */\n",
    "1189": "\t/**\n\t * Returns the value of the spinner as integer.\n\t * \n\t * @return the value\n\t */\n",
    "1193": "\t/**\n\t * If the available memory (RAM) is less than this bound,\n\t * then we are going to remove the eldest entry whenever we add a new one,\n\t * i.e. we do not expand our memory foot print.\n\t * <p>\n\t * Negative values indicate \"no such limit exists\".\n\t * \n\t * @param minRAMinMiB the minRAMinMiB to set\n\t * @see Utilities#getMaxUsableRAMinMiB()\n\t */\n",
    "1194": "\t/**\n\t * Inside this method (we override it) we implement our deletion strategy.\n\t * Either we return {@code true}, indicating the caller shall delete\n\t * that eldest entry, but in that case we are not allowed to change\n\t * the object ourselves.\n\t * <p>\n\t * Or we decide to take our own steps, return {@code false} to hinder\n\t * the caller to take any action, but may have removed one or more\n\t * elements ourselves.\n\t * \n\t * @param eldest   the currently eldest element, deletion candidate\n\t * @return whether the caller shall really remove that eldest entry\n\t */\n",
    "1197": "\t/**\n\t * This is like {@link LinkedHashMap#get(Object)}, but forces the\n\t * correct type of the key.\n\t * \n\t * @param key the key for which we search the mapped value\n\t * @return the mapped value, or {@code null}.\n\t */\n",
    "1199": "\t/**\n\t * Adds a key/value pair to the cache mapping.\n\t * We expect the key to be new, but we do not enforce (or check) that,\n\t * since the typical cache user will first use {@link #getV(Object)},\n\t * anyhow.\n\t * \n\t * @param key   key of the new cache entry\n\t * @param value value of the new cache entry\n\t */\n",
    "1200": "\t/**\n\t * Trim down the memory usage to the currently needed amount.\n\t * This is a user hint, and we need not really take any action,\n\t * e.g. if the implementation does not know how to do that.\n\t * @see ArrayList#trimToSize()\n\t */\n",
    "1215": "\t/**\n\t * Creation of a box data clone.\n\t *\n\t *@return  the cloned box data object\n\t */\n",
    "1216": "\t/**\n\t * Define the initial location (position) of a box.\n\t *\n\t *@param boxNo       number of the box, the location of which is to be set\n\t *@param boxPosition position of the box\n\t */\n",
    "1218": "\t/**\n\t * Change the location (position) of a box.\n\t *\n\t *@param boxNo\t\t number of the box, the location of which is to be set\n\t *@param boxPosition new position of the box\n\t */\n",
    "1219": "\t/**\n\t * Set / change the position of all boxes at once.\n\t * The passed array often contains an additional player position\n\t * (at the end of the array).  We don't care much, the array is\n\t * just one larger than necessary.\n\t *\n\t *@param  newBoxPositions the new box positions to be set\n\t */\n",
    "1221": "\t/**\n\t * Activate a box.\n\t *\n\t *@param  boxNo number of the box that shall be activated\n\t */\n",
    "1223": "\t/**\n\t * Deactivate a box.\n\t * Implies {@link #removeBoxFromCorral(int)}.\n\t *\n\t *@param  boxNo number of the box that shall be set inactive\n\t */\n",
    "1224": "\t/**\n\t * Tell whether a box is active.\n\t *\n\t *@param  boxNo number of the box we want to investigate\n\t *@return state of the box: <code>true</code> = is active\n\t */\n",
    "1225": "\t/**\n\t * Tell whether a box is inactive.\n\t *\n\t *@param  boxNo number of the box we want to investigate\n\t *@return state of the box: <code>true</code> = is inactive\n\t */\n",
    "1226": "\t/**\n\t * Mark a specified box to be frozen.\n\t * <p>\n\t * Such a box can never again be moved (pushed), regardless all other\n\t * possible changes on the board... except for an \"undo\" action.\n\t * <p>\n\t * Only boxes on goals are to be marked as frozen, as otherwise\n\t * it would constitute a deadlock condition.\n\t *\n\t *@param  boxNo number of the box to be marked \"frozen\"\n\t */\n",
    "1227": "\t/**\n\t * Sets a new level for playing.\n\t * \n\t * @param levelNo\n\t *            number of the level to set (first is 1)\n\t */\n",
    "1228": "\t/**\n\t * Tell whether a box is frozen.\n\t * A box can be frozen on a goal, only, since otherwise it would be\n\t * a deadlock condition.\n\t *\n\t *@param  boxNo number of the box we want to investigate\n\t *@return       whether the box is frozen\n\t */\n",
    "1230": "\t/**\n\t * Mark a specified box to not be frozen, anymore\n\t * This method is used for \"undo\" (on a frozen box).\n\t *\n\t *@param  boxNo number of the box to be unmarked\n\t */\n",
    "1231": "\t/**\n\t * Mark a specified box to be part of a corral.\n\t *\n\t *@param  boxNo number of the box which is part of a corral\n\t */\n",
    "1232": "\t/**\n\t * Mark a specified box to not be part of any corral.\n\t *\n\t *@param  boxNo number of the box which is not part of any corral\n\t */\n",
    "1233": "\t/**\n\t * Tell whether a box is part of a corral.\n\t *\n\t *@param  boxNo number of the box we want to investigate\n\t *@return <code>true</code> = box is part of a corral\n\t */\n",
    "1234": "\t/**\n\t * Tell the location of a box by its number.\n\t *\n\t *@param  boxNo number of the box we want to investigate\n\t *@return       position (location) of the box\n\t */\n",
    "1236": "\t/**\n\t * Tells whether all our boxes are on some goal.\n\t *\n\t *@return <code>true</code> if all boxes are on a goal, and\n\t *       <code>false</code> if at least one box is on a non-goal\n\t */\n",
    "1237": "\t/**\n\t * Returns the number of boxes on a goal.\n\t * \n\t * @return number of boxes on a goal\n\t */\n",
    "1238": "\t/**\n\t * Returns whether all active boxes are located on a backward goal.\n\t * \n\t * @return <code>true</code> if all active boxes are on backward goals, and\n\t * <code>false</code> if at least one active box not on a backward goal.\n\t */\n",
    "1239": "\t/**\n\t * Tell whether all corral boxes are located on goals.\n\t *\n\t *@return <code>true</code> if all corral boxes are on goals, and\n\t *\t\t <code>false</code> if at least one corral box is on a non-goal\n\t */\n",
    "1242": "\t/**\n\t * Mark all boxes as not frozen.\n\t */\n",
    "1243": "\t/**\n\t * Tell the overall size of the large index byte array.\n\t * Corresponds to the member of same name of array objects.\n\t * @return size of the array\n\t */\n",
    "1244": "\t/**\n\t * Reads the element value at the passed large index.\n\t * Models the array read access.\n\t * \n\t * @param lax large index of the array member\n\t * @return value of the array member at the index {@code lax}\n\t */\n",
    "1246": "\t/**\n\t * Writes an element value at the passed large index.\n\t * \n\t * @param lax large index of the array member\n\t * @param val the value to store\n\t * @return the just stored value\n\t */\n",
    "1248": "\t/**\n\t * Modifies the byte at the specified large array index\n\t * by \"oring in\" the passed byte value.\n\t * Models the operation {@code (arr[lax] |= val)}.\n\t * \n\t * @param lax large index of the array member to modify\n\t * @param val the value to \"or in\"\n\t * @return the resulting (stored) byte value\n\t */\n",
    "1253": "\t/**\n\t * Fetch a bit sized fragment of a {@code long} from a contiguous series\n\t * of bits from this \"array\".\n\t * The result is presented in unsigned interpretation (except the\n\t * {@code bitcnt} is 64).\n\t * \n\t * @param bitlax index of the first bit (not byte) to fetch\n\t * @param totbits number of bits to fetch (at most 64)\n\t * @return the indicated bits as unsigned value\n\t */\n",
    "1257": "\t/**\n\t * Shows dialog which informs about missing file.\n\t * <p>\n\t * If error is critical (it is when <code>messageType</code> equals\n\t * <code>JOptionPane.ERROR_MESSAGE</code> then application is closed.\n\t *\n\t * @param filePath\tpath of the missing file\n\t * @param messageType\t<code>JOptionPane.WARNING_MESSAGE</code> if missing file is non-critical;\n\t *\t\t\t\t\t\t<code>JOptionPane.ERROR_MESSAGE</code> if missing file is critical\n\t */\n",
    "1258": "\t/**\n\t * Tells, whether the SparseArray does not contain any non-{@code null}\n\t * element.\n\t * <p>\n\t * This is also part of the {@link Map} interface.\n\t * \n\t * @return whether the SparseArray is empty\n\t */\n",
    "1259": "\t/**\n\t * Removes all entries from the object.\n\t * <p>\n\t * This method is also part of the map interface.\n\t */\n",
    "1264": "\t/**\n\t * Load properties from a file.\n\t *\n\t * @param fileName\tname of the file\n\t * @return\t<code>Properties</code> variable containing loaded properties\n\t */\n",
    "1268": "\t/**\n\t * Load the properties corresponding to the passed language code.\n\t *\n\t * @param languageCode code of the language (example: \"en\")\n\t * @return\t<code>Properties</code> variable containing loaded properties\n\t */\n",
    "1275": "\t/**\n\t * Read the array element at the specified index.\n\t * \n\t * @param inx indexes the (sparse) array\n\t * @return {@code null}, or the element at index {@code inx}\n\t */\n",
    "1277": "\t/**\n\t * This is a helper method for {@link #wr(Node, byte, long, Object)}.\n\t * We store a new reference where we fetched the last {@code Node}\n\t * reference during tree path scanning: at {@code Node pa}\n\t * with index {@code painx}.\n\t * If {@code pa} is {@code null}, we must have fetched from the\n\t * {@link #root} and thus we here store to it.\n\t * \n\t * @param pa    the node to which we store a new reference, or {@code null}\n\t * @param painx the index of the store\n\t * @param nref  the new reference to store\n\t */\n",
    "1278": "\t/**\n\t * Reloads all non-static GUI components.\n\t */\n",
    "1279": "\t/**\n\t * Redraws the screen and waits for \"enter\" if needed.\n\t * \n\t * @param waitForEnter  whether the method is to wait for enter after drawing\n\t */\n",
    "1281": "\t/**\n\t * Stores the specified value into the array slot with the specified index,\n\t * and returns the former value of that array slot.\n\t * <p>\n\t * Storing a {@code null} value means to remove any former value\n\t * from the indexed array slot.\n\t * \n\t * @param inx the index of the array slot to write to\n\t * @param val the value to store at index {@code inx}\n\t * @return the former content of the array slot at index {@code inx}\n\t */\n",
    "1283": "\t/**\n\t * Removes a box from the passed position.\n\t * \n\t * @param position the position a box is to be removed from.\n\t */\n",
    "1287": "\t/**\n\t * Debug: Calculates and displays the lower bound for all levels.\n\t */\n",
    "1290": "\t\t\t/**\n\t\t\t * Starts a new forward search.\n\t\t\t */\n",
    "1291": "\t/**\n\t * Removes the box having the passed number.\n\t * \n\t * @param boxNo the number of the box that is to be removed.\n\t */\n",
    "1296": "\t/**\n\t * Returns whether the game is in play mode, just now.\n\t * \n\t * @return <code>true</code>, if the game is in play mode\n\t */\n",
    "1300": "\t/**\n\t * Removes a box from the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x\tthe x-coordinate of the position the box is to be removed from.\n\t * @param y the y-coordinate of the position the box is to be removed from.\n\t */\n",
    "1304": "\t/**\n\t * Returns whether the game is in editor mode, just now.\n\t * \n\t * @return <code>true</code>, iff the game is in editor mode\n\t */\n",
    "1308": "\t/**\n\t * Removes a wall from the passed position.\n\t * \n\t * @param position the position a wall is to be removed from.\n\t */\n",
    "1313": "\t/**\n\t * Sets the \"invalid level\" mode. The current level is invalid. Therefore\n\t * the user isn't allowed to play it. Furthermore the solver and the optimizer are disabled.\n\t */\n",
    "1319": "\t/**\n\t * Removes a wall from the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x\tthe x-coordinate of the position the wall is to be removed from.\n\t * @param y the y-coordinate of the position the wall is to be removed from.\n\t */\n",
    "1344": "\t/**\n\t * Removes a goal from the passed position.\n\t * \n\t * @param position the position a goal is to be removed from.\n\t */\n",
    "1373": "\t/**\n\t * Removes a goal from the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x\tthe x-coordinate of the position the goal is to be removed from.\n\t * @param y the y-coordinate of the position the goal is to be removed from.\n\t */\n",
    "1378": "\t/**\n\t * Determines the first key associated with a non-{@code null} value.\n\t * Sorting order is native: signed.\n\t * @return the first key in the sparse array\n\t * @see SortedMap#firstKey()\n\t */\n",
    "1384": "\t/**\n\t * Determines the last key associated with a non-{@code null} value.\n\t * Sorting order is native: signed.\n\t * @return the last key in the sparse array\n\t * @see SortedMap#lastKey()\n\t */\n",
    "1393": "\t/**\n\t * Removes the player from the board.\n\t */\n",
    "1453": "\t/**\n\t * Sets a box at the passed position.\n\t * \n\t * @param position the position a box is to be set.\n\t */\n",
    "1496": "    /**\n     * Method that is backed to a submit button of a form.\n     */\n",
    "1503": "\t/**\n\t * Sets a box at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position a box is to be set.\n\t * @param y the y-coordinate of the position a box is to be set.\n\t */\n",
    "1518": "\t/**\n\t * Generate an id for a new lock. Uniqueness per cache instance is very \n\t * desirable but not absolutely critical. Must be called from one of the \n\t * synchronized methods of this class.\n\t */\n",
    "1519": "\t/**\n\t * decrement a lock and put it back in the cache\n\t */\n",
    "1534": "    /**\n     * Gets a value of an element which matches the given key.\n     * @param key the key of the element to return.\n     * @return The value placed into the cache with an earlier put, or null if not found or expired\n     * @throws CacheException\n     */\n",
    "1536": "\t/**\n\t * Sets a box with the passed number at the passed position.\n\t * \n\t * @param position the position a box is to be set.\t \n\t * @param boxNo\tthe number of the box to be set\n\t */\n",
    "1537": "    /**\n     * Puts an object into the cache.\n     * @param key a {@link Serializable} key\n     * @param value a {@link Serializable} value\n     * @throws CacheException if the parameters are not {@link Serializable}, the {@link CacheManager}\n     * is shutdown or another {@link Exception} occurs.\n     */\n",
    "1538": "    /**\n     * Removes the element which matches the key.\n     * <p>\n     * If no element matches, nothing is removed and no Exception is thrown.\n     * @param key the key of the element to remove\n     * @throws CacheException\n     */\n",
    "1540": "    /**\n     * Remove all elements in the cache, but leave the cache\n     * in a useable state.\n     * @throws CacheException\n     */\n",
    "1542": "    /**\n     * Remove the cache and make it unuseable.\n     * @throws CacheException\n     */\n",
    "1543": "    /**\n     * Calls to this method should perform there own synchronization.\n     * It is provided for distributed caches. Because EHCache is not distributed\n     * this method does nothing.\n     */\n",
    "1545": "    /**\n     * Calls to this method should perform there own synchronization.\n     * It is provided for distributed caches. Because EHCache is not distributed\n     * this method does nothing.\n     */\n",
    "1546": "\t/**\n\t * Enables or disables the buttons for \"undo\" and \"redo\" by inspection of\n\t * the history, i.e. whether there is something to undo or redo.\n\t */\n",
    "1547": "\t\t/**\n\t\t * The timestamp on the cached data\n\t\t */\n",
    "1548": "    /**\n     * Gets the next timestamp;\n     */\n",
    "1549": "    /**\n     * Returns the lock timeout for this cache.\n     */\n",
    "1550": "\t\t/**\n\t\t * The actual cached data\n\t\t */\n",
    "1552": "\t\t/**\n\t\t * Lock the item\n\t\t */\n",
    "1554": "\t\t/**\n\t\t * Not a lock!\n\t\t */\n",
    "1555": "\t\t/**\n\t\t * Is this item visible to the timestamped\n\t\t * transaction?\n\t\t */\n",
    "1558": "\t\t/**\n\t\t * Don't overwite already cached items\n\t\t */\n",
    "1561": "\t/**\n\t * Sets a box with the passed number at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position a box is to be set.\n\t * @param y the y-coordinate of the position a box is to be set.\n\t * @param boxNo\tthe number of the box to be set\n\t */\n",
    "1563": "\t/**\n\t * Check if this lock mode is more restrictive than the given lock mode.\n\t *\n\t * @param mode LockMode to check\n\t * @return true if this lock mode is more restrictive than given lock mode\n\t */\n",
    "1564": "\t/**\n\t * Check if this lock mode is less restrictive than the given lock mode.\n\t *\n\t * @param mode LockMode to check\n\t * @return true if this lock mode is less restrictive than given lock mode\n\t */\n",
    "1572": "\t\t/**\n\t\t * Increment the lock, setting the\n\t\t * new lock timeout\n\t\t */\n",
    "1579": "\t\t/**\n\t\t * Decrement the lock, setting the unlock\n\t\t * timestamp if now unlocked\n\t\t * @param currentTimestamp\n\t\t */\n",
    "1587": "\t\t/**\n\t\t * Can the timestamped transaction re-cache this\n\t\t * locked item now?\n\t\t */\n",
    "1592": "\t\t/**\n\t\t * Was this lock held concurrently by multiple\n\t\t * transactions?\n\t\t */\n",
    "1599": "\t\t/**\n\t\t * Yes, this is a lock\n\t\t */\n",
    "1605": "\t\t/**\n\t\t * locks are not returned to the client!\n\t\t */\n",
    "1617": "\t/**\n\t * Sets a box and a goal at the passed position.\n\t * \n\t * @param position the position the objects are to be set.\n\t */\n",
    "1634": "\t/**\n     * Defines the mapper to map source to destination files.\n     */\n",
    "1638": "\t/**\n\t * Copies the data of the current level to the clipboard, optionally\n\t * using run length encoding (RLE).\n\t * \n\t * @param withRLE whether to use RLE\n\t * @see #exportLevelToClipboard(boolean, boolean)\n\t */\n",
    "1647": "\t/**\n\t * Sets a box and a goal at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position the objects are to be set.\n\t * @param y the y-coordinate of the position the objects are to be set.\n\t */\n",
    "1665": "\t/**\n\t * Sets a a goal at the passed position.\n\t * \n\t * @param position the position the goal is to be set.\n\t */\n",
    "1680": "\t/**\n\t * Sets a goal at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position a goal is to be set.\n\t * @param y the y-coordinate of the position a goal is to be set.\n\t */\n",
    "1692": "\t/**\n\t * Sets a wall at the passed position.\n\t * \n\t * @param position the position the wall is to be set.\n\t */\n",
    "1704": "\t/**\n\t * Sets a wall at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position a wall is to be set.\n\t * @param y the y-coordinate of the position a wall is to be set.\n\t */\n",
    "1716": "\t/**\n\t * Sets the number of a box at the passed position.\n\t * \n\t * @param boxNo\tthe box number to be set\n\t * @param position the position the box number is to be set.\n\t */\n",
    "1727": "\t/**\n\t * Sets the number of a box at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param boxNo\tthe box number to be set\n\t * @param x the x-coordinate of the position the box number is to be set.\n\t * @param y the y-coordinate of the position the box number is to be set.\n\t */\n",
    "1738": "\t/**\n\t * Sets the square at the the passed position to be an advanced deadlock\n\t * square.\n\t * \n\t * @param position the position of the square\n\t */\n",
    "1761": "\t/**\n\t * Sets the player to the passed position.\n\t * \n\t * @param position Position the player is to be set at.\n\t */\n",
    "1778": "\t/**\n\t * Sets the player to the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position the player is to be set at.\n\t * @param y the y-coordinate of the position the player is to be set at.\n\t */\n",
    "1808": "\t/**\n\t * Returns whether the square at the the passed position is a corral\n\t * forcer square.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a corral forcer square at the\n\t *                           passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't a corral forcer square at the\n\t *                           passed position\n\t */\n",
    "1837": "\t/**\n\t * Returns whether the square at the the passed position is a corral\n\t * forcer square.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is a corral forcer square at the\n\t *                           passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't a corral forcer square at the\n\t *                           passed position\n\t */\n",
    "1865": "\t/**\n\t * Returns whether there is a box at the passed position.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a box at the passed position,\n\t * or<br> <code>false</code> if there isn't a box at the passed position\n\t */\n",
    "1889": "\t/**\n\t * Returns whether there is a box at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is a box at the passed position,\n\t * or<br> <code>false</code> if there isn't a box at the passed position\n\t */\n",
    "1911": "\t/**\n\t * Returns whether there is a wall at the passed position.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a wall at the passed position,\n\t * or<br> <code>false</code> if there isn't a wall at the passed position\n\t */\n",
    "1916": "\t/**\n\t * Returns if a box has been selected.\n\t * \n\t * @return <code>true</code> a box has been selected <code>false</code> no box\n\t *         has been selected\n\t */\n",
    "1931": "\t/**\n\t * Returns whether there is a wall at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is a wall at the passed position,\n\t * or<br> <code>false</code> if there isn't a wall at the passed position\n\t */\n",
    "1946": "\t/**\n\t * Returns whether the player reachable squares are to be highlighted.\n\t * \n\t * @return <code>true</code> if the player reachable squares are to be highlighted,<br>\n\t * \t      <code>false</code> otherwise\n\t */\n",
    "1956": "\t/**\n\t * The location of ant-installer.jar and sysout.jar and possibly jgoodies-edited-1_2_2.jar\n\t * @param antInstallLib The antInstallLib to set.\n\t */\n",
    "1958": "\t/**\n\t * The location of ant.jar and ant-launcher.jar\n\t * @param antLib The antLib to set.\n\t */\n",
    "1959": "\t/**\n\t * Returns whether there is a goal at the passed position.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a goal at the passed position,\n\t * or<br> <code>false</code> if there isn't a goal at the passed position\n\t */\n",
    "1991": "\t/**\n\t * Returns the position of the selected box.\n\t * \n\t * @return the position of the selected box\n\t */\n",
    "2003": "\t/**\n\t * Returns whether there is a goal at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is a goal at the passed position,\n\t * or<br> <code>false</code> if there isn't a goal at the passed position\n\t */\n",
    "2086": "\t/**\n\t * Returns whether the square at the passed position is either a goal\n\t * or a wall.\n\t * \n\t * @param position  the position of the square\n\t * @return <code>true</code> if the square is a goal or a wall, or<br>\n\t * \t\t  <code>false</code> otherwise\n\t */\t\n",
    "2156": "\t/**\n\t * Plays the next movements from the history movements, in an own thread,\n\t * in order to avoid blocking the event dispatcher thread (EDT).\n\t * \n\t * @param redoAllMovements whether all movements have to be redone\n\t */\n",
    "2159": "\t/**\n\t * Returns whether there is a corral forcer at the passed position.\n\t * A corral forcer divides the board into areas the player can reach\n\t * and can't reach.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a corral forcer at the position,\n\t * or<br> <code>false</code> if there isn't a corral forcer at the position \n\t */\n",
    "2165": "    /**\n     * Returns a list of all elements in the cache. Only keys of non-expired\n     * elements are returned.\n     * <p/>\n     * The returned keys are unique and can be considered a set.\n     * <p/>\n     * The List returned is not live. It is a copy.\n     * <p/>\n     * The time taken is O(n), where n is the number of elements in the cache. On\n     * a 1.8Ghz P4, the time taken is approximately 200ms per 1000 entries. This method\n     * is not syncrhonized, because it relies on a non-live list returned from {@link #getKeys()}\n     * , which is synchronised, and which takes 8ms per 1000 entries. This way\n     * cache liveness is preserved, even if this method is very slow to return.\n     * <p/>\n     * Consider whether your usage requires checking for expired keys. Because\n     * this method takes so long, depending on cache settings, the list could be\n     * quite out of date by the time you get it.\n     *\n     * @return a list of {@link Serializable} keys\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2169": "\t/**\n\t * Returns whether there is a backward search goal at the passed position.\n\t * The backward search goals are the positions of the boxes\n\t * at the beginning of a level.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a backward search goal\n\t *                           at the passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't a backward search goal\n\t *                           at the passed position\n\t */\n",
    "2175": "    /**\n     * Returns the number of elements in the memory store.\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2177": "    /**\n     * Returns the number of elements in the disk store.\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2180": "\t/**\n\t * Returns whether there is a backward search goal at the passed position.\n\t * The backward search goals are the positions of the boxes\n\t * at the beginning of a level.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is a backward search goal\n\t *                           at the passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't a backward search goal\n\t *                           at the passed position\n\t */\n",
    "2181": "    /**\n     * Gets the status attribute of the Cache\n     *\n     * @return The status value from the Status enum class\n     */\n",
    "2186": "\t/**\n\t * Undoes the last movement in an own thread,\n\t * in order to avoid blocking the event dispatcher thread (EDT).\n\t */\n",
    "2187": "    /**\n     * Receive a Locator object for document events.\n     */\n",
    "2191": "    /**\n     * Number of times a requested item was found in the Memory Store\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2193": "\t/**\n\t * Returns whether there is an empty square at the passed position.\n\t * NB: a goal is <em>not</em> considered to be empty.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is an empty square\n\t *                           at the passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't an empty square\n\t *                           at the passed position\n\t */\n",
    "2195": "    /**\n     * Number of times a requested item was found in the Disk Store\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2196": "    /**\n     * Finds a creator method.\n     */\n",
    "2197": "    /**\n     * Builds a method name from an element or attribute name.\n     */\n",
    "2198": "    /**\n     * Number of times a requested element was not found in the cache. This\n     * may be because it expired, in which case this will also be recorded in {@link #getMissCountExpired},\n     * or because it was simply not there.\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2203": "    /**\n     * Number of times a requested element was found but was expired\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2205": "\t/**\n\t * Returns whether there is an empty square at the passed position.\n\t * NB: a goal is <em>not</em> considered to be empty.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is an empty square\n\t *                           at the passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't an empty square\n\t *                           at the passed position\n\t */\n",
    "2207": "    /**\n     * Gets the cache name\n     */\n",
    "2208": "    /**\n     * Formats the current document location.\n     */\n",
    "2209": "    /**\n     * Gets timeToIdleSeconds\n     */\n",
    "2211": "    /**\n     * Gets timeToLiveSeconds\n     */\n",
    "2213": "\t/**\n\t * Returns whether the square at the passed is accessible,\n\t * that means: not a box and not a wall.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is accessible, or<br>\n\t * \t\t  <code>false</code> if the square isn't accessible\n\t */\n",
    "2219": "    /**\n     * Does the overflow go to disk\n     */\n",
    "2221": "    /**\n     * Gets the maximum number of elements to hold in memory\n     */\n",
    "2223": "\t/**\n\t * Returns whether the square at the passed is accessible,\n\t * i.e. not a box and not a wall.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is accessible, or<br>\n\t * \t\t  <code>false</code> if the square isn't accessible\n\t */\n",
    "2224": "    /**\n     * The policy used to evict elements from the {@link net.sf.ehcache.store.MemoryStore}.\n     * This can be one of:\n     * <ol>\n     * <li>LRU - least recently used\n     * <li>LFU - least frequently used\n     * <li>FIFO - first in first out, the oldest element by creation time\n     * </ol>\n     * The default value is LRU\n     *\n     * @since 1.2\n     */\n",
    "2225": "    /**\n     * Gets the disk cache path\n     */\n",
    "2227": "    /**\n     * Gets a Map of caches\n     */\n",
    "2229": "    /**\n     * Checks whether this cache element has expired.\n     * <p/>\n     * The element is expired if:\n     * <ol>\n     * <li> the idle time is non-zero and has elapsed, unless the cache is eternal; or\n     * <li> the time to live is non-zero and has elapsed, unless the cache is eternal; or\n     * <li> the value of the element is null.\n     * </ol>\n     *\n     * @return true if it has expired\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     * @throws NullPointerException  if the element is null\n     */\n",
    "2233": "\t/**\n\t * Returns whether the square at the passed position is accessible for\n\t * a box.  A square is accessible for a box if there is neither a wall\n\t * nor a box at this square AND the square is no simple deadlock square.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is accessible for a box, or<br>\n\t * \t\t  <code>false</code> if the square isn't accessible for a box\n\t */\n",
    "2235": "    /**\n     * Clones a cache. This is only legal if the cache has not been\n     * initialized. At that point only primitives have been set and no\n     * {@link net.sf.ehcache.store.LruMemoryStore} or {@link net.sf.ehcache.store.DiskStore} has been created.\n     *\n     * @return an object of type {@link Cache}\n     * @throws CloneNotSupportedException\n     */\n",
    "2238": "        /**\n         * Sets the class name\n         *\n         * @param fullyQualifiedClassPath\n         */\n",
    "2241": "\t/**\n\t * Returns whether the square at the passed position is accessible for\n\t * a box.  A square is accessible for a box if there is neither a wall\n\t * nor a box at this square AND the square is no simple deadlock square.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is accessible for a box, or<br>\n\t * \t\t  <code>false</code> if the square isn't accessible for a box\n\t */\n",
    "2242": "        /**\n         * Sets the name of the cache. This must be unique\n         */\n",
    "2243": "    /**\n     * Use this to access the service in order to register and unregister listeners\n     *\n     * @return the CacheEventNotificationService instance for this cache.\n     */\n",
    "2244": "        /**\n         * Sets the maximum objects to be held in memory\n         */\n",
    "2247": "    /**\n     * Notifies all registered listeners, in no guaranteed order, that an element was removed\n     * @param element\n     * @see CacheEventListener#notifyElementRemoved\n     */\n",
    "2248": "        /**\n         * Sets the eviction policy. An invalid argument will set it to null\n         */\n",
    "2251": "    /**\n     * Notifies all registered listeners, in no guaranteed order, that an element has expired\n     * @param element\n     * @see CacheEventListener#notifyElementExpired\n     */\n",
    "2252": "    /**\n     * Adds a listener to the notification service. No guarantee is made that listeners will be\n     * notified in the order they were added.\n     * @param cacheEventListener\n     * @return true if the listener is being added and was not already added\n     */\n",
    "2253": "    /**\n     * Removes a listener from the notification service.\n     * @param cacheEventListener\n     * @return true if the listener was present\n     */\n",
    "2254": "    /**\n     * Gets a list of the listeners registered to this class\n     * @return a list of type <code>CacheEventListener</code>\n     */\n",
    "2255": "\t/**\n\t * Returns whether the square at the passed position is a wall\n\t * or a simple deadlock square.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock square, or<br>\n\t * \t\t  <code>false</code> if the square is neither a wall nor a simple\n\t *                           deadlock square\n\t */\n",
    "2261": "        /**\n         * Sets whether elements are eternal. If eternal,  timeouts are ignored and the element\n         * is never expired.\n         */\n",
    "2266": "\t/**\n\t * Returns whether the current level is valid.\n\t * <P>\n\t * If the level is invalid an info message is displayed.\n\t * \n\t * @return <code>true</code> if the level is valid, and<br>\n\t *        <code>false</code> if the level is invalid\n\t */\n",
    "2268": "\t/**\n\t * Uses JavaGroups to broadcast the supplied notification message across the\n\t * cluster.\n\t * \n\t * @param message\n\t *            The cluster nofication message to broadcast.\n\t */\n",
    "2270": "        /**\n         * Sets the time to idle for an element before it expires. Is only used\n         * if the element is not eternal.\n         */\n",
    "2272": "\t/**\n\t * We are not using the caching, so we just return something that identifies\n\t * us. This method should never be called directly.\n\t */\n",
    "2273": "\t/**\n\t * A callback that is fired when a new member joins the cluster. This method\n\t * should never be called directly.\n\t * \n\t * @param address\n\t *            The address of the member who just joined.\n\t */\n",
    "2274": "\t/**\n\t * A callback that is fired when an existing member leaves the cluster. This\n\t * method should never be called directly.\n\t * \n\t * @param address\n\t *            The address of the member who left.\n\t */\n",
    "2278": "        /**\n         * Sets the time to idle for an element before it expires. Is only used\n         * if the element is not eternal.\n         */\n",
    "2280": "\t/**\n\t * Returns whether the square at the passed position is a wall\n\t * or a simple deadlock square.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock square, or<br>\n\t * \t\t  <code>false</code> if the square is neither a wall nor a simple\n\t *                           deadlock square\n\t */\n",
    "2281": "    /**\n     * Shuts down the CacheManager.\n     * <p/>\n     * If the shutdown occurs on the singleton, then the singleton is removed, so that if a singleton access method\n     * is called, a new singleton will be created.\n     */\n",
    "2283": "        /**\n         * Sets whether elements can overflow to disk when the in-memory cache\n         * has reached the set limit.\n         */\n",
    "2285": "        /**\n         * Sets whether, for caches that overflow to disk,\n         * the disk cache persist between CacheManager instances\n         */\n",
    "2288": "        /**\n         * Sets the interval in seconds between runs of the disk expiry thread.\n         * <p/>\n         * 2 minutes is the default.\n         * This is not the same thing as time to live or time to idle. When the thread runs it checks\n         * these things. So this value is how often we check for expiry.\n         */\n",
    "2291": "\t/**\n\t * Returns whether the passed position is an outer square or a wall.\n\t * An outer square is a square which is outside the reachable area\n\t * of the player even if there weren't any boxes on the board.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is an outer square or a wall,\n\t * or<br> <code>false</code> if the square isn't an outer square or a wall \n\t */\n",
    "2311": "\t/**\n\t * Returns whether the square at the passed position is a simple\n\t * deadlock square.\n\t * <p>\n\t * The search direction doesn't matter, because the simple deadlock squares\n\t * of the other direction can never be reached from a specific direction.\n\t * Therefore both the forward and the backward simple deadlock squares\n\t * are checked.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is a simple deadlock square,\n\t * or<br> <code>false</code> if the square isn't a simple deadlock square\n\t */\n",
    "2329": "\t/**\n\t * This method is called upon plug-in activation\n\t */\n",
    "2331": "\t/**\n\t * This method is called when the plug-in is stopped\n\t */\n",
    "2338": "    /**\n     *\tSet the current input focus to self's destination entry field\n     */\n",
    "2351": "\t/**\n\t * Returns whether the square at the passed position is a simple\n\t * deadlock square.\n\t * <p>\n\t * The search direction doesn't matter, because the simple deadlock squares\n\t * of the other direction can never be reached from a specific direction.\n\t * Therefore both the forward and the backward simple deadlock squares\n\t * are checked.\n\t * <p>\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is a simple deadlock square,\n\t * or<br> <code>false</code> if the square isn't a simple deadlock square\n\t */\n",
    "2362": "\t/**\n\t * Sets a new collection for playing.\n\t * \n\t * @param levelCollection\n\t *            the level collection to be set\n\t */\n",
    "2377": "\t/**\n\t * Uses the standard container selection fileDialog to choose the new value\n\t * for the container field.\n\t */\n",
    "2378": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is\n\t * a simple deadlock forward square.\n\t *  \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock forward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a simple\n\t *                           deadlock forward square\n\t */\n",
    "2418": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is\n\t * a simple deadlock forward square.\n\t *  \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock forward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a simple\n\t *                           deadlock forward square\n\t */\n",
    "2441": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is\n\t * a simple deadlock backward square.\n\t *  \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock backward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a simple\n\t *                           deadlock backward square\n\t */\n",
    "2449": "\t/**\n\t * If the current level collection contains the level with the\n\t * specified data base ID, we return the title of that current collection.\n\t * Otherwise we return null.\n\t * <p>\n\t * NOTE: There may be other collections containing that levelID.\n\t * \n\t * @param levelID ID of the level to search for\n\t * @return the title of the collection containing the levelID\n\t */\n",
    "2455": "    /**\n     * Save a transient object.\n     * An id is generated, assigned to the given object and returned.\n     */\n",
    "2463": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is a simple deadlock backward square.\n\t *  \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock backward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a simple\n\t *                           deadlock backward square\n\t */\n",
    "2478": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is\n\t * an advanced simple deadlock forward square.\n\t *  \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is a wall or an advanced\n\t *                           simple deadlock forward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a advanced\n\t *                           simple deadlock forward square\n\t */\n",
    "2488": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is a advanced simple deadlock forward square.\n\t *  \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is a wall or an advanced\n\t *                           simple deadlock forward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a advanced\n\t *                           simple deadlock forward square\n\t */\n",
    "2500": "\t/**\n\t * Returns whether there is a box and a goal at the passed position.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a box and a goal\n\t *                           at the passed position,\n\t * or<br> <code>false</code> if there isn't a box and a goal\n\t *                           at the passed position\n\t */\n",
    "2512": "\t/**\n\t * Returns whether there is a box and a goal at the passed position.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a box and a goal\n\t *                           at the passed position,\n\t * or<br> <code>false</code> if there isn't a box and a goal\n\t *                           at the passed position\n\t */\n",
    "2521": "\t/**\n\t * Returns whether there is a player in the level.\n\t * <p>\n\t * Usually there is a player in every level. This method is just used for\n\t * determining \"special\" squares for displaying them correctly. \n\t * \n\t * @return <code>true</code> if there is a player in the level,\n\t * or<br> <code>false</code> if there isn't a player in the level\n\t */\n",
    "2528": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the passed position is marked.\n\t * <p>\n\t * Marked positions are displayed with a little square.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the passed position is marked,\n\t * or<br> <code>false</code> if the passed position is not marked\n\t */\n",
    "2543": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the passed position is marked.\n\t * <p>\n\t * Marked positions are displayed with a little square graphic.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the passed position is marked,\n\t * or<br> <code>false</code> if the passed position is not marked\n\t */\n",
    "2552": "\t/**\n\t * Removes a marking from the passed position.\n\t * \n\t * @param position the position a marking is to be removed from.\n\t */\n",
    "2561": "\t/**\n\t * Removes a marking from the passed position.\n\t * \n\t * @param x\tthe x-coordinate of the position the marking is to be removed from.\n\t * @param y the y-coordinate of the position the marking is to be removed from.\n\t */\n",
    "2569": "\t/**\n\t * Removes all marking from the board.\n\t */\n",
    "2576": "\t/**\n\t * Sets a marking at the passed position.\n\t * \n\t * @param position the position the marking is to be set.\n\t */\n",
    "2580": "    /**\n     * associate a proxy that was instantiated by another session with this session\n     */\n",
    "2583": "\t/**\n\t * Sets a marking at the passed position.\n\t * \n\t * @param x the x-coordinate of the position a marking is to be set.\n\t * @param y the y-coordinate of the position a marking is to be set.\n\t */\n",
    "2591": "\t/**\n\t * Marks the passed position with the passed value.\n\t * \n\t * @param position  what position is to be marked\n\t * @param markValue with what value the position id to be marked\n\t */\n",
    "2600": "\t/**\n\t * Changes the making status of the passed position.\n\t * \n\t * @param position the position is to be changed\n\t */\n",
    "2608": "\t/**\n\t * Returns the number of the box located at the passed position.\n\t * For positions without a box the return value is undefined.\n\t * \n\t * @param position the position of the square\t \n\t * @return\tthe number of the box\n\t */\n",
    "2616": "\t/**\n\t * Returns the number of the goal located at the passed position.\n\t * For positions without a goal the return value is undefined.\n\t * \n\t * @param position the position of the square\t \n\t * @return\tthe number of the goal\n\t */\n",
    "2625": "\t/**\n\t * Returns the position of the goal with the passed goal number.\n\t * \n\t * @param goalNo the number of the goal\n\t * @return the position of the goal\n\t */\n",
    "2633": "\t/**\n\t * Returns the distance which the player has to walk,\n\t * starting from one square in order to reach a second square.\n\t * \n\t * @param fromSquare player start position\n\t * @param toSquare\t player walk destination\n\t * @return number of steps the player needs to walk\n\t */\n",
    "2641": "\t/**\n\t * Sets a new board position.\n\t * \n\t * @param position Board position to be set.\n\t */\n",
    "2650": "\t/**\n\t * Sets a new board position.\n\t * \n\t * @param positions box and player positions to be set.\n\t */\n",
    "2659": "\t/**\n\t * Removes all boxes from the board.\n\t */\n",
    "2668": "\t/**\n\t * The goals of the backward search are the box positions at search start.\n\t * Here we set the goals for the backward search from the current box\n\t * positions.\n\t */\n",
    "2683": "    /**\n     * Retrieve a list of persistent objects using a hibernate query\n     */\n",
    "2781": "\t\t/**\n\t\t * Returns the push distance of a specific box to a specific goal.\n\t\t * <p>\n\t\t * The distance is calculated under the assumption that:\n\t\t * <ol>\n\t\t *  <li> the box is the only one on the whole board\n\t\t *  <li> the player can reach every side of the box at the moment\n\t\t * </ol>\n\t\t *  \n\t\t * @param boxNo number of the relevant box\n\t\t * @param goalNo number of the relevant goal\n\t\t * @return push distance\n\t\t */\n",
    "2880": "\t/**\n\t * The action has been activated. The argument of the\n\t * method represents the 'real' action sitting\n\t * in the workbench UI.\n\t * @see IWorkbenchWindowActionDelegate#run\n\t */\n",
    "2881": "\t/**\n\t * Selection in the workbench has been changed. We \n\t * can change the state of the 'real' action here\n\t * if we want, but this can only happen after \n\t * the delegate has been created.\n\t * @see IWorkbenchWindowActionDelegate#selectionChanged\n\t */\n",
    "2882": "\t/**\n\t * We can use this method to dispose of any system\n\t * resources we previously allocated.\n\t * @see IWorkbenchWindowActionDelegate#dispose\n\t */\n",
    "2883": "\t/**\n\t * We will cache window object in order to\n\t * be able to provide parent shell for the message dialog.\n\t * @see IWorkbenchWindowActionDelegate#init\n\t */\n",
    "2930": "    /**\n     * The <code>addToHierarchyToCheckedStore</code> implementation of this \n     * <code>WizardDataTransferPage</code> method returns <code>false</code>. \n     * Subclasses may override this method.\n     */\n",
    "2961": "    /**\n     * This method must be called just before this window becomes visible.\n     */\n",
    "2963": "    /**\n     *\tAdd the passed listener to self's collection of clients\n     *\tthat listen for changes to element checked states\n     *\n     *\t@param listener ICheckStateListener\n     */\n",
    "2964": "    /**\n     * Returns a content provider for <code>IResource</code>s that returns \n     * only children of the given resource type.\n     */\n",
    "2965": "    /**\n     *\tReturn a boolean indicating whether all children of the passed tree element\n     *\tare currently white-checked\n     *\n     *\t@return boolean\n     *\t@param treeElement java.lang.Object\n     */\n",
    "2970": "    /**\n     *\tReturn a boolean indicating whether all list elements associated with\n     *\tthe passed tree element are currently checked\n     *\n     *\t@return boolean\n     *\t@param treeElement java.lang.Object\n     */\n",
    "2971": "    /**\n     *\tIterate through the passed elements which are being realized for the first\n     *\ttime and check each one in the tree viewer as appropriate\n     */\n",
    "2972": "    /**\n     * Returns this page's collection of currently-specified resources to be \n     * exported. This is the primary resource selection facility accessor for \n     * subclasses.\n     *\n     * @return an iterator over the collection of resources currently selected \n     * for export (element type: <code>IResource</code>). This will include\n     * white checked folders and individually checked files.\n     */\n",
    "2974": "    /**\n     *\tAn item was checked in one of self's two views.  Determine which\n     *\tview this occurred in and delegate appropriately\n     *\n     *\t@param event CheckStateChangedEvent\n     */\n",
    "2975": "    /**\n     * Returns the resource extensions currently specified to be exported.\n     *\n     * @return the resource extensions currently specified to be exported (element \n     *   type: <code>String</code>)\n     */\n",
    "2980": "    /**\n     * Returns this page's collection of currently-specified resources to be \n     * exported. This returns both folders and files - for just the files use\n     * getSelectedResources.\n     *\n     * @return a collection of resources currently selected \n     * for export (element type: <code>IResource</code>)\n     */\n",
    "2981": "    /**\n     *\tCreate this group's tree viewer.\n     */\n",
    "2986": "    /**\n     * Returns whether the extension of the given resource name is an extension that\n     * has been specified for export by the user.\n     *\n     * @param resourceName the resource name\n     * @return <code>true</code> if the resource name is suitable for export based \n     *   upon its extension\n     */\n",
    "2987": "    /**\n     * Returns a boolean indicating whether the passed tree item should be\n     * white-checked.\n     *\n     * @return boolean\n     * @param treeElement java.lang.Object\n     */\n",
    "2990": "    /**\n     *\tRecursively add appropriate tree elements to the collection of\n     *\tknown white-checked tree elements.\n     *\n     *\t@param treeElement java.lang.Object\n     */\n",
    "2991": "    /**\n     * Persists resource specification control setting that are to be restored\n     * in the next instance of this page. Subclasses wishing to persist additional\n     * setting for their controls should extend hook method \n     * <code>internalSaveWidgetValues</code>.\n     */\n",
    "2992": "    /**\n     * Cause the tree viewer to expand all its items\n     */\n",
    "2993": "    /**\n     * Set the initial selections in the resource group.\n     */\n",
    "2995": "\t\t/**\n\t\t * Returns whether the player can reach the passed position.\n\t\t * \n\t\t * @param position the position to be tested for reachability\n\t\t * \n\t\t * @return <code>true</code> the position is reachable by the player\n\t\t * \t\t\t<code>false</code> the position isn't reachable by the player\n\t\t */\n",
    "3005": "    /**\n     * Save any editors that the user wants to save before export.\n     * @return boolean if the save was successful.\n     */\n",
    "3008": "    /**\n     *\tReturns a flat list of all of the leaf elements which are checked.\n     *\n     *\t@return all of the leaf elements which are checked. This API does not\n     * \treturn null in order to keep backwards compatibility.\n     */\n",
    "3009": "    /**\n     * Check if widgets are enabled or disabled by a change in the dialog.\n     */\n",
    "3010": "\t\t/**\n\t\t * Returns a clone of the current object.\n\t\t * \n\t\t * @return a PlayersReachableSquares object identical to this object\n\t\t */\n",
    "3012": "    /**\n     * give the interceptor an opportunity to override the default instantiation\n     */\n",
    "3013": "    /**\n     *\tAdd the passed value to self's destination widget's history\n     *\n     *\t@param value java.lang.String\n     */\n",
    "3017": "    /**\n     *\tReturns a list of all of the items that are white checked.\n     * \tAny folders that are white checked are added and then any files\n     *  from white checked folders are added. \n     *\n     *\t@return the list of all of the items that are white checked\n     */\n",
    "3018": "    /**\n     *\tAnswer the number of elements that have been checked by the\n     *\tuser.\n     *\n     *\t@return int\n     */\n",
    "3022": "    /**\n     * Create the buttons for the group that determine if the entire or\n     * selected directory structure should be created.\n     * @param optionsGroup\n     * @param font\n     */\n",
    "3024": "\t\t/**\n\t\t * Returns the position reachable of the player that is\n\t\t * the most top left one.\n\t\t * This is a normalization of the player position, used, where the\n\t\t * exact player position is not relevant, but its reachable area is.\n\t\t * \n\t\t * @return the position top left\n\t\t */\n",
    "3028": "    /**\n     *\tSet the checked state of self and all ancestors appropriately. Do not white check anyone - this is\n     *  only done down a hierarchy.\n     */\n",
    "3029": "    /**\n     * Set the initial checked state of the passed element to true,\n     * as well as to all of its children and associated list elements\n     * @param element\n     */\n",
    "3030": "    /**\n     * Attempts to ensure that the specified directory exists on the local file system.\n     * Answers a boolean indicating success.\n     *\n     * @return boolean\n     * @param directory java.io.File\n     */\n",
    "3032": "    /**\n     *\tIf the target for export does not exist then attempt to create it.\n     *\tAnswer a boolean indicating whether the target exists (ie.- if it\n     *\teither pre-existed or this method was able to create it)\n     *\n     *\t@return boolean\n     */\n",
    "3035": "    /**\n     *  Set up and execute the passed Operation.  Answer a boolean indicating success.\n     *\n     *  @return boolean\n     */\n",
    "3038": "\t\t/**\n\t\t * Returns a (deep) clone of this object.\n\t\t * \n\t\t * @return a (deep) clone of this object\n\t\t */\n",
    "3043": "    /**\n     *\tAnswer the string to display in self as the destination type\n     *\n     *\t@return java.lang.String\n     */\n",
    "3044": "    /**\n     *\tRemove the passed listener from self's collection of clients\n     *\tthat listen for changes to element checked states\n     *\n     *\t@param listener ICheckStateListener\n     */\n",
    "3046": "    /**\n     *\tAnswer the contents of self's destination specification widget\n     *\n     *\t@return java.lang.String\n     */\n",
    "3050": "    /**\n     *\tSet the current input focus to self's destination entry field\n     */\n",
    "3053": "\t\t/**\n\t\t * Returns whether a specific Square is reachable by the player. \n\t\t * \n\t\t * @param position Position which is checked for being reachable by the player\n\t\t * @return true = Square is reachable; false = Square is not reachable\n\t\t */\n",
    "3054": "    /**\n     *\tOpen an appropriate destination browser so that the user can specify a source\n     *\tto import from\n     */\n",
    "3055": "     /**\n     * Set the root of the widget to be new Root. Regenerate all of the tables and lists from this\n     * value.\n     * @param newRoot \n     */\n",
    "3056": "    /**\n     * Handle all events and enablements for widgets in this page\n     * @param e Event\n     */\n",
    "3057": "    /**\n     *\tSet the checked state of the passed tree element appropriately, and\n     *\tdo so recursively to all of its child tree elements as well\n     */\n",
    "3060": "    /**\n     * Persists additional setting that are to be restored in the next instance of\n     * this page.\n     * <p> \n     * The <code>WizardImportPage</code> implementation of this method does\n     * nothing. Subclasses may extend to persist additional settings.\n     * </p>\n     */\n",
    "3061": "    /**\n     * If the existing proxy is insufficiently \"narrow\" (derived), instantiate a new proxy\n     * and overwrite the registration of the old one. This breaks == and occurs only for\n     * \"class\" proxies rather than \"interface\" proxies.\n     */\n",
    "3062": "    /**\n     * Set the sorter that is to be applied to self's tree viewer\n     * @param sorter\n     */\n",
    "3063": "    /**\n     *\tHook method for restoring widget values to the values that they held\n     *\tlast time this wizard was used to completion.\n     */\n",
    "3066": "\t\t/**\n\t\t * Returns if a specific Square is reachable by the player.\n\t\t * \n\t\t * @param x xPosition of square which is checked for being reachable by the player\n\t\t * @param y yPosition of square which is checked for being reachable by the player\n\t\t * @return true = Square is reachable; false = Square is not reachable\n\t\t */\n",
    "3067": "    /**\n     *\tHandle the collapsing of an element in a tree viewer\n     */\n",
    "3068": "    /**\n     *\tSet the contents of the receivers destination specification widget to\n     *\tthe passed value\n     *\n     */\n",
    "3069": "    /**\n     *\tHandle the expansionsion of an element in a tree viewer\n     */\n",
    "3070": "    /**\n     *\tAnswer a boolean indicating whether the receivers destination specification\n     *\twidgets currently all contain valid values.\n     */\n",
    "3072": "    /**\n     * Grab the existing proxy for an instance, if\n     * one exists. (otherwise return the instance)\n     */\n",
    "3073": "    /**\n     *  Callback that's invoked when the checked status of an item in the tree\n     *  is changed by the user.\n     */\n",
    "3075": "    /**\n     *\tLogically un-gray-check all ancestors of treeItem iff appropriate.\n     */\n",
    "3077": "    /**\n     *\tSet the checked state of self and all ancestors appropriately\n     */\n",
    "3078": "\t/**\n     * Get the message used to denote an empty destination.\n     */\n",
    "3081": "    /**\n     * Returns the name of a container with a location that encompasses targetDirectory.\n     * Returns null if there is no conflict.\n     * \n     * @param targetDirectory the path of the directory to check.\n     * @return the conflicting container name or <code>null</code>\n     */\n",
    "3082": "    /** \n     * Set the focus on to the list widget.\n     */\n",
    "3095": "    /**\n     *\tAnswer a boolean indicating the number of file resources that were\n     *\tspecified for export\n     *\n     *\t@return int\n     */\n",
    "3096": "    /**\n     *  Create the directories required for exporting the passed resource,\n     *  based upon its container hierarchy\n     *\n     *  @param childResource org.eclipse.core.resources.IResource\n     */\n",
    "3098": "    /**\n     *  Create the directories required for exporting the passed resource,\n     *  based upon its container hierarchy\n     *\n     *  @param childResource org.eclipse.core.resources.IResource\n     */\n",
    "3100": "    /**\n     * Create the directories tree\n     * @param tree\n     */\n",
    "3107": "    /**\n     * Create a \"temporary\" entry for a newly instantiated entity. The entity is uninitialized,\n     * but we need the mapping from id to instance in order to guarantee uniqueness.\n     */\n",
    "3116": "    /**\n     *  Answer a boolean indicating whether the passed child is a descendent\n     *  of one or more members of the passed resources collection\n     *\n     *  @return boolean\n     *  @param resources java.util.List\n     *  @param child org.eclipse.core.resources.IResource\n     */\n",
    "3122": "    /**\n     *\tSet this boolean indicating whether a directory should be created for\n     *\tFolder resources that are explicitly passed for export\n     *\n     *\t@param value boolean\n     */\n",
    "3124": "    /**\n     *\tSet this boolean indicating whether each exported resource's complete path should\n     *\tinclude containment hierarchies as dictated by its parents\n     *\n     *\t@param value boolean\n     */\n",
    "3126": "    /**\n     *\tSet this boolean indicating whether exported resources should automatically\n     *\toverwrite existing files when a conflict occurs. If not\n     *\tquery the user.\n     *\n     *\t@param value boolean\n     */\n",
    "3127": "    /**\n     * Add the \"hydrated state\" (an array) of an uninitialized entity to the session. We don't try\n     * to resolve any associations yet, because there might be other entities waiting to be\n     * read from the JDBC result set we are currently processing\n     */\n",
    "3129": "\t\t/**\n\t\t * Returns whether the given position has been marked as reachable.\n\t\t * \n\t\t * @param position  Position to be checked to be reachable.\n\t\t * @return\t<code>true</code> if position is reachable,\n\t\t *         <code>false</code> if position isn't reachable\n\t\t */\n",
    "3135": "    /**\n     *\tAnswer a handle to the zip file currently specified as being the source.\n     *\tReturn null if this file does not exist or is not of valid format.\n     */\n",
    "3137": "    /**\n     * Attempts to close the passed zip file, and answers a boolean indicating success.\n     */\n",
    "3189": "\t/**\n\t * Initializes states of the controls from the preference store.\n\t */\n",
    "3200": "   /**\n\t* Returns preference store that belongs to the our plugin.\n\t* This is important because we want to store\n\t* our preferences separately from the desktop.\n\t*\n\t* @return the preference store for this plugin\n\t*/\n",
    "3201": "\t/**\n\t * Creates an image and places it in the image registry.\n\t */\n",
    "3205": "\t/**\n\t * Sets the file transfer compression level. (if supported)\n\t * Valid levels are: 0 (disabled), 1 (worst/fastest) - 9 (best/slowest)\n\t */\n",
    "3207": "\t/**\n\t * Gets the file transfer compression level.\n\t */\n",
    "3209": "\t/**\n\t * Returns the image descriptor for the given image ID.\n\t * Returns null if there is no such image.\n\t */\n",
    "3211": "\t/**\n\t * Sets the default keyword substitution mode for text files.\n\t */\n",
    "3214": "\t/**\n\t * Gets the default keyword substitution mode for text files.\n\t */\n",
    "3215": "\t/**\n\t * Get the bug id (if exists) from the previous comment\n\t * @author keren\n\t * \n\t */\n",
    "3217": "\t/**\n\t * Should the CVS adapter prune empty directories\n\t */\n",
    "3218": "\t/**\n\t * Get the comment string (without the bug id text) from the previous comment\n\t * @author keren\n\t * \n\t */\n",
    "3221": "\t/**\n\t * Set whether the CVS adapter should prune empty directories\n\t */\n",
    "3226": "\t/**\n\t * Get the communications timeout value in seconds\n\t */\n",
    "3230": "\t/**\n\t * Set the timeout value for communications to a value in seconds.\n\t * The value must be greater than or equal 0. If is it 0, there is no timeout.\n\t */\n",
    "3231": "\t/**\n\t * Utility method that creates a label instance\n\t * and sets the default layout data.\n\t *\n\t * @param parent  the parent for the new label\n\t * @param text  the text for the new label\n\t * @return the new label\n\t */\n",
    "3232": "\t/**\n\t * Creates an new checkbox instance and sets the default\n\t * layout data.\n\t *\n\t * @param group  the composite in which to create the checkbox\n\t * @param label  the string to set into the checkbox\n\t * @return the new checkbox\n\t */\n",
    "3233": "\t/**\n\t * Set the quietness option to use with cvs commands.\n\t * Can be \"\", \"-q\" or \"-Q\"\n\t */\n",
    "3237": "\t/**\n\t * Get the quietness option for commands\n\t */\n",
    "3243": "\t/**\n\t * Set the console listener for commands.\n\t * @param consoleListener the listener\n\t */\n",
    "3253": "\t/**\n\t * Defaults was clicked. Restore the SVN preferences to\n\t * their default values\n\t */\n",
    "3254": "\t/**\n\t * Gets the cvsRshCommand.\n\t * @return Returns a String\n\t */\n",
    "3258": "\t/**\n\t * Sets the cvsRshCommand.\n\t * @param cvsRshCommand The cvsRshCommand to set\n\t */\n",
    "3260": "\t/**\n\t * Helper method which access the preference store to determine if the \n\t * project name from the project description file (.project) should be used\n\t * as the project name on checkout.\n\t */\n",
    "3262": "\t/**\n\t * Returns the cvsRshParameters.\n\t * @return String\n\t */\n",
    "3265": "\t/**\n\t * Sets the cvsRshParameters.\n\t * @param cvsRshParameters The cvsRshParameters to set\n\t */\n",
    "3270": "\t/**\n\t * Gets the cvsServer.\n\t * @return Returns a String\n\t */\n",
    "3271": "\t/**\n\t * Method initializeValues.\n\t */\n",
    "3275": "\t/**\n\t * Sets the cvsServer.\n\t * @param cvsServer The cvsServer to set\n\t */\n",
    "3277": "\t/**\n\t * Method signalCtrlEnter.\n\t */\n",
    "3278": "\t/**\n\t * Returns the comment.\n\t * @return String\n\t */\n",
    "3280": "\t/**\n\t * Gets the etchAbsentDirectories.\n\t * @return Returns a boolean\n\t */\n",
    "3288": "\t/**\n\t * Sets the fetchAbsentDirectories.\n\t * @param etchAbsentDirectories The etchAbsentDirectories to set\n\t */\n",
    "3296": "    /**\n     * set the svn client interface\n     * @param clientInterface\n     */\n",
    "3297": "    /**\n     * set the svn client config dir\n     * @param configDir\n     */\n",
    "3305": "\t\t/**\n\t\t * Gets the project.\n\t\t * @return Returns a IProject\n\t\t */\n",
    "3306": "\t\t/**\n\t\t * Sets the project.\n\t\t * @param project The project to set\n\t\t */\n",
    "3308": "\t/**\n\t * Gets the replaceUnmanaged.\n\t * @return Returns a boolean\n\t */\n",
    "3313": "\t/**\n\t * Sets the replaceUnmanaged.\n\t * @param replaceUnmanaged The replaceUnmanaged to set\n\t */\n",
    "3321": "\t/**\n\t * Register to receive notification of repository creation and disposal\n\t */\n",
    "3327": "\t\t/**\n\t\t * Return a InstallerProject if this javaProject has the tikal Installer nature\n\t\t * Return null if Project has not Tikal Installer nature\n\t\t */\n",
    "3329": "\t/**\n\t * Register to receive notification of enablement of sync info decoration requirements. This\n\t * can be useful for providing lazy initialization of caches that are only required for decorating\n\t * resource with CVS information.\n\t */\n",
    "3332": "\t\t/**\n\t\t * Return a InstallerProject if this javaProject has the tikal Installer nature\n\t\t * Return null if Project has not Tikal Installer nature\n\t\t */\n",
    "3350": "    /**\n     * Load the data for the object with the specified id into the supplied\n     * instance. A new key will be assigned to the object. If there is an\n     * existing uninitialized proxy, this will break identity equals as far\n     * as the application is concerned.\n     */\n",
    "3370": "\t/**\n\t * Gets the determineVersionEnabled.\n\t * @return boolean\n\t */\n",
    "3377": "\t/**\n\t * Sets the determineVersionEnabled.\n\t * @param determineVersionEnabled The determineVersionEnabled to set\n\t */\n",
    "3379": "    /**\n\t * Returns the comment.\n\t * @return String\n\t */\n",
    "3383": "\t/**\n\t * Returns the fileModificationManager.\n\t * @return FileModificationManager\n\t */\n",
    "3475": "\t/**\n\t * Sets the excludesDirs.\n\t * \n\t * @param excludesDirs\n\t *            The excludesDirs to set\n\t */\n",
    "3478": "\t/**\n\t * Sets the includesDirs.\n\t * \n\t * @param includesDirs\n\t *            The includesDirs to set\n\t */\n",
    "3498": "\t/**\n\t * Compares source files to destination files to see if they should be\n\t * copied.\n\t * \n\t */\n",
    "3520": "\t/**\n\t * Compares source files to destination files to see if they should be\n\t * copied.\n\t */\n",
    "3543": "\t/**\n\t * Compares source files to destination files to see if they should be\n\t * copied.\n\t */\n",
    "3589": "    /**\n     * sets the optional attribute\n     *\n     * @param optional if true ignore files that are not present,\n     *                 default is false\n     */\n",
    "3590": "    /**\n     * the name of the file to import. How relative paths are resolved is still\n     * in flux: use absolute paths for safety.\n     * @param file the name of the file\n     */\n",
    "3597": "    /**\n     * The classpath to use when looking up a resource.\n     * @param classpath to add to any existing classpath\n     */\n",
    "3599": "    /**\n     * The classpath to use when looking up a resource.\n     */\n",
    "3600": "    /**\n     * the classpath to use when looking up a resource,\n     * given as reference to a &lt;path&gt; defined elsewhere\n     */\n",
    "3611": "\t/**\n\t * Finds a resource with a given name. This method returns null if no\n\t * resource with this name is found. The rules for searching resources\n\t * are implemented by the provided\n\t * {@link com.tikal.util.ClassLoadersIterationPolicy}.\n\t *\n\t * @param resourceName the name of the resource to find.\n\t * @return a <tt>java.net.URL</tt> instance pointing to the resource, or\n\t *         null if the resource wasn't found.\n\t */\n",
    "3612": "\t/**\n\t * Loads the class with the specified name.  This method searches for\n\t * classes while iterating the class-loaders that are provided by the\n\t * {@link com.tikal.util.ClassLoadersIterationPolicy}.\n\t *\n\t * @param className the name of the class to load.\n\t * @return an instance of the request class.\n\t * @throws ClassNotFoundException if the class wasn't found.\n\t */\n",
    "3613": "\t/**\n\t * Indicates whether or not there is a next class-loader to iterate.\n\t *\n\t * @return true if there's another class-loader to iterate; false otherwise.\n\t */\n",
    "3614": "\t/**\n\t * The next class-loader in the iteration.\n\t *\n\t * @return the next class-loader in the iteration.\n\t * @throws java.util.NoSuchElementException\n\t *          for no more elements.\n\t */\n",
    "3615": "\t/**\n\t * Resets the iterator to start from the beginning.\n\t */\n",
    "3648": "\t/**\n\t * Check if DEBUG level is enabled for this logger.\n\t * @return true if a {@link #debug(Object)} method invocation would pass\n\t *         the msg to the configured appenders; false otherwise.\n\t */\n",
    "3651": "\t/**\n\t * Add a log entry with DEBUG level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t */\n",
    "3653": "\t/**\n\t * Add a log entry with DEBUG level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t * @param t a cause to append to the message\n\t */\n",
    "3655": "\t/**\n\t * Check if INFO level is enabled for this logger.\n\t * @return true if a {@link #info(Object)} method invocation would pass\n\t *         the msg to the configured appenders; false otherwise.\n\t */\n",
    "3659": "\t/**\n\t * Add a log entry with INFO level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t */\n",
    "3665": "\t/**\n\t * Add a log entry with INFO level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t * @param t a cause to append to the message\n\t */\n",
    "3670": "\t/**\n\t * Add a log entry with WARN level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t */\n",
    "3674": "\t/**\n\t * Add a log entry with WARN level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t * @param t a cause to append to the message\n\t */\n",
    "3679": "\t/**\n\t * Add a log entry with ERROR level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t */\n",
    "3685": "\t/**\n\t * Add a log entry with ERROR level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t * @param t a cause to append to the message\n\t */\n",
    "3689": "\t/**\n\t * Add a log entry with FATAL level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t */\n",
    "3695": "\t/**\n\t * Add a log entry with FATAL level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t * @param t a cause to append to the message\n\t */\n",
    "3701": "\t/**\n\t * Add a log entry with the given level.\n\t */\n",
    "3704": "    /**\n     * Tack the definition and return a popup definition string\n     * @param target The target URL\n     * @return The resulting popup text.\n     */\n",
    "3705": "\t/**\n\t * Add a log entry with the given level and caus.\n\t */\n",
    "3708": "   /** Get the project name.\n    * @return The project name.\n    */ \n",
    "3709": "    /**\n     * Create a &lt;param&gt; line\n     * @param name The param name\n     * @param value The param value\n     * @return String representation of the string\n     */\n",
    "3711": "    /**\n     * Set the media location for the player.\n     * \n     */\n",
    "3712": "    /**\n     * Get the source folder.\n     * @return The source folder.\n     */\n",
    "3715": "    /**\n     * Set the source folder.\n     * @param sourceFolder The new source folder.\n     */\n",
    "3716": "    /** \n     * Get the parent part of the url\n     * @param url The URL to work on\n     * @return The parent, including the last /\n     */\n",
    "3717": "    /**\n     * Get the project name.\n     * @return The name of the project.\n     */\n",
    "3720": "    /**\n     * Overide of setView so we can get information about the view.\n     */\n",
    "3721": "    /**\n     * Get the source name.\n     * @return The name of the source file.\n     */\n",
    "3722": "    /**\n     * Create a temporary object.\n     * @param url URL to create object for.\n     */\n",
    "3723": "    /**\n     * Set the name of the new source file.\n     * @param sourceName The name of the source file.  This is the absolute file path.\n     */\n",
    "3724": "    /** \n     * Called when item is clicked \n     * @param event The calling event.\n     */\n",
    "3726": "    /**\n     * Is file acceptable.\n     * @param f The file.\n     * @return True if acceptable.\n     */\n",
    "3727": "    /**\n     * Get a description string.\n     * @return The description\n     */\n",
    "3729": "    /**\n     * Build the presentation dialog\n     */\n",
    "3736": "    /**\n     * Centre the frame.\n     */\n",
    "3737": "        /**\n         * Handle the realizeComplete event.\n         * @param event The state change event.\n         */\n",
    "3738": "    /**\n     * Set the text in the licence area\n     */\n",
    "3742": "    /**\n     * Display the window.\n     */\n",
    "3743": "        /**\n         * Stop the player when closing the window and reset the error stream.\n         */\n",
    "3745": "    /**\n     * Initialise the application and show the main window.\n     */\n",
    "3746": "    /**\n     * Used to close the Appender and called by the log4J framework.\n     */\n",
    "3747": "    /** Get the default source file\n     * @return The default helpset file name.\n     */\n",
    "3748": "        /**\n         * Will be called every time a namespace is reached.\n         * It'll verify if the ns was processed, and if not load the task\n         * definitions.\n         * @param uri The namespace uri.\n         */\n",
    "3749": "    /**\n     * Tell the log4J framework whether or not a Layout is required.\n     * @return Always true\n     */\n",
    "3750": "    /** Set the default source file\n     * @param defaultSource The name iof the Helpset file.\n     */\n",
    "3751": "    /**\n     * Append the text to the text area.\n     * @param event The Logging event from the log4J framework.\n     */\n",
    "3753": "    /**\n     * Get the default target as set in the configuration properties.\n     * @return The default target.\n     */\n",
    "3754": "    /**\n     * Set the JTextArea to be used to receive the logging commands.\n     * @param argTextArea The JTextArea used by the appender.\n     */\n",
    "3756": "    /** Save the default configurations to the property file.\n     */\n",
    "3760": "    /**\n      * Copy file routine.  \n      * Original source from R\ufffdal Gagnon http://64.18.163.122/rgagnon/howto.html\n      * @param in Input file\n      * @param out Destination file\n      * @throws java.lang.Exception Exeption thrown on IO error\n      */ \n",
    "3764": "        /**\n         * Returns the current ant handler object.\n         * @return the current ant handler.\n         */\n",
    "3765": "     /**\n      * Make sure the path is absolute.\n      * If the path is absolute, just returns it unchanged.\n      * If it's relative, then it is combined with the default directory.\n      * @param defaultDir the default directory,\n      * @param currentPath the path to check.\n      * @return the absolute path.\n      */\n",
    "3768": "     /**\n      * Build a path from the path, filename and extension.\n      * @param dir Directory\n      * @param fileName The file name\n      * @param ext the extension\n      * @return The complete path\n      */\n",
    "3769": "    /** Get the language code for XMML type files.\n     * @param encType the encoding type\n     * @return language. Empty string if not found\n     */\n",
    "3770": "    /**\n     * Change directory of an absolute file path.\n     * @param path The path to amend.\n     * @param newDir The directory to change the path to.\n     * @return The new path.\n     */\n",
    "3772": "    /**\n     * Get the directory part of the name\n     * @param path The path to analyse.\n     * @return The path's directory.\n     */\n",
    "3773": "    /** Get the input encoding type. \n     * @param encType the type of encoding\n     * @return the encoding to use\n     */\n",
    "3774": "    /**\n     * Get the file name of the path.\n     * @param path The absolute path.\n     * @return The file name part.\n     */\n",
    "3777": "    /** Convert JTidy encoding to the JTidy R7 code.\n     * @param enc the name\n     * @return the R7 code\n     */\n",
    "3778": "    /**\n     * Get the file extension.\n     * @param f The file.\n     * @return The extension including the decimal point.\n     */\n",
    "3780": "    /**\n     * Get the file extension.\n     * @param path The file.\n     * @return The extension including the decimal point.\n     */\n",
    "3782": "    /**\n     * Take a full path and change the extension\n     * @param path The path.\n     * @param newExtension The new extension\n     * @return The new path.\n     */\n",
    "3787": "    /** \n     * Check whether the path name exists and is a directory\n     * @param name The path.\n     * @return true if okay\n     */\n",
    "3788": "    /** create a buffered file reader suitable for the requested encoding. \n     * @param inname The file name.\n     * @param encType the type of encoding to use\n     * @return the buffered writer\n     */\n",
    "3791": "    /** \n     * Check whether the path name exists and is a file\n     * @param name The path.\n     * @return true if okay\n     */\n",
    "3792": "    /** create a buffered stream reader suitable for the requested encoding. \n     * @param in The input stream.\n     * @param encType the type of encoding to use\n     * @return the buffered writer\n     */\n",
    "3793": "    /**\n     * Parse the node\n     * Only actually handles <a> or <script> nodes.\n     * @param doc The calling document\n     * @param node The node to parse\n     * @return null if not handled, else replacement text.\n     */               \n",
    "3794": "    /** Convert a file name to a url string.\n     * @param name the file name\n     * @return the string representation of a uri.\n     */\n",
    "3796": "    /**\n     * Perform the parsing task.\n     * @return True if okay.\n     */\n",
    "3798": "   /**\n    * Create a header using Logger.info.\n    * @param header Text to put in the header.\n    */\n",
    "3800": "    /**\n     * Create a footer using the Logger.info.\n     */\n",
    "3801": "        /**\n         * Sets the locator in the project helper for future reference.\n         *\n         * @param locator The locator used by the parser.\n         *                Will not be <code>null</code>.\n         */\n",
    "3802": "    /**\n     * Write the HTML for the popup to a file\n     * @return true if okay\n     * @param targetName The target file.\n     * @param text The popup text\n     * @param source The source file.\n     */ \n",
    "3803": "    /**\n     * Create a Logger.info message including the current \n     * line number of the parsed file.\n     * @param message Message to write.\n     */\n",
    "3805": "    /**\n     * Create a Logger.warn message including the current \n     * line number of the parsed file.\n     * @param message The message to write.\n     */\n",
    "3806": "    /**\n     * Extract the popup id name from the string\n     * @param text The string to search\n     * @return The id name.  Null if not found              \n     */     \n",
    "3807": "    /**\n     * Start the fie parse.  Creates a reader to access\n     * the file.\n     * @param encType the type of input encoding\n     * @return True if okay.\n     */\n",
    "3809": "    /**\n     * Process the source file creating a list of popup ids\n     * @param name The source file\n     */\n",
    "3810": "    /**\n     * Read the next line from the source.\n     * @return The line.  Null if EOF.\n     */\n",
    "3814": "    /**\n     * Handle assignments,i.e lines of the form \n     * key=value\n     * @param line The line to assess.\n     */\n",
    "3816": "    /**\n     * Set the map used for resolving IDs and urls.\n     * @param argMap The map to use.  URL is key, id is the value.\n     */\n",
    "3818": "    /**\n     * Get the name of the index file.\n     * @return The index name.\n     */\n",
    "3819": "        /**\n         * Handles the end of an element. Any required clean-up is performed\n         * by the onEndElement() method and then the original handler\n         * is restored to the parser.\n         *\n         * @param uri  The namespace URI for this element.\n         * @param name The name of the element which is ending.\n         *             Will not be <code>null</code>.\n         * @param qName The qualified name for this element.\n         *\n         * @exception SAXException in case of error (not thrown in\n         *                         this implementation)\n         *\n         */\n",
    "3821": "    /**\n     * Build the map section\n     * @param doc The document to contain the map section.\n     */\n",
    "3822": "    /**\n     * Get the first quoted element of text.\n     * The quotes are removed.\n     * @return The text in the quotes.  Escape sequences are unescaped.\n     * @param text The text to handle.\n     * @param toHTML if true then escape sequences are converted to HTML else to characters\n     */\n",
    "3823": "    /**\n     * Get the name of the contents file.\n     * @return The contents name.\n     */\n",
    "3824": "    /**\n     * Unescape special javascript characters\n     * @return The text.  Null on error.\n     * @param esc The character that was found after the escape character.\n     * @param toHTML If true then unescape to HTML equivalent else just to ascii equivalent.\n     */\n",
    "3825": "    /**\n     * Create a view section.\n     * @param doc The document to contain the view.\n     * @param merge The mergetype attribute.\n     * @param name The name attribute.\n     * @param label The label attribute.\n     * @param typeName The type attribute.\n     * @param data The data attribute.\n     */\n",
    "3826": "    /**\n     * Get the title of the help.\n     * @return The title.\n     */\n",
    "3829": "    /**\n     * Get a map of the links in the html files.\n     * @return The map of links.\n     */\n",
    "3831": "    /**\n     * Get the default topic url.\n     * @return The url.\n     */\n",
    "3833": "    /**\n     * Set the default topic.\n     * @param id The topic id.\n     */\n",
    "3835": "    /**\n     * Get the default topic id.\n     * @return The default topic id.\n     */\n",
    "3837": "    /**\n     * Get a map of the parsed HTML files.\n     * @return The parsed HTML files.\n     */\n",
    "3838": "    /**\n     * Write the document to the writer.\n     * @param writer The Buffered writer to which the output is sent.\n     * @throws java.io.IOException IOExceptions thrown.\n     * @return True if successfully written.  False if the document has not been parsed.\n     */\n",
    "3839": "    /**\n     * Sets the map that contains the target references.\n     * Note the key is the url and the value is the id.\n     * @param argLinks The map containing targets to ids.\n     */\n",
    "3840": "    /**\n     * Get the file name of the helpset.\n     * @return The file name.\n     */\n",
    "3844": "     /**\n      * Perform the actual build of the document.\n      * @param doc The document to build.\n      */\n",
    "3845": "    /**\n     * Perform parsing on the input source.\n     * The source is taken as the parser's source file\n     * @return True if successful\n     */\n",
    "3846": "     /**\n      * Add a mpaID to the document.\n      * @param doc The XMLDoc to which the ID should be added.\n      * @param target The value of the target attribute.\n      * @param url The value of the url attribute.\n      */\n",
    "3848": "        /**\n         * Start a namespace prefix to uri mapping\n         *\n         * @param prefix the namespace prefix\n         * @param uri the namespace uri\n         */\n",
    "3851": "    /**\n     * Perform parsing on the input source.\n     * The source is taken as the parser's source file\n     * @return True if successful\n     */\n",
    "3852": "    /**\n     * Replace quotation marks with &quote;\n     * @param str The string in which to replace the quotes.\n     * @return The string with the quotes replaced.\n     */\n",
    "3853": "    /**\n     * Copy a image file to the target.\n     * @param image The name of the image.\n     */\n",
    "3856": "    /**\n     * Replace an element with the text found in the replaceElements Properties.\n     * @param node The current node of the element.\n     * @return The replacement string.  Null if not found.\n     */\n",
    "3857": "    /**\n     * Create an index item in the xml document.\n     * @param parentIndexItem The item to which this node belongs.\n     */\n",
    "3859": "        /**\n         * End a namepace prefix to uri mapping\n         *\n         * @param prefix the prefix that is not mapped anymore\n         */\n",
    "3860": "    /**\n     * Handle the situation where the target url is not found\n     * @param url The target that couldn't be found.\n     * @return The mapID.  Null if none.\n     */\n",
    "3862": "    /** \n     * Replace text in the string using replacements found in the replaceText Properties.\n     * @param str The string to be processed.\n     * @return The string with all the replacements made.\n     */\n",
    "3864": "    /**\n     * Create a targetless index item in the xml document.\n     * @param parentIndexItem The item to which this node belongs.\n     */\n",
    "3865": "    /** \n     * Handle the embed tag which contains the source.\n     * Note if not in an object, this is ignored\n     * @param doc The html dom.\n     * @param node The current node\n     */\n",
    "3866": "    /**\n     * Extract link and popup text using the classID\n     * @param classID The classID attribute of the object\n     * @return Get the text that should be used for the link that replaces the object.\n     */\n",
    "3867": "    /**\n     * Called before converting any element to a string.\n     * Determines whether the element and it children need to be wrapped in an enclosing element.\n     * Outputs tags to wrap the element and determines the necessary tag to finish the wrapping.\n     * @param node The element to process.\n     * @param nodeStr The buffer to which the wrapping tag is appended.\n     * @return The end of the wrapper which the caller is responsible for adding to the output after\n     * processing the element.\n     */\n",
    "3869": "    /** Get a string representation of the DocType.\n     * @return The doctype string.\n     */\n",
    "3870": "    /** Provides a string representation of additional children for a node.\n     * @param node the node for which there might be special children\n     * @return html for the extra children\n     */\n",
    "3871": "    /**\n     * Check to see if this is a duplicated node.\n     * This is used because of the difference in structure of the HMTL index and JavaHelp\n     * index. If the text attribute of this node is the same as the text attribute of the \n     * previous node, it should be skipped.\n     * @returns True if the previous elements text attibute equals text.\n     * @param prev The previous element.\n     * @param text The current elements text attribute\n     * @return True if the element and its children should be skipped.\n     */\n",
    "3872": "    /**\n     * Write the document to an output writer.\n     * @param writer The destination.\n     * @param tag the xml start line to write\n     * @throws java.io.IOException Exception thrown on io error.\n     * @return True if okay.\n     */\n",
    "3881": "    /**\n     * Get the map.\n     * @return The map used for resolving targets.\n     */\n",
    "3883": "    /**\n     * Replace quotes in the string.\n     * @param str The string to replace the quotes./\n     * @return String with quotes replaced with &amp;quote;  If str is null an empty string is returned.\n     */\n",
    "3971": "        /**\n         * Handle the end of the project, sets the current target of the\n         * context to be the implicit target.\n         *\n         * @param uri The namespace URI of the element.\n         * @param tag The name of the element.\n         * @param context The current context.\n         */\n",
    "4041": "        /**\n         * Handles the end of the element. This pops the wrapper from\n         * the context.\n         *\n         * @param uri The namespace URI for the element.\n         * @param tag The name of the element.\n         * @param context The current context.\n         */\n",
    "4413": "\t/**\n\t * Used to check if the file the correct file. The acceptable files are directories or\n\t * files of extension .weights\n\t * \n\t * @param f The file that is to be check if its a Performance Test Weights file\n\t * @return Returns true if the file is a directory or of type .weights\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4415": "\t/**\n\t * This method returns the description of the type of file being selected\n\t * @return Returns the description of the weights file\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4417": "\t/**\n\t * Used to check if the file the correct file. The acceptable files are directories or\n\t * files of extension .lsf\n\t * \n\t * @param f The file that is to be check if its a Log file\n\t * @return Returns true if the file is a directory or of type .lsf\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4419": "\t/**\n\t * This method returns the description of the type of file being selected\n\t * @return Returns the description of the Log file\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4421": "\t/**\n\t * Used to check if the file the correct file. The acceptable files are directories or\n\t * files of extension .ptconfig\n\t * \n\t * @param f The file that is to be check if its a Performance Test configuration file\n\t * @return Returns true if the file is a directory or of type ptconfig\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4422": "\t/**\n\t * This method returns the description of the type of file being selected\n\t * @return Returns the description of the performance configuration file\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4437": "\t/**\n\t * Used to check if the file the correct file. The acceptable files are directories or\n\t * files of extension .cb\n\t * \n\t * @param f The file that is to be check if its a Case Base file\n\t * @return Returns true if the file is a directory or of type .cb\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4438": "\t/**\n\t * This method returns the description of the type of file being selected\n\t * @return Returns the description of the case base file\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4448": "    /** CaseEventListener method called when we don't know the team name.\n     *\n     * @param ce the CaseEvent.\n     *\n     * @author Edgar Acosta\n     * @since 0.4\n     *\n     */\n",
    "4451": "    /** CaseEventListener method called when the Case Inputs have been parsed.\n     *\n     * @param ce the CaseEvent. It contains the Case Inputs\n     *\n     * @author Edgar Acosta\n     * @since 0.4\n     *\n     */\n",
    "4453": "    /** CaseEventListener method called when the Case Outputs have been parsed.\n     *\n     * @param ce the CaseEvent. It contains the Case Outputs\n     *\n     * @author Edgar Acosta\n     * @since 0.4\n     *\n     */\n",
    "4459": "    /** Returns a copy of the case base created from the\n     * log file.\n     * \n     * @return The case base\n     *\n     * @author Michael W. Floyd\n     * @since 0.2\n     */\n",
    "4462": "    /** Saves the case base into the specified file\n     * \n     *\n     * @author Michael W. Floyd\n     * @since 0.2\n     */\n",
    "4464": "\t/** Sets the horizonal position of the flag. Valid values\n\t * are the c_LEFT, c_RIGHT and c_CENTER constants.\n\t * \n\t * @param pos The horizontal position of the flag.\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4467": "\t/** Returns the horizontal position of the flag. This\n\t * will be one of the following constants: c_LEFT, \n\t * c_RIGHT, c_CENTER or c_UNKNOWN_POSITION\n\t * \n\t * @return The horizontal position\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4471": "\t/** Sets the vertical position of the flag. Valid values\n\t * are the c_TOP, c_BOTTOM and c_CENTER constants.\n\t * \n\t * @param pos The vertical position of the flag.\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4472": "\t/** Returns the vertical position of the flag. This\n\t * will be one of the following constants: c_TOP, \n\t * c_BOTTOM, c_CENTER or c_UNKNOWN_POSITION\n\t * \n\t * @return The horizontal position\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4473": "        /** Returns a string representation of the object\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4476": "        /** Returns a copy of this object\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4477": "\t/** Sets if the flag is located out of bounds.\n\t * \n\t * @param out True if the flag is out of bounds.\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4478": "\t/** Set the distance changed\n\t * \n\t * @param distChange The distance changed\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4479": "\t/** Returns true if the flag is out of bounds.\n\t * \n\t * @return If the flag is out of bounds.\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4480": "\t/** Set the direction changed.\n\t *  \n\t * @param dirChange The direction changed\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4481": "\t/** Sets the number of the flag.\n\t * \n\t * @param num The number of the flag\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4483": "\t/** Get the distance changed\n\t * \n\t * @return The distance changed\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4485": "\t/** Get the direction changed\n\t * \n\t * @return\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4486": "\t/** Returns the number of the flag.\n\t * \n\t * @return The flag number\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4488": "\t/** Sets the location of the line. Acceptable locations are\n\t * 'l' (left), 'r' (right), 't' (top) and 'b' (bottom).\n\t * \n\t * @param s The location of the line\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4489": "\t/**\n\t * Opens a dialog to find a file that contains a case base.\n\t * \n     * @return the path of a file (hopefully a CaseBase)\n     * \n\t * @author Mark Kelly\n\t * @since 0.5\n\t */\n",
    "4490": "\t/** Sets the box the flag is on. Valid values\n\t * are the c_GOAL_BOX or c_PENALTY_BOX.\n\t * \n\t * @param pos The box the flag is on.\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4491": "\t/** Return the location of the line\n\t * \n\t * @return The location of the line\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4494": "\t/** Returns the body direction of the player\n\t * \n\t * @return body direction of player\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4495": "\t/** Returns the box the flag is on. This\n\t * will be one of the following constants: c_GOAL_BOX, \n\t * c_PENALTY_BOX or c_NO_BOX\n\t * \n\t * @return The box the flag is on\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4496": "\t/** Sets the body direction of the player\n\t * \n\t * @param direction The body direction\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4498": "\t/** Gets the head direction of the player\n\t * \n\t * @return head direction\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4500": "\t/** Set the head direction of the player\n\t * \n\t * @param direction The head direction\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4501": "\t/** Returns true if the player is a goalie.\n\t * \n\t * @return True if player is a goalie\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4502": "\t/** Set the side to either \"l\" (left) or \"r\" (right).\n\t * \n\t * @param side The side the net is on\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4503": "\t/** Sets if the player is a goalie.\n\t * \n\t * @param goalie True if the player is a goalie\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4505": "\t/** Return the side the GoalFeature is on\n\t * \n\t * @return The side the GoalFeature is on\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4506": "\t/** Returns the uniform number of the player.\n\t * \n\t * @return The uniform number\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4509": "\t/** Sets the uniform number of the player\n\t * \n\t * @param number The uniform number\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4511": "        /** Returns a copy of this TurnNeckAction\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4512": "        /** Returns a copy of this Dash Action\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4513": "\t/** Returns the power of the dash.\n\t * \n\t * @return The power of the dash\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4515": "\t/** Returns the angle of the neck turn.\n\t * \n\t * @return The angle of the turn\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4516": "        /** Returns the value of an attribute\n\t *\n\t * @param attrib the attribute name\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4517": "        /** Returns a copy of this CatchAction\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4518": "        /** Returns the value of an attribute\n\t *\n\t * @param attrib the attribute name\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4520": "\t/** Returns the angle of the catch.\n\t * \n\t * @return The angle of the catch\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4521": "        /** Returns a copy of this KickAction\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4523": "\t/** Used to run the Log2CaseBase program.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t * \n\t */\n",
    "4525": "\t/** Returns the power of the kick.\n\t * \n\t * @return The power of the kick\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4527": "        /** Returns a copy of this TurnAction\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4528": "\t/** Returns the angle of the kick.\n\t * \n\t * @return The angle of the kick\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4530": "        /** Returns the value of an attribute\n\t *\n\t * @param attrib the attribute name\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4531": "\t/** Returns the angle of the turn.\n\t * \n\t * @return The angle of the turn\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4533": "\t/** Used to store a new input to the agent to be processed.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4535": "\t/** Used to tell the brain that the game is over.\n\t * \n\t * @param b True if the game is over, false otherwise\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4539": "\t/** Displays the desired message when user clicks \"About\" \n\t * menu item from the menu bar.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t * \n\t */\n",
    "4541": "    /** Used to run the agent thread\n     * \n     * @Override\n     */\n",
    "4542": "    /**\n     * Initialize the Agent that will be used for testing.\n     * \n     * @param cb the CaseBase that the agent will use\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4546": "    /**\n     * Initializes the Weights object that will be used by the Agent during testing.\n     * \n     * @param weightsFile the file that contains the weights\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4547": "\t/** Displays the desired message when user clicks \"Help\"->\"Log2CaseBase\" \n\t * menu item from the menu bar.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t * \n\t */\n",
    "4548": "    /** Used to move an agent to a specified location\n     * \n     * @param x The x coordinate\n     * @param y The y coordinate\n     *\n     * @since 0.3\n     */\n",
    "4549": "    /** Registers a new CaseEventListener.\n     *\n     * @param cel The CaseEventListener\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4550": "    /** Turns the agent by a specified moment\n     * \n     * @param moment The amount to turn\n     *\n     * @since 0.3\n     */\n",
    "4552": "    /** Registers a CaseEventListener.\n     *\n     * @param cel The CaseEventListener\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4553": "    /** Turns the agent's neck by a specified moment\n     * \n     * @param moment The amount to turn\n     *\n     * @since 0.3\n     */\n",
    "4555": "    /**\n     * Run a set of tests.\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4556": "    /** ParsingEvent that occurs when the client sends an init message.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4557": "    /** The agent will dash with a specified power (speed)\n     * \n     * @param power The dashing power\n     *\n     * @since 0.3\n     */\n",
    "4558": "    /** ParsingEvent that occurs when the server acknowledges an init message.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4559": "    /** The agent will kick with a specified power and direction\n     * \n     * @param power The kicking power\n     * @param direction The direction to kick\n     *\n     * @since 0.3\n     */\n",
    "4561": "    /**\n     * Outputs results of the running the performance test to a text file\n     * \n     * @author Caleb Chan\n     * @since 0.5\n     */\n",
    "4562": "    /** The agent will say something.\n     * \n     * @param message The message to say\n     *\n     * @since 0.3\n     */\n",
    "4563": "    /** Parsing Event that occurs when the agent start receiving sensor\n     * messages after being sending control messages.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4565": "    /**\n     * Outputs the expected and actual to a file \n     * \n     * @author Caleb Chan\n     * @since 0.5\n     */\n",
    "4566": "    /** Use to change the focus of the agent's view of the world.\n     * \n     * @param angle The view angle (size of vision field)\n     * @param quality The quality of view\n     *\n     * @since 0.3\n     */\n",
    "4567": "    /** Parsing Event that occurs when a see message has been received\n     * (before parsing it). Other events will process the objects in\n     * the field.\n     *\n     *  For this parser, since we only care about see messages, the\n     *  inputs is resetted in order to avoid a previous see message in\n     *  the same group of inputs.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4569": "    /** Used by a goalie to catch the soccer ball.\n     * \n     * @param direction The direction to catch\n     *\n     * @author Michael W. Floyd\n     * @since 0.3\n     */\n",
    "4571": "    /**\n     * Apply the preprocessing that was specified whan this instance was created.\n     * \n     * @param cb the CaseBase to apply preprocessing to\n     * \n     * @author Mark Kelly\n     * @author 0.5\n     */\n",
    "4573": "    /** Used to send the initialization command to the server.\n     * \n     * @since 0.3\n     */\n",
    "4574": "    /**\n     * Execute all SQL and second-level cache updates, in a\n     * special order so that foreign-key constraints cannot\n     * be violated:\n     * <ol>\n     * <li> Inserts, in the order they were performed\n     * <li> Updates\n     * <li> Deletion of collection elements\n     * <li> Insertion of collection elements\n     * <li> Deletes, in the order they were performed\n     * </ol>\n     */\n",
    "4575": "    /** Parsing Event that occurs when the agent start sending control\n     * messages after being receiving sensor messages.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4576": "    /** Parsing Event that occurs when the agent start receiving sensor\n     * messages after being sending control messages.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4577": "    /** Used to sent the specified message to the server.\n     * \n     * @param message The message to send\n     *\n     * @author Michael W. Floyd\n     * @since 0.3\n     */\n",
    "4578": "    /**\n     * Removes cases with no associated action from the case base.\n     * \t\n     * @param cb the CaseBase to apply preprocessing to\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4579": "    /** Generic method to get feature values from a Parsing Event and\n     * copy them to a RoboCupSimulation2DSpatialObject.\n     *\n     * @param so the 2D Spatial Object receiving the feature values\n     * @param pe the Parsing Event containing the feature values\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4580": "    /** Parsing Event that occurs when a see message has been received\n     * (before parsing it). Other events will process the objects in\n     * the field.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4581": "    /** Used to receive the next message from the server.\n     * \n     * @return The message received\n     *\n     * @author Michael W. Floyd\n     * @since 0.3\n     */\n",
    "4586": "    /** Parsing Event that occurs when a see message has been parsed.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4588": "    /** Parsing Event that occurs when a goal has been sensed\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4589": "    /**\n     * Uses a rough set theory to determine weights for features.\n     * \n     * @param cb the CaseBase to apply preprocessing to\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4592": "    /** Parsing Event that occurs when a ball has been sensed\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4593": "    /**\n     * Uses a backward sequential search to determine weights for features.\n     * \n     * @param cb the CaseBase to apply preprocessing to\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4596": "    /** Parsing Event that occurs when a Flag has been sensed\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4599": "\t/**\n\t * Removes unused features from a case base.\n     * \n     * @param cb the CaseBase to apply preprocessing to\n     * \n\t * @author Mark Kelly\n\t * @since 0.5\n\t */\n",
    "4600": "    /** Parsing Event that occurs when a line has been sensed\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4601": "    /** CaseEvent method used to stop the agent\n     * \n     * @param ce the Case Event.\n     *\n     * @author Edgar Acosta\n     * @since 0.4\n     */\n",
    "4604": "    /** Parsing Event that occurs when a catch action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4605": "    /**\n     * Sets certain values in classes\n     * \n     * @param w the Weights object that will be used by the agent\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4609": "    /** Parsing Event that occurs when a dash action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4615": "    /** Parsing Event that occurs when a kick action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4616": "    /** Parsing Event that occurs when a catch action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4620": "    /** Parsing Event that occurs when a turn action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4621": "    /** Parsing Event that occurs when a dash action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4623": "    /**\n     * Show the results from the most recent run of the tests.\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4625": "    /** Parsing Event that occurs when a kick action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4626": "    /** Parsing Event that occurs when a turn neck action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4628": "    /** Parsing Event that occurs when a turn action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4629": "    /** Parsing Event that occurs when a hear action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4772": "\t/** Returns the Case portion of the pairing.\n\t * \n\t * @return the Case portion of the pairing\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.4\n\t */\n",
    "4773": "\t/** Returns the AgentAction portion of the pairing.\n\t * \n\t * @return the AgentAction portion of the pairing\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.4\n\t */\n",
    "4776": "\t/** Stores the time it takes the Agent to select an\n\t * AgentAction to perform.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4778": "\t/** Returns the mean execution time of the Agent being\n\t * monitored (in milliseconds).\n\t * \n\t * @return mean execution time\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4785": "        /** Returns a copy of this Agent Action\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.5\n\t */\n",
    "4787": "\t/** Returns the name of the action\n\t * \n\t * @return The name of the actions\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.1 \n\t */\n",
    "4788": "    /** Returns the current size of the casebase.\n     * \n     * @return The current size of the case base\n     * \n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4789": "        /** Returns a string representation of this object\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.5\n\t */\n",
    "4790": "        /** Returns attribute value\n\t *\n\t * @param attrib the attribute name\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.5\n\t */\n",
    "4793": "    /** Adds a Case to the CaseBase\n     * \n     * @param ca The Case to add to the CaseBase\n     * \n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4794": "         /** Returns a copy of this object\n\t  *\n\t  * @author Edgar Acosta\n\t  * @since 0.5\n\t  */\n",
    "4795": "    /**\n     * This returns the string representation of the AgentAction class\n     * \n     * @author Caleb Chan\n     * @since 0.5\n     */\n",
    "4796": "    /** Sets the list of Cases in the CaseBase\n     * \n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4798": "\t/** Set the distance to the feature.\n\t * \n\t * @param dist Distance to the feature\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4800": "\t/** Sets the value of this feature.\n\t * \n\t * @param value The value to set it to.\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t *\n\t */\n",
    "4802": "\t/** Set the direction to the feature.\n\t * \n\t * @param dir Direction to the feature\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4803": "\t/** Returns the value of this feature.\n\t * \n\t * @return the feature value\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t *\n\t */\n",
    "4806": "\t/** Returns the AgentAction associated with the most similar Case.\n\t * If the most similar Case has no associated action, null is returned.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4807": "\t/** Returns the last AgentAction in the list. If there is no\n\t * associated action, null is returned.\n\t * \n\t * @see org.JIFSA.reasoning.actionselection.actionestimation.ActionEstimation\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4808": "\t/** The distance to the feature.\n\t * \n\t * @return The distance to the feature\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4811": "\t/** Returns the penalty value specified in the constructor.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t * \n\t */\n",
    "4813": "\t/** Sets the filters that will be applied to each new Case the Agent\n\t * encounters in the senseEnvironment method.\n\t * \n\t * @param filters The filters to use\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4814": "\t/** The direction to the feature.\n\t * \n\t * @return The direction to the feature\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4816": "\t/** Sets the feature weights to the given weights.\n\t * \n\t * @param newWeights The weights to use\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4817": "\t/** Used to change the CaseBase used by the Agent\n\t * \n\t * @param cb the new CaseBase\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4819": "\t/** Gets the feature weights currently used by the global distance\n\t * measure\n\t * \n\t * @return The feature weights\n\t * @since 0.3\n\t */\n",
    "4821": "\t/** Based on the weights of each type of feature, a complete distance\n\t * will be produced.\n\t * \n\t * @param distances The distance of each type of feature\n\t * @return The weighted distance\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4822": "\t/** Sets the weight for the given type of item\n\t * to the designated value. The weight value must\n\t * be between 0.0 and 1.0 (inclusive).\n\t * \n\t * @param itemName The name of the item type\n\t * @param weight The weight for that item type\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4824": "\t/** Returns the weight for the given type\n\t * of item. If that weight has not been\n\t * set using the setWeight function then\n\t * the default weight value given by\n\t * the constructor will be used.\n\t * \n\t * @param itemName The type of item\n\t * @return The weight of the item\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4825": "    /** Sets the table of sensory items\n     *\n     * @param a table of sensory times, a list of the per feature type\n     *\n     */\n",
    "4826": "    /** Sets the AgentActions associated with this Case\n     * \n     * @return The associated action in this Case\n     *\n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4831": "    /** Returns the AgentInputs associated with this Case\n     * \n     * @return The associated inputs in this Case\n     *\n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4832": "\t/** Sets the sample size. Supplied values must\n\t * be greater than zero. This determines how\n\t * many Cases of each action type are put\n\t * into the output CaseBase.\n\t * \n\t * @param The currently set sample size.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4834": "\t/** Returns the currently set sample size.\n\t * \n\t * @param The currently set sample size.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4836": "    /** Sets the AgentInputs associated with this Case\n     * \n     * @return The associated inputs in this Case\n     *\n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4837": "    /** Checks to see if any features of a specific type exist\n     * in the AgentInputs object.\n     * \n     * @param featureName The name of the feature type of check for\n     * \n     * @return true if at least one feature of that type is in the AgentInputs\n     * \n     * @author Michael W. Floyd\n     * @since 0.1\n     * \n     */\n",
    "4842": "    /** Returns the number of features in the AgentInputs\n     * of a particular type.\n     * \n     * @param featureName The name of the feature type\n     * \n     * @return The number of features in the AgentInputs of a given type\n     *\n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4844": "    /**\n     * Returns a string representation of a case class\n     * \n     * @return A string representation of the case class\n     * \n     * @author Caleb Chan\n     * @since 0.5\n     */\n",
    "4847": "    /** Returns the total number of features in the AgentInputs\n     * \n     * @return The number of features in the AgentInputs\n     *\n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4850": "\t/** Resets the lists and best results so that a new weight search can\n\t * be performed.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4851": "    /** Adds a Case to the Cluster\n     * \n     * @param c The Case to add to the Cluster\n     * \n     * @author Michael W. Floyd\n     * @since 0.5\n     */\n",
    "4853": "    /** Removes all features of a specific type from the AgentVision\n     * \n     * @param featureName The feature type to remove\n     *\n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4855": "\t/** Used to get the identifier for the point\n\t * \n\t * @return The identifier\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4856": "\t/** Calculates the error associated with the current clustering.\n\t * \n\t * @param clusters The current clusters\n\t * @param newCentroids The current centroids\n\t * @return The error of this clustering\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4857": "\t/** Goes through the entire supplied CaseBase and removes\n\t * any Cases that do not have an associated AgentAction.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4860": "\t/** Performs the sorting.\n\t * \n\t * @param initialCB The initial case base\n\t * @return The case base with sorted Spatial2DFeatures\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4861": "\t/** Adds a decision class, keeping consistency state.\n\t *\n\t * If decision class is the same used to initialize the class, the condition class is consistent.\n\t *\n\t * @params decClass a decision class\n\t *\n\t * @since 0.5\n\t */\n",
    "4864": "\t/** Computes the Euclidean distance between the point\n\t * and another point\n\t * \n\t * @param otherPoint The second point\n\t * @return The distance between the points\n\t *  \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4865": "\t/** Sorts a list of Spatial2DObjects by their distance to the\n\t * agent.\n\t * \n\t * @param sensoryItemList A list of Spatial2DFeatures\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4868": "\t/** Returns the size of the decision class. O if inconsistent.\n\t *\n\t * @since 0.5\n\t */\n",
    "4871": "\t/**\n\t * This will save a CaseBase object in the protocol buffer format\n\t * \n\t * @param s A CaseBase object to be saved\n\t * @return SensoryItemProtocol Returns the object that incases the CaseBase object for saving\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4872": "\t/**\n\t * This will save a Case object in the protocol buffer format\n\t * \n\t * @param s A Case object to be saved\n\t * @return SensoryItemProtocol Returns the object that incases the Case object for saving\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4873": "\t/** Returns the decision class. Null if inconsistent.\n\t *\n\t * @since 0.5\n\t */\n",
    "4875": "\t/**\n\t * This will save a AgentInputs object in the protocol buffer format\n\t * \n\t * @param s A AgentInputs object to be saved\n\t * @return SensoryItemProtocol Returns the object that incases the AgentInputs object for saving\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4876": "\t/** After a CaseBase has been processed this method\n\t * will return the maximum occurrences, of a given sensory item\n\t * type, in a Case.\n\t * \n\t * @param item The name of the sensory item\n\t * @return The maximum number of occurrences\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4877": "\t/**\n\t * This will save a SensoryItem object in the protocol buffer format\n\t * \n\t * @param s A SensoryItem object to be saved\n\t * @return SensoryItemProtocol Returns the object that incases the SensoryItem object for saving\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4879": "\t/** After a CaseBase has been processed this method\n\t * will return the minimum occurrences, of a given sensory item\n\t * type, in a Case.\n\t * \n\t * @param item The name of the sensory item\n\t * @return The minimum number of occurrences\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4880": "\t/**\n\t * This will save an AgentAction object in the protocol buffer format\n\t * \n\t * @param a An AgentAction object to be saved\n\t * @return AgentActionProtocol Returns the object that incases the AgentAction object for saving\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4881": "\t/** After a CaseBase has been processed this method\n\t * will return the average occurrences, of a given sensory item\n\t * type, in a Case.\n\t * \n\t * @param item The name of the sensory item\n\t * @return The average number of occurrences\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4882": "    /** Agent Inputs getter\n     *\n     * @return the Agent Inputs\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4885": "    /** Team Name getter\n     *\n     * @return the Agent Team Name\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4886": "\t/** Returns the name of the feature\n\t * \n\t * @return The name of the feature\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.1\n\t */\n",
    "4890": "        /** Returns a copy of this sensory item\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.5\n\t */\n",
    "4893": "       /** returns the feature name\n\t*\n\t* @author Edgar Acosta\n\t* @since 0.5\n\t*/\n",
    "4894": "\t/** Calculates the distance between two features. The distance calculation algorithm\n\t * used must be set using the SensoryItem.setDistanceCalculation(DistanceCalculation) method\n\t * or else an exception will be thrown.\n\t * \n\t * @param f The other feature\n\t * @return the distance betweent the two features\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t *\n\t */\n",
    "4898": "\t/** Calculates the distance penalty for the feature. This is\n\t * usually used when a SensoryItem has no matching feature in another\n\t * case (unequal number of features).\n\t * \n\t * @return The penalty\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4899": "\t/** Returns an XML representation of the SensoryItem\n\t * \n\t * @return The SensoryItem in XML format\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "5030": "\t/** Tests the method when no action of several types have been \n\t * logged and all match perfectly.\n\t * \n\t * @author Michael W. Floyd\n\t * @throws Exception \n\t * @since 0.3\n\t */\n",
    "5143": "    /**\n     * process cascade save/update at the start of a flush to discover\n     * any newly referenced entity that must be passed to saveOrUpdate(),\n     * and also apply orphan delete\n     */\n",
    "5203": "\t/** This method is just a hack so we can directly call our private\n\t * method and avoid the high overhead of actually simulating these\n\t * events. While this is fairly \"dirty\", it was done because testing\n\t * time was limited, and a quick and dirty approach covered more code\n\t * than the clean approach.\n\t * \n\t * @return the addPair method that can be directly called.\n\t * @throws Exception\n\t */\n",
    "5380": "    /** Checks whether the ParsedLine enclosed contains a value for\n     * certain key.\n     *\n     * It is used to test for information about the event.\n     *\n     * @param paramName the key name\n     * @return true if there is a value associated with the key.\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "5419": "    /** Parses match options sent by the server\n     *\n     * @param message the option message\n     * @param params a string containing the parameters of this message\n     *\n     * @author Edgar Acosta\n     * @since 0.2\n     *\n     */\n",
    "5423": "    /** Parses errors sent by the server\n     *\n     * @param message the error message\n     * @param params a string containing the parameters of this message\n     *\n     * @author Edgar Acosta\n     * @since 0.2\n     *\n     */\n",
    "5521": "    /**\n     * Initialize the flags of the CollectionEntry, including the\n     * dirty check.\n     */\n",
    "5654": "    /**\n     * Sets new page size for table model to display.\n     * @param pageSize\n     *        Number of records to display on\n     *        one page.\n     */\n",
    "5658": "    /**\n     * Returns selected page sie of model.\n     * @return\n     *        Number of records that are currently displayed on page.\n     */\n",
    "5660": "    /**\n     * Set the page of data to display in table.\n     * @param pageNumber\n     *        Zero-based number of page.\n     */\n",
    "5665": "    /**\n     * Set the check values array.\n     * @param checkValues\n     *        Array containing correct values for cells in table.\n     */\n",
    "5666": "    /**\n     * Display page previous to current.\n     */\n",
    "5668": "    /**\n     * Returns renderer for table cells depending on\n     * it's loacation and status.\n     */\n",
    "5669": "    /**\n     * Returns number of pages for current data array. Value is calculated from specified\n     * page size and cannot be set by user.\n     * @return\n     *        Number of pages in table model.\n     *         \n     */\n",
    "5672": "    /**\n     * Gets number of the current page in model.\n     * @return\n     *        Zero-based number of currently displayed page.\n     */\n",
    "5677": "    /**\n     * Fills table model with data to display.\n     * @param data\n     *        Array of data to display in table.\n     * @param columnNames\n     *        Array holding column names for table.\n     * @param pageSize\n     *        New page size to use.\n     */\n",
    "5679": "    /**\n     * Simple warning handler.\n     * @param e\n     *        Parsing exception to handle.\n     * @throws SAXException\n     *         if SAX exception occurs.\n     */\n",
    "5683": "       /**\n        * Return number of columns in table model.\n        * @return\n        *        A number of columns in input data array.\n        */\n",
    "5693": "    /**\n     * Switches validation check for column in table.\n     * \n     * @param columnIndex\n     *        Index of column in table.\n     * @param state\n     *        State of validation. True if validation is set, false otherwise.\n     */\n",
    "5697": "    /**\n     * Returns validation status for first row( boolean value, enabled or disabled),\n     * Otherwise returns value of data stored in cell.\n     * @param rowIndex\n     *        Index of the row to find.\n     * @param columnIndex\n     *        Index of the column to find.\n     * @return\n     *        Object stored in the cell.\n     */\n",
    "5700": "    /**\n     * Adds validator object to column. If validation for column will be enabled,\n     * this object will check if value is valid.\n     * @param columnIndex\n     *        Index of the column to assign validator. \n     * @param validator\n     *        {@link ru.chsu.dupedetector.base.Validator Validator} object to assign.\n     * @return\n     *        True if validator assigned successfully, false otherwise.\n     */\n",
    "5708": "    /**\n     * Adds editor object to column. If value is incorrect it will be corrected by editor.\n     *\n     * @param columnName\n     *        Name of the column to assign validator.\n     * @param editor\n     *        {@link ru.chsu.dupedetector.base.Editor Editor} object to assign.\n     * @return\n     *        True if editor assigned successfully, false otherwise.\n     */\n",
    "5709": "    /**\n     * Resize component for displaying specified maximum number.\n     * @param maxNumber\n     *        Maximum number to display.\n     */\n",
    "5710": "    /**\n     * Gets validator object assigned for column.\n     * @param columnIndex\n     *        Index of column in table.\n     * @return\n     *        Validator object.\n     */\n",
    "5766": "    /** Copy used in createTransferable.\n     * Keeps info about UserObject linked to the node.\n     * @param node\n     *        TreeNode to copy.\n     *@return\n     *        Copy of TreeNode.\n     * */\n",
    "5776": "    /**\n     * Refreshes table contents using specified charset, start line and splitting regular expression.\n     */\n",
    "5779": "    /**\n     * Open file and count lines in it.\n     * @throws IOException\n     *         if any I/O error occurs.\n     */\n",
    "5782": "    /**\n     * Sets new regular expression to split rows.\n     * @param splitRegexp\n     *        New regular expression to use.\n     */\n",
    "5784": "    /**\n     * Getter method for split regular expression.\n     * @return\n     *        Regexp used to split lines of input file by this model.\n     */\n",
    "5785": "    /**\n     * Returns the row count.\n     */\n",
    "5786": "    /**\n     * Returns row count of the table\n     * @return\n     *        Number of lines read from input file.\n     */\n",
    "5787": "    /**\n     * Returns the column count.\n     */\n",
    "5788": "    /**\n     * Returns column count of the table as\n     * maximum column count for all rows.\n     *\n     */\n",
    "5789": "    /**\n     * Returns the value at.\n     */\n",
    "5792": "    /**\n     * Returns the column name.\n     */\n",
    "5794": "    /**\n     * Sets the column names.\n     */\n",
    "5796": "    /**\n     * Returns the map.\n     */\n",
    "5797": "    /**\n     * Get character which start the range.\n     * @return\n     *        First character in range\n     *\n     *\n     */\n",
    "5798": "    /**\n     * Returns length of the range.\n     * @return\n     *        Amount of characters in range.\n     */\n",
    "5799": "    /**\n     * Sets the map.\n     */\n",
    "5805": "    /**\n     * Returns a reference to the current WizardModel for this Wizard component.\n     * @return The current WizardModel for this Wizard component.\n     */    \n",
    "5812": "    /**\n     * Override this method to provide functionality that will be performed just before\n     * the panel is to be displayed.\n     */    \n",
    "5813": "    /**\n     * Override this method to perform functionality when the panel itself is displayed.\n     */    \n",
    "5815": "    /**\n     * Override this method to perform functionality just before the panel is to be\n     * hidden.\n     */    \n",
    "5851": "    /**\n     * Returns an instance of the JDialog that this class created. This is useful in\n     * the event that you want to change any of the JDialog parameters manually.\n     * @return The JDialog instance that this class created.\n     */    \n",
    "5859": "    /**\n     * Returns the owner of the generated javax.swing.JDialog.\n     * @return The owner (java.awt.Frame or java.awt.Dialog) of the javax.swing.JDialog generated\n     * by this class.\n     */    \n",
    "5861": "    /**\n     * Sets DateFormat of input fields.\n     * @param format\n     *        New SimpleDateFormat to use.\n     */\n",
    "5864": "    /**\n     * Reaction to mapping table change event. Preview window should be updated\n     * to reflect mapping changes\n     * @param e\n     *        Tablee change event.\n     */\n",
    "5865": "    /**\n     * Sets the title of the generated javax.swing.JDialog.\n     * @param s The title of the dialog.\n     */    \n",
    "5867": "    /**\n     * Makes new preview sample and displays it in browser TextArea.\n     */\n",
    "5871": "    /**\n     * Returns the current title of the generated dialog.\n     * @return The String-based title of the generated dialog.\n     */    \n",
    "5875": "    /**\n     * Fills the destination array from source array. If source is shorter\n     * it will be copied to destination untill it filled completely.\n     * @param source\n     *        Source array to copy data.\n     * @param dest\n     *        Destination array where objects should be copied to.\n     */\n",
    "5877": "    /**\n     * Sets the modality of the generated javax.swing.JDialog.\n     * @param b the modality of the dialog\n     */    \n",
    "5881": "    /**\n     * Check if file name is valid.\n     * @param fileName\n     *        Name of the file to check.\n     */\n",
    "5884": "    /**\n     * Returns the modality of the dialog.\n     * @return A boolean indicating whether or not the generated javax.swing.JDialog is modal.\n     */    \n",
    "5890": "    /**\n     * Convienence method that displays a modal wizard dialog and blocks until the dialog\n     * has completed.\n     * @return Indicates how the dialog was closed. Compare this value against the RETURN_CODE\n     * constants at the beginning of the class.\n     */    \n",
    "5897": "    /**\n     * Returns the current model of the wizard dialog.\n     * @return A WizardModel instance, which serves as the model for the wizard dialog.\n     */    \n",
    "5898": "    /**\n     * Getter for field containing output file name.\n     * @return\n     *       JTextArea used to keep output file name.\n     */\n",
    "5900": "    /**\n     * Getter for preview text area component.\n     * @return\n     *        JTextArea used to make preview of .xml file.\n     */\n",
    "5901": "    /**\n     * Getter for mapping table.\n     * @return\n     *        Table containing mapping pairs of .xml attributes and MappingResult columns.\n     */\n",
    "5902": "    /**\n     * Getter for field containing output file name.\n     * @return\n     *       JTextArea used to keep output file name.\n     */\n",
    "5903": "    /**\n     * Content panel getter panel.\n     * @return\n     *        Dialog window containing all gui components.\n     *        @see ru.chsu.writer.XMLwriter.gui.XMLWriterGUI\n     */\n",
    "5904": "    /**\n     * Getter for preview text area component.\n     * @return\n     *        JTextArea used to make preview of .xml file.\n     */\n",
    "5907": "    /**\n     * Add a Component as a panel for the wizard dialog by registering its\n     * WizardPanelDescriptor object. Each panel is identified by a unique Object-based\n     * identifier (often a String), which can be used by the setCurrentPanel()\n     * method to display the panel at runtime.\n     * @param id An Object-based identifier used to identify the WizardPanelDescriptor object.\n     * @param panel The WizardPanelDescriptor object which contains helpful information about the panel.\n     */    \n",
    "5909": "    /**\n     * Mapping setup method. Every attribute in xml schema\n     * is associated with column in mpping output.\n     * @param columnNames\n     *        Array containing column names from mapping output.\n     * @param attributes\n     *        Array containing names of columns that should be mapped on every .xml attribute.\n     *\n     */\n",
    "5913": "    /**\n     * Displays the panel identified by the object passed in. This is the same Object-based\n     * identified used when registering the panel.\n     * @param id The Object-based identifier of the panel to be displayed.\n     */    \n",
    "5914": "    /**\n     * Clears generated user list.\n     */\n",
    "5918": "    /**\n     * Generates record for one user only. It can be used to make preview of .xml file contents.\n     * @param fields\n     *        Row of mapping output to create sample.\n     * @param out\n     *        Output stream to marshall data.\n     */\n",
    "5921": "    /**\n     * Opens file output streeam with given file name.\n     * @param fileName\n     *        String containing name of output file.\n     * @throws IOException\n     *         if any I/O error occurs.\n     */\n",
    "5922": "    /**\n     * Close file and close associated resources.\n     * @throws IOException\n     *         if any i/o error occurs.\n     */\n",
    "5923": "    /**\n     * Marshall mapping output to file.\n     * @param result\n     *        Mapping result as two-dimensional array of strings.\n     * @throws IOException\n     */\n",
    "5926": "    /**\n     * Retrieves the last return code set by the dialog.\n     * @return An integer that identifies how the dialog was closed. See the *_RETURN_CODE\n     * constants of this class for possible values.\n     */    \n",
    "5933": "   /**\n     * Mirrors the WizardModel method of the same name.\n     * @return A boolean indicating if the button is enabled.\n     */  \n",
    "5935": "    /**\n     * If fileName is updated it must be validated\n     * @param e\n     *        Update event.\n     */\n",
    "5936": "    /**\n     * If file name is changed it must be validated\n     * @param e\n     *        Remove event\n     */\n",
    "5939": "   /**\n     * Mirrors the WizardModel method of the same name.\n     * @param newValue The new enabled status of the button.\n     */ \n",
    "5945": "   /**\n     * Mirrors the WizardModel method of the same name.\n     * @return A boolean indicating if the button is enabled.\n     */ \n",
    "5951": "   /**\n     * Mirrors the WizardModel method of the same name.\n     * @param newValue The new enabled status of the button.\n     */ \n",
    "5958": "   /**\n     * Mirrors the WizardModel method of the same name.\n     * @return A boolean indicating if the button is enabled.\n     */ \n",
    "5963": "    /**\n     * Mirrors the WizardModel method of the same name.\n     * @param newValue The new enabled status of the button.\n     */ \n",
    "5972": "    /**\n     * Dialog initialization method. Constructs organizational unit tree from mapping\n     * result and draws it in JTree component.\n     * @param result\n     *        Mapping output result.\n     */\n",
    "5974": "    /**\n     * Resets the tree creating only default root node.\n     */\n",
    "5975": "    /**\n     * Opens file for output. Buffered writer is used for output.\n     * @param fileName\n     *        String containing name of output file.\n     * @throws IOException\n     */\n",
    "5978": "    /**\n     * Close file and free all allocated resources\n     * @throws IOException\n     *         If any I|O error occured\n     */\n",
    "5980": "    /**\n     * Generates LDIF script string from mapping output.\n     * @param result\n     *        MappingResult object containing mapping output data.\n     * @return\n     *        Generated LDIF script.\n     */\n",
    "5983": "    /**\n     * Writes mapping result to an output LDIF file.\n     * @param result\n     *        Mapping result as two-dimensional array of strings.\n     * @throws IOException\n     *         if any I|o error happens.\n     */\n",
    "5984": "    /**\n     * Stores indexes of user attributes columns in mapping output.\n     * \n     * @param result\n     *        Object holding all mapping output data.\n     */\n",
    "5988": "    /**\n     * Generates attribute-values specification section for LDIFCLass object\n     *\n     * Attributes are written\n     * {@code\n     * attrval-spec             = AttributeDescription value-spec SEP\n     * AttributeDescription     = AttributeType [\";\" options]\n     * value-spec               = \":\" (    FILL 0*1(SAFE-STRING) /\n     * \":\" FILL (BASE64-STRING) /\n     * \"<\" FILL url)\n     * }\n     * @param object\n     *        LDIFClass object which will be marshalled to output file.\n     * @return\n     *        generated section as a StringBuilder.\n     */\n",
    "5989": "    /**\n     * Creates LDIF user class from mapping output row.\n     * @param data\n     *        String array containing values of attributes from one row of mapping output.\n     * @return\n     *        new LDIF user class object\n     */\n",
    "5991": "    /**\n     * Creates ldif add statement for LDIFClass statement\n     * {@code\n     * ldif-change-record = dn-spec SEP *control changerecord\n     * dn-spec = \"dn:\" (FILL distinguishedName /\n     * \":\" FILL base64-distinguishedName)\n     * change-add = \"add\" SEP 1*attrval-spec\n     * }\n     * @param object\n     *        LDIFClass object containing dn value and attributes specification.\n     * @return\n     *        Generated LDIF record for object.\n     *\n     */\n",
    "5992": "    /**\n     * Sets specified sheet name for output sheet in workbook\n     * @param sheetName\n     *        Name specified for the sheet\n     */\n",
    "5993": "    /**\n     *  Setter for selectedColumns array\n     * @param selectedColumns\n     *        First array contains indexes of columns, that should be exported to output\n     *        file. Second array contains column names.\n     * @param columnNames\n              Array containing column names data.\n     */\n",
    "6000": "    /**\n     * Saves all modifications in the workbook and closes associated file.\n     * @throws IOException\n     *         if any I?o error occurs.\n     */\n",
    "6003": "    /**\n     * Writes one row of values to the specified sheet in workbook.\n     * Only values for selected columns will be written.\n     * @param data\n     *        Array of values\n     * @throws IOException\n     *         if I/O exception occured while this operation.\n     */\n",
    "6005": "    /**\n     * Writes all mapping results to the .xls workshhet\n     * @param result\n     *        Mapping result as two-dimensional array of strings.\n     * @throws IOException\n     */\n",
    "6008": "    /**\n     * Getter for content holding object.\n     * @return\n     *        reference to object holding all GUI data.\n     */\n",
    "6013": "    /**\n     * Charset getter method.\n     * @return\n     *     Charset used for reading input file.\n     */\n",
    "6015": "    /**\n     * Charset setter method.\n     * \n     * @param charset\n     *        New charset to use.\n     *        @see java.nio.charset.Charset\n     */\n",
    "6020": "    /**\n     * Getter for starting line number.\n     * @return\n     *        Zero based line number.\n     */\n",
    "6022": "    /**\n     * Sets new start line number of the file. All lines before this line will be skipped.\n     * @param startLine\n     *        New start line number.\n     */\n",
    "6024": "    /**\n     * Refreshes preview when import settings are changed\n     * @param e\n     *        Change event to handle.\n     */\n",
    "6027": "    /**\n     * Refreshes preview when import settings are changed\n     * @param e\n     *        Action event to handle.\n     */\n",
    "6029": "    /**\n     * Sets split regexp for input file.\n     * @param splitRegexp\n     *          String new splitting regexp.\n     */\n",
    "6032": "    /**\n     * Sets names for attributes read from input file.\n     * @param columns\n     *          Array containing names of attributes.\n     */\n",
    "6040": "    /**\n     * Updates preview window where separator symbol is changed.\n     * @param e\n     *        ActionEvent to process.\n     */\n",
    "6043": "    /**\n     * Skips all lines before start line.\n     *\n     * @throws FileNotFoundException\n     *          if file not found.\n     * @throws NoSuchElementException\n     *          if file is empty.\n     *\n     */\n",
    "6050": "    /**\n     * Getter method for content panel.\n     * @return\n     *        Panel containing all gui components related to text reader setup.\n     */\n",
    "6051": "    /**\n     * Getter for content panel.\n     * @return\n     *       Panel with all visual components for this wizard page.\n     */\n",
    "6052": "    /**\n     * Returns JSpinner holding the starting line number of the input file.\n     */\n",
    "6053": "    /**\n     * Returns preview table.\n     * @return\n     *      JTable containing text file split into rows according to selected separator symbol.\n     */\n",
    "6055": "    /**\n     * Returns selected charset.\n     * @return\n     *        Returns charset object currently selected in charset combo box.\n     */\n",
    "6057": "    /**\n     * Returns file preview table.\n     */\n",
    "6059": "    /**\n     * Returns input file associated with reader.\n     * @return\n     *        Input file.\n     *        @see java.io.File\n     */\n",
    "6060": "    /**\n     * Sets checkbox action listner for all checkboxes on panel\n     * @param a\n     *         Action listener to set.\n     */\n",
    "6061": "    /**\n     * Set the file used as input for reader.\n     * @param file\n     *        New input file.\n     */\n",
    "6063": "    /**\n     * Set the table model for preview JTable.\n     * @param fileViewModel\n     *        New table model to set.\n     */\n",
    "6064": "    /**\n     * Set selected worksheet to import data.\n     * @param sheetIndex\n     *        New  index of sheet. \n     */\n",
    "6065": "    /**\n     * Returns the current index of sheet in workbook.\n     * @return\n     *        Index of selected sheet in the workbook.\n     */\n",
    "6066": "    /**\n     * Returns panel containing all gui-components on this dialog ppage.\n     * @return\n     *        COntent panel.\n     */\n",
    "6067": "    /**\n     * Get the name of current sheet.\n     * @return\n     *        String containing sheet name.  \n     */\n",
    "6068": "    /**\n     * Updates table model where selected separator is changed.\n     */\n",
    "6070": "    /**\n     * Return the number of sheets in workbook.\n     * @return\n     *        Number of sheets in opened workbook.\n     * */\n",
    "6071": "    /**\n     * Set selected columns indexes.\n     * @param selectedColumns\n     *        Array containing selected columns indexes.\n     * @param columnNames\n     *        Names of columns to use for this columns.\n     * @throws IndexOutOfBoundsException\n     *         If column index is not within sheet column range.\n     */\n",
    "6076": "    /**\n     * Selects all the columns on sheet and get column names as headers\n     * @throws IndexOutOfBoundsException\n     *         If column index is not within sheet column range.\n     */\n",
    "6084": "    /**\n     * Getter for preview table\n     * @return\n     *        JTable displaying .xls data.\n     */\n",
    "6086": "    /**\n     * Getter for label containing sheet name.\n     * @return\n     *       JLabel component used to display sheet name.\n     */\n",
    "6088": "    /**\n     * Get spinner used to display selected sheet index.\n     * @return\n     *          JSpinner object used to change sheet index.\n     */\n",
    "6090": "    /**\n     * Get content panel with all GUI - components.\n     * @return\n     *        Panel with all content related to Xls-reader.\n     */\n",
    "6096": "    /**\n     * Set number of sheet in workbook to display.\n     * @param sheetNumber\n     *        New sheet number.\n     */\n",
    "6099": "    /**\n     * Get name of selected worksheet.\n     */\n",
    "6106": "    /**\n     * Returns file displayed by the model.\n     * @return\n     *        File object describing input file.\n     *        @see java.io.File\n     */\n",
    "6107": "    /**\n     * Updates preview table when selected sheet is changed\n     * @param e\n     *        Change event to handle.\n     */\n",
    "6113": "    /**\n     * Get rowCount from the worksheet.\n     * @return\n     *        Number of rows in current worksheet.\n     */\n",
    "6114": "    /**\n     * Action handler for line amount change. If number of lines on the page is changed\n     * number of available pages is changed too.\n     * @param e\n     *        Aaction event to handle.\n     */\n",
    "6115": "    /**\n     * Get colCount from worksheet.\n     * @return\n     *        Number of columns in current worksheet.\n     */\n",
    "6118": "    /**\n     * Get value of specified cell in worksheet.\n     * @param rowIndex\n     *        Row for cell.\n     * @param columnIndex\n     *        Column for cell.\n     * @return\n     *        Cell value.\n     */\n",
    "6122": "    /**\n     * Refreshes table contents when page number is changed.\n     * @param e\n     *        JSpinner change event to handle.\n     */\n",
    "6129": "    /**\n     * Updates available pages counter when number of records in table or\n     * to display on one page is changed.\n     *\n     */\n",
    "6135": "    /**\n     * Changes the way how mapping output is stored in memory.\n     *\n     */\n",
    "6144": "    /**\n     * Get content panel holding all gui elements on panel.\n     * @return\n     *        JPanel with all content.\n     */\n",
    "6154": "    /**\n     * Searches for plugin class in list of available plugins.\n     * @param mapperClass\n     *        Mapper class to search.\n     * @return\n     *        Zero-based list index, -1 if class is not found.\n     */\n",
    "6158": "    /**\n     * Getter for page amount label.\n     * @return\n     *        JLabel component used to display number of pages in table model.\n     */\n",
    "6159": "    /**\n     * Get amount of records to display on one page.\n     * @return\n     *        Amount of records to display.\n     */\n",
    "6161": "    /**\n     * Get combo box used to display records count.\n     * @return\n     *        JComboBox component used to display records count.\n     */\n",
    "6163": "    /**\n     * Getter for spinner component containing record number.\n     * @return\n     *        JSpinner used for record number display.\n     */\n",
    "6165": "    /**\n     * Preview JTable getter.\n     * @return\n     *       Returns JTable component used to display preview data.\n     */\n",
    "6166": "            /**\n             * Selection handler for plugin list. Changes sekected plugin specific settings panel.\n             * @param e\n             *        Selection event to handle.\n             */\n",
    "6168": "    /**\n     * Custom GUI components initialization procedure\n     */\n",
    "6170": "    /**\n     * Set up available attributes list for plugins to use.\n     * @param collection\n     *        Collection of AttributeBean objects containing attribute info.\n     */\n",
    "6173": "    /**\n     * Setup and shows add mapper dialog.\n     * @param bean\n     *        AttributeBean to display in add mapper dialog\n     *\n     */\n",
    "6176": "    /**\n     * Creates new plugin object based on it's class.\n     * @param mapperClass\n     *        Actual class of the plugin.\n     * @return\n     *         New instance of plugin with default settings.\n     * @throws PluginConfigurationException\n     *         if such mapper class is not found.\n     */\n",
    "6181": "    /**\n     * Returns true if tree contains specified string value.\n     * @param value\n     *        value to search.\n     * @return\n     *        True if tree contains value, false otherwise.\n     */\n",
    "6183": "    /**\n     * Custom UI initialization procedure.\n     */\n",
    "6184": "    /**\n     * Adds child to tree checking for cyclic dependence.\n     * @param value\n     *        Value to store in child node.\n     * @throws DependencyException\n     *         If value is already found in tree.\n     */\n",
    "6186": "    /**\n     * Adds array of values to tree.\n     * @param values\n     *        Values to add.\n     * @throws DependencyException\n     *         if value is found in tree.\n     */\n",
    "6191": "    /**\n     * Checks if attribute is cyclic dependent form itself, e.g.\n     * attribute that used for it's generation uses this attribute as base attribute.\n     * @param attributeName\n     *        Name of attribute to check.\n     * @param parent\n     *        Constructed Dependency tree for this attribute.\n     *        @see ru.chsu.mapper.dependence.DependencyTree\n     * @throws ru.chsu.mapper.dependence.DependencyException\n     *         if attribute is self-dependent,\n     */\n",
    "6196": "    /**\n     * Checks all available attributes for cyclic dependency.\n     * @param attributes\n     *        Collection of attributes to check.\n     * @throws ru.chsu.mapper.dependence.DependencyException\n     *         if cyclic dependency is found.\n     */\n",
    "6201": "    /**\n     * Input attributes map setter.\n     */\n",
    "6212": "    /**\n     * Configures mapper using specified file name.\n     * @throws DependencyException\n     *         If some cyclic dependency is found in configuration file.\n     * @throws PluginConfigurationException\n     *         If configuration file is invalid or cannot be read.\n     *\n     * @param configFileName\n     *        Name of the file to use.\n     */\n",
    "6229": "    /**\n     * Sets specified mapper configuration to use for attribute.\n     * @param field\n     *        Name of attribute.\n     * @param mapperBean\n     *        Attribute bean describing attribute generation settings.\n     */\n",
    "6540": "    /**\n     * Replaces method parameters with TRMI stubs as needed. See {@link\n     * trmi.Naming#getParameterStubIfNeeded(Object, Class)} for more details.\n     */\n",
    "6650": "    /**\n     * add a collection we just loaded up (still needs initializing)\n     */\n",
    "6717": "    /**\n     * add a detached uninitialized collection\n     */\n",
    "6852": "    /**\n     * associate a holder with an array - called after loading array\n     */\n",
    "6868": "\t/**\n\t *\tDragSourceListener interface\n\t *  @param e event\n\t */\n",
    "7190": "\t/**\n\t *  KeyReleased Listener (nop)\n\t * \t@param e event\n\t */\n",
    "7463": "    /**\n     * Just in case user forgot to commit()/cancel() or close()\n     */\n",
    "7571": "    /**\n     * Get the collection entry for a collection passed to filter,\n     * which might be a collection wrapper, an array, or an unwrapped\n     * collection. Return null if there is no entry.\n     */\n",
    "7828": "    /**\n     * remove any hard references to the entity that are held by the infrastructure\n     * (references held by application or other persistant instances are okay)\n     */\n",
    "7938": "    /**\n     * Evict collections from the factory-level cache\n     */\n",
    "12961": "\t/**\n\t * Default create method\n\t * \n\t * @throws CreateException\n\t * @ejb.create-method\n\t */\n",
    "29877": "    /**\n     * This sets the codeset for this document\n     *\n     * @param codeset - String representation of codeset for this\n     *                  document\n     */\n",
    "29883": "    /** \n     * This gets the codeset for this document\n     *\n     * @return String the codeset for this document\n     */\n",
    "29887": "    /**\n     * This adds a stylesheet to the XML document.\n     *\n     * @param href - String reference to stylesheet\n     * @param type - String type of stylesheet\n     */\n",
    "29892": "    /**\n     * This adds a stylesheet to the XML document, and assumes\n     *   the default <code>text/xsl</code> type.\n     *\n     * @param href = String reference to stylesheet\n     */\n",
    "29897": "    /**\n     * This adds the specified element to the prolog of the document\n     *\n     * @param element - Element to add\n     */\n",
    "29900": "    /**\n     * This adds an element to the XML document.  If the\n     *   document is empty, it sets the passed in element\n     *   as the root element.\n     *\n     * @param element - XML Element to add\n     * @return XMLDocument - modified document\n     */\n",
    "29906": "    /**\n     * Write the document to the OutputStream\n     *\n     * @param out - OutputStream to write to\n     */\n",
    "29909": "    /**\n     * Add an additional instruction (which works like an XML\n     *   attribute) to the PI\n     *\n     * @param name - Name of instruction (e.g. standalone)\n     * @param value - value of instruction (e.g. \"no\")\n     */\n",
    "29916": "    /**\n     * Clone this document\n     *\n     * @return Object - cloned XMLDocument\n     */\n",
    "29941": "    /**\n        this method actually performs the filtering.\n    */\n",
    "30502": "\t/**\n\t * Creates an initially unselected toggle button\n\t * without setting the text or image.\n\t */\n",
    "30504": "\t/**\n\t * Creates an unselected toggle button with the specified text.\n\t *\n\t * @param text  the string displayed on the toggle button\n\t */\n",
    "30508": "\t/**\n\t * Creates a toggle button with the specified text\n\t * and selection state.\n\t *\n\t * @param text  the string displayed on the toggle button\n\t * @param selected  if true, the button is initially selected;\n\t *                  otherwise, the button is initially unselected\n\t */\n",
    "42686": "\t/**\n\t * \tConstructor get TableNAme from Table\n\t * \t@param AD_Table_ID Table_ID\n\t */\n",
    "63167": "\t/** Null means no checks\n\t  */\n",
    "64598": "    /**\n     * This method initializes the provided baseimplementation \n     * of the model properly.<p>\n     * This is not done in the constructor because there might\n     * be cases where some base data is set in the constructor \n     * and must be present for properly working model getter methods.<p>\n     * <b>MUST BE CALLED BY ANY SUBCLASS!</b>\n     */\n",
    "64614": "    /**\n     * Implement to specify the height of the first row.\n     * This value might be overwritten when setFirstRowHeight() is called.\n     * @return Should return the height of the first row in the table.\n     * @see #setFirstRowHeight(int);\n     * @deprecated Implement getInitialRowHeight(0) instead!\n     */\n",
    "64625": "    /**\n     * Sets the row height for the first row.\n     * @deprecated Use setRowHeight(0, value) instead.\n     */\n",
    "64630": "    /**\n     * Delegates the real content retrieval to the method\n     * <code>doGetContentAt(int, int)</code>.\n     * @see de.kupzog.ktable.KTableModel#getContentAt(int, int)\n     */\n",
    "64634": "    /**\n     * Returns the tooltip for the given cell. <p>\n     * Simply calls the method <code>doGetTooltipAt()</code>.\n     * @see de.kupzog.ktable.KTableModel#getTooltipAt(int, int)\n     */\n",
    "64639": "    /**\n     * Returns the tooltip text for the given cell. Implement this\n     * method rather than <code>getTooltipAt()</code>.\n     * @param col The column index.\n     * @param row The row index.\n     * @return Returns the tooltip text for the cell. Default: None.\n     */\n",
    "64645": "    /**\n     * Delegates the real editor retrieval to the method\n     * <code>doGetCellEditor(int, int)</code>.\n     * @see de.kupzog.ktable.KTableModel#getCellEditor(int, int)\n     */\n",
    "64662": "    /**\n     * Calls the method <code>doSetContentAt(int, int, Object)</code>\n     * to actually set the content of a table cell to the model.\n     * @see de.kupzog.ktable.KTableModel#setContentAt(int, int, java.lang.Object)\n     */\n",
    "64674": "    /**\n     * Returns wether a given cell is fixed.\n     * @param col The column index\n     * @param row the row index\n     * @return returns true if the cell is fixed, false otherwise. \n     */\n",
    "64698": "\t/**\n\t * Implement In-Textfield navigation with the keys... \n\t * @see de.kupzog.ktable.KTableCellEditor#onTraverse(org.eclipse.swt.events.TraverseEvent)\n\t */\n",
    "64712": "    /**\n     * Checks wether the given horizontal alignment parameter is valid.\n     * @param align The alignment to check\n     * @return True if the alignment value is valid.\n     */\n",
    "64715": "    /**\n     * Checks wether the given vertical alignment parameter is valid.\n     * @param align The alignment to check\n     * @return True if the alignment value is valid.\n     */\n",
    "64719": "\t/**\n\t * Called when the open-method returns.\n\t */\n",
    "64722": "    /** \n     * Calls doBelongsToCell to get the cell span.\n     * Never overwrite this method, but implement doBelongsToCell().\n     * @see de.kupzog.ktable.KTableModel#belongsToCell(int, int)\n     */\n",
    "64723": "\t/**\n\t * Sets the bounds of the dialog to the cell bounds.\n\t * DEFAULT: Ignored. Set the required shell properties by\n\t * overwriting the method <code>setupShellProperties(Shell)</code>.\n\t */\n",
    "64727": "    /**\n     * Ignored, since it is no longer in use. We use a dialog instead \n     * of a control!\n     */\n",
    "64733": "    /**\n     * Return (0,0) if cell should stay in its own area,\n     * or return the cell that should overlap this cell.<br>\n     * Overwrite this rather than belongsToCell()!<p>\n     * Defaults to no spanning.  \n     * @see de.kupzog.ktable.KTableModel#belongsToCell(int, int).\n     */\n",
    "64735": "    /**\n\t * Activates the editor at the given position.\n\t * Instantly closes the editor and switch the boolean content value.\n\t * @param row\n\t * @param col\n\t * @param rect\n\t */\n",
    "64737": "\t/**\n\t * Simply switches the boolean value in the model!\n\t */\n",
    "64743": "    /**\n     * This implementation does nothing!\n     * @see de.kupzog.ktable.KTableCellEditor#setContent(java.lang.Object)\n     */\n",
    "64744": "    /**\n     * Maps the given row index that references a visible row, to one \n     * that is internally used in the tablemodel.<br>\n     * This allows different tablemodels (such as the sorted table model) \n     * to rearrange rows flexibly. This visual rearrangement leads\n     * to changed shown row indices, but using this method, the model-internal\n     * row indices stay the same. \n     * @param shownRow The row index as displayed by the KTable.\n     * @return Returns the row index as used in the model. This stays unchanged\n     * even if the visual arrangement is changed (e.g. when sorting the talbe).\n     */\n",
    "64749": "    /**\n     * Sets the column index this comparator operates on.\n     * @param column the column index to use.\n     */\n",
    "64752": "    /**\n     * Maps the given row index from a model-internal to one that references\n     * visualized table rows. This is usually used to do something with the\n     * KTable from within the tablemodel. \n     * @param modelRow The row index as used in the model.\n     * @return Returns the row index as needed/used by the KTable to display the data.\n     */\n",
    "64754": "\t/**\n\t * Is called if a non-fixed cell is selected (gets the focus).\n\t * @see KTable for an explanation of the term \"fixed cells\".\n\t * @param col\n\t * the column of the cell\n\t * @param row\n\t * the row of the cell\n\t * @param statemask\n\t * the modifier keys that where pressed when the selection happened.\n\t */\n",
    "64757": "\t/**\n\t * Is called if a fixed cell is selected (is clicked).\n\t * @see KTable for an explanation of the term \"fixed cells\".\n\t * @param col\n\t * the column of the cell\n\t * @param row\n\t * the row of the cell\n\t * @param statemask\n\t * the modifier keys that where pressed when the selection happened.\n\t */\n",
    "64759": "    /**\n     * Sets the sorting direction.\n     * @param direction The sort direction, either\n     * SORT_NONE, SORT_UP or SORT_DOWN.\n     */\n",
    "64763": "\t/**\n\t * disposes the editor and its components\n\t */\n",
    "64768": "    /**\n     * Sets the tablemodel to work on.\n     * @param model The <class>KTableSortedModel</class> to work with.\n     */\n",
    "64775": "\t/**\n\t * Deactivates the editor.\n\t * @param save\n\t * If true, the content is saved to the underlying table.\n\t */\n",
    "64776": "    /**\n     * Sorts the model elements so that the retrieval\n     * methods by index (e.g. of type <code>method(int col, int row)</code>)\n     * return the content ordered in the given direction.<p>\n     * Note: To make the table reflect this sorting, it must be refreshed/redrawn!<p>\n     * Note: Often it is desired that there is some visual sign of how the sorting is.\n     * \n     * @param comparator The KTableSortComparator that knows how to sort the rows!\n     */\n",
    "64777": "\t/**\n\t * Returns true if the editor has the focus.\n\t * @return boolean\n\t */\n",
    "64780": "\t/**\n\t * Sets the editor's position and size\n\t * @param rect\n\t */\n",
    "64784": "    /**\n     * Overwrites the style bits with the given one.\n     * @see getStyle() for accessing the style bits.\n     * @param style The styles to AND with the current style bits.\n     */\n",
    "64786": "    /**\n     * Maps between the KTable row index and the model row index!<p>\n     * Accesses the sorted model accordingly.\n     * Delegates the real content retrieval to the method\n     * <code>doGetContentAt(int, int)</code>.\n     * @see de.kupzog.ktable.KTableModel#getContentAt(int, int)\n     */\n",
    "64789": "    /**\n     * Returns the tooltip for the given cell. <p>\n     * Calls the method <code>doGetTooltipAt()</code> to retrieve\n     * content.\n     * @see de.kupzog.ktable.KTableModel#getTooltipAt(int, int)\n     */\n",
    "64794": "    /**\n     * Maps between the KTable row index and the model row index!<p>\n     * Delegates the real editor retrieval to the method\n     * <code>doGetCellEditor(int, int)</code>.\n     * @see de.kupzog.ktable.KTableModel#getCellEditor(int, int)\n     */\n",
    "64796": "    /**\n     * Maps between the KTable row index and the model row index!<p>\n     * Calls the method <code>doSetContentAt(int, int, Object)</code>\n     * to actually set the content of a table cell to the model.\n     * @see de.kupzog.ktable.KTableModel#setContentAt(int, int, java.lang.Object)\n     */\n",
    "64800": "    /**\n     * Maps between the KTable row index and the model row index!<p>\n     * Calls the method <code>doGetCellRenderer(int, int)</code>\n     * to retrieve the cell renderer for a cell.\n     * @see de.kupzog.ktable.KTableModel#getCellRenderer(int, int)\n     */\n",
    "64803": "    /** \n     * Sorting disables all cell spanning. The behavior is:\n     * spanned cells are spittet, but all cells originally spanned\n     * get the content of the spanned cell. \n     * @see de.kupzog.ktable.KTableModel#belongsToCell(int, int)\n     */\n",
    "64810": "    /**\n     * Draws the cell as a button. It is visibly clickable and contains a button text.\n     * All line borders of the cell are overpainted - there will not be any border between buttons. \n     * @param gc The GC to use when painting.\n     * @param rect The cell area as given by KTable. (contains 1px bottom & right offset)\n     * @param text The text to paint on the button. \n     * @param pressed Wether the button should be painted as clicked/pressed or not. \n     */\n",
    "64839": "    /**\n     * Mirrors the given image. Note that the returned image must be disposed after rendering!\n     * @param source The source image. Gets disposed in this method.\n     * @return Returns a new image with mirrored content. The caller is responsible for disposing this image!\n     */\n",
    "64840": "\t/**\n\t * Is called if a non-fixed cell is selected (gets the focus). \n\t * @see KTable for an explanation of the term \"fixed cells\".\n\t * @param col\n\t * the column of the cell\n\t * @param row\n\t * the row of the cell\n\t * @param statemask\n\t * the modifier keys that where pressed when the selection happened.\n\t */\n",
    "64841": "\t/**\n\t * Is called if a fixed cell is selected (is clicked). \n\t * @see KTable for an explanation of the term \"fixed cells\".\n\t * @param col\n\t * the column of the cell\n\t * @param row\n\t * the row of the cell\n\t * @param statemask\n\t * the modifier keys that where pressed when the selection happened.\n\t */\n",
    "64848": "    /**\n     * Draws the default border by invoking the relevant method in BorderPainter.\n     * <p>\n     * Overwrite this method if you desire another border style.\n     * @param gc The GC to use.\n     * @param rect The cell bounds. Note that this method returns the new cell bounds\n     * that exlude the border area.\n     * @param vBorderColor The vertical border color.\n     * @param hBorderColor The horizontal border color.\n     * @return Returns the new bounds of the cell that should be filled with content.\n     */\n",
    "64860": "    /**\n     * Sets the alignment of the cell content.\n     * @param style The OR-ed alignment constants for\n     * vertical and horizontal alignment as defined in\n     * SWTX.\n     * @see SWTX#ALIGN_HORIZONTAL_CENTER\n     * @see SWTX#ALIGN_HORIZONTAL_LEFT\n     * @see SWTX#ALIGN_HORIZONTAL_RIGHT\n     * @see SWTX#ALIGN_VERTICAL_CENTER\n     * @see SWTX#ALIGN_VERTICAL_TOP\n     * @see SWTX#ALIGN_VERTICAL_BOTTOM\n     */\n",
    "64885": "    /**\n     * Set the foreground color used to paint text et al.\n     * @param fgcolor The color or <code>null</code> to\n     * reset to default (black). Note that also the default color can be set using <code>setDefaultForeground(Color)</code>\n     * @see #setDefaultForeground(Color)\n     */\n",
    "64898": "    /**\n     * Changes the default foreground color that will be used\n     * when no other foreground color is set. \n     * (for example when <code>setForeground(null)</code> is called)\n     * @param fgcolor The foreground color to use.\n     * @see #setForeground(Color)\n     */\n",
    "64900": "    /** \n     * Implement also cell spans so that it can be demonstrated how\n     * the sorting algorithm works in this case: \n     * @see de.kupzog.ktable.KTableDefaultModel#doBelongsToCell(int, int)\n     */\n",
    "64907": "    /**\n     * Set the background color that should be used when \n     * painting the cell background.<p>\n     * If the <code>null</code> value is given, the default \n     * color will be used. The default color is settable using \n     * <code>setDefaultBacktround(Color)</code>\n     * @param bgcolor The color or <code>null</code> to\n     * reset to default.\n     * @see #setDefaultBackground(Color)\n     */\n",
    "64917": "    /**\n     * Changes the default background color that will be used when\n     * no background color is set via setBackground().\n     * @param bgcolor The color for the background.\n     * @see #setBackground(Color)\n     */\n",
    "64943": "    /**\n     * Sets the font the renderer will use for drawing\n     * its content.\n     * @param font The font to use. Be aware that\n     * you must dispose fonts you have created.\n     */\n",
    "64959": "    /**\n     * Applies the font style of the renderer to the\n     * gc that will draw the content.<p>\n     * <b>To be called by implementors</b>\n     * @param gc The gc that will draw the \n     * renderers content.\n     */\n",
    "64969": "    /**\n     * Resets the given GC's font parameters to the\n     * original state.\n     * @param gc The gc to draw with.\n     */\n",
    "64989": "\t/**\n\t * Return the collection of tasks\n\t */\n",
    "64991": "\t/**\n\t * Add a new task to the collection of tasks\n\t */\n",
    "65013": "\t/**\n\t * Set the 'completed' property\n\t * \n\t * @param b\n\t */\n",
    "65014": "\t/**\n\t * Set the 'description' property\n\t * \n\t * @param string\n\t */\n",
    "65017": "\t/**\n\t * Set the 'owner' property\n\t * \n\t * @param string\n\t */\n",
    "65018": "\t/**\n\t * Set the 'percentComplete' property\n\t * \n\t * @param i\n\t */\n",
    "65052": "\t/**\n\t * This method initializes sashForm\t\n\t *\n\t */\n",
    "65053": "\t/**\n\t * This method initializes trifonTextModelExample\t\n\t * \t\n\t * @return net.comap.table.example.viewmodel.TrifonTextModelExample\t\n\t */\n",
    "65055": "\t/**\n\t * This method initializes topComposite\t\n\t *\n\t */\n",
    "65057": "\t/**\n\t * This method initializes bottomComposite\t\n\t *\n\t */\n",
    "65059": "\t/**\n\t * This method initializes composite\t\n\t *\n\t */\n",
    "65060": "\t/**\n\t * This method initializes kTable\t\n\t *\n\t */\n",
    "65063": "\t/**\n\t * This method initializes composite1\t\n\t *\n\t */\n",
    "65066": "\t/**\n\t * This method initializes kTable\t\n\t *\n\t */\n",
    "65070": "\t/**\n\t * This method initializes bottomCTabFolder\t\n\t *\n\t */\n",
    "65108": "\t/**\n\t * Check if this user is surveyant.\n\t * \n\t * @return true, if surveyant\n\t */\n",
    "65110": "\t/**\n\t * Liefert die Nachbedingung zu dieser Content-Gruppe.\n\t * \n\t * @return Condition\n\t * @hibernate.many-to-one\n\t */\n",
    "65112": "\t/**\n\t * Set the content of this container.\n\t * \n\t * @param list the content\n\t */\n",
    "65113": "\t/**\n\t * This method initializes tabFolder\t\n\t *\n\t */\n",
    "65115": "\t/**\n\t * Get the filename of this image.\n\t * \n\t * @return die URL\n\t * @hibernate.property not-null=\"true\"\n\t */\n",
    "65117": "\t/**\n\t * Set the filename.\n\t * \n\t * @param string the filename\n\t */\n",
    "65118": "\t/**\n\t * Set the image.\n\t * \n\t * @param image the image\n\t */\n",
    "65119": "\t/**\n\t * Cehck if this user is \"user\".\n\t * \n\t * @return true, if user\n\t */\n",
    "65128": "\t/**\n\t * Check if this user is admin.\n\t * \n\t * @return true, if admin\n\t */\n",
    "65132": "\t/**\n\t * Get the text.\n\t * \n\t * @return the text\n\t * @hibernate.property type=\"text\"\n\t */\n",
    "65135": "\t/**\n\t * Get the layout.\n\t * \n\t * @return the layout\n\t * @hibernate.property\n\t */\n",
    "65138": "\t/**\n\t * Set the text.\n\t * \n\t * @param string the text\n\t */\n",
    "65141": "\t/**\n\t * Set the layout.\n\t * \n\t * @param theLayout the layout\n\t */\n",
    "65144": "\t/**\n\t * Get abstract of this text. If the text is more than 120 characters long, the first and last 60 chars concatenated\n\t * with \"...\" are returned.\n\t * \n\t * @return abstract\n\t */\n",
    "65147": "\t/**\n\t * Get the creation date.\n\t * \n\t * @return the date\n\t * @hibernate.property column=\"TAN_CDATE\" not-null=\"true\"\n\t */\n",
    "65150": "\t/**\n\t * Get the end date.\n\t * \n\t * @return the date\n\t * @hibernate.property column=\"TAN_EDATE\"\n\t */\n",
    "65151": "\t/**\n\t * Get the start date.\n\t * \n\t * @return the start date\n\t * @hibernate.property column=\"TAN_SDATE\"\n\t */\n",
    "65155": "\t/**\n\t * Get the state.\n\t * \n\t * @return the state\n\t * @hibernate.property column=\"TAN_STATUS\" not-null=\"true\"\n\t */\n",
    "65158": "\t/**\n\t * Get the survey.\n\t * \n\t * @return the survey\n\t * @hibernate.many-to-one column=\"TAN_SURVEY_ID\" not-null=\"true\"\n\t */\n",
    "65162": "\t/**\n\t * Set the creation date.\n\t * \n\t * @param date the date\n\t */\n",
    "65165": "\t/**\n\t * Set the end date.\n\t * \n\t * @param date the date\n\t */\n",
    "65168": "\t/**\n\t * Set the start date.\n\t * \n\t * @param date the date\n\t */\n",
    "65171": "\t/**\n\t * Set the state.\n\t * \n\t * @param state the tate\n\t */\n",
    "65175": "\t/**\n\t * Set the survey.\n\t * \n\t * @param theSurvey the survey\n\t */\n",
    "65212": "\t/**\n\t * Liefert das Layout des Fragetextes.\n\t * \n\t * @return das Layout\n\t * @hibernate.property\n\t */\n",
    "65220": "\t/**\n\t * Liefert das Layout der Antwortm&ouml;glichkeiten.\n\t * \n\t * @return das Layout\n\t * @hibernate.property\n\t */\n",
    "65353": "    /**\n     * <p>Compares this {@link InternalGroupPrincipal} to the provided group principal\n     * and check if they are equal.</p>\n     * return Whether the {@link InternalGroupPrincipal} are equal.\n     */\n",
    "65370": "    /**\n     * <p>Compares this {@link InternalRolePrincipal} to the provided role principal\n     * and check if they are equal.</p>\n     * return Whether the {@link InternalRolePrincipal} are equal.\n     */\n",
    "65394": "    /**\n     * <p>Compares this {@link InternalUserPrincipal} to the provided user principal\n     * and check if they are equal.</p>\n     * return Whether the {@link InternalUserPrincipal} are equal.\n     */\n",
    "65424": "    /**\n     * <p>Compares this {@link InternalCredential} to the provided credential\n     * and check if they are equal.</p>\n     * return Whether the {@link InternalCredential} are equal.\n     */\n",
    "65427": "    /**\n     * For this implementation, always returns \"/\"\n     */\n",
    "65555": "    /**\n     * Forward the <code>retrieveOptions</code> call to the target\n     * <code>ChainedOption</code> if the <code>refreshProperty</code> property\n     * on the target command is true.\n     * \n     * @param command\n     *            Command object to use when extracting values that the\n     *            <code>ChainedOption</code> depends on.\n     * @param context\n     *            may contain any context that might be interesting for\n     *            retreiving valid options. E.g. a\n     *            <code>HttpServletRequest</code> object can be supplied as\n     *            context for a Strategy to perform filtering based on user\n     *            access.\n     * \n     * @return the result of retrieveOptions on the target ChainedOption if we are\n     *         to forward, an empty <code>LinkedList</code> otherwise.\n     * \n     * @see net.sf.chainedoptions.ChainedOption#retrieveOptions(java.lang.Object, java.lang.Object)\n     */\n",
    "65556": "    /**\n     * Create a <code>LabelValueBean</code> with name and value as the\n     * supplied String.\n     * \n     * @param object\n     *            <code>String</code> to convert.\n     * @return a new <code>LabelValueBean</code>\n     * @throws ClassCastException\n     *             if the supplied <code>object</code> is not a\n     *             <code>String</code>.\n     */\n",
    "65558": "    /**\n     * Do nothing, just return the supplied list.\n     * \n     * @param options\n     *            the list to return.\n     * @param context\n     *            ignored for this implementation.\n     * @return the supplied list, unmodified.\n     */\n",
    "65559": "    /**\n     * Forward the <code>updateValue</code> call to the target\n     * <code>ChainedOption</code if the <code>refreshProperty</code> property on the target command is true.\n     * @param command\n     *            The command object that may be updated.\n     * @param options\n     *            A list of {@link LabelValueBean}objects to choose from.\n     * @param context\n     *            may contain any context that might be interesting for\n     *            retreiving valid options. E.g. a\n     *            <code>HttpServletRequest</code> object can be supplied as\n     *            context for a Strategy to perform filtering based on user\n     *            access.\n     * \n     * @see net.sf.chainedoptions.ChainedOption#updateValue(java.lang.Object, java.util.List, java.lang.Object)\n     */\n",
    "65561": "    /**\n     * Returns the value of the first item in the list.\n     * \n     * @param options\n     *            the list of options.\n     * @param context\n     *            ignored for this implementation.\n     * @return the value of the first item in the List if the List is not empty,\n     *         empty String otherwise.\n     */\n",
    "65569": "    /**\n     * Extra items are items that signify special values, like ANY, EMPTY,\n     * NOCHANGE etc.\n     * \n     * @param extraItems\n     *            The extra items to set as a list of LabelValueBean objects.\n     */\n",
    "65570": "    /**\n     * Forward the call to the target <code>ChainedOption</code>\n     * \n     * @return the result from the target ChainedOption.\n     */\n",
    "65574": "    /**\n     * Set the <code>ChainedOption</code> that this decorator wraps.\n     * \n     * @param chainedOption\n     *            the <code>ChainedOption</code> to forward calls to.\n     */\n",
    "65581": "    /**\n     * Set the name of the property to inspect on the <code>command</code>\n     * object to determine whether {@link #retrieveOptions(Object, Object)}and\n     * {@link #updateValue(Object, List, Object)}should forward the call to the\n     * target <code>ChainedOption</code>.\n     * \n     * @param refreshProperty\n     *            name of the property.\n     */\n",
    "65582": "    /**\n     * Set the options to display in this OptionValue. Needs to be a list of\n     * LabelValueBeans.\n     * \n     * @param options\n     */\n",
    "65584": "    /**\n     * Just sort the options for this implementation.\n     * \n     * @param options\n     *            the options to sort.\n     * @param context\n     *            ignored for this implementation.\n     * \n     * @return a new Sorted list containing the options.\n     */\n",
    "65588": "    /**\n     * Default implementation that loops through the supplied list of beans and\n     * calls {@link #convertBean(Object)}on each one of them.\n     * \n     * @param beans\n     *            list of beans of any kind.\n     * @return a new List containing the corresponding\n     *         <code>LabelValueBean</code> objects.\n     */\n",
    "65589": "    /**\n     * Iterate through the collection of <code>ChainedOption</code> objects and\n     * call <code>retrieveOptions</code> and <code>updateValue</code>. Put\n     * the option Lists in the map with keys retrieved from the ChainedOption\n     * objects.\n     * \n     * @param model\n     *            the map to store option Lists in.\n     * @param command\n     *            the command to operate on.\n     * @param context\n     *            the context.\n     */\n",
    "65590": "    /**\n     * Forward the call to the target <code>ChainedOption</code>.\n     * \n     * @param command\n     *            the <code>command</code> to operate on.\n     * @return the value returned from the target <code>ChainedOption</code>.\n     */\n",
    "65600": "    /**\n     * Default implementation of <code>updateValue</code>, which loops\n     * through the list of available options and compares them to the current\n     * value of the managed attribute in the <code>command</code> object.\n     * <p />\n     * If the selected value is present in the list, no modifications are done\n     * in the <code>command</code>, otherwise a default value is retrieved by\n     * calling {@link ChainedOptionStrategy#getDefaultValue(List, Object)}, and\n     * the <code>commandProperty</code> in the <code>command</code> is set\n     * to this value.\n     * \n     * @param command\n     *            the object which will possibly be updated with a new object.\n     * @param options\n     *            the list of options with which the managed value in the\n     *            <code>command</code> will be compared.\n     * @param context\n     *            a context that will be supplied to the\n     *            <code>ChainedOptionStrategy</code> for selecting an\n     *            appropriate default value.\n     * @see ChainedOptionStrategy#getDefaultValue(List, Object)\n     */\n",
    "65607": "    /**\n     * Utility method that matches the value of the given <code>bean</code>\n     * with the specified <code>value</code>.\n     * \n     * @param bean\n     *            The {@link LabelValueBean}to match the value against.\n     * @param value\n     *            The value to match.\n     * @return <code>true</code> if the values match.\n     */\n",
    "65615": "    /**\n     * Template method that subclasses may implement to ensure proper\n     * initialization. This method is called after all properties has been set.\n     */\n",
    "65625": "    /**\n     * Utility method that sets a named property on a given object.\n     * \n     * @param bean\n     *            The object to set the property on.\n     * @param propertyName\n     *            The name of the property to set.\n     * @param value\n     *            The value that the property will be set to.\n     */\n",
    "65640": "    /**\n     * Set the property on the target <code>command</code> object managed by\n     * this instance.\n     * \n     * @param commandProperty\n     *            The commandProperty to set.\n     */\n",
    "65653": "    /**\n     * Set the key that should identify the option list managed by this\n     * instance.\n     * \n     * @param optionsKey\n     *            The optionsKey to set.\n     */\n",
    "65665": "    /**\n     * Set the <code>BeanConverter</code> that should be used for translating\n     * to LabelValueBeans.\n     * \n     * @param converter\n     *            The converter to set.\n     */\n",
    "65667": "    /**\n     * Tests that matches is called with an object contained in the supplied\n     * list, and that when matches returns <code>true</code>, no\n     * modifications are made to the command.\n     */\n",
    "65674": "    /**\n     * Override this if the implementation has several strategies.\n     * \n     * @return this implementation returns the <code>defaultStrategy</code>.\n     */\n",
    "65683": "    /**\n     * Set the default strategy to use.\n     * \n     * @param defaultStrategy\n     *            the default strategy to set.\n     */\n",
    "65802": "    /**\n     * At startup create and show the main frame of the application.\n     */\n",
    "65803": "    /**\n     * This method is to initialize the specified window by injecting resources.\n     * Windows shown in our application come fully initialized from the GUI\n     * builder, so this additional configuration is not needed.\n     */\n",
    "65809": "    /**\n     * Returns project's database.\n     * @return The database of the project.\n     * @see com.jb.project.Database\n     */\n",
    "65811": "    /**\n     * Sets project's database.\n     * @param database The database of the project.\n     * @see com.jb.project.Database\n     */\n",
    "65812": "    /**\n     * Returns the table object (among the choosen tables) referenced by name.\n     * @param name The table name as a String.\n     * @return the table object, or null if no table named name is found in\n     * choosen tables list.\n     * @see com.jb.project.Table\n     * @see com.jb.project.Database\n     */\n",
    "65813": "    /**\n     * There are the so called head-lines relationship.\n     * This can be used in code generation, as in JSF page generation.\n     * given a 1 to many relationship between two tables, instead of\n     * visually implement it by a menu (combo, etc) in the many side,\n     * This is meant to be visually represented by a set of data from\n     * a object (head) followed by a dataTable of objects (lines).\n     * @param table\n     * @return the table object (among choosen tables) with name equals\n     * to registered head for the HLS relationship. Returns null case\n     * thre is no head registered of if there is no table with the name.\n     * @see com.jb.project.Table\n     * @see com.jb.project.Database\n     */\n",
    "65815": "    /**\n     * There are the so called head-lines relationship.\n     * This can be used in code generation, as in JSF page generation.\n     * given a 1 to many relationship between two tables, instead of\n     * visually implement it by a menu (combo, etc) in the many side,\n     * This is meant to be visually represented by a set of data from\n     * a object (head) followed by a dataTable of objects (lines).\n     * @param table\n     * @return the table object (among choosen tables) with name equals\n     * to registered lines for the HLS relationship. Returns null case\n     * there is no lines table registered of if there is no table\n     * with that name.\n     * @see com.jb.project.Table\n     * @see com.jb.project.Database\n     */\n",
    "65817": "    /**\n     * Returns the object table with name equals to the foreign table name\n     * registered in a table column object field fkTable.\n     * @param column the column object of the table that is a foreign key.\n     * @return the table object with name equals to the foreign table name,\n     * or null if not found among the choosen tables of the project database.\n     * @see com.jb.project.Column\n     * @see com.jb.project.Table\n     * @see com.jb.project.Database\n     */\n",
    "65844": "    /**\n     * Get the value of securityPath\n     *\n     * @return the value of securityPath\n     */\n",
    "65845": "    /**\n     * Set the value of securityPath\n     *\n     * @param securityPath new value of securityPath\n     */\n",
    "65874": "    /**\n     * Returns the area that is occupied by the given cell. Does not\n     * take into account any cell span.\n     * @param col\n     * @param row\n     * @return Rectangle\n     */\n",
    "65967": "    /**\n     * Get the value of tableName\n     *\n     * @return the value of tableName\n     */\n",
    "65968": "    /**\n     * Get the value of menuVJB\n     *\n     * @return the value of menuVJB\n     */\n",
    "65969": "    /**\n     * Set the value of tableName\n     *\n     * @param tableName new value of tableName\n     */\n",
    "65970": "    /**\n     * Set the value of menuVJB\n     *\n     * @param menuVJB new value of menuVJB\n     */\n",
    "65975": "    /**\n     * Get the value of titleOfMenuOfItemsVJB\n     *\n     * @return the value of titleOfMenuOfItemsVJB\n     */\n",
    "65977": "    /**\n     * Set the value of titleOfMenuOfItemsVJB\n     *\n     * @param titleOfMenuOfItemsVJB new value of titleOfMenuOfItemsVJB\n     */\n",
    "65978": "    /**\n     * Get the value of menuOfItemsSetted\n     *\n     * @return the value of menuOfItemsSetted\n     */\n",
    "65980": "    /**\n     * Set the value of menuOfItemsSetted\n     *\n     * @param menuOfItemsSetted new value of menuOfItemsSetted\n     */\n",
    "65981": "    /**\n     * Get the value of menuBarVJB\n     *\n     * @return the value of menuBarVJB\n     */\n",
    "65983": "    /**\n     * Set the value of menuBarVJB\n     *\n     * @param menuBarVJB new value of menuBarVJB\n     */\n",
    "65987": "    /**\n     * Get the value of addNewMenuBar\n     *\n     * @return the value of addNewMenuBar\n     */\n",
    "65990": "    /**\n     * Set the value of addNewMenuBar\n     *\n     * @param addNewMenuBar new value of addNewMenuBar\n     */\n",
    "66004": "    /**\n     * Get the value of selectedTable\n     *\n     * @return the value of selectedTable\n     */\n",
    "66005": "    /**\n     * Get the value of menuOfBarVJB\n     *\n     * @return the value of menuOfBarVJB\n     */\n",
    "66006": "    /**\n     * Set the value of selectedTable\n     *\n     * @param selectedTable new value of selectedTable\n     */\n",
    "66007": "    /**\n     * Set the value of menuOfBarVJB\n     *\n     * @param menuOfBarVJB new value of menuOfBarVJB\n     */\n",
    "66008": "    /**\n     * Get the value of targetClassSelected\n     *\n     * @return the value of targetClassSelected\n     */\n",
    "66010": "    /**\n     * Set the value of targetClassSelected\n     *\n     * @param targetClassSelected new value of targetClassSelected\n     */\n",
    "66022": "    /**\n     * Get the value of menuTitle\n     *\n     * @return the value of menuTitle\n     */\n",
    "66026": "    /**\n     * Set the value of menuTitle\n     *\n     * @param menuTitle new value of menuTitle\n     */\n",
    "66028": "    /**\n     * Get the value of menuVJBType\n     *\n     * @return the value of menuVJBType\n     */\n",
    "66030": "    /**\n     * Set the value of menuVJBType\n     *\n     * @param menuVJBType new value of menuVJBType\n     */\n",
    "66031": "    /**\n     * Get the value of createNewMenuBar\n     *\n     * @return the value of createNewMenuBar\n     */\n",
    "66032": "    /**\n     * Get the value of selected\n     *\n     * @return the value of selected\n     */\n",
    "66033": "    /**\n     * Set the value of createNewMenuBar\n     *\n     * @param createNewMenuBar new value of createNewMenuBar\n     */\n",
    "66035": "    /**\n     * Set the value of selected\n     *\n     * @param selected new value of selected\n     */\n",
    "66041": "    /**\n     * Get the value of menuBarVJBName\n     *\n     * @return the value of menuBarVJBName\n     */\n",
    "66042": "    /**\n     * Set the value of menuBarVJBName\n     *\n     * @param menuBarVJBName new value of menuBarVJBName\n     */\n",
    "66048": "    /**\n     * Set the value of menuItemVJBList\n     *\n     * @param menuItemVJBList new value of menuItemVJBList\n     */\n",
    "66053": "    /**\n     * Set the value of menuVJBList\n     *\n     * @param menuVJBList new value of menuVJBList\n     */\n",
    "66063": "    /**\n     * Set the value of menusBarVJB\n     *\n     * @param menusBarVJB new value of menusBarVJB\n     */\n",
    "66132": "    /** Convenience method to test whether drop location is valid\n    @param destination The destination path \n    @param dropper The path for the node to be dropped\n    @return null if no problems, otherwise an explanation\n     */\n",
    "66171": "    /**\n     * Redraws the the cells only in the given area.\n     * \n     * @param cellsToRedraw\n     *            Defines the area to redraw. The rectangles elements are not\n     *            pixels but cell numbers.\n     */\n",
    "66199": "    /**\n     * Call when a manual redraw on a cell should be performed.\n     * In case headers should be updated to reflect a focus change, this is performed.\n     * @param gc\n     * @param col\n     * @param row\n     */\n",
    "66227": "    /**\n     * Get the value of dateMask\n     *\n     * @return the value of dateMask\n     */\n",
    "66229": "    /**\n     * Set the value of dateMask\n     *\n     * @param dateMask new value of dateMask\n     */\n",
    "66231": "    /**\n     * Interface method to update the content of a cell.<p>\n     * Don't forget to map the row index if a sorted model is used.\n     * @param col The column index\n     * @param row The row index.\n     * @see KTableSortedModel#mapRowIndexToTable(int)\n     */\n",
    "66237": "    /**\n     * Get the value of selectedPanel\n     *\n     * @return the value of selectedPanel\n     */\n",
    "66238": "    /**\n     * Set the value of selectedPanel\n     *\n     * @param selectedPanel new value of selectedPanel\n     */\n",
    "66270": "    /**\n     * At startup create and show the main frame of the application.\n     */\n",
    "66273": "    /**\n     * Check if any table row is selected.\n     *\n     * @return true if a row is selected, otherwise false.\n     */\n",
    "66284": "    /**\n     * Get the value of saveFired\n     *\n     * @return the value of saveFired\n     */\n",
    "66285": "    /**\n     * Set the value of saveFired\n     *\n     * @param saveFired new value of saveFired\n     */\n",
    "66286": "    /**\n     * Get the value of currentRecord\n     *\n     * @return the value of currentRecord\n     */\n",
    "66288": "    /**\n     * Set the value of currentRecord\n     *\n     * @param currentRecord new value of currentRecord\n     */\n",
    "66297": "    /**\n     * Check if any table row is selected.\n     *\n     * @return true if a row is selected, otherwise false.\n     */\n",
    "66300": "    /**\n     * Sets the default cursor to the given cursor. This instance is saved\n     * internally and displayed whenever no linecursor or resizecursor is shown.\n     * <p>\n     * The difference to setCursor is that this cursor will be preserved over\n     * action cursor changes.\n     * \n     * @param cursor\n     *            The cursor to use, or <code>null</code> if the OS default\n     *            cursor should be used.\n     * @param size_below_hotspot The number of pixels that are needed to paint the \n     * \t      cursor below and right of the cursor hotspot (that is the actual location the cursor\n     *        is pointing to).<p>\n     *        NOTE that this is just there to allow better positioning of tooltips.\n     * \t      Currently SWT does not provide an API to get the size of the cursor. So\n     *        these values are taken to calculate the position of the tooltip. The\n     *        the tooltip is placed pt.x pixels left and pt.y pixels below the mouse location.<br>\n     *        If you don't know the size of the cursor (for example you use a default one), set \n     *        <code>null</code> or <code>new Point(-1, -1)</code>. \n     */\n",
    "66305": "    /**\n     * Get the value of currentRecord\n     *\n     * @return the value of currentRecord\n     */\n",
    "66306": "    /**\n     * Set the value of currentRecord\n     *\n     * @param currentRecord new value of currentRecord\n     */\n",
    "66323": "    /**\n     * Get the value of currentRecord\n     *\n     * @return the value of currentRecord\n     */\n",
    "66324": "    /**\n     * Set the value of currentRecord\n     *\n     * @param currentRecord new value of currentRecord\n     */\n",
    "66330": "    /**\n     * Check if any table row is selected.\n     *\n     * @return true if a row is selected, otherwise false.\n     */\n",
    "66341": "    /**\n     * Get the value of currentRecord\n     *\n     * @return the value of currentRecord\n     */\n",
    "66342": "    /**\n     * Set the value of currentRecord\n     *\n     * @param currentRecord new value of currentRecord\n     */\n",
    "66379": "    /**\n     * Check if any table row is selected.\n     *\n     * @return true if a row is selected, otherwise false.\n     */\n",
    "66438": "    /**\n     * Check if any table row is selected.\n     *\n     * @return true if a row is selected, otherwise false.\n     */\n",
    "66452": "    /**\n     * Get the value of desconto\n     *\n     * @return the value of desconto\n     */\n",
    "66453": "    /**\n     * Set the value of desconto\n     *\n     * @param desconto new value of desconto\n     */\n",
    "66455": "    /**\n     * Get the value of diaria\n     *\n     * @return the value of diaria\n     */\n",
    "66456": "    /**\n     * Set the value of diaria\n     *\n     * @param diaria new value of diaria\n     */\n",
    "66459": "    /**\n     * Get the value of fim\n     *\n     * @return the value of fim\n     */\n",
    "66461": "    /**\n     * Set the value of fim\n     *\n     * @param fim new value of fim\n     */\n",
    "66462": "    /**\n     * Get the value of inicio\n     *\n     * @return the value of inicio\n     */\n",
    "66464": "    /**\n     * Set the value of inicio\n     *\n     * @param inicio new value of inicio\n     */\n",
    "66465": "    /**\n     * Get the value of animal\n     *\n     * @return the value of animal\n     */\n",
    "66467": "    /**\n     * Set the value of animal\n     *\n     * @param animal new value of animal\n     */\n",
    "66477": "    /**\n     * Checks for the event location in table coordinates within the region covered\n     * by the columns beginning by startCol and ending by endCol.\n     * @param span Set to true if for spanning cells we just want to have the left-upper-most cell.\n     */\n",
    "66478": "    /**\n     * Set the value of players\n     *\n     * @param players new value of players\n     */\n",
    "66535": "    /**\n     * Get the value of type\n     *\n     * @return the value of type\n     */\n",
    "66537": "    /**\n     * Set the value of type\n     *\n     * @param type new value of type\n     */\n",
    "66570": "    /**\n     * Get the value of playerName\n     *\n     * @return the value of playerName\n     */\n",
    "66571": "    /**\n     * Set the value of playerName\n     *\n     * @param playerName new value of playerName\n     */\n",
    "66572": "    /**\n     * Get the value of serverPort\n     *\n     * @return the value of serverPort\n     */\n",
    "66573": "    /**\n     * Set the value of serverPort\n     *\n     * @param serverPort new value of serverPort\n     */\n",
    "66575": "    /**\n     * Get the value of serverIP\n     *\n     * @return the value of serverIP\n     */\n",
    "66577": "    /**\n     * Set the value of serverIP\n     *\n     * @param serverIP new value of serverIP\n     */\n",
    "66585": "    /**\n     * Get the value of keyframeController\n     *\n     * @return the value of keyframeController\n     */\n",
    "66587": "    /**\n     * Set the value of keyframeController\n     *\n     * @param keyframeController new value of keyframeController\n     */\n",
    "66588": "    /**\n     * Get the value of node\n     *\n     * @return the value of node\n     */\n",
    "66590": "    /**\n     * Set the value of node\n     *\n     * @param node new value of node\n     */\n",
    "66607": "    /**\n     * Set the value of modelAnimationsList\n     *\n     * @param modelAnimationsList new value of modelAnimationsList\n     */\n",
    "66609": "    /**\n     * Get the value of baseAnimation\n     *\n     * @return the value of baseAnimation\n     */\n",
    "66611": "    /**\n     * Set the value of baseAnimation\n     *\n     * @param baseAnimation new value of baseAnimation\n     */\n",
    "66612": "    /**\n     * Get the value of runAnimation\n     *\n     * @return the value of runAnimation\n     */\n",
    "66614": "    /**\n     * Set the value of runAnimation\n     *\n     * @param runAnimation new value of runAnimation\n     */\n",
    "66632": "    /**\n     * create our custom input handler.\n     *\n     */\n",
    "66638": "    /**\n     * Get the value of beginFrame\n     *\n     * @return the value of beginFrame\n     */\n",
    "66639": "    /**\n     * Set the value of beginFrame\n     *\n     * @param beginFrame new value of beginFrame\n     */\n",
    "66640": "    /**\n     * Get the value of endFrame\n     *\n     * @return the value of endFrame\n     */\n",
    "66641": "    /**\n     * Set the value of endFrame\n     *\n     * @param endFrame new value of endFrame\n     */\n",
    "66642": "    /**\n     * Get the value of animating\n     *\n     * @return the value of animating\n     */\n",
    "66643": "    /**\n     * Set the value of animating\n     *\n     * @param animating new value of animating\n     */\n",
    "66644": "    /**\n     * Set the value of keys\n     *\n     * @param keys new value of keys\n     */\n",
    "66647": "    /**\n     * True if the text is to be displayed during rendering.\n     *\n     * @return True if the text should be displayed.\n     */\n",
    "66649": "    /**\n     * Sets whether we should cull the text during rendering.\n     *\n     * @param enabled True if the text should be displayed.\n     */\n",
    "66650": "    /**\n     * Sets the colour of the text.\n     *\n     * @param color The colour of the text.\n     */\n",
    "66651": "    /**\n     * Sets the offset from the target to display text at.\n     *\n     * @param offset The offset from the target to display text.\n     */\n",
    "66652": "    /**\n     * Sets the text to display.\n     *\n     * @param text The text string to display.\n     */\n",
    "66656": "    /**\n     * Sets the horizontal alignment of text to the target.\n     *\n     * @param align The horizontal alignment of text.\n     */\n",
    "66658": "    /**\n     * Sets the vertical alignment of text to the target.\n     *\n     * @param valign The vertical alignment of text.\n     */\n",
    "66661": "    /**\n     * Get the value of editorOutcomeSave\n     *\n     * @return the value of editorOutcomeSave\n     */\n",
    "66663": "    /**\n     * Set the value of editorOutcomeSave\n     *\n     * @param editorOutcomeSave new value of editorOutcomeSave\n     */\n",
    "66720": "    /**\n     * Sets the global tooltip for the whole table.<br>\n     * Note that this is only shown if the cell has no tooltip set.\n     * For tooltips on cell level (that overwrite this value), look\n     * for the method <code>getTooltipText()</code>.\n     * @see de.kupzog.ktable.KTableModel#getTooltipAt(int, int)\n     * @see de.kupzog.ktable.KTable#getToolTipText()\n     * @param tooltip The global tooltip for the table.\n     */\n",
    "66734": "    /**\n     * Returns the global tooltip for the whole table.<br>\n     * Note that this is not shown when there is a non-empty tooltip\n     * for the cell.\n     * @see de.kupzog.ktable.KTable#setToolTipText(String)\n     * @see de.kupzog.ktable.KTableModel#getTooltipAt(int, int)\n     */\n",
    "66811": "    /**\n     * This method activated the cell editor on the current focus cell, if the\n     * table model allows cell editing for this cell.\n     */\n",
    "66843": "    /**\n     * Scrolls the table so that the given cell is top left.\n     * @param col The column index.\n     * @param row The row index.\n     */\n",
    "66897": "    /**\n     * Adds a listener that is notified when a cell is selected.\n     * \n     * This can happen either by a click on the cell or by arrow keys. Note that\n     * the listener is not called for each cell that the user selects in one\n     * action using Shift+Click. To get all these cells use the listener and\n     * getCellSelecion() or getRowSelection().\n     * \n     * @param listener\n     */\n",
    "66909": "    /**\n     * Adds a listener that is notified when a cell is resized.\n     * This happens when the mouse button is released after a resizing.\n     * @param listener\n     */\n",
    "66949": "    /**\n     * Adds a listener that is notified when a cell is doubleClicked.\n     *\n     * @param listener\n     */\n",
    "66967": "    /**\n     * Removes the listener if present. \n     * Returns true, if found and removed from the list of listeners.\n     */\n",
    "66991": "    /**\n     * Removes the listener if present. \n     * Returns true, if found and removed from the list of listeners.\n     */\n",
    "67028": "    /**\n     * Removes the listener if present.\n     * Returns true, if found and removed from the list of listeners.\n     */\n",
    "67038": "  /** first record is 1 */\n",
    "67043": "  /** First column is 1 */\n",
    "67044": "    /**\n     * Returns true if in \"Full Selection Mode\". \n     * Mode is determined by style bits in the constructor or \n     * by <code>setStyle()</code>. (style: SWT.FULL_SELECTION)\n     * @return boolean\n     */\n",
    "67056": "    /**\n     * Returns true if in \"Multi Selection Mode\".\n     * Mode is determined by style bits in the constructor (SWT.MULTI)\n     * or by <code>getStyle()</code>.\n     */\n",
    "67066": "  /** there is no way to know if numeric cells with generic format\n   * are reals or integers... this method returns true if the first\n   * 100 rows do not include reals (or dates) */ \n",
    "67081": "  /** Parse next element.\n   * @return the element read, null otherwise\n   */\n",
    "67085": "  /** Initialise parser and loads document header */\n",
    "67140": "  /** In a string context, a TableResults returns the first\n   * column of the first row of its first result */\n",
    "67178": "  /** needed by TableResult.setPrimaryKeys \n   * @return index of label column in table */\n",
    "67180": "    /**\n     * Clears the current selection (in all selection modes).\n     */\n",
    "67193": "    /**\n     * Works in both modes: Cell and Row Selection.\n     * Has no redraw functionality!<p>\n     * \n     * Returns true, if added to selection.\n     */\n",
    "67203": "    /**\n     * Works in both modes: Cell and Row Selection.\n     * Has no redraw functionality!\n     */\n",
    "67213": "    /**\n     * Selects the given cell. If scroll is true, \n     * it scrolls to show this cell if neccessary.\n     * In Row Selection Mode, the given row is selected\n     * and a scroll to the given column is done.\n     * Does nothing if the cell does not exist. <p>\n     * Note that if you use a sorted model, don't forget to map the row index!\n     * @param col\n     * @param row\n     * @param scroll\n     */\n",
    "67216": "  /** needed by TableResult.setPrimaryKeys */\n",
    "67233": "    /**\n     * Returns true, if the given cell is selected.\n     * Works also in Row Selection Mode.\n     * @param col the column index.\n     * @param row the row index.\n     * @return boolean Returns true if the given cell is selected.\n     */\n",
    "67241": "    /**\n     * Returns true, if the given row is selected.\n     * Returns always false if not in Row Selection Mode!<p>\n     * If you use a sorted model, don't forget to map the row index first.\n     * @param row The row index as seen by the KTable.\n     * @return boolean returns true if the row is selected at the moment.\n     */\n",
    "67255": "  /** Access an object's field */\n",
    "67321": "    /**\n     * Internal helper method to determine wether the cell at the \n     * given position is to be highlighted because it is a header cell\n     * that corresponds to a selected cell.\n     * @param col The column index\n     * @param row The row index\n     * @return true if the cell should be highlighted.\n     */\n",
    "67364": "    /**\n     * Sets the table model.\n     * The table model provides data to the table.\n     * @see de.kupzog.ktable.KTableModel for more information.\n     * @param model The KTableModel instance that provides the table with all \n     * necessary data!\n     */\n",
    "67396": "    /**\n     * returns the current table model\n     * @return KTableModel \n     */\n",
    "67402": "  /** general typecast method */\n",
    "67404": "  /** return the object class; some scalars return the \n   * primitive class (eg Integer.TYPE, rather than Integer.getClass() */\n",
    "67405": "  /** Access an object's field */\n",
    "67409": "  /** Subclasses may override this method to add their own fields */\n",
    "67432": "  /** Access an object's field */\n",
    "67441": "    /**\n     * Helper method to quickly get the number of fixed columns.\n     * @return\n     */\n",
    "67494": "  /** This class can't reset its position, but subclasses may */\n",
    "67526": "    /**\n     * Helper method to quickly get the number of fixed rows.\n     * @return\n     */\n",
    "67554": "  /** Creates highlights around all occurrences of pattern in textComp \n   * code inspired from The Java Developers Almanac 1.4 */\n",
    "67555": "  /** Removes only our private highlights \n   * code inspired from The Java Developers Almanac 1.4 */\n",
    "67572": "  /** checks if file needs to be saved and aborts if user\n   * asks to save it and then cancels */\n",
    "67606": "  /** If invoked through a {@link net.sourceforge.dsql.gui.DSQLInterface}, \n   * add this value in a tab */\n",
    "67639": "  /** Add an entry in the connection vector and returns the connection object \n  */\n",
    "67646": "  /**\n   * Instruct the thread to stop masking.\n   */\n",
    "67647": "    /**\n     * Returns true, if at least one of the two enumerations has more\n     * elements.\n     */\n",
    "67648": "    /**\n     * Returns the next element.  This returns the next element of the\n     * first enumeration, if it has more elements, otherwise the next\n     * element of the second enumeration.\n     */\n",
    "67669": "  /** operators priority: * /, + - ||, = lt gt, AND OR */\n",
    "67718": "  /** Adds a variable to the current context */\n",
    "67719": "  /** Sets a variable: in the closest context if it exists, or adds\n   * otherwise */\n",
    "67810": "  /** This returns only the static text; to evaluate\n   * DSQL code or variables, call executeXML().getXMLText() */\n",
    "67862": "  /** called by EditArea */\n",
    "67892": "  /** Execute a Node\n   * @throws ExecuteException If an error occurs during execution,\n   * the exception is set with this Node so that a line number\n   * can be displayed along with the error message\n   */\n",
    "67954": "  /** This object is always the result of an execution; so do nothing... */\n",
    "68115": "   /**\n    * Searches dataset for an identical food. \n    * @param f a food to search for\n    * @return the identical food if found\n    */\n",
    "68207": "   /**\n    * Cap the string at a max length,\n    * @return\n    */\n",
    "68213": "   /**\n    * Creates the pre-defined biomarkers and flushes to disk\n    */\n",
    "68215": "   /**\n    * Creates a dataset, consisting of two series of monthly data.\n    *\n    * @return The dataset.\n    */\n",
    "68229": "   /**\n    * Compares two metrics by date for sorting.\n    */\n",
    "68297": "   /**\n    * Add the nutrients in the given table to our total\n    * \n    * @param toAdd\n    *            the nutrients ratios to add\n    * @param weight\n    *            multiplier for the amount in the added nutrients\n    */\n",
    "68319": "    /**\n     * Update the existing food information\n     */\n",
    "68342": "   /**\n    * Find a matching measure by name in this food\n    * \n    * @param measureName\n    */\n",
    "68372": "   /**\n    * Get a textual description of the food.\n    * \n    * @return this Food's description.\n    */\n",
    "68373": "   /**\n    * Set the measure to display weights for a particular food.\n    */\n",
    "68375": "   /**\n    * Update this Food's description.  The <code>Food</code> \n    * implementation must be associated with a writeable datasource.\n    * \n    * @param text The new description.\n    */\n",
    "68376": "   /**\n    * Set the weight to display\n    * @param w the type of measure\n    * @param mult the multiplier for that measure\n    */\n",
    "68377": "   /**\n    * Retrieve a List of <code>Measure</code>s for this Food.\n    * \n    * @return all <code>Measure</code>s associated with this Food.\n    public */\n",
    "68378": "   /**\n    * Update the widget after a weight change has occurred.\n    * Called when weight menu is changed or edited\n    */\n",
    "68380": "   /**\n    * Get the multiplier for the current weight and mult settings.\n    * @return a multiple of the standard nutrient value (x per 100g)\n    */\n",
    "68381": "   /**\n    * Replace the list of <code>Measure</code>s for this food.  The <code>Food</code> \n    * implementation must be associated with a writeable datasource.\n    * \n    * @param measures A list of <code>Measure</code> objects that will completely\n    * replace the ones currently in existence for this <code>Food</code>.\n    */\n",
    "68382": "   /**\n    * Get the number of grams in this measure\n    * @return the number of grams in this state\n    */\n",
    "68383": "   /**\n    * See if the food has a value set for the given nutrient\n    * \n    * @param ni the <code>NutrientInfo</code> to look up.\n    * @return true if a value exists in this food\n    */\n",
    "68386": "   /**\n    * Get the amount of a nutrient provided by this Food.\n    * \n    * @param ni the <code>NutrientInfo</code> to look up.\n    * @return the amount of the requested nutrient per unit.\n    */\n",
    "68388": "   /**\n    * Set the amount of a nutrient provided by this Food.  The <code>Food</code> \n    * implementation must be associated with a writeable datasource.\n    * \n    * @param ni the Nutrient to modify.\n    * @param val the amount of the Nutrient per unit.\n    */\n",
    "68401": "   /**\n    * Add a list of servings to the daily listing\n    * Ugly because this table and model listens to the parent, which is \n    * backwards from normal patterns...\n    * @param list\n    */\n",
    "68402": "   /**\n    * Called if the weight menu state is changed\n    */\n",
    "68403": "   /**\n    * Called when the text field is set\n    */\n",
    "68410": "   /**\n    * Retrieve a key for this food uniquely identifying both its datasource\n    * and its own unique ID in the DS.  The general contract of this method is that\n    * if f1.getSourceUID().equals(f2.getSourceUID()) then f1 and f2 both come from\n    * the same DS, and refer to the same item in that DS.\n    * @return A UID for this food.\n    */\n",
    "68411": "   /**\n    * Called when the text field is edited\n    */\n",
    "68413": "   /**\n    * Directly set the sourceUID of a food to that of another one.\n    * @param uid The <code>Food</code> whose sourceUID will be used.\n    */\n",
    "68415": "   /**\n    * If linked, changing a weight will update the multiplier\n    * to keep the grams constant. Otherwise, the multiplier is left unchanged.\n    * \n    * @return true if the multiplier is linked to the weight\n    */\n",
    "68416": "   /**\n    * Set the comment on this food.  <code>null</code> values will result in the comment being set\n    * to the empty string.\n    * \n    * @param comment The comment.\n    */\n",
    "68418": "   /**\n    * If linked, changing a weight will update the multiplier\n    * to keep the grams constant. Otherwise, the multiplier \n    * is left unchanged.\n    */\n",
    "68419": "   /**\n    * Get the commment on this food.  This value is guaranteed not to be <code>null</code>.\n    * \n    * @return the comment.\n    */\n",
    "68433": "   /**\n    * See if the food data is identical \n    * \n    * @param f to compare against\n    * @return true if the two foods contain the same food data (description, nutrients, and measures)\n    */\n",
    "68453": "   /**\n    * Allows custom rendering for a row and column. Can just return c, if no\n    * changes to default are desired.\n    * @param c the component used for rendering the cell\n    * @param row the row to render\n    * @param col the column to render\n    * @return a custom rendering component\n    */\n",
    "68457": "   /**\n    * Set the comboBox table cell editor to the currently\n    * selected measure list\n    * @param serving the selected serving\n    */\n",
    "68461": "   /**\n    * Copy changes to original and save.\n    */\n",
    "68472": "    /**\n     * Get the standard amount of this measure. Example: 1.0 Servings, 0.5 Cups,\n     * 2.0 Tablespoons\n     * \n     * @return the multiplier for this measure\n     */\n",
    "68474": "    /**\n     * Set the standard amount of this measure\n     * \n     * @param amount\n     *            a multiplier\n     */\n",
    "68477": "    /**\n     * Set the english name of this measure type\n     */\n",
    "68478": "    /**\n     * Get the number of grams in this measure\n     * \n     * @return the number of grams in the measure\n     */\n",
    "68480": "    /**\n     * Set the number of grams in this measure\n     */\n",
    "68523": "   /**\n    * Does a very simple print-out of the recipe.\n    */\n",
    "68552": "   /**\n    * Walk through all of the servings and tally up the \n    * nutrient values for the entire meal.\n    */\n",
    "68556": "   /**\n    * Get the nutrient amount by walking through all of the servings\n    * and calculating the total amount.\n    */\n",
    "68563": "   /**\n    * Copy changes to original and save.\n    */\n",
    "68564": "   /**\n    * Check if the data available for this nutrient is generally incomplete.\n    */\n",
    "68601": "   /**\n    * Get the last user that used CRON-o-meter.\n    */\n",
    "68615": "   /**\n    * Add a new user to Cronometer via the UI.\n    * @param parentWindow allow a popup to set the user settings\n    * @return the user that was just added.\n    */\n",
    "68621": "   /**\n    * Add a new user to Cronometer\n    * @param user the user to add.\n    */\n",
    "68626": "   /**\n    * Find the User with the given username\n    * @param username the name of the user\n    * @return User the Object that relates to the given name.  Null if the User is not found.\n    */\n",
    "68631": "   /**\n    * Delete a user from Cronometer.\n    * @param user the user Object to delete.\n    */\n",
    "68635": "   /**\n    * Delete all the settings file related to this user.\n    * @param user\n    */\n",
    "68641": "   /**\n    * Delete the user with the given <code>username</code>\n    * @param username the name of the user\n    * @return true if the delete was succesful\n    */\n",
    "68649": "   /**\n    * Search for a user and set that user as the current user.  \n    * @param username the name of the user\n    * @return true if the operation was successful\n    */\n",
    "68660": "   /**\n    * A rough estimate of the user's age, close enough for our purposes.\n    */\n",
    "68746": "   /** \n    * Delete the user selected in the userListModel\n    * @param row the row item to delete\n    */\n",
    "68754": "   /**\n    * Select the default user in the list. This is not the current user.\n    */\n",
    "68759": "   /**\n    * Select the current user in the list.\n    *\n    */\n",
    "68774": "   /**\n    * Look through all nutrients and see what overall percentage of the targets\n    * are completed.\n    */\n",
    "68851": "   /**\n    * Initialise the User specific data sources.\n    */\n",
    "68906": "   /**\n    * Ensure all data is saved to backing stores.\n    */\n",
    "68918": "   /**\n    * Look through all nutrients and see what overall percentage of the targets\n    * are completed.\n    */\n",
    "69072": "   /** \n    * Invoked when the text area loses the keyboard focus.\n    * This will not be invoked when the user clicks on the next/previous day button.\n    */\n",
    "69106": "   /**\n    * Allows custom rendering for a row and column. Can just return c, if no\n    * changes to default are desired.\n    * @param c the component used for rendering the cell\n    * @param row the row to render\n    * @param col the column to render\n    * @return a custom rendering component\n    */\n",
    "69119": "   /**\n    * Depending on the selected source, a different database will be searched\n    */\n",
    "69156": "   /**\n    * Show window normally\n    */\n",
    "69168": "   /**\n    * Set the current date to today\n    */\n",
    "69174": "   /**\n    * Copies the foods from the previous day into this day.\n    */\n",
    "69192": "      /**\n       * Allows custom rendering for a row and column. Can just return c, if no\n       * changes to default are desired.\n       * @param c the component used for rendering the cell\n       * @param row the row to render\n       * @param col the column to render\n       * @return a custom rendering component\n       */\n",
    "69198": "   /**\n    * Update the existing food information\n    */\n",
    "69207": "   /**\n    * Add a list of servings to the daily listing\n    * Ugly because this table and model listens to the parent, which is \n    * backwards from normal patterns...\n    * @param list\n    */\n",
    "69234": "   /**\n    * Set the current date being displayed by this daily summary\n    */\n",
    "69318": "   /** \n    * Reload the history file.\n    *\n    */\n",
    "69347": "   /**\n    * Allows custom rendering for a row and column. Can just return c, if no\n    * changes to default are desired.\n    * @param c the component used for rendering the cell\n    * @param row the row to render\n    * @param col the column to render\n    * @return a custom rendering component\n    */\n",
    "69454": "   /**\n    * Add a list of entries to the daily listing\n    * Ugly because this table and model listens to the parent, which is \n    * backwards from normal patterns...\n    * @param list\n    */\n",
    "69485": "    /**\n     * Removes the specified component from the layout.\n     * @param comp the component to be removed\n     */\n",
    "69504": "    /** \n     * Calculates the minimum size dimensions for the specified \n     * panel given the components in the specified parent container.\n     * @param parent the component to be laid out\n     * @see #preferredLayoutSize\n     */\n",
    "69515": "    /**\n     * Adds the specified component to the layout, using the specified\n     * constraint object.\n     * @param comp the component to be added\n     * @param constraints  where/how the component is added to the layout.\n     */\n",
    "69519": "    /** \n     * Returns the maximum size of this component.\n     * @see java.awt.Component#getMinimumSize()\n     * @see java.awt.Component#getPreferredSize()\n     * @see LayoutManager\n     */\n",
    "69523": "    /**\n     * Returns the alignment along the x axis.  This specifies how\n     * the component would like to be aligned relative to other \n     * components.  The value should be a number between 0 and 1\n     * where 0 represents alignment along the origin, 1 is aligned\n     * the furthest away from the origin, 0.5 is centered, etc.\n     */\n",
    "69527": "    /**\n     * Returns the alignment along the y axis.  This specifies how\n     * the component would like to be aligned relative to other \n     * components.  The value should be a number between 0 and 1\n     * where 0 represents alignment along the origin, 1 is aligned\n     * the furthest away from the origin, 0.5 is centered, etc.\n     */\n",
    "69530": "    /**\n     * Invalidates the layout, indicating that if the layout manager\n     * has cached information it should be discarded.\n     */\n",
    "69551": "   /**\n    * Allows custom rendering for a row and column. Can just return c, if no\n    * changes to default are desired.\n    * @param c the component used for rendering the cell\n    * @param row the row to render\n    * @param col the column to render\n    * @return a custom rendering component\n    */\n",
    "69578": "   /**\n    * Show window normally\n    */\n",
    "69601": "   /**\n    * Set to launch hyperlinks in external system browser, or in internal\n    * window instead.\n    * \n    * @param val true if external browser should load links.\n    */\n",
    "69606": "   /**\n    * Create a new instance of a class in this jar file.\n    * Must have a basic constructor with no arguments.\n    * \n    * @param name the class name to instantiate\n    * \n    * @return an Object created from the given class\n    */\n",
    "69631": "   /**\n    * Get a count of the bytes read by this stream.\n    * @return the number of bytes read by this stream.\n    */\n",
    "69634": "   /**\n    * Returns the key of the setting that was changed.\n    *\n    * @return  The key of the setting that was changed.\n    */\n",
    "69636": "   /**\n    * Returns the new value for the setting.\n    *\n    * @return  The new value for the setting, or <tt>null</tt> if the\n    *          setting was removed.\n    */\n",
    "69659": "   /**\n    * Retrieve the <code>cols</code> from the <code>SQLInsert</code>\n    * @return Returns the cols.\n    */\n",
    "69660": "    /**\n     * Added a WHERE constraint to the SELECT command.\n     * \n     * @param name\n     *            the field to constrain\n     * @param val\n     *            the value this field must equal as a constraint\n     */\n",
    "69676": "    /**\n     * Added a WHERE constraint to the SELECT command.\n     * \n     * @param name\n     *            the field to constrain\n     * @param val\n     *            the value this field must be like\n     */\n",
    "69689": "    /**\n     * Add an item to select\n     * \n     * @param field\n     *            a valid SQL selection item\n     */\n",
    "69692": "    /**\n     * Execute the query and return the results.\n     */\n",
    "69695": "   /**\n    * Set if this will format output with newlines or not\n    */\n",
    "69701": "   /**\n    * Generate the SQL string for an UPDATE command.\n    */\n",
    "69706": "   /**\n    * Generate the SQL string for an DELETE command.\n    */\n",
    "69730": "   /**\n    * Sets the horizontal gap between components.\n    */\n",
    "69735": "   /**\n    * Gets the vertical gap between components.\n    */\n",
    "69757": "   /**\n    * Sets the vertical gap between components.\n    */\n",
    "69767": "   /**\n    * Removes the specified component from the layout. Not used by\n    * this class.\n    * @param comp the component to remove\n    * @see       java.awt.Container#removeAll\n    */\n",
    "69866": "    /**\n     * Setting an endpoint from the outside is only meaningful for unit tests.\n     *\n     * @param endPoint An endpoint\n     * @return This distributor\n     */\n",
    "70192": "    /** Remove all nodes except the root node. */\n",
    "70311": "    /** Remove the currently selected node. */\n",
    "70455": "    /** Add child to the currently selected node. */\n",
    "70493": "    /**\n     * This method is only useful for unit testing.\n     *\n     * @param tickTock A time abstraction\n     * @return A deadline\n     */\n",
    "70817": "    /**\n     * Return an approximation of this interval, using an optional, preferred unit.\n     * For instance, 42,345,543 microseconds will approximate to 42,345 milliseconds,\n     * if {@link java.util.concurrent.TimeUnit#MILLISECONDS} is used.\n     *\n     * @param unit A unit\n     * @return Approximation using that unit\n     */\n",
    "70823": "    /**\n     * Returns a readable approximation of this time span.  For instance, instead of being\n     * billions of nanoseconds, it will be a number of seconds.  Example: 42,345,543 microseconds\n     * will approximate to 42 seconds.  In other words, it will gravitate towards a unit\n     * that makes it more approximate, but suits the size of the time span.\n     *\n     * @return Approximate time span\n     */\n",
    "70872": "    /**\n     * True iff the result is wrapped, in a {@link Holder}.\n     */\n",
    "70880": "    /**\n     * The toString of the value.\n     */\n",
    "70884": "    /**\n     * The holder object if wrapped, otherwise the object itself.\n     */\n",
    "70888": "    /**\n     * The class object of the result.  Will not be serialized.\n     */\n",
    "70892": "    /**\n     * The name of the class of the result.\n     */\n",
    "70898": "    /**\n     * True iff the result was a primitive value.\n     */\n",
    "70902": "    /**\n     * The throwable of a failed result.  Will not be serialized.\n     */\n",
    "70909": "    /**\n     * Returns the string value of this tree node\n     */\n",
    "70916": "    /**\n     * The time taken to evaluate the result, in milliseconds.\n     */\n",
    "70922": "    /**\n     * True iff the result was not a failure.\n     */\n",
    "71014": "    /**\n     * Returns the string value of the content\n     *\n     */\n",
    "71023": "    /**\n     * Evaluates the content of this leaf in the given environment.  Iff\n     * content is a symbol, look it up in the context\n     *\n     * @param context The context to evaluate in\n     * @return The value of the content\n     * @exception EvaluationException Thrown iff something bad happens\n     */\n",
    "71705": "    /**\n     * Adds nodes for the declared (if known) and actual (if not null) class\n     */\n",
    "71708": "    /**\n     * Adds nodes for each field of each (super)class\n     */\n",
    "72000": "    /**\n     * Test of the mod method.\n     */\n",
    "72003": "    /**\n     * Test of the mul method.\n     */\n",
    "72005": "    /**\n     * Test of the div method.\n     */\n",
    "72007": "    /**\n     * Test of the sub method.\n     */\n",
    "72010": "    /**\n     * Test of the add method.\n     */\n",
    "72016": "    /**\n     * Set up common stuff for all test methods.\n     * This method is called immediately before each test method is called\n     */\n",
    "72020": "    /**\n     * Tear down common stuff for all test methods.\n     * This method is called immediately after each test method is called\n     */\n",
    "72294": "\t/**\n\t * Populate the entry fields with the values stored in the editDVD\n\t */\n",
    "72310": "\t/**\n\t * Store the entered information into the editDVD object\n\t *\n\t * @throws RuntimeException If there is invalid data.\n\t */\n",
    "72311": "\t/**\n\t * This method is called to determine the rendered that will be used\n\t * for each column.  If the column doesn't have data in it yet this\n\t * function will fall back on the String's render so the table will not\n\t * have an exception.\n\t */\n",
    "72313": "\t/**\n\t * Sets the data to be displayed in the table\n\t *\n\t * @param v the data to be displayed in the table\n\t */\n",
    "72323": "\t/**\n\t * Create the Save, Cancel, Previous, and Next buttons and adds them\n\t * to a pane using the flow layout.\n\t *\n\t * @return pane containing the buttons\n\t */\n",
    "72324": "\t/**\n\t *  This method should be called wehn a user wants the image\n\t *\n\t * @return    The poster which is an ImageIcon \n\t */\n",
    "72326": "\t/**\n\t *  This is called when the new thread starts to run.\n\t */\n",
    "72330": "\t/**\n\t *  Sets the title attribute of the ImdbInfo object\n\t *\n\t * @param  title  The new title value\n\t */\n",
    "72340": "\t/**\n\t *  As seen below. Makes a CardLayout and the diffrent cards are added.\n\t *\n\t * @return    the pane that holds the components\n\t */\n",
    "72341": "\t/**\n\t *  Gets the director attribute of the imdbInfo object\n\t *\n\t * @return    The director value\n\t */\n",
    "72342": "\t/**\n\t *  Card nr 1. This card is for entering the movie to search for.\n\t *\n\t * @return    a JPanel which will be card nr 1\n\t */\n",
    "72345": "\t/**\n\t *  Gets the genre attribute of the imdbInfo object\n\t *\n\t * @return    The genre value\n\t */\n",
    "72350": "\t/**\n\t *  Gets the tagline attribute of the imdbInfo object\n\t *\n\t * @return    The tagline value\n\t */\n",
    "72354": "\t/**\n\t *  Gets the plot attribute of the imdbInfo object\n\t *\n\t * @return    The plot value\n\t */\n",
    "72360": "\t/**\n\t *  Gets the rating attribute of the imdbInfo object\n\t *\n\t * @return    The rating value\n\t */\n",
    "72365": "\t/**\n\t * This method is called to determine the rendered that will be used\n\t * for each column.  If the column doesn't have data in it yet this\n\t * function will fall back on the String's render so the table will not\n\t * have an exception.\n\t */\n",
    "72366": "\t/**\n\t *  Gets the posterUrl attribute of the imdbInfo object\n\t *\n\t * @return    The posterUrl value\n\t */\n",
    "72367": "\t/**\n\t * Sets the data to be displayed in the table\n\t *\n\t * @param v the data to be displayed in the table\n\t */\n",
    "72369": "    /**\n     * Add the ability to sort by column to a table.\n     *\n     * @param table the table to add the MouseListeners\n     */\n",
    "72371": "\t/**\n\t *  Gets the address attribute of the ImdbInfo object\n\t *\n\t * @return    The address value\n\t */\n",
    "72385": "    /**\n     * Compares two object arrays at column <i>col</i>.\n     *\n     * @param o1 first array\n     * @param o2 second array\n     *\n     * @return the result of the string comparison\n     *\n     * @throws ClassCastException if either o1 or o2 are not object arrays (Object[])\n     */\n",
    "72387": "    /**\n     * Compares this comparator with another comparator\n     *\n     * @returns true if column numbers are equal, false otherwise\n     */\n",
    "72389": "\t/**\n\t *  Creates the buttons at the buttom.\n\t *\n\t * @return    a JPanel with buttons\n\t */\n",
    "72390": "    /**\n     * Inserts an element to the list in sorted order.\n     *\n     * @param o the object to insert\n     *\n     * @return true if inserted, false if insertion failed\n     *\n     * @throws ClassCastException if any non-Object array is encountered\n     */\n",
    "72391": "    /**\n     * Sorts a column or toggles sort direction.\n     *\n     * @param col the column number to sort by\n     *\n     * @throws ClassCastException if any non-Object array is encountered\n     * @throws ArrayIndexOutOfBoundsException if (col < 0 || col > number_of_columns)\n     */\n",
    "72393": "    /**\n     * Reverses the direction of the array.\n     */\n",
    "72397": "\t/**\n\t * Create a FlowLayout pane to hold the new, edit, and delete buttons.\n\t * @return a pane containing the buttons\n\t */\n",
    "72402": "\t/**\n\t * Create a table for the DVDs with single selection mode so only one\n\t * DVD can be selected at a time.\n\t *\n\t * @return a table\n\t */\n",
    "72404": "\t/**\n\t * Converts a vector of DVDs into a vector of arrays for the table\n\t *\n\t * @param v Vector of DVDs\n\t */\n",
    "72407": "\t/**\n\t * Enable the edit and delete buttons.  This is called when a row on the\n\t * table is selected.\n\t */\n",
    "72410": "\t/**\n\t * This method keeps track of which row in the table is selected.\n\t */\n",
    "72413": "\t/**\n\t * Disable the edit and delete buttons.  This is called when a row on the\n\t * table is not selected.\n\t */\n",
    "72414": "\t/**\n\t *  Set if the Type should be permanent. For now there is no restricion\n\t *  just a boolean holder.\n\t */\n",
    "72419": "\t/**\n\t *  For each field that is created a type is saved in a Vector. The purpose \n\t *  is to avoid the user to reAdd a new type every time he/she adds a DVD.\n\t *  This method is called every time a change in the type String is made.\n\t */\n",
    "72420": "\t/**\n\t * This method will open the edit window when an item is double\n\t * clicked on the table.\n\t */\n",
    "72427": "\t/**\n\t *  This message is called when the fetching of data is done.\n\t */\n",
    "72436": "\t/**\n\t *  Compares two DVDs based on their titles.\n\t *\n\t * @param  o  Description of the Parameter\n\t * @return    a negative integer, zero, or a positive integer as this DVD title\n\t *      is less than, equal to, or greater than the specified DVD title; zero\n\t *      if the provided object is not a DVD object.\n\t */\n",
    "72442": "\t/**\n\t *  If the data is from imdb.com\n\t *\n\t * @param  wiz  The new fromWizard value\n\t */\n",
    "72448": "\t/**\n\t *  Return true if the data is from imdb.com\n\t *\n\t * @return    The fromImdb value\n\t */\n",
    "72463": "\t/**\n\t * This method will be called from the edit window once it is closed. It\n\t * will allow the user to use the main window.\n\t */\n",
    "72471": "\t/**\n\t * Sort the DVD collection and update the table data\n\t */\n",
    "72479": "\t/**\n\t * Add a DVD to the collection.  This method is called by the edit window\n\t * when a new DVD is saved.\n\t * @param d DVD to add to the collection\n\t */\n",
    "72487": "\t/**\n\t * This method informs the edit window if there is a DVD after the\n\t * one currently being edited.\n\t *\n\t * @return true or false if there is a DVD after the currectly selected one\n\t */\n",
    "72498": "\t/**\n\t * This method informs the edit window if there is a DVD before the\n\t * one currently being edited.\n\t *\n\t * @return true or false if there is a DVD before the currectly selected one\n\t */\n",
    "72555": "    /**\n     * decrease the intensity value in all scopes.\n     */\n",
    "72562": "    /**\n     * \"poke\" a channel, causing it's intensity value to be set to the max.\n     * @param channel\n     */\n",
    "72565": "    /**\n     * get the character representing the current intencity value of a channel.\n     * @param channel\n     * @return\n     */\n",
    "72570": "    /**\n     * get a string representation of the scopes.\n     * @return\n     */\n",
    "72667": "    /**\n     * get the value of the initial relative volume of a track.\n     * @param track\n     * @return\n     */\n",
    "72680": "    /**\n     * utility method for finding the number of tracks (channels) in the module. Note that this\n     * isn't reliable if you've managed to construct a module that has a different number of\n     * tracks per pattern. That's pretty unlikely though... It also doesn't work unless you\n     * have atleast one pattern.\n     * @return\n     */\n",
    "72830": "    /**\n     * loads a list from a LineNumberReader. Each line contains the name of a module.\n     *\n     * @param lnr\n     * @throws IOException\n     */\n",
    "72842": "    /**\n     * removes the current module from the playlist\n     */\n",
    "72849": "    /**\n     * create a player thread for playing the\n     * @param module\n     * @return\n     */\n",
    "72852": "    /**\n     * load the <code>nextModule</code>'th file in the file list.\n     * @param nextModule\n     * @return\n     */\n",
    "72854": "    /**\n     * create a player thread for playing the\n     * @param module\n     * @return\n     */\n",
    "72869": "        /**\n         * make the player thread die as soon as possible.\n         */\n",
    "72871": "    /**\n     * tell the playlist to save itself to the current playlist file\n     * @throws IOException\n     */\n",
    "72996": "    /**\n     * start playing the module\n     */\n",
    "72998": "    /**\n     * stop playing the module and the player thread\n     */\n",
    "73002": "    /**\n     * check if the player thread is still running\n     * @return\n     */\n",
    "73003": "    /**\n     * pause the player thread\n     * @param pause\n     */\n",
    "73007": "    /**\n     * check if the module is paused\n     * @return\n     */\n",
    "73009": "    /**\n     * check if an error has occured while playing\n     * @return\n     */\n",
    "73012": "    /**\n     * if an error occured while playing, use this to get the error cause\n     * @return\n     */\n",
    "73085": "        /**\n         * sets if this track should be muted\n         *\n         * @param mute if true: mute, if false: unmute\n         */\n",
    "73130": "    /**\n     * initialize the player\n     *\n     * @param output\n     * @return true if initialization was successful\n     */\n",
    "73132": "    /**\n     * Load a module from a file\n     *\n     * @param fileName the file name of the module\n     * @return true if loading was successful, false else\n     */\n",
    "73133": "    /**\n     * Load a module\n     * @param module the module to load\n     * @return true if loading was successful, false else\n     */\n",
    "73135": "    /**\n     * play a tick of the the module\n     *\n     * @return true if the module is still playing, false if the module is finished.\n     */\n",
    "73140": "    /**\n     * get the state of the module. The ModuleState can be used for\n     * finding information about the playing module and for manipulating how the\n     * module should be played\n     *\n     * @return the state of the playing module\n     */\n",
    "73141": "    /**\n     * get the current module;\n     * @return\n     */\n",
    "73142": "    /**\n     * get the default amplification. The default amplification is calculated using the following\n     * formula: <code>#tracks / 4</code>. This should maintain a reasonable volume when playing\n     * modules with many channels while avoiding clipping in most cases. Note that for 4channel mods\n     * this will result in an amplification of 1.\n     * @return\n     */\n",
    "73220": "    /**\n     * this will try to write all the indicated data whitout ever giving up...\n     * Either all the data is written or it will loop for ever.\n     *\n     * @param data\n     * @param ofs\n     * @param len\n     */\n",
    "74678": "\t/**\n\t * Returns a service object injected by Spring\n\t * @return\n\t */\n",
    "74681": "\t/**\n\t * Returns a service object injected by Spring\n\t * @return\n\t */\n",
    "74685": "\t/**\n\t * Returns a service object injected by Spring\n\t * @return\n\t */\n",
    "76469": "    /**\n     * Shutdown all the loaded services\n     */\n",
    "76483": "    /** Returns a string of the location. */\n",
    "76485": "    /**\n     * Get the Password value.\n     * @return the Password value.\n     */\n",
    "76487": "  /**\n   * Called on the event dispatching thread (not on the worker thread)\n   * after the <code>construct</code> method has returned.\n   */\n",
    "76489": "    /**\n     * Set the Password value.\n     * @param newPassword The new Password value.\n     */\n",
    "76490": "  /**\n   * A new method that interrupts the worker thread.  Call this method\n   * to force the worker to abort what it's doing.\n   */\n",
    "76492": "    /**\n     * Get the Userid value.\n     * @return the Userid value.\n     */\n",
    "76493": "  /**\n   * Return the value created by the <code>construct</code> method.  \n   * Returns null if either the constructing thread or\n   * the current thread was interrupted before a value was produced.\n   * \n   * @return the value created by the <code>construct</code> method\n   */\n",
    "76495": "    /**\n     * Set the Userid value.\n     * @param newUserid The new Userid value.\n     */\n",
    "76496": "  /**\n   * Start the worker\n   */\n",
    "76498": "    /**\n     * Get the ConnectUrl value.\n     * @return the ConnectUrl value.\n     */\n",
    "76501": "    /**\n     * Set the ConnectUrl value.\n     * @param newConnectUrl The new ConnectUrl value.\n     */\n",
    "76505": "    /**\n     * Get the JdbcDriver value.\n     * @return the JdbcDriver value.\n     */\n",
    "76507": "    /**\n     * Set the JdbcDriver value.\n     * @param newJdbcDriver The new JdbcDriver value.\n     */\n",
    "76525": "    /**\n     * Getter for property doPopup.\n     * @return Value of property doPopup.\n     */\n",
    "76530": "    /**\n     * Setter for property doPopup.\n     * @param doPopup New value of property doPopup.\n     */\n",
    "76542": "    /**\n     * Translates Xml Document from CDA to CLIPS format.\n     * \n     * @param inputDocument\n     *            String representation of the input XML document.\n     * @return File representation of the translated document.\n     */\n",
    "76545": "    /**\n     * Converts a String to a File\n     * \n     * @param str\n     *            String representation of the input XML document translated\n     *            into CLIPS format.\n     * @return File representation of the String.\n     */\n",
    "76607": "    /**\n     * Returns the Results document creation time in the appropriate CDA format\n     *\n     * @return String representation of the document creation time\n     *\n     */\n",
    "76618": "    /**\n     * Returns the Results document code\n     *\n     * @return String representation of the document code\n     *\n     */\n",
    "76629": "    /**\n     * Returns the Results document code system\n     *\n     * @return String representation of the document code system\n     *\n     */\n",
    "76670": "    /**\n     * Registers IDocImport interface instance with the TransController\n     * component.\n     * \n     * @param iDocumentImport\n     *            Instance of the DocImpEx component refered to by the\n     *            IDocumentImport interface\n     */\n",
    "76672": "    /**\n     * Registers IDocExport interface instance with the TransController\n     * component.\n     * \n     * @param iDocumentExport\n     *            Instance of the DocImpEx component refered to by the\n     *            IDocumentExport interface\n     */\n",
    "76675": "    /**\n     * Registers IInference interface instance with the TransController\n     * component.\n     * \n     * @param iInference\n     *            Instance of the InferenceEngine component refered to by the\n     *            IInference interface\n     */\n",
    "76679": "    /**\n     * Registers IAuditLog interface instance with the TransController\n     * component.\n     * \n     * @param iAuditLog\n     *            Instance of the ConfigManager component refered to by the\n     *            IAuditLog interface\n     */\n",
    "76685": "    /**\n     * Returns <tt>true</tt> if the iteration has more elements. (In other\n     * words, returns <tt>true</tt> if <tt>next</tt> would return an element\n     * rather than throwing an exception.)\n     * \n     * @return <tt>true</tt> if the iterator has more elements.\n     */\n",
    "76774": "    /** Get a scalar type for the given name. */\n",
    "76778": "    /** Get a scalar type for the name represented by a token. */\n",
    "76780": "    /** Get a scalar type for the name represented by a symbol. */\n",
    "76787": "    /** Apply the analysis to a list of child nodes. */\n",
    "76790": "    /** Apply the analysis to a child node. */\n",
    "76794": "    /** Report a warning message. */\n",
    "76795": "    /** Are there any errors? */\n",
    "76804": "    /**\n     * This method provides a String representation of a document with clinical\n     * recommendations based on patient-specific data.\n     *\n     * @param patientSummary\n     *            String representation of the CDA Patient Summary document that\n     *            is received by the EGADSS Service\n     * @return String representation of the Results CDA document that contains\n     *         clinical results from EGADSS. (the recommendations and requests\n     *         for additional patient information if applicable)\n     */\n",
    "76847": "    /** Creates and initializes instances of other EGADSS components. */\n",
    "76930": "    /**\n     * velocityClinicalGuideline\n     *\n     * @return String\n     */\n",
    "76934": "    /**\n     * Tests the DocumentValidator.validateDocument method of the DocImpEx\n     * componenet\n     */\n",
    "76946": "    /**\n     * Tests the IConfig.getInfo method of the DocImpEx componenet\n     */\n",
    "76949": "    /**\n     * Tests the IConfig.initialize method of the DocImpEx componenet\n     */\n",
    "76952": "    /**\n     * Tests the IConfig.terminate method of the DocImpEx componenet\n     */\n",
    "76956": "    /**\n     * Tests the IDocumentImport.importDocument method of the DocImpEx\n     * componenet\n     */\n",
    "76959": "    /**\n     * Tests the IDocumentExport.exportDocument method of the DocImpEx\n     * componenet\n     */\n",
    "76964": "    /**\n     * Tests the IConfig.getInfo method of the TransController componenet\n     */\n",
    "76968": "    /**\n     * Tests the IConfig.initialize method of the TransController componenet\n     */\n",
    "76973": "    /**\n     * Tests the XPathPreprocessor.parseKnowledgeModuleForXPath method.\n     */\n",
    "76975": "    /**\n     * Tests the IConfig.terminate method of the TransController componenet\n     */\n",
    "76980": "    /**\n     * Tests the ITrans.getRecommendations method of the TransController\n     * componenet\n     */\n",
    "76987": "    /**\n     * Tests the IConfig.getInfo method of the DataStorage componenet\n     */\n",
    "76990": "    /**\n     * Tests the IConfig.initialize method of the DataStorage componenet\n     */\n",
    "76991": "    /**\n     * Tests the IAuditLog.writeLogEntry method of the ConfigManager componenet\n     */\n",
    "76992": "    /**\n     * Tests the IConfig.terminate method of the DataStorage componenet\n     */\n",
    "76995": "    /**\n     * Tests the IAudit.generateAuditReport method of the ConfigManager\n     * componenet\n     */\n",
    "76997": "    /**\n     * Tests the IAudit.setAuditingMode and IAudit.getAuditingMode methods of\n     * the ConfigManager componenet\n     */\n",
    "77002": "    /**\n     * Tests the ISysConfig.shutSystemDown method of the ConfigManager\n     * componenet\n     */\n",
    "77005": "    /**\n     * Tests the ISysConfig.viewSystemConfig method of the ConfigManager\n     * componenet\n     */\n",
    "77008": "    /**\n     * Tests the IConfig.getInfo method of the ConfigManager componenet\n     */\n",
    "77015": "    /**\n     * Tests the IConfig.initialize method of the ConfigManager componenet\n     */\n",
    "77021": "    /**\n     * Tests the IConfig.terminate method of the ConfigManager componenet\n     */\n",
    "81092": "\t/**\n\t * This method is called when the plug-in is stopped\n\t */\n",
    "81105": "    /**\n     * trace utility of server\n     */\n",
    "81107": "    /**\n     * Shutdown the NetworkServer\n     */\n",
    "81108": "\t/**\n\t * Start Derby Network server\n\t * \n\t */\n",
    "81112": "\t /**\n\t  *\tgets a database connection\n\t  * If the dbUrl is trying to connect to the Derby NetNsSampleWork server using JCC\n\t  * then the jcc driver must be already loaded before calling this method,\n\t  * else there will be an error\n\t  * return jcc connection if no error, else null\n\t  */\n",
    "81114": "\t /**\n\t  * set the connection to this isolation level\n\t  */\n",
    "81131": "\t/**\n\t * Return the length of the binary stream which was calculated when\n\t * EXTDTAObject was created.\n\t * \n\t * @return the length of the stream once converted to an InputStream\n\t */\n",
    "81443": "\t/**\n\t * Return chaining bit for current DSS.\n\t */\n",
    "81557": "\t/**\n\t * End DSS header by writing the length in the length location\n\t * and setting the chain bit.\n\t */\n",
    "81745": "\t/**\n\t * Looks at chaining info for previous DSS written, and use\n\t * that to figure out what the correlation id for the current\n\t * DSS should be.  Return that correlation id.\n\t */\n",
    "82376": "\t/**\n\t * get an HTML labelled message from the resource bundle file, according to\n\t * the given key.\n\t */\n",
    "82378": "\t/**\n\t * Print the received string as a header.\n\t * @param str The string to be printed as a header.\n\t */\n",
    "82382": "\t/**\n\t * If the received string has one or more single quotes\n\t * in it, replace each one with the HTML escape-code\n\t * for a single quote (apostrophe) so that the string \n\t * can be properly displayed on a submit button.\n\t * @param str The string in which we want to escape\n\t *  single quotes.\n\t */\n",
    "82653": "\t/**\n\t * Build preformatted SQLException text \n\t * for severe exceptions or SQLExceptions that are not EmbedSQLExceptions.\n\t * Just send the message text localized to the server locale.\n\t * \n\t * @param se  SQLException for which to build SQLERRMC\n\t * @return preformated message text \n\t * \t\t\twith messages separted by SQLERRMC_PREFORMATED_MESSAGE_DELIMITER\n\t * \n\t */\n",
    "82659": "\t/**\n\t * Build Tokenized SQLERRMC to just send the tokenized arguments to the client.\n\t * for a Derby SQLException\n\t * Message argument tokens are separated by SQLERRMC_TOKEN_DELIMITER \n\t * Multiple messages are separated by SQLERRMC_MESSAGE_DELIMITER\n\t * \n\t *                 ...\n\t * @param se   SQLException to print\n\t * \n\t */\n",
    "83118": "\t/**\n\t * Finalize the current DSS chain and send it if\n\t * needed.\n\t */\n",
    "83491": "    /**\n     * Obtain the current transaction timeout value set for this XAResource instance. If\n     * <CODE>XAResource.setTransactionTimeout</CODE> was not use prior to invoking this method, the return value is the\n     * default timeout set for the resource manager; otherwise, the value used in the previous\n     * <CODE>setTransactionTimeout</CODE> call is returned.\n     *\n     * @return the transaction timeout value in seconds.\n     *\n     * @throws XAException An error has occurred. Possible exception values are XAER_RMERR, XAER_RMFAIL.\n     */\n",
    "83501": "    /**\n     * <P>Set the current transaction timeout value for this <CODE>XAResource</CODE> instance. This value overwrites the\n     * default transaction timeout value in the resource manager. The newly assigned timeout value is effective for the\n     * life of this <CODE>XAResource</CODE> instance unless a new value is set.<P>\n     *\n     * @param the transaction timeout value in seconds.\n     *\n     * @throws XAException An error has occurred. Possible exception values are XAER_RMERR, XAER_RMFAIL, or XAER_INVAL.\n     */\n",
    "84264": "    /**\n     * What's a column's table's catalog name?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     *\n     * @return column name or \"\" if not applicable.\n     *\n     * @throws SQLException thrown on failure\n     */\n",
    "84396": "    /**\n     * Store the Packagename and consistency token information This is called from Section.setPKGNAMCBytes\n     *\n     * @param b                    bytearray that has the PKGNAMC information to be stored\n     * @param resultSetHoldability depending on the holdability store it in the correct byte array packagename and\n     *                             consistency token information for when holdability is set to HOLD_CURSORS_OVER_COMMIT\n     *                             is stored in holdPKGNAMCBytes and in noHoldPKGNAMCBytes when holdability is set to\n     *                             CLOSE_CURSORS_AT_COMMIT\n     */\n",
    "84636": "   /**\n    * \tReturn true if the physical connection is still open.\n    * \tMight be logically closed but available for reuse.\n    *   @return true if physical connection still open\n    */\n",
    "84681": "    /**\n     * Store the Packagename and consistency token information for reuse. Case 1: if it is generated section, just store\n     * the byte array in PKGNAMCBytes Case 2: for not a generated section, information is stored in the correct byte\n     * array depending on the holdability in SectionManager\n     */\n",
    "84794": "    /**\n     * Performs the privileged action of System.getProperties()\n     */\n",
    "84802": "    /**\n     * Attempt to establish a database connection in a non-pooling, non-distributed environment.\n     *\n     * @return a Connection to the database\n     *\n     * @throws java.sql.SQLException if a database-access error occurs.\n     */\n",
    "84803": "    /**\n     * Attempt to establish a database connection in a non-pooling, non-distributed environment.\n     *\n     * @param user     the database user on whose behalf the Connection is being made\n     * @param password the user's password\n     *\n     * @return a Connection to the database\n     *\n     * @throws java.sql.SQLException if a database-access error occurs.\n     */\n",
    "84869": "\t/**\n\t\tRun once per-iteration to run the actual test.\n\t\t@exception T_Fail the test failed in some way.\n\t*/\n",
    "84901": "\t/**\n\t\tPut the object into the No Identity state. \n\n\t\t<BR> MT - single thread required - Method must only be called be cache manager\n\t\tand the cache manager will guarantee only one thread can be calling it.\n\n\t*/\n",
    "84903": "\t/**\n\t\tGet the identity of this object.\n\n\t\t<BR> MT - thread safe.\n\n\t*/\n",
    "84907": "\t/** \n\t\tQualififier is assumed to be null.\n\t@see Lockable#lockEvent\n\t*/\n",
    "84913": "\t/** \n\t\tQualififier is assumed to be null.\n\t@see Lockable#unlockEvent\n\t*/\n",
    "84927": "\t/**\n\t\tReturns true of the object is dirty. Will only be called when the object is unkept.\n\n\t\t<BR> MT - thread safe \n\n\t*/\n",
    "84948": "\t/**\n\t  Get the name of the protocol for the module to test.\n\t  This is the 'factory.MODULE' variable.\n\t  \n\t  'moduleName' to the name of the module to test. \n\n\t  @param testConfiguration the configuration for this test.\n\t  */\n",
    "84958": "\t/**\n\t\tA call to findCached() that is expected to return nothing.\n\t\t@exception StandardException  Standard Derby Error policy\n\t\t@exception T_Fail Something was found.\n\t*/\n",
    "84959": "\t/**\n\t\tA call to findCached() that is expected to find something.\n\t\t@exception StandardException  Standard Derby Error policy\n\t\t@exception T_Fail Nothing was found.\n\t*/\n",
    "84961": "\t/**\n\t\tA call to find() that is expected to return nothing.\n\n\t\t@exception T_Fail Something was found.\n\t\t@exception StandardException  Standard Derby Error policy\n\t*/\n",
    "84963": "\t/**\n\t\tA call to findCached() that is expected to find something.\n\n\t\t@exception T_Fail Nothing was found.\n\t\t@exception StandardException  Standard Derby Error policy\n\t*/\n",
    "84995": "\t/**\n\t  Emit a message indicating why the test failed.\n\n\t  RESOLVE: Should this be localized?\n\n\t  @param msg the message.\n\t  @return false\n\t*/\n",
    "84996": "\t/**\n\t  Emit a message saying the test passed.\n\t  You may use this to emit messages indicating individual test cases\n\t  within a unit test passed.\n\n\t  <P>RESOLVE:Localize this.\n\t  @param test the test which passed.\n\t  @return true\n\t  */\n",
    "84997": "\t/**\n\t\tEmit a message during a unit test run, indent the message\n\t\tto allow the PASS/FAIL messages to stand out.\n\t*/\n",
    "85040": "\t/**\n\t * T_MultiThreadedIteration method\n\t *\n\t * @exception T_Fail Unexpected behaviour from the API\n\t */\n",
    "85098": "\t/**\n\t\tGet the last page in a container.\n\t\tAlways returns a valid page or null if there is no page in the container.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85100": "\t/**\n\t\tGet a specific page in a container.\n\t\tAlways returns a valid page.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85104": "\t/**\n\t\tAdd a page to a container.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85120": "\t/**\n\t\tLazy people's random file generator:\n\t\tGenerate a random file with specified name and file size\n\n\t\t@exception T_Fail Record handle returned is null.\n\t*/\n",
    "85124": "\t/**\n\t  getValidColumns describes the DataValueDescriptor[] returned by all calls\n      to the getNextRowFromRowSource() call. \n\t*/\n",
    "85127": "\t/**\n\t\tneedsRowLocation returns true iff this the row source expects the\n\t\tdrainer of the row source to call rowLocation after getting a row from\n\t\tgetNextRowFromRowSource.\n\n\t\t@return true iff this row source expects some row location to be\n\t\treturned \n\t\t@see #rowLocation\n\t */\n",
    "85129": "\t/**\n\t\trowLocation  is not implemented here\n\t */\n",
    "85366": "\t/**\n\t  run the test\n\n\t  @exception T_Fail Unexpected behaviour from the API\n\t*/\n",
    "85374": "\t/**\n\t * T_MultiThreadedIteration method\n\t *\n\t * @exception T_Fail Unexpected behaviour from the API\n\t */\n",
    "85419": "\t/**\n\t\tT000 - ensure a transaction starts out idle.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85422": "\t/**\n\t\tT001 - start and commit an empty transaction.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85427": "\t/**\n\t\tT002 - start and abort an empty transaction.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85432": "\t/**\n\t\tT003 - start and commit an empty transaction and then ensure\n\t\tthat the transaction remains open for another commit.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85438": "\t/**\n\t\tT004 - start and abort an empty transaction and then ensure\n\t\tthat the transaction remains open for a commit and another abort.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85480": "\t/**\n\t\tC010 - Create a container within a transaction, commit and the re-open\n\t\tthe container twice.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\n\t*/\n",
    "85485": "\t/**\n\t\tC011 - Create a container withina transaction, commit and the re-open\n\t\tthe container in update and non-update mode.\n\t\t\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\n\t*/\n",
    "86122": "\t/**\n\t\tCreate a statement with modified State.\n\t*/\n",
    "86148": "      /**\n\t   *  Print the expected Exception's details if the SQLException SQLState\n\t   * matches the expected SQLState. Otherwise fail\n\t   *\n\t   * @param se  SQLException that was thrown by the test\n\t   * @param expectedSQLState  The SQLState that we expect. \n\t   *\n\t   **/\n",
    "86149": "     /**\n       * We are here because we got an exception when did not expect one.\n       * Hence printing the message and stack trace here.\n       **/\n",
    "86190": "\t/**\n\t * Dump the values in the received result set to output.\n\t */\n",
    "86192": "\t/**\n\t * Create a connect based on the test arguments passed in.\n\t */\n",
    "86244": "\t/**\n\t\tUnlatch an  object.\n\n\t\t<BR>\n\t\tMT - thread safe\n\n\t\t@see LockFactory#unlatch\n\t*/\n",
    "86250": "\t/**\t\n\t\tSet the potentially granted flag, returns true if the\n\t\tflag changed its state.\n\n\t\tMT - single thread required\n\t*/\n",
    "86252": "\t/**\t\n\t\tClear the potentially granted flag.\n\n\t\tMT - single thread required\n\t*/\n",
    "86261": "\t/**\n\t\tWe can return ourselves here because our identity\n\t\tis immutable and what we returned will not be accessed\n\t\tas a Lock, so the count cannot be changed.\n\t*/\n",
    "86264": "\t/**\n\t\tUnlock a group of objects. \n\n\t\t<BR>\n\t\tMT - thread safe\n\n\t\t@param group handle of group that objects were locked with.\n\t\tIf group is\tnull then this call is equivilent to unlockAll().\n\n\t\t@see LockFactory#unlockGroup\n\t*/\n",
    "86275": "\t/**\n\t\tReturns true if locks by anyone are blocking anyone else\n\t*/\n",
    "86278": "\t/**\n\t\tReturn true if locks are held in this group and this space.\n\n\t\t<BR>\n\t\tMT - thread safe\n\n\t\t@param group handle of group that objects were locked with.\n\n\t\t@see LockFactory#areLocksHeld\n\t*/\n",
    "86280": "\t/**\n\t\tReturn true if locks are held in this space\n\t\t\n\t\t<BR>\n\t\tMT - thread safe\n\n\t\t@see LockFactory#areLocksHeld\n\t*/\n",
    "86286": "\t/**\n\t\tClear a limit set by setLimit.\n\t*/\n",
    "86287": "\t/**\n\t\tReturn the first lock in the wait line, null if the\n\t\tline is empty.\n\t*/\n",
    "86289": "\t/**\n\t\tReturn the lockable object controlled by me.\n\t*/\n",
    "86301": "\t/**\n\t\tAdd the waiters of this lock into this Dictionary object.\n\t\t<BR>\n\t\tEach waiting thread gets two entries in the hashtable\n\t\t<OL>\n\t\t<LI>key=compatibility space - value=ActiveLock\n\t\t<LI>key=ActiveLock - value={LockControl for first waiter|ActiveLock of previosue waiter}\n\t\t</OL>\n\t*/\n",
    "86311": "\t/**\n\t * Remove and return the first lock request from a list of waiters.\n\t *\n\t * @param waiting\tThe list of waiters to pop from\n\t * @param ls\t\tThe LockSet\n\t *\n\t * @return\tThe removed lock request\n\t */\n",
    "86329": "    /**\n     * cpArray helps built the output string (outputRow).\n     * @param toCp the String to be copied into outputRow\n     * @param start the start place\n     * @param end the end place\n     */\n",
    "86343": "\t/**\n\t\tNotify the class manager that the classpath has been modified.\n\n\t\t@exception StandardException thrown on error\n\t*/\n",
    "86362": "\t/**\n\t\tGet a stream directly from a ZipFile.\n\t\tIn this case we can safely return the stream directly.\n\t\tIt's a new stream set up by the zip code to read just\n\t\tthe contents of this entry.\n\t*/\n",
    "86364": "\t/**\n\t\tGet a stream from a zip file that is itself a stream.\n\t\tHere we need to get the size of the zip entry and\n\t\tput a limiting stream around it. Otherwise the\n\t\tcaller would end up reading the entire zip file!\n\t*/\n",
    "86371": "\t/**\n\t\tMake the stream; note that service properties override\n\t\tapplication and system properties.\n\n\t */\n",
    "86372": "\t/**\n\t\tReturn a new header object.\n\t*/\n",
    "86373": "\t/**\n\t\tcreate a HeaderPrintWriter based on the header.\n\t\tWill still need to determine the target type.\n\t */\n",
    "86379": "\t/**\n\t\tUsed when no configuration information exists for a stream.\n\t*/\n",
    "86380": "\t/**\n\t\tUsed when creating a stream creates an error.\n\t*/\n",
    "86384": "\t/**\n\t\tKeep the cached object after a search.\n\n\t*/\n",
    "86392": "\t/**\n\t\tGet the cached object.\n\t*/\n",
    "86414": "\t/**\n\t\tClean all objects in the cache.\n\t*/\n",
    "86417": "\t/**\n\t\tClean all objects that match a partial key.\n\t*/\n",
    "86422": "\t/**\n\t\tMT - synchronization provided by caller\n\n\t\t@exception StandardException Standard Cloudscape error policy.\n\t*/\n",
    "86461": "\t/**\t\n\t\tPut the key-value pair in the Properties set and\n\t\tmark this set as modified.\n\n\t\t@see Hashtable#put\n\t*/\n",
    "86462": "\t/**\t\n\t\tRemove the key-value pair from the Properties set and\n\t\tmark this set as modified.\n\n\t\t@see Hashtable#remove\n\t*/\n",
    "86474": "\t/**\n\t\tShut down a service that was started by this Monitor. Will\n\t\tcause the stop() method to be called on each loaded module.\n\t*/\n",
    "86484": "\t/**\n\t\tReturn the name of the service that the passed in module lives in.\n\t*/\n",
    "86488": "\t/**\n\t\tClear an item's identity. Item must be \n\t\tunkept and valid. This is called for\n\t\tdirty items from the discard code.\n\n\t\tCaller must hold the cache synchronization.\n\n        @return the amount by which this shrinks the cache.\n\t*/\n",
    "86493": "\t/**\n\t\tReturn the PersistentService object for a service.\n\t\tWill return null if the service does not exist.\n\t*/\n",
    "86522": "\t/**\n\t\tShould only be called if reportOn is true\n\t\tapart from report/Exception().\n\t*/\n",
    "86570": "\t/**\n\t\tBoot all the service providers, ie. any module that implemented\n\t\tPersistentService. Upon entry to this call is the hashtable has\n\t\tPersistentService objects that have been created but not booted.\n\t*/\n",
    "86574": "\t/**\n\t\tBoot all persistent services that can be located at run time.\n\n\t\t<BR>\n\t\tThis method enumerates through all the service providers that\n\t\tare active and calls bootPersistentServices(PersistentService)\n\t\tto boot all the services that that provider knows about.\n\t*/\n",
    "86575": "\t/** Get the current PC */\n",
    "86576": "\t/**\n\t * add a field to this class. Fields cannot\n\t * be initialized here, they must be initialized\n\t * in the static initializer code (static fields)\n\t * or in the constructors.\n\t * <p>\n\t * static fields also added to this list,\n\t * with the modifier set appropriately.\n\t */\n",
    "86595": "\t/**\n\t * Return the logical name of the method. The current\n\t * myEntry refers to the sub method we are currently\n\t * overflowing to. Those sub-methods are hidden from any caller.\n\t */\n",
    "86600": "\t/**\n\t * a throwable can be added to the end of\n\t * the list of thrownExceptions.\n\t */\n",
    "86601": "\t/**\n\t * when the method has had all of its parameters\n\t * and thrown exceptions defined, and its statement\n \t * block has been completed, it can be completed and\n\t * its class file information generated.\n\t * <p>\n\t * further alterations of the method will not be\n\t * reflected in the code generated for it.\n\t */\n",
    "86635": "\t/**\n\tReturn the UUID factory for this system.  Returns null\n\tif there isn't one.\n\t@see com.ibm.db2j.system.System\n\t*/\n",
    "86648": "\t/**\n\t\tGet the locale from the ContextManager and then find the bundle\n\t\tbased upon that locale.\n\t*/\n",
    "86663": "\t/**\n\t\tPush the contents of the described static field onto the stack.\t\t\n\t*/\n",
    "86667": "\t/**\n\t * Set the field but don't duplicate its value so\n\t * nothing is left on the stack after this call.\n\t */\n",
    "86669": "\t/**\n\t\tUpon entry the top word(s) on the stack is\n\t\tthe value to be put into the field. Ie.\n\t\twe have\n\t\t<PRE>\n\t\tword\n\t\t</PRE>\n\n\t\tBefore the call we need \n\t\t<PRE>\n\t\tword\n\t\tthis\n\t\tword\n\t\t</PRE>\n\t\tword2,word1 -> word2, word1, word2\n\n\t\tSo that we are left with word after the put.\n\n\t*/\n",
    "86675": "\t/**\n\t\tStart this module. We need a read/write version of the class utilities\n\n\t\t@exception StandardException standard cloudscape policy\n\t */\n",
    "86677": "\t/**\n\t\tStop this module.  In this case, nothing needs to be done.\n\t */\n",
    "86700": "\t/**\n\t\tOpen a temp table several times with different modes and ensure the\n\t\tcorrect behaviour (most severe open wins).\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "86718": "  /** Gets the resultset meta data\n \t* @exception\tSQLException if there is an error\n\t*/\n",
    "86719": "  /** gets the next row\n \t* @exception\tSQLException if there is an error\n\t*/\n",
    "86721": "  /** closes the resultset\n \t* @exception\tSQLException if there is an error\n\t*/\n",
    "86736": "\t/** virtual method from the abstract class\n\t * @exception\tException on error\n\t */\n",
    "86758": "  /**if columndefinition is true, ignore first row. The way to do that is to just\n  *  look for the record separator\n \t* @exception\tException if there is an error\n\t*/\n",
    "86775": "  /**close the input data file\n \t* @exception\tException if there is an error\n\t*/\n",
    "86834": "  /**returns the number of the current row\n  */\n",
    "86844": "\t/**\n\t * position is 1-based.\n\t * @see ResultDescription#getColumnDescriptor\n\t */\n",
    "86861": "\t/**\n\t\tIs the database active (open).\n\t*/\n",
    "86981": "\t/**\n\t * Get the formatID which corresponds to this class.\n\t   Map to the 5.0 version identifier so that 5.0 will understand\n\t   this object when we write it out in soft upgrade mode.\n\t   CS 5.0 will de-serialize it correctly.\n\t   When we are writing out a 5.1 version number we write out\n\t   the 5.1 version just to ensure no problems.\n\t   \n\t *\n\t *\t@return\tthe formatID of this class\n\t */\n",
    "87063": "\t/**\n\t * Return the savepoint level when the table was dropped\n\t */\n",
    "87076": "\t/**\n\t * Get the PreparedStatement that is associated with this Cacheable\n\t */\n",
    "87090": "\t/**\n\t * Resets the savepoint to the current spot if it is\n\t * set, otherwise, noop.  Used when a commit is\n\t * done on a nested connection.\n\t *\n\t * @see StatementContext#resetSavePoint\n\t * @exception StandardException Thrown on error\n\t */\n",
    "87117": "\t/**\n\t * Indicate that, in the event of a statement-level exception,\n\t * this context is NOT the last one that needs to be rolled\n\t * back--rather, it is nested within some other statement\n\t * context, and that other context needs to be rolled back,\n\t * too.\n\t*/\n",
    "87118": "\t/**\n\t\tSet to indicate statement is system code.\n\t\tFor example a system procedure, view, function etc.\n\t*/\n",
    "87120": "\t/**\n\t\tReturn true if this statement is system code.\n\t*/\n",
    "87135": "\t/**\n\t\tGet the ExecutionFactory to use with this language connection\n\t */\n",
    "87139": "\t/**\n\t\tGet the OptimizerFactory to use with this language connection\n\t */\n",
    "87140": "\t/**\n\t\tGet the TypeCompilerFactory to use with this language connection\n\t */\n",
    "87141": "\t/**\n\t\tGet the DataValueFactory to use with this language connection\n\t */\n",
    "87144": "\t/**\n\t\tthis implementation will not support caching of statements.\n\t */\n",
    "87173": "\t/**\n\t * Start-up method for this instance of the language factory.\n\t * This service is expected to be started and accessed relative \n\t * to a database.\n\t *\n\t * @param startParams\tThe start-up parameters (ignored in this case)\n\n       @exception StandardException Thrown if module cannot be booted.\n\t *\n\t */\n",
    "87202": "\t/**\n\t * Add the activation to those known about by this connection.\n\t */\n",
    "87210": "\t/**\n\t * removes a dependency for a given provider. assumes\n\t * that the dependent removal is being dealt with elsewhere.\n\t * Won't assume that the dependent only appears once in the list.\n\t */\n",
    "87237": "\t/**\n\t\treturn the provider's key for this dependency.\n\t\t@return the provider' key for this dependency\n\t */\n",
    "87238": "\t/**\n\t\treturn the provider for this dependency.\n\t\t@return the provider for this dependency\n\t */\n",
    "87239": "\t/**\n\t\treturn the dependent for this dependency.\n\t\t@return the dependent for this dependency\n\t */\n",
    "87264": "\t/**\n\t\tCheck that there are not output parameters defined\n\t\tby the parameter set. If there are unknown parameter\n\t\ttypes they are forced to input types. i.e. Cloudscape static method\n\t\tcalls with parameters that are array.\n\n\t\t@return true if a declared Java Procedure INOUT or OUT parameter is in the set, false otherwise.\n\t*/\n",
    "87281": "\t/**\n\t\tGet a column from the list\n\t\n\t\t@param position\tThe column to get from the list\n\t */\n",
    "87283": "\t/**\n\t\tPrint the list.\n\t\n\t\t@param depth\t\tThe depth at which to indent the sub-nodes\n\t */\n",
    "87297": "\t/**\n\t * Return the number of activations known for this connection.\n\t * Note that some of these activations may not be in use\n\t * (when a prepared statement is finalized, its activations\n\t * are marked as unused and later closed and removed on\n\t * the next commit/rollback).\n\t */\n",
    "87307": "\t/**\n\t * See if a given cursor is available for use.\n\t * if so return its activation. Returns null if not found.\n\t * For use in execution.\n\t *\n\t * @return the activation for the given cursor, null\n\t *\tif none was found.\n\t */\n",
    "87313": "\t/**\n\t * null operators are defined on DataValueDescriptor.\n\t * Overrides method in UnaryOperatorNode for code generation purposes.\n\t */\n",
    "87439": " /** Get the data value factory to use with this language connection\n\t\tcontext.\n\t */\n",
    "87443": "\t/**\n\t\tGet the language factory to use with this language connection\n\t\tcontext.\n\t */\n",
    "87448": "\t/**\n\t\tGet the language connection factory to use with this language connection\n\t\tcontext.\n\t */\n",
    "87479": "\t/**\n\t\tEmpty as much of the cache as possible. It is not guaranteed\n\t\tthat the cache is empty after this call, as statements may be kept\n\t\tby currently executing queries, activations that are about to be garbage\n\t\tcollected.\n\t*/\n",
    "87554": "    /**\n\t  *\tReports how many statement levels deep we are.\n\t  *\n\t  *\t@return\ta statement level >= OUTERMOST_STATEMENT\n\t  */\n",
    "87621": "\t/**\n\t\tFinish the data dictionary transaction, if any.\n\n\t\t@exception StandardException\tThrown on error\n\t */\n",
    "87664": "\t/**\n\t * Convert this object to a String.  See comments in QueryTreeNode.java\n\t * for how this should be done for tree printing.\n\t *\n\t * @return\tThis object as a String\n\t */\n",
    "87665": "\t/**\n\t * Mark the column as descending order\n\t */\n",
    "87666": "\t/**\n\t * Get the column order.  Overrides \n\t * OrderedColumn.isAscending.\n\t *\n\t * @return true if ascending, false if descending\n\t */\n",
    "87831": "\t/**\n\t * This is a length operator node.  Overrides this method\n\t * in UnaryOperatorNode for code generation purposes.\n\t */\n",
    "87990": "\t/**\n\t * Determine the type the binary method is called on.\n\t * By default, based on the receiver.\n\t *\n\t * Override in nodes that use methods on super-interfaces of\n\t * the receiver's interface, such as comparisons.\n\t *\n\t * @exception StandardException\t\tThrown on error\n\t */\n",
    "88021": "\t/**\n\t * Initializer for a ExtractOperatorNode\n\t *\n\t * @param field\t\tThe field to extract\n\t * @param operand\tThe operand\n\t */\n",
    "88329": "\t/**\n\t  *\tGet the package name that this generated class lives in\n\t  *\n\t  *\t@return\tpackage name\n\t  */\n",
    "88330": "\t/**\n\t\tThe base class for activations is BaseActivation\n\t */\n",
    "88994": "\t/**\n\t * This is a length operator node.  Overrides this method\n\t * in UnaryOperatorNode for code generation purposes.\n\t */\n",
    "89015": "\t/**\n\t * Return the length\n\t *\n\t * @return\tThe length of the value this node represents\n\t *\n\t * @exception StandardException\t\tThrown on error\n\t */\n",
    "89233": "\t/**\n\t * Prints the sub-nodes of this object.  See QueryTreeNode.java for\n\t * how tree printing is supposed to work.\n\t *\n\t * @param depth\t\tThe depth of this node in the tree\n\t */\n",
    "89234": "\t/**\n\t * Convert this object to a String.  See comments in QueryTreeNode.java\n\t * for how this should be done for tree printing.\n\t *\n\t * @return\tThis object as a String\n\t */\n",
    "89467": "\t/**\n\t\tCheck to see if a database has been upgraded to the required\n\t\tlevel in order to use a language feature. \n\n\t\t@param majorVersion Data Dictionary major version\n\t\t@param feature Non-null to throw an error, null to return the state of the version match.\n\n\t\t@return True if the database has been upgraded to the required level, false otherwise.\n\t*/\n",
    "89612": "\t/**\n\t * Determine the type the binary method is called on.\n\t * By default, based on the receiver.\n\t *\n\t * Override in nodes that use methods on super-interfaces of\n\t * the receiver's interface, such as comparisons.\n\t *\n\t * @exception StandardException\t\tThrown on error\n\t */\n",
    "89786": "\t/**\n\t * The execute method returns a result set that will evaluate the\n\t * statement this activation class is the compiled form of.\n\t * REVISIT: do we need to give the caller the ability to touch it\n\t * directly, or could we wrap the alterations to it in this class?\n\t */\n",
    "89795": "\t/**\n\t * Activations might have need of internal functions\n\t * that are not used by the result sets, but by other\n\t * activation functions. Thus, we make it possible\n\t * for functions to be generated directly as well\n\t * as through the newExprFun interface.  newExprFun\n\t * should be used when a static field pointing to the\n\t * expression function is needed.\n\t * <p>\n\t * The generated function will generally have a generated name\n\t * that can be viewed through the MethodBuilder interface.\n\t * This name is generated to ensure uniqueness from other\n\t * function names in the activation class. If you pass in a function\n\t * name, think carefully about whether it will collide with other names.\n\t *\n\t * @param exprName\tName of function. Usually null, which causes us to\n\t *\t\t\t\t\tgenerate a unique name.\n\t * @param returnType the return type of the function\n\t * @param modifiers the modifiers on the function\n\t *\n\t * @see #newExprFun\n\t */\n",
    "89803": "\t/**\n\t\tPush an expression that is a GeneratedMethod reference to the\n\t\tpassed in method. aka. a \"function pointer\".\n\t*/\n",
    "89804": "\t/**\n\t * Start a user expression.  The difference between a normal expression\n\t * (returned by newExprFun)\n\t * and a user expression is that a user expression catches all exceptions\n\t * (because we don't want random exceptions thrown from user methods to\n\t * propagate to the rest of the system.\n\t *\n\t * @param functionName\tName to give to the function. If null, we'll generate a\n\t *\t\t\t\t\t\tunique name.\n\t * @param returnType\tA String telling the return type from the expression\n\t *\n\t * @return\tA new MethodBuilder\n\t */\n",
    "89806": "\t/**\n\t\tThis utility method returns an expression for CURRENT_DATE.\n\t\tGet the expression this way, because the activation needs to \n\t\tgenerate support information for CURRENT_DATE,\n\t\tthat would otherwise be painful to create manually.\n\t */\n",
    "89807": "\t/**\n\t\tThis utility method returns an expression for CURRENT_TIME.\n\t\tGet the expression this way, because the activation needs to \n\t\tgenerate support information for CURRENT_TIME,\n\t\tthat would otherwise be painful to create manually.\n\t */\n",
    "89809": "\t/**\n\t\tThis utility method generates an expression for CURRENT_TIMESTAMP.\n\t\tGet the expression this way, because the activation needs to \n\t\tgenerate support information for CURRENT_TIMESTAMP,\n\t\tthat would otherwise be painful to create manually.\n\t */\n",
    "89823": "\t/**\n\t\tThis utility method returns the resultSetClosed method reference that the\n\t\tactivation wants called when a result set closes, to let it clean up.\n\t\tThis will be null if none was needed.\n\n\t\tREMIND: because ObjectManager returns exceptions on its invoke() method\n\t\tand close() is not supposed to return exceptions, we may want to\n\t\tmove this to be something done on open() instead of on close().\n\t\tOtherwise, we have to do try/catch/THROWASSERT in the close code,\n\t\twhich looks unfriendly.\n\t */\n",
    "89827": "\t/**\n\t * Generate a reference to the row array that\n\t * all activations use.\n\t * \n\t * @param eb the expression block\n\t *\n\t * @return expression\n\t */\n",
    "89836": "\t/**\n\t * Take the generated class, and turn it into an\n\t * actual class.\n\t * <p> This method assumes, does not check, that\n\t * the class and its parts are all complete.\n \t *\n\t * @param savedBytes place to save generated bytes.\n\t *\tif null, it is ignored\n\t * @exception StandardException thrown when exception occurs\n\t */\n",
    "89838": "\t/**\n\t * Get a \"this\" expression declared as an Activation.\n\t * This is the commonly used type of the this expression.\n\t *\n\t */\n",
    "89839": "\t/**\n\t\tGenerate a Null data value.\n\t\tNothing is required on the stack, a SQL null data value\n\t\tis pushed.\n\t*/\n",
    "89841": "\t/**\n\t\tGenerate a Null data value.\n\t\tThe express value is required on the stack and will be popped, a SQL null data value\n\t\tis pushed.\n\t*/\n",
    "89842": "\t/**\n\t\tGenerate a data value.\n\t\tThe value is to be set in the SQL data value is required\n\t\ton the stack and will be popped, a SQL data value\n\t\tis pushed.\n\t*/\n",
    "89962": "\t/**\n\t * Returns the current SQL text string that is being parsed.\n\t *\n\t * @return\tCurrent SQL text string.\n\t *\n\t */\n",
    "90128": "\t/**\n\t  *\tGet the NodeFactory for this context\n\t  *\n\t  *\t@return\tThe NodeFactory for this context.\n\t  */\n",
    "90195": "\t/**\n\t\tAdd a compile time warning.\n\t*/\n",
    "90197": "\t/**\n\t\tGet the chain of compile time warnings.\n\t*/\n",
    "90348": "\t/**\n\t\tCheck the reliability type of this java value.\n\n\t    @exception StandardException\t\tThrown on error\n\n\t\t@see org.apache.derby.iapi.sql.compile.CompilerContext\n\t*/\n",
    "90419": "\t/**\n\t\tSet the activation for a single execution.\n\n\t\t@see Activation#setSingleExecution\n\t*/\n",
    "90420": "\t/**\n\t\tIs the activation set up for a single execution.\n\n\t\t@see Activation#isSingleExecution\n\t*/\n",
    "90422": "\t/**\n\t\tGet the number of subqueries in the entire query.\n\t\t@return int\t The number of subqueries in the entire query.\n\t */\n",
    "90466": "\t/**\n\t * Gets information from its source. We might want\n\t * to have this take a CursorResultSet in its constructor some day,\n\t * instead of doing a cast here?\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return the row location of the current cursor row.\n\t * @exception StandardException thrown on failure.\n\t */\n",
    "90528": "\t/**\n     * open a scan on the table. scan parameters are evaluated\n     * at each open, so there is probably some way of altering\n     * their values...\n\t *\n\t * @exception StandardException thrown on failure to open\n     */\n",
    "90536": "\t/**\n\t * This result set has its row location from\n\t * the last fetch done. If it is closed,\n\t * a null is returned.\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return the row location of the current row.\n\t * @exception StandardException thrown on failure to get row location\n\t */\n",
    "90671": "\t/**\n\t * Gets information from its source. We might want\n\t * to have this take a CursorResultSet in its constructor some day,\n\t * instead of doing a cast here?\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return the row location of the current cursor row.\n\t * @exception StandardException thrown on failure.\n\t */\n",
    "90739": "\t/**\n\t * A join is combining rows from two sources, so it has no\n\t * single row location to return; just return a null.\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return the row location of the current cursor row.\n\t */\n",
    "90740": "\t/**\n\t * A join is combining rows from two sources, so it \n\t * should never be used in a positioned update or delete.\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return a null value.\n\t */\n",
    "90770": "\t/**\n\t\tReport if closed.\n\t */\n",
    "90774": "\t/**\n     * Returns the description of the table's rows\n\t */\n",
    "90797": "    /**\n\t  *\tReports whether these constants are up-to-date. This returns true\n\t  *\tfor homogenous Cloudscape/Cloudsync. For the Plugin, this may\n\t  *\treturn false;\n\t  *\n\t  *\t@return\ttrue if these constants are up-to-date\n\t  *\t\t\tfalse otherwise\n\t  */\n",
    "90915": "\t/**\n     * Returns the description of the table's rows\n\t */\n",
    "90917": "\t/**\n\t\tReturn my cursor name for JDBC. Can be null.\n\t*/\n",
    "90924": "\t/**\n\t * This is not operating against a stored table,\n\t * so it has no row location to report.\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return a null.\n\t */\n",
    "90928": "\t/**\n\t * This is not used in positioned update and delete,\n\t * so just return a null.\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return a null.\n\t */\n",
    "90977": "\t/**\n\t * reopen this ResultSet.\n\t *\n\t * @exception StandardException thrown if cursor finished.\n\t */\n",
    "90994": "\t/**\n\t\tJust report that it is always closed.\n\t\tRESOLVE: if we don't report that we are closed,\n\t\tthen we will wind up with a dependency problem when\n\t\twe send an invalidateFor on our own Statement.  It\n\t\twill call lcc.verifyNoOpenResultSets(), which is really\n\t\tsupposed to be verify that there are no read only\n\t\tresult sets that are open.\n\t */\n",
    "91015": "\t/**\n\t\tReturn the cursor name, null in this case.\n\n\t\t@see ResultSet#getCursorName\n\t*/\n",
    "91061": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91066": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91071": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91074": "\t/**\n\t * Get the objects to be displayed when this tree object is expanded.\n\t * <P>\n\t * The objects returned can be of any type, including addtional Inspectables.\n   *\n\t * @return java.util.Vector\tA vector of objects.\n\t */\n",
    "91076": "\t/**\n   * Return the time for all operations performed by this node, and the children\n   * of this node.  The times included open, next, and close.\n\t *\n\t */\n",
    "91077": "\t/**\n   * Return the time for all operations performed by the children of this node.\n\t *\n\t */\n",
    "91080": "\t/**\n   * Return the time for all operations performed by this node, but not the\n   * time for the children of this node.\n\t *\n\t */\n",
    "91088": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91097": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91104": "\t/**\n\t * Get the objects to be displayed when this tree object is expanded.\n\t * <P>\n\t * The objects returned can be of any type, including addtional Inspectables.\n   *\n\t * @return java.util.Vector\tA vector of objects.\n\t */\n",
    "91112": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91121": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91130": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91133": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91141": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91142": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91149": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91150": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91157": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91158": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91159": "\t\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91166": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91175": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91178": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91182": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91187": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91188": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91193": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91202": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91208": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91244": "\t/**\n\t * Get the objects to be displayed when this tree object is expanded.\n\t * <P>\n\t * The objects returned can be of any type, including addtional Inspectables.\n   *\n\t * @return java.util.Vector\tA vector of objects.\n\t */\n",
    "91279": "\t/**\n     * Returns the description of the first source.\n     * Assumes the compiler ensured both sources\n     * had the same description.\n\t */\n",
    "91286": "\t/**\n\t\tA union has a single underlying row at a time, although\n\t\tfrom one of several sources.\n\t\n\t\t@see CursorResultSet\n\t \n\t\t@return the row location of the current cursor row.\n\t\t@exception StandardException thrown on failure\n\t */\n",
    "91292": "\t/**\n\t\tThis is called prior to each execution of the statement, to\n\t\tensure that it starts over with a new current datetime value.\n\t */\n",
    "91330": "\t/**\n\t * Mark the ResultSet as the topmost one in the ResultSet tree.\n\t * Useful for closing down the ResultSet on an error.\n\t *\n\t * @return Nothing.\n\t */\n",
    "91411": "\t/**\n     * If open and not returned yet, returns the row\n     * after plugging the parameters into the expressions.\n\t *\n\t * @exception StandardException thrown on failure.\n     */\n",
    "91490": "\t/**\n\t  *\tGet the name of the table that these column live in.\n\t  *\n\t  *\t@return\treferenced table name\n\t  */\n",
    "91491": "\t/**\n\t  *\tGet the referential Action for an Update.\n\t  *\n\t  *\t@return\treferential Action for update\n\t  */\n",
    "91493": "\t/**\n\t  *\tGet the referential Action for a Delete.\n\t  *\n\t  *\t@return\treferential Action Delete rule\n\t  */\n",
    "91567": "\t/**\n\t\tA generated class can create its own closeActivationAction\n\t\tmethod to invoke special logic when the activation is closed.\n\t*/\n",
    "91570": "\t/**\n\t\tFind out if the activation closed or not.\n\t\t@return true if the prepared statement has been closed.\n\t */\n",
    "91573": "\t/**\n\t\tSet this Activation for a single execution.\n\n\t\t@see Activation#setSingleExecution\n\t*/\n",
    "91576": "\t/**\n\t\tReturns true if this Activation is only going to be used for\n\t\tone execution.\n\n\t\t@see Activation#isSingleExecution\n\t*/\n",
    "91579": "\t/**\n\t\tGet the number of subqueries in the entire query.\n\t\t@return int\t The number of subqueries in the entire query.\n\t */\n",
    "91621": "\t/**\n\t  get the cursor name.  For something that isn't\n\t  a cursor, this is used as a string name of the\n\t  result set for messages from things like the\n\t  dependency manager.\n\t  <p>\n\t  Activations that do support cursors will override\n\t  this.\t\n\t*/\n",
    "91632": "\t/**\n\t\tUsed in the execute method of activations for\n\t\tgenerating the result sets that they concatenate together.\n\t */\n",
    "91636": "\t/**\n\t\tUsed in activations for generating rows.\n\t */\n",
    "91638": "\t/**\n\t\tUsed in CurrentOfResultSet to get to the target result set\n\t\tfor a cursor. Overridden by activations generated for\n\t\tupdatable cursors.  Those activations capture the target\n\t\tresult set in a field in their execute() method, and then\n\t\treturn the value of that field in their version of this method.\n\n\t\t@return null.\n\t */\n",
    "91642": "\t/**\n\t\tUsed in CurrentOfResultSet to get to the cursor result set\n\t\tfor a cursor.  Overridden by activations generated for\n\t\tupdatable cursors.  Those activations capture the cursor\n\t\tresult set in a field in their execute() method, and then\n\t\treturn the value of that field in their version of this method.\n\n\t\t@return null\n\t */\n",
    "91643": "\t/**\n\t\tVarious activation methods need to disallow their\n\t\tinvocation if the activation is closed. This lets them\n\t\tcheck and throw without generating alot of code.\n\t\t<p>\n\t\tThe code to write to generate the call to this is approximately:\n\t\t<verbatim>\n\t\t\t// jf is a JavaFactory\n\t\t\tCallableExpression ce = jf.newMethodCall(\n\t\t\t\tjf.thisExpression(),\n\t\t\t\tBaseActivation.CLASS_NAME,\n\t\t\t\t\"throwIfClosed\",\n\t\t\t\t\"void\",\n\t\t\t\tacb.exprArray(jf.newStringLiteral(...some literal here...)));\n\n\t\t\t//mb is a MethodBuilder\n\t\t\tmb.addStatement(jf.newStatement(ce));\n\t\t</verbatim>\n\t\tThe java code to write to call this is:\n\t\t<verbatim>\n\t\t\tthis.throwIfClosed(...some literal here...);\n\t\t</verbatim>\n\t\tIn both cases, \"...some literal here...\" gets replaced with\n\t\tan expression of type String that evaluates to the name\n\t\tof the operation that is being checked, like \"execute\" or\n\t\t\"reset\".\n\n\t\t@exception StandardException thrown if closed\n\t */\n",
    "91735": "\t/**\n\t * reopen this ResultSet.\n\t *\n\t * @exception StandardException thrown if cursor finished.\n\t */\n",
    "91741": "\t/**\n\t * Return the RowLocation of the base row.\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return the row location of the current cursor row.\n\t * @exception StandardException thrown on failure.\n\t */\n",
    "91760": "\t/**\n\t * Used to get a proxy for the current connection.\n\t *\n\t * @exception SQLException\t\tThrown on failure to get connection\n\t */\n",
    "91763": "\t/**\n\t\tReal implementations of this method are provided by a generated class.\n\t*/\n",
    "91880": "\t/**\n\t\tCheck that all of the dependent's dependencies are valid.\n\n\t\t@return true if the dependent is currently valid\n\t */\n",
    "91942": "\t/**\n\t * the update mode of the cursor\n\t *\n\t * @return\tThe update mode of the cursor\n\t */\n",
    "91988": "    /**\n     * A driver may convert the JDBC sql grammar into its system's\n     * native SQL grammar prior to sending it; nativeSQL returns the\n     * native form of the statement that the driver would have sent.\n     *\n     * @param sql a SQL statement that may contain one or more '?'\n     * parameter placeholders\n     * @return the native form of this statement\n     */\n",
    "91992": "    /**\n     * If a connection is in auto-commit mode, then all its SQL\n     * statements will be executed and committed as individual\n     * transactions.  Otherwise, its SQL statements are grouped into\n     * transactions that are terminated by either commit() or\n     * rollback().  By default, new connections are in auto-commit\n     * mode.\n     *\n     * The commit occurs when the statement completes or the next\n     * execute occurs, whichever comes first. In the case of\n     * statements returning a ResultSet, the statement completes when\n     * the last row of the ResultSet has been retrieved or the\n     * ResultSet has been closed. In advanced cases, a single\n     * statement may return multiple results as well as output\n     * parameter values. Here the commit occurs when all results and\n     * output param values have been retrieved.\n     *\n     * @param autoCommit true enables auto-commit; false disables\n     * auto-commit.  \n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "91995": "    /**\n     * Get the current auto-commit state.\n     *\n     * @return Current state of auto-commit mode.\n     * @see #setAutoCommit \n     */\n",
    "91998": "    /**\n     * Commit makes all changes made since the previous\n     * commit/rollback permanent and releases any database locks\n     * currently held by the Connection. This method should only be\n     * used when auto commit has been disabled.\n     *\n     * @exception SQLException if a database-access error occurs.\n     * @see #setAutoCommit \n     */\n",
    "92002": "    /**\n     * Rollback drops all changes made since the previous\n     * commit/rollback and releases any database locks currently held\n     * by the Connection. This method should only be used when auto\n     * commit has been disabled.\n     *\n     * @exception SQLException if a database-access error occurs.\n     * @see #setAutoCommit \n     */\n",
    "92005": "    /**\n     * In some cases, it is desirable to immediately release a\n     * Connection's database and JDBC resources instead of waiting for\n     * them to be automatically released; the close method provides this\n     * immediate release. \n     *\n     * <P><B>Note:</B> A Connection is automatically closed when it is\n     * garbage collected. Certain fatal errors also result in a closed\n     * Connection.\n     *\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "92011": "    /**\n     * A Connection's database is able to provide information\n     * describing its tables, its supported SQL grammar, its stored\n     * procedures, the capabilities of this connection, etc. This\n     * information is made available through a DatabaseMetaData\n     * object.\n     *\n     * @return a DatabaseMetaData object for this Connection \n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "92016": "    /**\n     * A sub-space of this Connection's database may be selected by setting a\n     * catalog name. If the driver does not support catalogs it will\n     * silently ignore this request.\n     *\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "92020": "    /**\n     * Return the Connection's current catalog name.\n     *\n     * @return the current catalog name or null\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "92035": "\t/**\n\t * if auto commit is on, remember that we need to commit\n\t * the current statement.\n\t */\n",
    "92070": "\t/**\n\t\tJDBC states that a Statement is closed when garbage collected.\n\n\t\t@exception Throwable Allows any exception to be thrown during finalize\n\t*/\n",
    "92071": "\t/**\n\t\tAdditional close to close our activation.\n\n\t\t@exception SQLException\tthrown on failure\n\t */\n",
    "92073": "    /**\n     * Set a parameter to SQL NULL.\n     *\n     * <P><B>Note:</B> You must specify the parameter's SQL type.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param sqlType SQL type code defined by java.sql.Types\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92074": "    /**\n     * Set a parameter to a Java boolean value.  According to the JDBC API spec,\n\t * the driver converts this to a SQL BIT value when it sends it to the\n\t * database. But we don't have to do this, since the database engine\n\t * supports a boolean type.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92077": "    /**\n     * Set a parameter to a Java byte value.  The driver converts this\n     * to a SQL TINYINT value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92079": "    /**\n     * Set a parameter to a Java short value.  The driver converts this\n     * to a SQL SMALLINT value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92081": "    /**\n     * Set a parameter to a Java int value.  The driver converts this\n     * to a SQL INTEGER value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92082": "    /**\n     * Set a parameter to a Java long value.  The driver converts this\n     * to a SQL BIGINT value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92084": "    /**\n     * Set a parameter to a Java float value.  The driver converts this\n     * to a SQL FLOAT value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92085": "    /**\n     * Set a parameter to a Java double value.  The driver converts this\n     * to a SQL DOUBLE value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92089": "    /**\n     * Set a parameter to a Java String value.  The driver converts this\n     * to a SQL VARCHAR or LONGVARCHAR value (depending on the arguments\n     * size relative to the driver's limits on VARCHARs) when it sends\n     * it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92091": "\t/**\n\t\tReset the connection before it is returned from a PooledConnection\n\t\tto a new application request (wrapped by a BrokeredConnection).\n\t\tExamples of reset covered here is dropping session temporary tables\n\t\tand reseting IDENTITY_VAL_LOCAL.\n\t\tMost JDBC level reset is handled by calling standard java.sql.Connection\n\t\tmethods from EmbedPooledConnection.\n\t */\n",
    "92092": "    /**\n     * Set a parameter to a Java array of bytes.  The driver converts\n     * this to a SQL VARBINARY or LONGVARBINARY (depending on the\n     * argument's size relative to the driver's limits on VARBINARYs)\n     * when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value \n\t * @exception SQLException thrown on failure.\n     */\n",
    "92093": "    /**\n     * Set a parameter to a java.sql.Date value.  The driver converts this\n     * to a SQL DATE value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92095": "    /**\n     * Set a parameter to a java.sql.Time value.  The driver converts this\n     * to a SQL TIME value when it sends it to the database.\n     *\n     * @param parameterIndex the first parameter is 1, the second is 2, ...\n     * @param x the parameter value\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92110": "    /**\n     * <P>In general, parameter values remain in force for repeated use of a\n     * Statement. Setting a parameter value automatically clears its\n     * previous value.  However, in some cases it is useful to immediately\n     * release the resources used by the current parameter values; this can\n     * be done by calling clearParameters.\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92129": "    /**\n     * What's the number of columns in the ResultSet?\n     *\n     * @return the number\n     */\n",
    "92130": "    /**\n     * Is the column automatically numbered, thus read-only?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if so\n\t * @exception SQLException thrown on failure\n     *\n     */\n",
    "92132": "    /**\n     * Does a column's case matter?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if so\n\t * @exception SQLException thrown on failure\n     */\n",
    "92133": "    /**\n     * Can the column be used in a where clause?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if so\n\t * @exception SQLException thrown on failure\n     */\n",
    "92134": "    /**\n     * Is the column a cash value?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if so\n\t * @exception SQLException thrown on failure\n     */\n",
    "92135": "    /**\n     * Can you put a NULL in this column?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return columnNoNulls, columnNullable or columnNullableUnknown\n\t * @exception SQLException thrown on failure\n     */\n",
    "92136": "    /**\n     * Is the column a signed number?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if so\n\t * @exception SQLException thrown on failure\n     */\n",
    "92138": "    /**\n     * What's the column's normal max width in chars?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return max width\n\t * @exception SQLException thrown on failure\n     */\n",
    "92139": "    /**\n     * What's the suggested column title for use in printouts and\n     * displays?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if so\n\t * @exception SQLException thrown on failure\n     */\n",
    "92140": "    /**\n     * What's a column's name?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return column name\n\t * @exception SQLException thrown on failure\n     */\n",
    "92141": "    /**\n     * What's a column's table's schema?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return schema name or \"\" if not applicable\n\t * @exception SQLException thrown on failure\n     */\n",
    "92142": "    /**\n     * What's a column's number of decimal digits?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return precision\n\t * @exception SQLException thrown on failure\n     */\n",
    "92144": "    /**\n     * What's a column's number of digits to right of the decimal point?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return scale\n\t * @exception SQLException thrown on failure\n     */\n",
    "92145": "    /**\n     * What's a column's table name?\n     *\n     * @return table name or \"\" if not applicable\n\t * @exception SQLException thrown on failure\n     */\n",
    "92146": "    /**\n     * What's a column's table's catalog name?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return column name or \"\" if not applicable.\n\t * @exception SQLException thrown on failure\n     */\n",
    "92147": "    /**\n     * What's a column's SQL type?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return SQL type\n     * @see Types\n\t * @exception SQLException thrown on failure\n     */\n",
    "92149": "\t/**\n\t\tOverride Throwable's toString() to avoid the class name\n\t\tappearing in the message. \n\t*/\n",
    "92150": "    /**\n     * What's a column's data source specific type name?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return type name\n\t * @exception SQLException thrown on failure\n     */\n",
    "92153": "    /**\n     * Is a column definitely not writable?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if so\n\t * @exception SQLException thrown on failure\n     */\n",
    "92157": "    /**\n     * Is it possible for a write on the column to succeed?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if so\n\t * @exception SQLException thrown on failure\n     */\n",
    "92160": "    /**\n     * Will a write on the column definitely succeed?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if so\n\t * @exception SQLException thrown on failure\n     */\n",
    "92175": "\t/**\n\t\tJDBC states that a ResultSet is closed when garbage collected.\n\t\tWe simply mark the activation as unused. Some later use\n\t\tof the connection will clean everything up.\n\n\t\t@exception Throwable Allows any exception to be thrown during finalize\n\t*/\n",
    "92184": "    /**\n     * The maxFieldSize limit (in bytes) is the maximum amount of data\n     * returned for any column value; it only applies to BINARY,\n     * VARBINARY, LONGVARBINARY, CHAR, VARCHAR, and LONGVARCHAR\n     * columns.  If the limit is exceeded, the excess data is silently\n     * discarded.\n     *\n     * @return the current max column size limit; zero means unlimited\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92192": "    /**\n     * If escape scanning is on (the default) the driver will do\n     * escape substitution before sending the SQL to the database.\n     *\n     * @param enable true to enable; false to disable\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92193": "    /**\n     * The queryTimeout limit is the number of seconds the driver will\n     * wait for a Statement to execute. If the limit is exceeded a\n     * SQLException is thrown.\n     *\n     * @return the current query timeout limit in seconds; zero means unlimited\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92195": "    /**\n     * The queryTimeout limit is the number of seconds the driver will\n     * wait for a Statement to execute. If the limit is exceeded a\n     * SQLException is thrown.\n     *\n     * @param seconds the new query timeout limit in seconds; zero means unlimited\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92196": "    /**\n     * Cancel can be used by one thread to cancel a statement that\n     * is being executed by another thread.\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92198": "    /**\n     * The first warning reported by calls on this Statement is\n     * returned.  A Statment's execute methods clear its SQLWarning\n     * chain. Subsequent Statement warnings will be chained to this\n     * SQLWarning.\n     *\n     * <p>The warning chain is automatically cleared each time\n     * a statement is (re)executed.\n     *\n     * <P><B>Note:</B> If you are processing a ResultSet then any\n     * warnings associated with ResultSet reads will be chained on the\n     * ResultSet object.\n     *\n     * @return the first SQLWarning or null\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92199": "    /**\n     * After this call getWarnings returns null until a new warning is\n     * reported for this Statement.\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92202": "    /**\n     * setCursorName defines the SQL cursor name that will be used by\n     * subsequent Statement execute methods. This name can then be\n     * used in SQL positioned update/delete statements to identify the\n     * current row in the ResultSet generated by this statement.  If\n     * the database doesn't support positioned update/delete, this\n     * method is a noop.\n     *\n     * <P><B>Note:</B> By definition, positioned update/delete\n     * execution must be done by a different Statement than the one\n     * which generated the ResultSet being used for positioning. Also,\n     * cursor names must be unique within a Connection.\n     *\n     * @param name the new cursor name.\n     */\n",
    "92207": "    /**\n     * The number, types and properties of a ResultSet's columns\n     * are provided by the getMetaData method.\n     *\n     * @return the description of a ResultSet's columns\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92226": "\t/**\n\t\tExecute a single element of the batch. Overridden by EmbedPreparedStatement\n\t*/\n",
    "92241": "\t/**\n\t\tTransfer my batch of Statements to a newly created Statement.\n\t*/\n",
    "92266": "\t/**\n\t\tPrint the stack trace of the wrapped java exception or this\n\t\texception if there is none.\n\n\t\t@see Throwable#printStackTrace\n\t*/\n",
    "92267": "\t/**\n\t\tPrint the stack trace of the wrapped java exception or this\n\t\texception if there is none.\n\n\t\t@see Throwable#printStackTrace\n\t*/\n",
    "92268": "\t/**\n\t\tPrint the stack trace of the wrapped java exception or this\n\t\texception if there is none.\n\n\t\t@see Throwable#printStackTrace\n\t*/\n",
    "92269": "\t/**\n\t\tOverride Throwables toString() to avoid the class name\n\t\tappearing in the message.\n\t*/\n",
    "92277": "\t/**\n\t * Returns a property if it was set at the database or\n\t * system level. Treated as SERVICE property by default.\n\t *\n\t * @return a property string value.\n\t **/\n",
    "92286": "\t/**\n\t *  Check if we should activate this authentication service.\n\t */\n",
    "92289": "\t/**\n\t *  Check if we should activate the JNDI authentication service.\n\t */\n",
    "92299": "\t/**\n\t * Construct the initial JNDI directory context environment Properties\n\t * object. We retrieve JNDI environment properties that the user may\n\t * have set at the database level.\n\t *\n\t **/\n",
    "92300": "\t/**\n\t *  Check if we should activate this authentication service.\n\t */\n",
    "92303": "\t/**\n\t\tRead from the wrapped stream prepending the intial bytes if needed.\n\t*/\n",
    "92305": "\t/**\n\t\tRead from the wrapped stream prepending the intial bytes if needed.\n\t*/\n",
    "92353": "    /**\n     * Can all the procedures returned by getProcedures be called by the\n     * current user?\n     *\n     * @return true if so\n     */\n",
    "92356": "    /**\n     * Can all the tables returned by getTable be SELECTed by the\n     * current user?\n     *\n     * @return true if so\n     */\n",
    "92359": "    /**\n     * What's our user name as known to the database?\n     *\n     * @return our database user name\n     */\n",
    "92360": "    /**\n     * Is the database in read-only mode?\n     *\n     * @return true if so\n     */\n",
    "92364": "    /**\n     * Are NULL values sorted high?\n     *\n     * @return true if so\n     */\n",
    "92365": "    /**\n     * Are NULL values sorted low?\n     *\n     * @return true if so\n     */\n",
    "92367": "    /**\n     * Are NULL values sorted at the start regardless of sort order?\n     *\n     * @return true if so\n     */\n",
    "92369": "    /**\n     * Are NULL values sorted at the end regardless of sort order?\n     *\n     * @return true if so\n     */\n",
    "92372": "    /**\n     * What's the name of this database product?\n     *\n     * @return database product name\n     */\n",
    "92374": "    /**\n     * What's the version of this database product?\n     *\n     * @return database version\n     */\n",
    "92376": "    /**\n     * What's the name of this JDBC driver?\n     *\n     * @return JDBC driver name\n     */\n",
    "92380": "    /**\n     * What's the version of this JDBC driver?\n     *\n     * @return JDBC driver version\n     */\n",
    "92381": "    /**\n     * What's this JDBC driver's major version number?\n     *\n     * @return JDBC driver major version\n     */\n",
    "92383": "    /**\n     * What's this JDBC driver's minor version number?\n     *\n     * @return JDBC driver minor version number\n     */\n",
    "92386": "    /**\n     * Does the database store tables in a local file?\n     *\n     * @return true if so\n     */\n",
    "92388": "    /**\n     * Does the database use a file for each table?\n     *\n     * @return true if the database uses a local file for each table\n     */\n",
    "92390": "    /**\n     * Does the database treat mixed case unquoted SQL identifiers as\n     * case sensitive and as a result store them in mixed case?\n     *\n     * A JDBC-Compliant driver will always return false.\n     *\n     * @return true if so\n     */\n",
    "92392": "    /**\n     * Does the database treat mixed case unquoted SQL identifiers as\n     * case insensitive and store them in upper case?\n     *\n     * @return true if so\n     */\n",
    "92395": "    /**\n     * Does the database treat mixed case unquoted SQL identifiers as\n     * case insensitive and store them in lower case?\n     *\n     * @return true if so\n     */\n",
    "92397": "    /**\n     * Does the database treat mixed case unquoted SQL identifiers as\n     * case insensitive and store them in mixed case?\n     *\n     * @return true if so\n     */\n",
    "92400": "    /**\n     * Does the database treat mixed case quoted SQL identifiers as\n     * case sensitive and as a result store them in mixed case?\n     *\n     * A JDBC-Compliant driver will always return true.\n     *\n     * @return true if so\n     */\n",
    "92402": "    /**\n     * Does the database treat mixed case quoted SQL identifiers as\n     * case insensitive and store them in upper case?\n     *\n     * @return true if so\n     */\n",
    "92404": "    /**\n     * Does the database treat mixed case quoted SQL identifiers as\n     * case insensitive and store them in lower case?\n     *\n     * @return true if so\n     */\n",
    "92405": "    /**\n     * Does the database treat mixed case quoted SQL identifiers as\n     * case insensitive and store them in mixed case?\n     *\n     * @return true if so\n     */\n",
    "92409": "    /**\n     * What's the string used to quote SQL identifiers?\n     * This returns a space \" \" if identifier quoting isn't supported.\n     *\n     * A JDBC-Compliant driver always uses a double quote character.\n     *\n     * @return the quoting string\n     */\n",
    "92411": "    /**\n     * Get a comma separated list of all a database's SQL keywords\n     * that are NOT also SQL92 keywords.\n\tincludes reserved and non-reserved keywords.\n\n     * @return the list\n     */\n",
    "92412": "    /**\n     * Get a comma separated list of math functions.\n\tgetNumericFunctions lists \"math functions\" -- so built-in operators and\n\tthings like EXTRACT are not included.\n\tFIXME: find a way to reference method aliases known to be \"numeric\"\n    *\n     * @return the list\n     */\n",
    "92415": "    /**\n     * Get a comma separated list of string functions.\n\t\tREMIND, when they show up, something like this might appear here:\n\t\tFIXME: find a way to reference method aliases known to be \"string\"\n     * @return the list\n     */\n",
    "92418": "    /**\n     * Get a comma separated list of system functions.\n\t\tFIXME: find a way to reference system functions on Database when/if\n\t\tthey are registered as aliases or include the Database object too.\n     * @return the list\n     */\n",
    "92420": "    /**\n     * Get a comma separated list of time and date functions.\n\t\tnot sure if this includes these built-ins or not, but here they are.\n\t\tFIXME: find a way to reference method aliases known to be \"date/time\"\n     * @return the list\n     */\n",
    "92422": "    /**\n     * This is the string that can be used to escape '_' or '%' in\n     * the string pattern style catalog search parameters.\n        we have no default escape value, so = is the end of the next line\n     * <P>The '_' character represents any single character.\n     * <P>The '%' character represents any sequence of zero or\n     * more characters.\n     * @return the string used to escape wildcard characters\n     */\n",
    "92425": "    /**\n     * Get all the \"extra\" characters that can be used in unquoted\n     * identifier names (those beyond a-z, A-Z, 0-9 and _).\n     *\n     * @return the string containing the extra characters\n     */\n",
    "92427": "    /**\n     * Is \"ALTER TABLE\" with add column supported?\n     *\n     * @return true if so\n     */\n",
    "92429": "    /**\n     * Is \"ALTER TABLE\" with drop column supported?\n     *\n     * @return true if so\n     */\n",
    "92432": "    /**\n     * Is column aliasing supported?\n     *\n     * <P>If so, the SQL AS clause can be used to provide names for\n     * computed columns or to provide alias names for columns as\n     * required.\n     *\n     * A JDBC-Compliant driver always returns true.\n     *\n     * @return true if so\n     */\n",
    "92433": "    /**\n     * Are concatenations between NULL and non-NULL values NULL?\n     *\n     * A JDBC-Compliant driver always returns true.\n     *\n     * @return true if so\n     */\n",
    "92437": "    /**\n     * Is the CONVERT function between SQL types supported?\n     *\n     * @return true if so\n     */\n",
    "92440": "    /**\n     * Is CONVERT between the given SQL types supported?\n     *\n     * @param fromType the type to convert from\n     * @param toType the type to convert to\n     * @return true if so\n     * @see Types\n     */\n",
    "92441": "    /**\n     * Are table correlation names supported?\n     *\n     * A JDBC-Compliant driver always returns true.\n     *\n     * @return true if so\n     */\n",
    "92444": "    /**\n     * If table correlation names are supported, are they restricted\n     * to be different from the names of the tables?\n     *\n     * @return true if so\n     */\n",
    "92446": "    /**\n     * Are expressions in \"ORDER BY\" lists supported?\n     *\n     * @return true if so\n     */\n",
    "92448": "    /**\n     * Can an \"ORDER BY\" clause use columns not in the SELECT?\n     *\n     * @return true if so\n     */\n",
    "92450": "    /**\n     * Is some form of \"GROUP BY\" clause supported?\n     *\n     * @return true if so\n     */\n",
    "92454": "    /**\n     * Can a \"GROUP BY\" clause use columns not in the SELECT?\n     *\n     * @return true if so\n     */\n",
    "92456": "    /**\n     * Can a \"GROUP BY\" clause add columns not in the SELECT\n     * provided it specifies all the columns in the SELECT?\n     *\n     * @return true if so\n     */\n",
    "92458": "    /**\n     * Is the escape character in \"LIKE\" clauses supported?\n     *\n     * A JDBC-Compliant driver always returns true.\n     *\n     * @return true if so\n     */\n",
    "92461": "    /**\n     * Are multiple ResultSets from a single execute supported?\n     *\n     * @return true if so\n     */\n",
    "92462": "    /**\n     * Can we have multiple transactions open at once (on different\n     * connections)?\n     *\n     * @return true if so\n     */\n",
    "92465": "    /**\n     * Can columns be defined as non-nullable?\n     *\n     * A JDBC-Compliant driver always returns true.\n     *\n     * @return true if so\n     */\n",
    "92466": "    /**\n     * Is the ODBC Minimum SQL grammar supported?\n     *\n     * All JDBC-Compliant drivers must return true.\n     *\n     * @return true if so\n     */\n",
    "92469": "    /**\n     * Is the ODBC Core SQL grammar supported?\n     *\n     * @return true if so\n     */\n",
    "92473": "    /**\n     * Is the ODBC Extended SQL grammar supported?\n     *\n     * @return true if so\n     */\n",
    "92474": "    /**\n     * Is the ANSI92 entry level SQL grammar supported?\n     *\n     * All JDBC-Compliant drivers must return true.\n     *\n     * @return true if so\n     */\n",
    "92477": "    /**\n     * Is the ANSI92 intermediate SQL grammar supported?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92479": "    /**\n     * Is the ANSI92 full SQL grammar supported?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92481": "    /**\n     * Is the SQL Integrity Enhancement Facility supported?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92483": "    /**\n     * Is some form of outer join supported?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92486": "    /**\n     * Are full nested outer joins supported?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92488": "    /**\n     * Is there limited support for outer joins?  (This will be true\n     * if supportFullOuterJoins is true.)\n     *\n     * @return true if so\n\t * \n     */\n",
    "92491": "    /**\n     * What's the database vendor's preferred term for \"schema\"?\n     *\n     * @return the vendor term\n\t * \n     */\n",
    "92494": "    /**\n     * What's the database vendor's preferred term for \"procedure\"?\n     *\n     * @return the vendor term\n\t * \n     */\n",
    "92495": "    /**\n     * What's the database vendor's preferred term for \"catalog\"?\n     *\n     * @return the vendor term\n\t * \n     */\n",
    "92498": "    /**\n     * Does a catalog appear at the start of a qualified table name?\n     * (Otherwise it appears at the end)\n     *\n     * @return true if it appears at the start\n\t * \n     */\n",
    "92500": "    /**\n     * What's the separator between catalog and table name?\n     *\n     * @return the separator string\n\t * \n     */\n",
    "92502": "    /**\n     * Can a schema name be used in a data manipulation statement?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92505": "    /**\n     * Can a schema name be used in a procedure call statement?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92508": "    /**\n     * Can a schema name be used in a table definition statement?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92510": "    /**\n     * Can a schema name be used in an index definition statement?\n     *\n     * @return true if so\n     */\n",
    "92512": "    /**\n     * Can a schema name be used in a privilege definition statement?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92515": "    /**\n     * Can a catalog name be used in a data manipulation statement?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92517": "    /**\n     * Can a catalog name be used in a procedure call statement?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92519": "    /**\n     * Can a catalog name be used in a table definition statement?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92522": "    /**\n     * Can a catalog name be used in an index definition statement?\n     *\n     * @return true if so\n     */\n",
    "92523": "    /**\n     * Can a catalog name be used in a privilege definition statement?\n     *\n     * @return true if so\n     */\n",
    "92527": "    /**\n     * Is positioned DELETE supported?\n     *\n     * @return true if so\n     */\n",
    "92529": "    /**\n     * Is positioned UPDATE supported?\n     *\n     * @return true if so\n     */\n",
    "92532": "    /**\n     * Is SELECT for UPDATE supported?\n     *\n     * @return true if so\n     */\n",
    "92534": "    /**\n     * Are stored procedure calls using the stored procedure escape\n     * syntax supported?\n     *\n     * @return true if so\n     */\n",
    "92536": "    /**\n     * Are subqueries in comparison expressions supported?\n     *\n     * A JDBC-Compliant driver always returns true.\n     *\n     * @return true if so\n     */\n",
    "92539": "    /**\n     * Are subqueries in 'exists' expressions supported?\n     *\n     * A JDBC-Compliant driver always returns true.\n     *\n     * @return true if so\n     */\n",
    "92540": "    /**\n     * Are subqueries in 'in' statements supported?\n     *\n     * A JDBC-Compliant driver always returns true.\n     *\n     * @return true if so\n     */\n",
    "92547": "    /**\n     * Are correlated subqueries supported?\n     *\n     * A JDBC-Compliant driver always returns true.\n     *\n     * @return true if so\n     */\n",
    "92548": "    /**\n     * Is SQL UNION supported?\n     *\n     * @return true if so\n     */\n",
    "92551": "    /**\n     * Is SQL UNION ALL supported?\n     *\n     * @return true if so\n     */\n",
    "92555": "    /**\n     * Can cursors remain open across rollbacks?\n     *\n     * @return true if cursors always remain open; false if they might not remain open\n     */\n",
    "92558": "    /**\n     * Can statements remain open across commits?\n     *\n     * @return true if statements always remain open; false if they might not remain open\n     */\n",
    "92561": "    /**\n     * Can statements remain open across rollbacks?\n     *\n     * @return true if statements always remain open; false if they might not remain open\n     */\n",
    "92564": "    /**\n     * How many hex characters can you have in an inline binary literal?\n     *\n     * @return max literal length\n     */\n",
    "92565": "    /**\n     * What's the max length for a character literal?\n     *\n     * @return max literal length\n     */\n",
    "92568": "    /**\n     * What's the limit on column name length?\n     *\n     * @return max literal length\n     */\n",
    "92570": "    /**\n     * What's the maximum number of columns in a \"GROUP BY\" clause?\n     *\n     * @return max number of columns\n     */\n",
    "92572": "    /**\n     * What's the maximum number of columns allowed in an index?\n     *\n     * @return max columns\n     */\n",
    "92575": "    /**\n     * What's the maximum number of columns in an \"ORDER BY\" clause?\n     *\n     * @return max columns\n     */\n",
    "92577": "    /**\n     * What's the maximum number of columns in a \"SELECT\" list?\n     *\n     * we don't have a limit...\n     *\n     * @return max columns\n     */\n",
    "92580": "    /**\n     * What's the maximum number of columns in a table?\n     *\n     * @return max columns\n     */\n",
    "92582": "    /**\n     * How many active connections can we have at a time to this database?\n     *\n     * @return max connections\n     */\n",
    "92585": "    /**\n     * What's the maximum cursor name length?\n     *\n     * @return max cursor name length in bytes\n     */\n",
    "92587": "    /**\n     * What's the maximum length of an index (in bytes)?\n     *\n     * @return max index length in bytes\n     */\n",
    "92589": "    /**\n     * What's the maximum length allowed for a schema name?\n     *\n     * @return max name length in bytes\n     */\n",
    "92592": "    /**\n     * What's the maximum length of a procedure name?\n     *\n     * @return max name length in bytes\n     */\n",
    "92593": "    /**\n     * What's the maximum length of a catalog name?\n     *\n     * @return max name length in bytes\n     */\n",
    "92597": "    /**\n     * What's the maximum length of a single row?\n     *\n     * @return max row size in bytes\n     */\n",
    "92600": "    /**\n     * Did getMaxRowSize() include LONGVARCHAR and LONGVARBINARY\n     * blobs?\n     *\n     * @return true if so\n     */\n",
    "92601": "    /**\n     * What's the maximum length of a SQL statement?\n     *\n     * @return max length in bytes\n     */\n",
    "92604": "    /**\n     * How many active statements can we have open at one time to this\n     * database?\n     *\n     * @return the maximum\n     */\n",
    "92606": "    /**\n     * What's the maximum length of a table name?\n     *\n     * @return max name length in bytes\n     */\n",
    "92615": "    /**\n     * What's the maximum number of tables in a SELECT?\n     *\n     * @return the maximum\n     */\n",
    "92622": "    /**\n     * What's the maximum length of a user name?\n     *\n     * @return max name length  in bytes\n     */\n",
    "92630": "    /**\n     * What's the database's default transaction isolation level?  The\n     * values are defined in java.sql.Connection.\n     *\n     * @return the default isolation level\n     * @see Connection\n     */\n",
    "92639": "    /**\n     * Are transactions supported? If not, commit is a noop and the\n     * isolation level is TRANSACTION_NONE.\n     *\n     * @return true if transactions are supported\n     */\n",
    "92656": "    /**\n     * Are both data definition and data manipulation statements\n     * within a transaction supported?\n     *\n     * @return true if so\n     */\n",
    "92668": "    /**\n     * Does a data definition statement within a transaction force the\n     * transaction to commit?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92676": "    /**\n     * Is a data definition statement within a transaction ignored?\n     *\n     * @return true if so\n\t * \n     */\n",
    "92771": "    /**\n     * Get the schema names available in this database.  The results\n     * are ordered by schema name.\n     *\n     * <P>The schema column is:\n     *  <OL>\n     *\t<LI><B>TABLE_SCHEM</B> String => schema name\n     *  </OL>\n     *\n     * @return ResultSet - each row has a single String column that is a\n     * schema name\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92775": "    /**\n     * Get the catalog names available in this database.  The results\n     * are ordered by catalog name.\n     *\n     * <P>The catalog column is:\n     *  <OL>\n     *\t<LI><B>TABLE_CAT</B> String => catalog name\n     *  </OL>\n     *\n     * @return ResultSet - each row has a single String column that is a\n     * catalog name\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92779": "    /**\n     * Get the table types available in this database.  The results\n     * are ordered by table type.\n     *\n     * <P>The table type is:\n     *  <OL>\n     *\t<LI><B>TABLE_TYPE</B> String => table type.  Typical types are \"TABLE\",\n     *\t\t\t\"VIEW\",\t\"SYSTEM TABLE\", \"GLOBAL TEMPORARY\",\n     *\t\t\t\"LOCAL TEMPORARY\", \"ALIAS\", \"SYNONYM\".\n     *  </OL>\n     *\n     * @return ResultSet - each row has a single String column that is a\n     * table type\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92850": "    /**\n     * Get a description of all the standard SQL types supported by\n     * this database. They are ordered by DATA_TYPE and then by how\n     * closely the data type maps to the corresponding JDBC SQL type.\n     *\n     * <P>Each type description has the following columns:\n     *  <OL>\n     *\t<LI><B>TYPE_NAME</B> String => Type name\n     *\t<LI><B>DATA_TYPE</B> short => SQL data type from java.sql.Types\n     *\t<LI><B>PRECISION</B> int => maximum precision\n     *\t<LI><B>LITERAL_PREFIX</B> String => prefix used to quote a literal\n     *      (may be null)\n     *\t<LI><B>LITERAL_SUFFIX</B> String => suffix used to quote a literal\n            (may be null)\n     *\t<LI><B>CREATE_PARAMS</B> String => parameters used in creating\n     *      the type (may be null)\n     *\t<LI><B>NULLABLE</B> short => can you use NULL for this type?\n     *      <UL>\n     *      <LI> typeNoNulls - does not allow NULL values\n     *      <LI> typeNullable - allows NULL values\n     *      <LI> typeNullableUnknown - nullability unknown\n     *      </UL>\n     *\t<LI><B>CASE_SENSITIVE</B> boolean=> is it case sensitive?\n     *\t<LI><B>SEARCHABLE</B> short => can you use \"WHERE\" based on this type:\n     *      <UL>\n     *      <LI> typePredNone - No support\n     *      <LI> typePredChar - Only supported with WHERE .. LIKE\n     *      <LI> typePredBasic - Supported except for WHERE .. LIKE\n     *      <LI> typeSearchable - Supported for all WHERE ..\n     *      </UL>\n     *\t<LI><B>UNSIGNED_ATTRIBUTE</B> boolean => is it unsigned?\n     *\t<LI><B>FIXED_PREC_SCALE</B> boolean => can it be a money value?\n     *\t<LI><B>AUTO_INCREMENT</B> boolean => can it be used for an\n     *      auto-increment value?\n     *\t<LI><B>LOCAL_TYPE_NAME</B> String => localized version of type name\n     *      (may be null)\n     *\t<LI><B>MINIMUM_SCALE</B> short => minimum scale supported\n     *\t<LI><B>MAXIMUM_SCALE</B> short => maximum scale supported\n     *\t<LI><B>SQL_DATA_TYPE</B> int => unused\n     *\t<LI><B>SQL_DATETIME_SUB</B> int => unused\n     *\t<LI><B>NUM_PREC_RADIX</B> int => usually 2 or 10\n     *  </OL>\n     *\n     * @return ResultSet - each row is a SQL type description\n\t * @exception SQLException thrown on failure.\n     */\n",
    "92854": "\t/**\n\t * Get a description of all the standard SQL types supported by\n\t * this database. They are ordered by DATA_TYPE and then by how\n\t * closely the data type maps to the corresponding JDBC SQL type.\n\t * Same as getTypeInfo above, except that the result set will\n\t * conform to ODBC specifications.\n\t */\n",
    "92859": "\t/**\n\t\tReset the cache statistics for the specified cache\n\t*/\n",
    "93292": "\t/**\n\tStore the stored representation of the column value in the stream.\n\tIt might be easier to simply store the properties - which would certainly\n\tmake upgrading easier.*/\n",
    "93320": "\t/** Get the id of the column to be qualified. **/\n",
    "93321": "\t/**\n\t * Get the value that the column is to be compared to.\n\t *\n\t * @exception StandardException\t\tThrown on error\n\t */\n",
    "93322": "\t/** Get the operator to use in the comparison. \n     *\n     *  @see DataValueDescriptor#compare\n     **/\n",
    "93324": "\t/** \n     *  Determine if the result from the compare operation is to be negated.  \n     *  <p>\n     *  If true then only rows which fail the compare operation will qualify.\n     *\n     *  @see DataValueDescriptor#compare\n     **/\n",
    "93326": "\t/** Get the getOrderedNulls argument to use in the comparison.\n     *  \n     *  @see DataValueDescriptor#compare\n     **/\n",
    "93543": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "93631": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "93688": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "93711": "\t/**\n\t\tThese following methods are only intended to be called by an\n\t\timplementation of a log factory. All other uses of this object should\n\t\tonly see it as a log instant.\n\t*/\n",
    "93715": "\t/**\n\t * Read this in.\n\t * @exception IOException error reading from log stream\n\t * @exception ClassNotFoundException corrupted log stream\n\t */\n",
    "93716": "\t/**\n\t * Write this out.\n\t * @exception IOException error writing to log stream\n\t */\n",
    "93733": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "93746": "\t/**\n\t\tGet my record id.\n\n\t\t<BR>\n\t\tMT - thread safe\n\n\t\t@see RecordHandle#getId\n\t*/\n",
    "93753": "\t/**\n\t\tIs a caller that holds a lock compatible with themselves?\n        <p>\n        Row locks held in the same transaction are always compatible with\n        themselves.\n\n\t\t<BR>\n\t\tMT - Single thread required (methods of Lockable)\n\n\t\t@see org.apache.derby.iapi.services.locks.Lockable#lockerAlwaysCompatible\n\t*/\t \n",
    "93757": "\t/**\n\t\tImplement value equality.\n\t\t<BR>\n\t\tMT - Thread safe\n\t*/\n",
    "93758": "\t/**\n\t\tReturn a hashcode based on value.\n\t\t<BR>\n\t\tMT - thread safe\n\t*/\n",
    "93764": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "93773": "\t/**\n\t\tremove the stream container\n\n\t\t@exception StandardException Standard Cloudscape error policy\t\t\n\t\t@see StreamContainerHandle#removeContainer\n\t */\n",
    "93774": "\t/**\n\t\tMT- not needed\n\t*/\n",
    "93775": "\t/**\n\t\tget the container key for the stream container\n\t */\n",
    "93777": "\t/**\n\t\tAttach me to a container. If this method returns false then\n\t\tI cannot be used anymore, and any reference to me must be discarded.\n\n\t\t@exception StandardException Standard Cloudscape error policy\n\t*/\n",
    "93788": "\t/**\n\t\tAdd a page to the container, if flag == ContainerHandle.ADD_PAGE_BULK,\n\t\ttell the container about it.\n\n\t\tThe page returned will be observing me.\n\n\t\t@see BaseContainer#addPage\n\t\t@see ContainerHandle#addPage\n\t\t@exception StandardException Standard Cloudscape error policy\n\t*/\n",
    "93879": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "93880": "\t/**\n\t\tReturn the last column of the row this operation logged\n\t*/\n",
    "93931": "\t/**\n\t\tSet container's identity\n\t\t@exception StandardException Standard Cloudscape error policy\n\t*/\n",
    "93950": "\t/**\n\t\tflush the cache to ensure all of my pages are written to disk\n\n\t\t@exception StandardException Standard Cloudscape error policy\n\t*/\n",
    "93980": "\t/**\n\t\tHas the page or its header been modified or about to be modified.\n\t\tSee comment on class header on meaning of isDirty and preDirty bits.\n\n\t\t@see Cacheable#isDirty\n\t*/\n",
    "93981": "\t/**\n\t\tHas the page or its header been modified.\n\t\tSee comment on class header on meaning of isDirty and preDirty bits.\n\t*/\n",
    "93998": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "94007": "\t/**\n\t\tCreate a new container, all references to identity must be through the\n\t\tpassed in identity, this object will no identity until after this method returns.\n\t*/\n",
    "94008": "\t/**\n\t\tRead the page at the positioned offset.\n\t\tThis default implementation, opens the stream and skips to the offset\n\t\tand then reads the data into pageData.\n\t*/\n",
    "94017": "\t/**\n\t  Get an input stream for re-reading the remembered bytes.\n\t  */\n",
    "94018": "\t/**\n\t  Get the byteHolder.\n\t  */\n",
    "94020": "\t/**\n\t  Clear all the remembered bytes. This stream will\n\t  remember any bytes read after this call.\n\t  @exception IOException thrown on an io error clearing backing\n\t             storage.\n\t  */\n",
    "94021": "\t/**\n\t  Set the InputStream from which this reads.\n\n\t  <P>Please note this does not clear remembered\n\t  bytes.\n\t */\n",
    "94022": "\t/**\n\t  Return true iff this RememberBytesInputStream is\n\t  in recording mode.\n\t  */\n",
    "94023": "\t/**\n\t  Return the number of bytes remains in the byteHolder\n\t  for reading, without setting the write/read mode.\n\t  */\n",
    "94025": "\t/**\n\t  remove the remaining bytes in the byteHolder to the beginning\n\t  set the position to start recording just after these bytes.\n\t  returns how many bytes was transfered to the beginning.\n\t  */\n",
    "94059": "\t/**\t\n\t\tOK to hand object outside to cache.. \n\t*/\n",
    "94087": "\t/**\n\t\tUnlatch the page.\n\t\t@see Page#unlatch\n\t*/\n",
    "94104": "\t/**\n\t\tIs another request compatible, no never.\n\t\t<BR> MT - single thread required (methods of Lockable)\n\t\t@see Lockable#requestCompatible\n\t*/\n",
    "94108": "\t/**\n\t\tIs another request compatible, no never.\n\t\t<BR> MT - single thread required (methods of Lockable)\n\t\t@see Lockable#requestCompatible\n\t*/\n",
    "94109": "\t/**\n\t\tUnlatch me, only to be called from lock manager.\n\t\t<BR> MT - single thread required (methods of Lockable)\n\n\t\t@see Lockable#requestCompatible\n\t*/\n",
    "94115": "\t/**\n\t\tGet the Page identifer\n\n\t\t<BR> MT - RESOLVE\n\t*/\n",
    "94118": "\t/**\n\t\tRelease the exclusive latch on the page.\n\t\t<BR>\n\t\tMT - latched\n\t*/\n",
    "94122": "\t/**\n\t\tMark the record at the passed in slot as deleted.\n\n\t\treturn code comes from StoredRecordHeader class:\n\t\t\treturn\t1, if delete status from not deleted to deleted\n\t\t\treturn -1, if delete status from deleted to not deleted\n\t\t\treturn  0, if status unchanged.\n\t\t<BR>\n\t\t<B>Any sub-class must call this method when deleting a record.</B>\n\n\t\t<BR>\n\t\tMT - latched\n\n\t\t@exception StandardException Standard Cloudscape error policy\n\t\t@exception IOException IO error accessing page\n\t*/\n",
    "94129": "\t/**\n\t\tFind the slot for the record with the passed in identifier.\n\n\t\t<BR>\n\t\tThis method returns the record regardless of its deleted status.\n        <BR>\n        The \"slotHint\" argument is a hint about what slot the record id might\n        be in.  Callers may save the last slot where the record was across\n        latch/unlatches to the page, and then pass that slot back as a hint - \n        if the page has not shuffled slots since the last reference then the\n        hint will succeed and a linear search is saved.  If the caller has\n        no idea where it may be, then FIRST_SLOT_NUMBER is passed in and a\n        linear search is performed.\n\t\t<BR>\n\t\tMT - latched\n\n        @param recordId  record id of the record to search for.\n        @param slotHint \"hint\" about which slot the record might be in.\n\t\t\n\t*/\n",
    "94292": "\t/**\n\t\tDiscontinue use of this container. Note that the unlockContainer\n\t\tcall made from this method may not release any locks. The container\n\t\tlock may be held until the end of the transaction.\n\n\t*/\n",
    "94304": "\t/**\n\t\tSet the container's dropped state\n\t*/\n",
    "94311": "\t/**\n\t\tCalled when the transaction is about to complete.\n\n\t\t@see java.util.Observer#update\n\t*/\n",
    "94332": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "94378": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "94475": "\t/**\n\t\tReally this is just a convience routine for callers that might not\n\t\thave access to a log factory.\n\t*/\n",
    "94490": "\t/**\n\t\tGet the root directory of the data storage area. Is always guaranteed to be an absolute path.\n\t*/\n",
    "94511": "\t/**\n\t\tDoes this factory support this service type.\n\t*/\n",
    "94538": "\t/**\n\t\tCalled after recovery is performed.\n\n\t\t@exception StandardException Standard Cloudscape Error Policy\n\t*/\n",
    "94554": "\t/**\n\t\tIs the store read-only.\n\t*/\n",
    "94561": "/**\n * <A NAME=\"methodCallParameterList\">methodCallParameterList</A>\n*/\n",
    "94576": "\t/**\n\t\tThe container is kept by the find() in File.openContainer. \n\t*/\n",
    "94584": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "94614": "\t/**\n\t\tDiscontinue use of this container. Note that the unlockContainer\n\t\tcall made from this method may not release any locks. The container\n\t\tlock may be held until the end of the transaction.\n\n\t*/\n",
    "94616": "\t/**\n\t\tReturns true if only a single handle is connected to this container.\n\t*/\n",
    "94638": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "94656": "\t/**\n\t\tAn equals method that returns true if the other obejct\n\t\tis a sub-class of this, and the container identities\n\t\tare equal *and* it is the same class as this.\n\t\t<BR>\n\t\tThis allows mutiple additions of value equality\n\t\tobejcts to the observer list while only retaining one.\n\t*/\n",
    "94716": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "94725": "\t/**\n\t\tReset the cache statistics for the specified cache\n\t*/\n",
    "94726": "\t/**\n\t\tReturn true if any transaction is currently blocked, even if not by\n\t\tthis transaction.\n\n\t */\n",
    "94746": "\t/**\n\t\tSet my transaction identifier.\n\t*/\n",
    "94813": "\t/**\n\t\tGet the Logger object used to write log records to the transaction log.\n\t*/\n",
    "94898": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "94908": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "94991": "\t/**\n\t\tGet the LockFactory to use with this store.\n\t*/\n",
    "95011": "\t/**\n\t\tReally this is just a convience routine for callers that might not\n\t\thave access to a log factory.\n\t*/\n",
    "95040": "\t/**\n\t\tReturn my format identifier.\n\t*/\n",
    "95048": "\t/**\n\t  We use this RawStore for all databases.\n\t  */\n",
    "95052": "\t/**\n\t\tIs the store read-only.\n\t\t@see RawStoreFactory#isReadOnly\n\t*/\n",
    "95131": "\t/**\n\t\tAll columns in TransactionTable VTI are of String type.\n\t\t@see java.sql.ResultSet#getString\n\t */\n",
    "95455": "    /**\n     * Is the column automatically numbered, and thus read-only?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if the column is automatically numbered\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95457": "    /**\n     * Does a column's case matter?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if the column is case-sensitive\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95458": "    /**\n     * Can the column be used in a WHERE clause?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if the column is searchable\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95459": "    /**\n     * Is the column a cash value?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if the column is a cash value\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95460": "    /**\n     * Can you put a NULL in this column?\t\t\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return columnNoNulls, columnNullable or columnNullableUnknown\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95461": "    /**\n     * Is the column a signed number?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if the column is a signed number\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95463": "    /**\n     * What's the column's normal maximum width in chars?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return the column's maximum width\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95465": "    /**\n     * What's the suggested column title for use in printouts and\n     * displays?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return the column's title\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95466": "    /**\n     * What's a column's name?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return column name\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95467": "    /**\n     * What's a column's table's schema?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return schema name or \"\" if not applicable\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95468": "    /**\n     * How many decimal digits are in the column?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return the column's precision\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95469": "    /**\n     * What's a column's number of digits to the right of the decimal point?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return the column's scale\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95471": "    /**\n     * What's a column's table name? \n     *\n\t * @param column the first column is 1, the second is 2, ...\n     * @return the column's table name or \"\" if not applicable\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95472": "    /**\n     * What's a column's table's catalog name?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return the column's table's catalog name or \"\" if not applicable.\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95473": "    /**\n     * What's a column's data source specific type name?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return the column's type name\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95474": "    /**\n     * Is a column definitely not writable?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true - vti's are read only\n\t *         false - column is not read-only\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95475": "    /**\n     * Is it possible for a write on the column to succeed?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if column is possibly writable\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95476": "    /**\n     * Will a write on the column definitely succeed?\t\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return true if column is definitely writable\n     * @exception SQLException if a database-access error occurs.\n     */\n",
    "95477": "\t/**\n\t * Returns the fully-qualified name of the Java class whose instances\n\t * are manufactured if the method <code>ResultSet.<!-- -->getObject</code>\n\t * is called to retrieve a value from the column. JDBC 2.0.\n\t *\n\t * @exception SQLException if a database-access error occurs\n\t */\n",
    "95612": "\t/**\n\t\tSkip a field header and its data on the given stream.\n\t\t\n\t\t@exception IOException corrupt stream\n\t*/\n",
    "95656": "\t/**\n\t\tIn this case the Listeners are *not* notified. JDBC 3.0 spec section 11.4\n\t*/\n",
    "95659": "\t/**\n\t\tNotify the control class that a SQLException was thrown\n\t\tduring a call on one of the brokered connection's methods.\n\t*/\n",
    "95662": "\t/**\n\t\tAre held cursors allowed.\n\t*/\n",
    "95663": "\t/**\n\t\tAllow control over creating a Savepoint (JDBC 3.0)\n\t*/\n",
    "95665": "\t/**\n\t\tAllow control over calling rollback.\n\t*/\n",
    "95666": "\t/**\n\t\tAllow control over calling commit.\n\t*/\n",
    "95667": "\t/**\n\t\tClose called on BrokeredConnection. If this call\n\t\treturns true then getRealConnection().close() will be called.\n\n\t\tDon't close the underlying real connection as\n\t\tit is pooled.\n\t*/\n",
    "95669": "\t/**\n\t\tNo need to wrap statements for PooledConnections.\n\t*/\n",
    "95670": "\t/**\n\t\tNo need to wrap statements for PooledConnections.\n\t*/\n",
    "95671": "\t/**\n\t\tNo need to wrap statements for PooledConnections.\n\t*/\n",
    "95695": "\t/**\n\t * Gets the maximum time in seconds that this data source can wait while\n\t * attempting to connect to a database. A value of zero means that the\n\t * timeout is the default system timeout if there is one; otherwise it means\n\t * that there is no timeout. When a data source object is created, the login\n\t * timeout is initially zero.\n\t * \n\t * @return the data source login time limit\n\t * @exception SQLException\n\t *                if a database access error occurs.\n\t */\n",
    "95696": "\t/**\n\t * Sets the maximum time in seconds that this data source will wait while\n\t * attempting to connect to a database. A value of zero specifies that the\n\t * timeout is the default system timeout if there is one; otherwise it\n\t * specifies that there is no timeout. When a data source object is created,\n\t * the login timeout is initially zero.\n\t * <P>\n\t * Cloudscape ignores this property.\n\t * \n\t * @param seconds\n\t *            the data source login time limit\n\t * @exception SQLException\n\t *                if a database access error occurs.\n\t */\n",
    "95697": "\t/**\n\t * Get the log writer for this data source.\n\t * \n\t * <p>\n\t * The log writer is a character output stream to which all logging and\n\t * tracing messages for this data source object instance will be printed.\n\t * This includes messages printed by the methods of this object, messages\n\t * printed by methods of other objects manufactured by this object, and so\n\t * on. Messages printed to a data source specific log writer are not printed\n\t * to the log writer associated with the java.sql.Drivermanager class. When\n\t * a data source object is created the log writer is initially null, in\n\t * other words, logging is disabled.\n\t * \n\t * @return the log writer for this data source, null if disabled\n\t * @exception SQLException\n\t *                if a database-access error occurs.\n\t */\n",
    "95698": "\t/**\n\t * Set the log writer for this data source.\n\t * \n\t * <p>\n\t * The log writer is a character output stream to which all logging and\n\t * tracing messages for this data source object instance will be printed.\n\t * This includes messages printed by the methods of this object, messages\n\t * printed by methods of other objects manufactured by this object, and so\n\t * on. Messages printed to a data source specific log writer are not printed\n\t * to the log writer associated with the java.sql.Drivermanager class. When\n\t * a data source object is created the log writer is initially null, in\n\t * other words, logging is disabled.\n\t * \n\t * @param out\n\t *            the new log writer; to disable, set to null\n\t * @exception SQLException\n\t *                if a database-access error occurs.\n\t */\n",
    "95703": "\t/**\n\t\tAccept anything that starts with <CODE>jdbc:derby:</CODE>.\n\t\t@exception SQLException if a database-access error occurs.\n    @see java.sql.Driver\n\t*/\n",
    "95705": "    /**\n     * Returns the driver's major version number. \n     @see java.sql.Driver\n     */\n",
    "95706": "    /**\n     * Returns the driver's minor version number.\n     @see java.sql.Driver\n     */\n",
    "95707": "  /**\n   * Report whether the Driver is a genuine JDBC COMPLIANT (tm) driver.\n     @see java.sql.Driver\n   */\n",
    "95714": "\t/**\n\t\tCan cursors be held across commits.\n\t*/\n",
    "95718": "\t/**\n\t\tAllow control over setting auto commit mode.\n\t*/\n",
    "95720": "\t/**\n\t\tAre held cursors allowed.\n\t*/\n",
    "95723": "\t/**\n\t\tAllow control over creating a Savepoint (JDBC 3.0)\n\t*/\n",
    "95724": "\t/**\n\t\tAllow control over calling rollback.\n\t*/\n",
    "95725": "\t/**\n\t\tAllow control over calling commit.\n\t*/\n",
    "95727": "\t/**\n\t\tWrap and control a Statement\n\t*/\n",
    "95728": "\t/**\n\t\tWrap and control a PreparedStatement\n\t*/\n",
    "95730": "\t/**\n\t\tWrap and control a PreparedStatement\n\t*/\n",
    "95763": "\t/**\n\t\tGet the error code for an error given a type. The value of\n\t\tthe property messageId.type will be returned, e.g.\n\t\tdeadlock.sqlstate.\n\t*/\n",
    "95764": "\t/**\n\t\tDon't print the class name in the toString() method.\n\t*/\n",
    "95796": "\t/**\n\t * Convert the object representation of the class into\n\t * its class file format.\n\t * @exception IOException error writing the class\n\t */\n",
    "95824": "\t/**\n\t\tGeneric add entry to constant pool. Includes the logic\n\t\tfor an entry to occupy more than one slot (e.g. long).\n\n\t\t@return The number of slots occupied by the entry.\n.\n\t*/\n",
    "95825": "\t/**\n\t\tAdd an entry, but only if it doesn't exist.\n\n\t\t@return the constant pool index of the added\n\t\tor existing item.\n\t*/\n",
    "95826": "\t/**\n\t\tAdd an index reference.\n\t*/\n",
    "95827": "\t/**\n\t\tAdd a class entry to the pool.\n\t*/\n",
    "95828": "\t/**\n\t\tAdd a name and type entry\n\t*/\n",
    "95831": "\t/**\n\t\tAdd a UTF8 into the pool and return the index to it.\n\t*/\n",
    "95833": "\t/**\n\t\tAdd an extra UTF8 into the pool \n\t*/\n",
    "95834": "\t/**\n\t\tAdd a string entry\n\t*/\n",
    "95835": "\t/**\n\t\tAdd a string entry\n\t*/\n",
    "95838": "\t/**\n\t\tFind a class descriptor (section 4.4.1) and return its\n\t\tindex, returns -1 if not found.\n\t*/\n",
    "95839": "\t/**\n\t\tFind a name and type descriptor (section 4.4.6) and\n\t\treturn it's index. \n        <p>\n        returns -1 if not found.\n\t*/\n",
    "95850": "\t/**\n\t\tA helper to build a type description based on a Java class\n\t\tand an array arity.\n\n\t\tIf descriptor is true create a descriptor according to\n\t\tsection 4.3.2 of the vm spec. If false create a class name\n\t\taccording to sections 4.3.2 and 4.4.1 of the vm spec.\n\t\n\t */\n",
    "95892": "\t/**\n\t\tCheck to see if we have been interrupted. If we have then\n\t\ta ShutdownException will be thrown. This will be either the\n\t\tone passed to interrupt or a generic one if some outside\n\t\tsource interrupted the thread.\n\t*/\n",
    "95893": "\t/**\n\t\tSet the locale for this context.\n\t*/\n",
    "95906": "\t/**\n\t * Get current Context Manager\n\t * @return ContextManager current Context Manager\n\t */\n",
    "95924": "\t/**\n\t * The DEBUG_PRINT calls provides a convenient way to print debug\n\t * information to the db2j.LOG file,  The message includes a header\n\t *<p>\n\t *\tDEBUG <flag> OUTPUT: \n\t * before the message\n\t *<p>\n\t * If the debugStream stream cannot be found, the message is printed to\n\t * System.out.\n\t *\n\t */\n",
    "95931": "\t/**\n\t\tGet count of bytes written to the stream since the last\n\t\treset() call.\n\t*/\n",
    "95933": "\t/**\n\t\tSet a limit at which an exception will be thrown. This allows callers\n\t\tto count the number of bytes up to some point, without having to complete\n\t\tthe count. E.g. a caller may only want to see if some object will write out\n\t\tover 4096 bytes, without waiting for all 200,000 bytes of the object to be written.\n\t\t<BR>\n\t\tIf the passed in limit is 0 or negative then the stream will count bytes without\n\t\tthrowing an exception.\n\n\t\t@see EOFException\n\t*/\n",
    "95935": "\t/**\n\t\tAdd 1 to the count.\n\n\t\t@see OutputStream#write\n\t*/\n",
    "95937": "\t/**\n\t\tAdd len to the count, discard the data.\n\n\t\t@see OutputStream#write\n\t*/\n",
    "95967": "\t/**\n\t\tSet the array of bytes to be read.\n\t*/\n",
    "95977": "\t/**\n\t\tA setLimit which also sets the position to be offset.\n\n\t\t@exception IOException limit is out of range \n\t*/\n",
    "95982": "\t/**\n\t\tDiscard the data.\n\n\t\t@see OutputStream#write\n\t*/\n",
    "95983": "\t/**\n\t\tDiscard the data.\n\n\t\t@see OutputStream#write\n\t*/\n",
    "95984": "\t/**\n\t\tDiscard the data.\n\n\t\t@see OutputStream#write\n\t*/\n",
    "96002": "\t/**\n\t\tShrink the buffer left by the amount given. Ie.\n\t\tbytes from 0 to amountToShrinkBy are thrown away\n\t*/\n",
    "96022": "\t/**\n\t\tSet the limit of the stream that can be read. After this\n\t\tcall up to and including length bytes can be read from or skipped in\n\t\tthe stream. Any attempt to read more than length bytes will\n\t\tresult in an EOFException\n\n\t\t@return The value of length.\n\t\t@exception IOException IOException from some underlying stream\n\t\t@exception EOFException The set limit would exceed\n\t\tthe available data in the stream.\n\t*/\n",
    "96023": "\t/**\n\t\tClear any limit set by setLimit. After this call no limit checking\n\t\twill be made on any read until a setLimit()) call is made.\n\n\t\t@return the number of bytes within the limit that have not been read.\n\t\t-1 if no limit was set.\n\t*/\n",
    "96038": "\t/**\n\t\tClear the defaults from this Properties set.\n\t\tThis sets the default field to null and thus\n\t\tbreaks any link with the Properties set that\n\t\twas the default.\n\t*/\n",
    "96055": "\t/**\n\t** Get the length in bits\n\t**\n\t** @return The length in bits for this value\n\t**\n\t** NOTE: could possibly be changed to a long.  As is\n\t** we are restricted to 2^(31-3) -> 256meg instead\n\t** of 2^31 (Integer.MAX_VALUE) like other datatypes\n\t** (or 2 gig).  If it is ever changed to a long\n\t** be sure to change read/writeExternal which write\n\t** out the length in bits.\n\t*/\n",
    "96104": "\t/**\n\t\treturn whether the field has exceeded the max threshold for this page\n\t\tit compares the fieldSize with the largest possible field for this page\n\t*/\n",
    "96106": "\t/**\n\t\tIs method/constructor T more or equally specific than method U.\n\n\t\tSee the Java Language Specification section 15.11.2.2.\n\t*/\n",
    "96124": "\t/**\n\t  Return true if this is a alpha product.\n\t  */\n",
    "96127": "    /**\n     * Return the build number as an integer if possible,\n     * mapping from the SVN number.\n     * nnnnn -> returns nnnnn\n     * nnnnnM -> returns -nnnnn indicates a modified code base\n     * nnnnn:mmmmm -> returns -nnnnn\n     * anything else -> returns -1\n    */\n",
    "96130": "\t/**\n\t\tReturn the feature version string, ie. major.minor. (e.g. 5.2)\n\t*/\n",
    "96156": "\t/**\n\t\tValue equality for byte arrays.\n\t*/\n",
    "96216": "\t/**\n\t * Is this column to have autoincremented value always ?\n\t */\n",
    "96617": "\t/**\n\t\tSync up the state of the underlying connection\n\t\twith the state of this new handle.\n\t*/\n",
    "96664": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "96713": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "96791": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "96825": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "96878": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "96913": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "96983": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97030": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97229": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97237": "\t/**\n\t\tSet this value into a ResultSet for a subsequent ResultSet.insertRow\n\t\tor ResultSet.updateRow. This method will only be called for non-null values.\n\n\t\t@exception SQLException thrown by the ResultSet object\n\t\t@exception StandardException thrown by me accessing my value.\n\t*/\n",
    "97249": "\t/**\n\t * Each built-in type in JSQL has a precedence.  This precedence determines\n\t * how to do type promotion when using binary operators.  For example, float\n\t * has a higher precedence than int, so when adding an int to a float, the\n\t * result type is float.\n\t *\n\t * The precedence for some types is arbitrary.  For example, it doesn't\n\t * matter what the precedence of the boolean type is, since it can't be\n\t * mixed with other types.  But the precedence for the number types is\n\t * critical.  The SQL standard requires that exact numeric types be\n\t * promoted to approximate numeric when one operator uses both.  Also,\n\t * the precedence is arranged so that one will not lose precision when\n\t * promoting a type.\n\t *\n\t * @return\t\tThe precedence of this type.\n\t */\n",
    "97253": "        /**\n                Return my format identifier.\n\n                @see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n        */\n",
    "97371": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97456": "\t/**\n\t\tGet a Null for this type.\n\t*/\n",
    "97504": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97558": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97638": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97685": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97749": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97807": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97821": "\t/**\n\t * Compare two non-null NumberDataValues using DECIMAL arithmetic.\n\t */\n",
    "97824": "\t/**\n\t * Negate the number.\n\t * @see org.apache.derby.iapi.types.NumberDataValue#minus(org.apache.derby.iapi.types.NumberDataValue)\n\t */\n",
    "97838": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97873": "\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n",
    "97957": "\t/**\n\t\tReturn my identifier within the segment\n\t*/\n",
    "97982": "        /**\n         * Is this type StreamStorable?\n         *\n         * @return      true if this type has variable length.\n         */\n",
    "97991": "\t/**\n\t\tCheck to see if a logical operation is allowed by this transaction, \n        throws a TransactionExceotion if it isn't. This implementation allows\n\t\tlogical operations. Transactions that need to disallow logical \n        operations should hide this method.\n\n\t\t@exception StandardException Standard Cloudscape error policy,\n\t*/\n",
    "97992": "\t/**\n\t\tReturn true if this transaction should be rolled back first\n\t\tin recovery. This implementation returns false. Transactions that\n\t\tneed to rollback first during recovery should hide this method.\n\t*/\n",
    "97994": "\t/**\n\t\tAllow an Observer to indicate an exception to the transaction that\n\t\tis raised in its update() method.\n\t*/\n",
    "97995": "\t/**\n\t\tAllow my users to notigy my observers.\n\t*/\n",
    "98034": "    /**\n     * format_id not expected to be used in field documentation.\n     * @return false\n     */\n",
    "98036": "    /**\n     * format_id not expected to be used in constructor documentation.\n     * @return false\n     */\n",
    "98037": "    /**\n     * format_id not expected to be used in method documentation.\n     * @return false\n     */\n",
    "98038": "    /**\n     * format_id can be used in overview documentation.\n     * @return true\n     */\n",
    "98039": "    /**\n     * format_id can be used in package documentation.\n     * @return true\n     */\n",
    "98040": "    /**\n     * format_id can be used in type documentation.\n     * @return true\n     */\n",
    "98041": "    /**\n     * format_id is not an inline tag.\n     * @return false\n     */\n",
    "98042": "    /**\n     * Embed the contents of the format_id tag as a row\n     * in the disk format table.\n     * @param tag The tag to embed to the disk format the table.\n     */\n",
    "98043": "    /**\n     * Embed multiple format_id tags as cells in the disk format table.\n     * @param tags An array of tags to add to the disk format table.\n     */\n",
    "98053": "    /**\n     * Embed the contents of the upgrade tag as a row\n     * in the disk format table.\n     * @param tag The tag to embed to the disk format the table.\n     */\n",
    "98054": "    /**\n     * Embed multiple upgrade tags as cells in the disk format table.\n     * @param tags An array of tags to add to the disk format table.\n     */\n",
    "98086": "    /**\n     * Embed the contents of the disk_layout tag as a row\n     * in the disk format table. Close the table.\n     * @param tag The tag to embed to the disk format the table.\n     */\n",
    "98088": "    /**\n     * Embed multiple disk_layout tags as cells in the disk format table.\n     * Close the table.\n     * @param tags An array of tags to add to the disk format table.\n     */\n",
    "98104": "\t/**\n\t * stack trace dumper\n\t */\n",
    "98193": "\t/**\n\t\tReinit is used to redirect the finder to another stream.\n\t\tThe previous stream should not have been in a PEEK state.\n\n\t\t@param s the input stream for reading statements from.\n\t */\n",
    "98202": "\t/**\n\t\tDetermine if the given character is considered whitespace\n\n\t\t@param c the character to consider\n\t\t@return true if the character is whitespace\n\t */\n",
    "98208": "\t/**\n\t\tAdvance the stream to the end of the string.\n\t\tAssumes the opening delimiter of the string has been read.\n\t\tThis handles the SQL ability to put the delimiter within\n\t\tthe string by doubling it, by reading those as two strings\n\t\tsitting next to one another.  I.e, 'Mary''s lamb' is read\n\t\tby this class as two strings, 'Mary' and 's lamb'.\n\t\t<p>\n\t\tThe delimiter of the string is expected to be repeated at\n\t\tits other end. If the other flavor of delimiter occurs within\n\t\tthe string, it is just a normal character within it.\n\t\t<p>\n\t\tAll characters except the delimiter are permitted within the\n\t\tstring. If EOF is hit before the closing delimiter is found,\n\t\tthe end of the string is assumed. Parsers using this parser\n\t\twill detect the error in that case and return appropriate messages.\n\n\t\t@param stringDelimiter the starting and ending character\n\t\t\tfor the string being read.\n\t */\n",
    "98217": "\t/**\n\t\treturn the next character in the source stream and\n\t\tappend it to the statement buffer.\n\n\t\t@return the next character in the source stream.\n\t */\n",
    "98218": "\t/**\n\t\treturn the next character in the source stream, without\n\t\tadvancing.\n\n\t\t@return the next character in the source stream.\n\t */\n",
    "98352": "\t/**\n\t\tij is started with \"-p[r] file OtherArgs\";\n\t\tthe file contains properties to control the driver and database\n\t\tused to run ij, and can provide additional system properties.\n\t\t<p>\n\t\tgetPropertyArg will look at the args and take out a \"-p <file>\" pair,\n\t\treading the file into the system properties.\n\t\t<p>\n\t\tIf there was a -p without a following <file>, no action is taken.\n\n\t\t@exception IOException thrown if file not found\n\n\t\t@param args\tthe argument list to consider.\n\t\t@return true if a property item was found and loaded.\n\t */\n",
    "98357": "\t/**\n\t  Return the name of the ij command file or null if none is\n\t  specified. The command file may be proceeded with -f flag on\n\t  the command line. Alternatively, the command file may be \n\t  specified without a -f flag. In this case we assume the first\n\t  unknown argument is the command file.\n\n\t  <P>\n\t  This should only be called after calling invalidArgs.\n\n\t  <p>\n\t  If there is no such argument, a null is returned.\n\n\t  @param args\tthe argument list to consider.\n\t  @return the name of the first argument not preceded by \"-p\",\n\t  null if none found.\n\t  \n\t  @exception IOException thrown if file not found\n\t */\n",
    "98359": "\t/**\n\t  Return the name of a resource containing input commands or\n\t  null iff none has been specified.\n\t  */\n",
    "98363": "\t/**\n\t\tUtility interface that defaults driver and database to null.\n\n\t\t@return a connection to the defaultURL if possible; null if not.\n\t\t@exception SQLException on failure to connect.\n\t\t@exception ClassNotFoundException on failure to load driver.\n\t\t@exception InstantiationException on failure to load driver.\n\t\t@exception IllegalAccessException on failure to load driver.\n\t */\n",
    "98410": "/**\n * ProtocolStatement is PROTOCOL 'JDBC protocol' where\n * the protocol is used to prefix any connect request that\n * cannot find a driver.  We will take a stab at loading\n * a driver as each protocol comes in -- we only know about\n * two.\n */\n",
    "98431": "\t/**\n\t * init method - will init the class to support a locale and\n\t * codeset based on the derby.ui.locale and derby.ui.codeset\n\t * properties if exists or using the default values from the JVM.\n\t */\n",
    "98433": "\t/**\n\t\tPrint information about the exception to the given PrintWriter.\n\t\tFor non-SQLExceptions, does a stack trace. For SQLExceptions,\n\t\tprint a standard error message and walk the list, if any.\n\n\t\t@param out the place to write to\n\t\t@param e the exception to display\n\t */\n",
    "98434": "\t/**\n\t\tPrint information about the SQL exception to the given PrintWriter.\n\t\tWalk the list of exceptions, if any.\n\n\t\t@param out the place to write to\n\t\t@param e the exception to display\n\t */\n",
    "98435": "\t/**\n\t\tPrint information about the SQL warnings for the connection\n\t\tto the given PrintWriter.\n\t\tWalks the list of exceptions, if any.\n\n\t\t@param out the place to write to\n\t\t@param theConnection the connection that may have warnings.\n\t */\n",
    "98437": "\t/**\n\t\tPrint information about the SQL warnings for the ResultSet\n\t\tto the given PrintWriter.\n\t\tWalk the list of exceptions, if any.\n\t\n\t\t@param out the place to write to\n\t\t@param rs the ResultSet that may have warnings on it\n\t */\n",
    "98454": "/**\n * SetConnectionStatement is SET CONNECTION ident\n * <p>\n * Moves to the named session, if it exists. If it doesn't\n * exist, remains on the current session and returns an error.\n */\n",
    "98459": "/**\n\tShows the current connections for the current environment.\n */\n",
    "98460": "\t/**\n\t\tMap the string to the value if it is null.\n\n\t\t@param s the string to test for null\n\t\t@param nullValue the value to use if s is null\n\n\t\t@return if s is non-null, s; else nullValue.\n\t */\n",
    "98463": "\t/**\n\t\tIf the property ij.exceptionTrace is true, display the stack\n\t\ttrace to the print stream. Otherwise, do nothing.\n\n\t\t@param out the output stream to write to\n\t\t@param e the exception to display\n\t */\n",
    "98466": "/**\n * CommitStatement is simply COMMIT.\n * It commits the current transation.\n */\n",
    "98474": "/**\n * RollbackStatement is simply ROLLBACK.\n * It undoes the current transation.\n */\n",
    "98587": "    /** Shuts down everything nicely\n     */\n",
    "98588": "    /** Adds a socket to the sockets ArrayList\n     * @param IP the IP address of the socket\n     */\n",
    "98589": "    /** Attaches data streams to a socket\n     * @param index index into the arraylist for where the data streams go\n     */\n",
    "98592": "    /** Writes out a bad command message\n     * @param rcv string that was received\n     * @param exp string that was expected\n     */\n",
    "98593": "    /** Finds out what OS we are running\n     * @return 0=linux 1=windows 2=other\n     */\n",
    "98596": "    /** Waits for a client to connect\n     * @return true if recycle, false if shutdown\n     */\n",
    "98598": "    /** Shuts down everything nicely\n     */\n",
    "98599": "    /**\n     * Gets the value of the point property.\n     * \n     * @return\n     *     possible object is\n     *     {@link PointType }\n     *     \n     */\n",
    "98600": "    /**\n     * Sets the value of the point property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link PointType }\n     *     \n     */\n",
    "98611": "    /**\n     * Gets the value of the pos property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Pos }\n     *     \n     */\n",
    "98612": "    /**\n     * Sets the value of the pos property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Pos }\n     *     \n     */\n",
    "98626": "    /**\n     * Sets the value of the pointMembers property.\n     * \n     * @param pointMembers\n     *     allowed object is\n     *     {@link PointMember }\n     *     \n     */\n",
    "98639": "    /**\n     * Gets the value of the srsName property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "98640": "    /**\n     * Sets the value of the srsName property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98650": "    /**\n     * Sets the value of the _Geometry property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link JAXBElement }{@code <}{@link LinearRingType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link MultiSurfaceType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link MultiCurveType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link AbstractGeometricAggregateType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link AbstractCurveType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link LineStringType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link AbstractGeometryType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link PolygonType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link SurfaceType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link MultiPointType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link CurveType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link PointType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link AbstractSurfaceType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link AbstractGeometricPrimitiveType }{@code >}\n     *     \n     */\n",
    "98662": "    /**\n     * Gets the value of the multiCurve property.\n     * \n     * @return\n     *     possible object is\n     *     {@link MultiCurveType }\n     *     \n     */\n",
    "98663": "    /**\n     * Sets the value of the multiCurve property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link MultiCurveType }\n     *     \n     */\n",
    "98675": "    /**\n     * Gets the value of the exterior property.\n     * \n     * @return\n     *     possible object is\n     *     {@link AbstractRingPropertyType }\n     *     \n     */\n",
    "98677": "    /**\n     * Sets the value of the exterior property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link AbstractRingPropertyType }\n     *     \n     */\n",
    "98681": "    /**\n     * Gets the value of the interpolation property.\n     * \n     * @return\n     *     possible object is\n     *     {@link SurfaceInterpolationType }\n     *     \n     */\n",
    "98682": "    /**\n     * Sets the value of the interpolation property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link SurfaceInterpolationType }\n     *     \n     */\n",
    "98684": "    /**\n     * Sets the value of the interiors property.\n     * \n     * @param interiors\n     *     allowed object is\n     *     {@link AbstractRingPropertyType }\n     *     \n     */\n",
    "98698": "    /**\n     * Gets the value of the value property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "98699": "    /**\n     * Sets the value of the value property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98701": "    /**\n     * Gets the value of the codeSpace property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "98702": "    /**\n     * Sets the value of the codeSpace property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98732": "    /**\n     * Create an instance of {@link BoundedBy }\n     * \n     */\n",
    "98733": "    /**\n     * Create an instance of {@link LineStringSegmentType }\n     * \n     */\n",
    "98734": "    /**\n     * Create an instance of {@link MultiPointType }\n     * \n     */\n",
    "98735": "    /**\n     * Create an instance of {@link Segments }\n     * \n     */\n",
    "98737": "    /**\n     * Create an instance of {@link MultiSurfacePropertyType }\n     * \n     */\n",
    "98738": "    /**\n     * Create an instance of {@link PolygonPatchType }\n     * \n     */\n",
    "98739": "    /**\n     * Create an instance of {@link GeometryPropertyType }\n     * \n     */\n",
    "98740": "    /**\n     * Create an instance of {@link MeasureType }\n     * \n     */\n",
    "98741": "    /**\n     * Create an instance of {@link PointType }\n     * \n     */\n",
    "98742": "    /**\n     * Create an instance of {@link PolygonType }\n     * \n     */\n",
    "98743": "    /**\n     * Create an instance of {@link CurveType }\n     * \n     */\n",
    "98745": "    /**\n     * Create an instance of {@link PosList }\n     * \n     */\n",
    "98747": "    /**\n     * Create an instance of {@link AbstractRingPropertyType }\n     * \n     */\n",
    "98748": "    /**\n     * Create an instance of {@link PointMember }\n     * \n     */\n",
    "98750": "    /**\n     * Create an instance of {@link LineStringType }\n     * \n     */\n",
    "98751": "    /**\n     * Create an instance of {@link MultiCurvePropertyType }\n     * \n     */\n",
    "98752": "    /**\n     * Create an instance of {@link MultiSurfaceType }\n     * \n     */\n",
    "98753": "    /**\n     * Create an instance of {@link ReferenceType }\n     * \n     */\n",
    "98754": "    /**\n     * Create an instance of {@link Patches }\n     * \n     */\n",
    "98755": "    /**\n     * Create an instance of {@link MultiPointPropertyType }\n     * \n     */\n",
    "98756": "    /**\n     * Create an instance of {@link MultiGeometryPropertyType }\n     * \n     */\n",
    "98757": "    /**\n     * Create an instance of {@link MultiCurveType }\n     * \n     */\n",
    "98759": "    /**\n     * Create an instance of {@link Pos }\n     * \n     */\n",
    "98761": "    /**\n     * Create an instance of {@link SurfaceMember }\n     * \n     */\n",
    "98762": "    /**\n     * Create an instance of {@link SurfaceType }\n     * \n     */\n",
    "98765": "    /**\n     * Create an instance of {@link LinearRingType }\n     * \n     */\n",
    "98766": "    /**\n     * Create an instance of {@link AbstractFeatureBaseType }\n     * \n     */\n",
    "98767": "    /**\n     * Create an instance of {@link AbstractSurfaceType }\n     * \n     */\n",
    "98768": "    /**\n     * Create an instance of {@link Envelope }\n     * \n     */\n",
    "98769": "    /**\n     * Create an instance of {@link Name }\n     * \n     */\n",
    "98770": "    /**\n     * Create an instance of {@link CurveMember }\n     * \n     */\n",
    "98776": "/**\n * Hack to get the grammar to leave a\n * EXECUTE STATEMENT <stmt> alone.  Short\n * circuit the ij EXECUTE built in.\n */\n",
    "98780": "    /**\n     * Gets the value of the type property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "98781": "    /**\n     * Sets the value of the type property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98783": "    /**\n     * Gets the value of the href property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "98784": "    /**\n     * Sets the value of the href property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98787": "    /**\n     * Gets the value of the role property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "98788": "    /**\n     * Sets the value of the role property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98791": "    /**\n     * Gets the value of the arcrole property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "98792": "    /**\n     * Sets the value of the arcrole property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98795": "    /**\n     * Sets the value of the title property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98796": "/**\n * Hack to get the grammar to leave a\n * EXECUTE PROCEDURE <procSpec> alone.  Short\n * circuit the ij EXECUTE built in so that\n * we can deploy ij against Foundation2000.\n */\n",
    "98798": "    /**\n     * Gets the value of the show property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "98799": "    /**\n     * Sets the value of the show property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98801": "    /**\n     * Gets the value of the actuate property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "98802": "    /**\n     * Sets the value of the actuate property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98816": "    /**\n     * Gets the value of the multiSurface property.\n     * \n     * @return\n     *     possible object is\n     *     {@link MultiSurfaceType }\n     *     \n     */\n",
    "98817": "    /**\n     * Sets the value of the multiSurface property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link MultiSurfaceType }\n     *     \n     */\n",
    "98842": "    /**\n     * Sets the value of the description property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98844": "/**\n * Async: like execute immediate, without using,\n * but runs the statement in a separate thread, against\n * the current connection.\n * <p>\n * Syntax:\n *   ASYNC asyncName statementSource \n *\n *\t statementSource is a string containing SQL-J text.\n */\n",
    "98847": "    /**\n     * Gets the value of the id property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "98848": "    /**\n     * Sets the value of the id property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "98861": "    /**\n     * Sets the value of the _GeometricAggregate property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link JAXBElement }{@code <}{@link MultiCurveType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link MultiSurfaceType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link MultiPointType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link AbstractGeometricAggregateType }{@code >}\n     *     \n     */\n",
    "98869": "/**\n * Wait for: the second half of Async, waits for completion\n * if needed and then supplies the result.  Only execute is done,\n * not row fetching.\n * <p>\n * Syntax:\n *   WAIT FOR asyncName \n *\n *\t asyncName is a name used in an ASYNC statement previously\n */\n",
    "98893": "    /**\n     * Gets the value of the multiPoint property.\n     * \n     * @return\n     *     possible object is\n     *     {@link MultiPointType }\n     *     \n     */\n",
    "98894": "/**\n * RemoveStatement is REMOVE identifier. It identifies\n * a previously prepared statement.  We would prefer a DROP\n * syntax, but SQL-J is using that word and I want to point out\n * that special processing will be needed to give that parser\n * this parser's input for unrecognized text.\n */\n",
    "98895": "    /**\n     * Sets the value of the multiPoint property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link MultiPointType }\n     *     \n     */\n",
    "98907": "    /**\n     * Sets the value of the segments property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Segments }\n     *     \n     */\n",
    "98937": "    /**\n     * Sets the value of the _Surface property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link JAXBElement }{@code <}{@link PolygonType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link AbstractSurfaceType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link SurfaceType }{@code >}\n     *     \n     */\n",
    "98949": "    /**\n     * Gets the value of the envelope property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Envelope }\n     *     \n     */\n",
    "98950": "    /**\n     * Sets the value of the envelope property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Envelope }\n     *     \n     */\n",
    "98964": "    /**\n     * Sets the value of the _SurfacePatches property.\n     * \n     * @param surfacePatches\n     *     allowed object is\n     *     {@link JAXBElement }{@code <}{@link AbstractSurfacePatchType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link PolygonPatchType }{@code >}\n     *     \n     */\n",
    "98970": "/**\n * Autocommit lets you control this aspect of the connection.\n * REMIND: should have a general way to set all connection attributes,\n * this is a shortcut for immediate needs.\n * <p>\n * Syntax:\n *   AUTOCOMMIT [ ON | OFF ] ;\n */\n",
    "98975": "    /**\n     * Gets the value of the boundedBy property.\n     * \n     * @return\n     *     possible object is\n     *     {@link BoundedBy }\n     *     \n     */\n",
    "98976": "    /**\n     * Sets the value of the boundedBy property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link BoundedBy }\n     *     \n     */\n",
    "98988": "    /**\n     * Sets the value of the patches property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Patches }\n     *     \n     */\n",
    "99000": "    /**\n     * Sets the value of the _Curve property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link JAXBElement }{@code <}{@link CurveType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link AbstractCurveType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link LineStringType }{@code >}\n     *     \n     */\n",
    "99004": "/**\n * By default, holdability is set to true for Connection objects. This syntax NOHOLDFORCONNECTION lets you set it to close cursors at commit.\n * Syntax:\n *   NOHOLDFORCONNECTION ;\n */\n",
    "99013": "    /**\n     * Gets the value of the posList property.\n     * \n     * @return\n     *     possible object is\n     *     {@link PosList }\n     *     \n     */\n",
    "99014": "    /**\n     * Sets the value of the posList property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link PosList }\n     *     \n     */\n",
    "99016": "    /**\n     * Gets the value of the interpolation property.\n     * \n     * @return\n     *     possible object is\n     *     {@link CurveInterpolationType }\n     *     \n     */\n",
    "99017": "    /**\n     * Sets the value of the interpolation property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link CurveInterpolationType }\n     *     \n     */\n",
    "99037": "/**\n * Localizeddisplay controls locale sensitive data representayion\n * <p>\n * Syntax:\n *   LOCALIZEDDISPLAY [ ON | OFF ] ;\n */\n",
    "99057": "    /**\n     * Sets the value of the surfaceMembers property.\n     * \n     * @param surfaceMembers\n     *     allowed object is\n     *     {@link SurfaceMember }\n     *     \n     */\n",
    "99067": "/**\n * ReadOnly lets you control this aspect of the connection.\n * REMIND: should have a general way to set all connection attributes,\n * this is a shortcut for immediate needs.\n * <p>\n * Syntax:\n *   READONLY [ ON | OFF ] ;\n */\n",
    "99085": "    /**\n     * Sets the value of the curveMembers property.\n     * \n     * @param curveMembers\n     *     allowed object is\n     *     {@link CurveMember }\n     *     \n     */\n",
    "99095": "    /**\n     * Gets the value of the value property.\n     * \n     */\n",
    "99096": "    /**\n     * Sets the value of the value property.\n     * \n     */\n",
    "99098": "    /**\n     * Gets the value of the uom property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99099": "    /**\n     * Sets the value of the uom property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99101": "/**\n * Elapsedtime on causes ij to dump out the elapsed time it takes\n * to run a user statement at the end of that statement.\n * <p>\n * Syntax:\n *   ELAPSEDTIME [ ON | OFF ] ;\n */\n",
    "99137": "    /**\n     * Gets the value of the lowerCorner property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Pos }\n     *     \n     */\n",
    "99138": "    /**\n     * Sets the value of the lowerCorner property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Pos }\n     *     \n     */\n",
    "99139": "/**\n * MaximumDisplayWidth EXACT_NUMERIC changes the maximum display width for\n * java.lang.String to the specified EXACT_NUMERIC.\n * This is only used by the console view.\n * <p>\n * Syntax:\n *   MAXIMUMDISPLAYWIDTH INTEGER ;\n */\n",
    "99141": "    /**\n     * Gets the value of the upperCorner property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Pos }\n     *     \n     */\n",
    "99142": "    /**\n     * Sets the value of the upperCorner property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Pos }\n     *     \n     */\n",
    "99156": "    /**\n     * Gets the value of the linearRing property.\n     * \n     * @return\n     *     possible object is\n     *     {@link LinearRingType }\n     *     \n     */\n",
    "99157": "    /**\n     * Sets the value of the linearRing property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link LinearRingType }\n     *     \n     */\n",
    "99172": "    /**\n     * Sets the value of the _CurveSegments property.\n     * \n     * @param curveSegments\n     *     allowed object is\n     *     {@link JAXBElement }{@code <}{@link LineStringSegmentType }{@code >}\n     *     {@link JAXBElement }{@code <}{@link AbstractCurveSegmentType }{@code >}\n     *     \n     */\n",
    "99190": "\t/**\n\t * Apply a given remark to a value\n\t */\n",
    "99191": "\t/**\n\t * Check if a remark is set on a given value\n\t */\n",
    "99192": "\t/**\n\t * Check if a remark is inherited\n\t */\n",
    "99193": "\t/**\n\t * Force override a remark from a given value\n\t */\n",
    "99194": "\t/**\n\t * Remove a remark\n\t */\n",
    "99195": "\t/**\n\t * Remove all TridasRemarks 'remark' from the given value\n\t * @param remark\n\t * @param value\n\t */\n",
    "99207": "    /**\n     * Sets the value of the name property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99213": "    /**\n     * Gets the value of the isActive property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Boolean }\n     *     \n     */\n",
    "99214": "    /**\n     * Sets the value of the isActive property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Boolean }\n     *     \n     */\n",
    "99230": "    /**\n     * Sets the value of the measurementVariables property.\n     * \n     * @param measurementVariables\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99242": "    /**\n     * Sets the value of the elementShapes property.\n     * \n     * @param elementShapes\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99254": "    /**\n     * Gets the value of the type property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99259": "    /**\n     * Gets the value of the object property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99260": "    /**\n     * Sets the value of the object property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99281": "    /**\n     * Sets the value of the datingTypes property.\n     * \n     * @param datingTypes\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99295": "    /**\n     * Sets the value of the coverageTemporals property.\n     * \n     * @param coverageTemporals\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99306": "    /**\n     * Create an instance of {@link WSISapwoodDictionary }\n     * \n     */\n",
    "99307": "    /**\n     * Create an instance of {@link WSIParam }\n     * \n     */\n",
    "99308": "    /**\n     * Create an instance of {@link WSIBox }\n     * \n     */\n",
    "99310": "    /**\n     * Create an instance of {@link WSIRequest }\n     * \n     */\n",
    "99311": "    /**\n     * Create an instance of {@link WSISearchParams }\n     * \n     */\n",
    "99312": "    /**\n     * Create an instance of {@link WSIRegionDictionary }\n     * \n     */\n",
    "99313": "    /**\n     * Create an instance of {@link WSISecurityUserDictionary }\n     * \n     */\n",
    "99314": "/**\n\tHaven't included: ASYNC, !, EXPECT\n\tDon't include: XA_*\n **/\n",
    "99315": "    /**\n     * Create an instance of {@link WSIHeartwoodDictionary }\n     * \n     */\n",
    "99316": "    /**\n     * Create an instance of {@link WSIRootElement }\n     * \n     */\n",
    "99317": "    /**\n     * Create an instance of {@link WSINonce }\n     * \n     */\n",
    "99318": "    /**\n     * Create an instance of {@link WSIMessage }\n     * \n     */\n",
    "99319": "    /**\n     * Create an instance of {@link WSIBoxDictionary }\n     * \n     */\n",
    "99320": "    /**\n     * Create an instance of {@link WSIElementAuthenticityDictionary }\n     * \n     */\n",
    "99321": "    /**\n     * Create an instance of {@link WSIEntity }\n     * \n     */\n",
    "99322": "    /**\n     * Create an instance of {@link WSIHelp }\n     * \n     */\n",
    "99323": "    /**\n     * Create an instance of {@link WSIHeader }\n     * \n     */\n",
    "99324": "    /**\n     * Create an instance of {@link WSILocationTypeDictionary }\n     * \n     */\n",
    "99325": "    /**\n     * Create an instance of {@link WSIAuthenticate }\n     * \n     */\n",
    "99326": "    /**\n     * Create an instance of {@link WSIElementTypeDictionary }\n     * \n     */\n",
    "99327": "    /**\n     * Create an instance of {@link WSILink }\n     * \n     */\n",
    "99328": "    /**\n     * Create an instance of {@link WSISampleTypeDictionary }\n     * \n     */\n",
    "99329": "    /**\n     * Create an instance of {@link WSIElementShapeDictionary }\n     * \n     */\n",
    "99330": "    /**\n     * Create an instance of {@link WSIReadingNoteDictionary }\n     * \n     */\n",
    "99331": "    /**\n     * Create an instance of {@link WSIDatingTypeDictionary }\n     * \n     */\n",
    "99332": "    /**\n     * Create an instance of {@link WSICoverageTemporalFoundationDictionary }\n     * \n     */\n",
    "99333": "    /**\n     * Create an instance of {@link WSITaxonDictionary }\n     * \n     */\n",
    "99335": "    /**\n     * Create an instance of {@link WSIContent }\n     * \n     */\n",
    "99336": "    /**\n     * Create an instance of {@link WSIMeasurementVariableDictionary }\n     * \n     */\n",
    "99337": "    /**\n     * Create an instance of {@link WSIObjectTypeDictionary }\n     * \n     */\n",
    "99338": "    /**\n     * Create an instance of {@link SecurityGroup }\n     * \n     */\n",
    "99339": "    /**\n     * Create an instance of {@link WSICoverageTemporalDictionary }\n     * \n     */\n",
    "99340": "    /**\n     * Create an instance of {@link SecurityUser }\n     * \n     */\n",
    "99342": "    /**\n     * Gets the value of the type property.\n     * \n     * @return\n     *     possible object is\n     *     {@link EntityType }\n     *     \n     */\n",
    "99343": "    /**\n     * Sets the value of the type property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link EntityType }\n     *     \n     */\n",
    "99360": "    /**\n     * Sets the value of the sqlsAndObjectsAndElements property.\n     * \n     * @param sqlsAndObjectsAndElements\n     *     allowed object is\n     *     {@link WSISampleTypeDictionary }\n     *     {@link WSICoverageTemporalFoundationDictionary }\n     *     {@link WSIElementAuthenticityDictionary }\n     *     {@link WSIHeartwoodDictionary }\n     *     {@link WSIRegionDictionary }\n     *     {@link WSICoverageTemporalDictionary }\n     *     {@link TridasSample }\n     *     {@link WSIElementTypeDictionary }\n     *     {@link WSIReadingNoteDictionary }\n     *     {@link WSIBoxDictionary }\n     *     {@link WSIMeasurementVariableDictionary }\n     *     {@link WSIDatingTypeDictionary }\n     *     {@link WSISapwoodDictionary }\n     *     {@link WSITaxonDictionary }\n     *     {@link TridasRadius }\n     *     {@link WSISecurityUserDictionary }\n     *     {@link SecurityUser }\n     *     {@link TridasElement }\n     *     {@link TridasObject }\n     *     {@link WSILocationTypeDictionary }\n     *     {@link WSIBox }\n     *     {@link WSIObjectTypeDictionary }\n     *     {@link Object }\n     *     {@link TridasMeasurementSeries }\n     *     {@link WSIElementShapeDictionary }\n     *     {@link TridasDerivedSeries }\n     *     \n     */\n",
    "99377": "    /**\n     * Gets the value of the identifier property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasIdentifier }\n     *     \n     */\n",
    "99378": "    /**\n     * Sets the value of the identifier property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasIdentifier }\n     *     \n     */\n",
    "99380": "    /**\n     * Gets the value of the createdTimestamp property.\n     * \n     * @return\n     *     possible object is\n     *     {@link DateTime }\n     *     \n     */\n",
    "99382": "    /**\n     * Sets the value of the createdTimestamp property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link DateTime }\n     *     \n     */\n",
    "99384": "    /**\n     * Gets the value of the lastModifiedTimestamp property.\n     * \n     * @return\n     *     possible object is\n     *     {@link DateTime }\n     *     \n     */\n",
    "99385": "    /**\n     * Sets the value of the lastModifiedTimestamp property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link DateTime }\n     *     \n     */\n",
    "99388": "    /**\n     * Gets the value of the comments property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99389": "    /**\n     * Sets the value of the comments property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99391": "    /**\n     * Gets the value of the trackingLocation property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99393": "    /**\n     * Sets the value of the trackingLocation property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99396": "    /**\n     * Gets the value of the curationLocation property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99397": "    /**\n     * Sets the value of the curationLocation property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99399": "    /**\n     * Gets the value of the sampleCount property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99400": "    /**\n     * Sets the value of the sampleCount property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99405": "    /**\n     * Sets the value of the samples property.\n     * \n     * @param samples\n     *     allowed object is\n     *     {@link TridasSample }\n     *     \n     */\n",
    "99422": "    /**\n     * Sets the value of the elementTypes property.\n     * \n     * @param elementTypes\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99434": "    /**\n     * Sets the value of the regions property.\n     * \n     * @param regions\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99445": "    /**\n     * Sets the value of the dictionaries property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link WSIRequest.Dictionaries }\n     *     \n     */\n",
    "99446": "/**\n * XA_DataSourceStatement is XA_DataSource 'dbname' ( create | shutdown )\n * We new'ed an instance of XADataSource as the current DataSource and set its\n * database name to dbname.\n */\n",
    "99454": "/**\n * XA_ConnectStatement is XA_CONNECT (<AS> connid)\n * make a XAConnection using the currentXADataSource and make that XAConnection\n * the current XAConnection.  If connid is given, then associate connid with\n * the XAConnection.  This connid is not th xid.\n */\n",
    "99460": "/**\n * XA_DisconnectStatement is XA_DISCONNECT [xaconnid = identifier()]\n * disconnect the current XAConnection \n * If xaconnid is given, then disconnect XAConnection with xaconnid (xaconnid\n *\tnot implemented).\n * \n */\n",
    "99468": "/**\n * XA_CommitStatement is XA_COMMIT [ XA_1PHASE | XA_2PHASE ] xid\n * commits a global transaction xid\n */\n",
    "99475": "/**\n * XA_EndStatement is XA_END [ XA_SUSPEND | XA_SUCCESS | XA_FAIL] xid\n * dissociates a transaction from the current XAConnection or end an already\n * suspended one\n */\n",
    "99480": "    /**\n     * Gets the value of the authenticate property.\n     * \n     * @return\n     *     possible object is\n     *     {@link WSIAuthenticate }\n     *     \n     */\n",
    "99481": "/**\n * XA_ForgetStatement is XA_FORGET xid\n * forgets about a heuristically completed transaction\n */\n",
    "99482": "    /**\n     * Sets the value of the authenticate property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link WSIAuthenticate }\n     *     \n     */\n",
    "99485": "    /**\n     * Gets the value of the searchParams property.\n     * \n     * @return\n     *     possible object is\n     *     {@link WSISearchParams }\n     *     \n     */\n",
    "99487": "    /**\n     * Sets the value of the searchParams property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link WSISearchParams }\n     *     \n     */\n",
    "99488": "/**\n * XA_GetConnectionStatement is XA_GETCONNECTION\n * it gets a Connection from the currentXAConnection and uses that as the\n * current connection \n */\n",
    "99491": "    /**\n     * Gets the value of the type property.\n     * \n     * @return\n     *     possible object is\n     *     {@link CorinaRequestType }\n     *     \n     */\n",
    "99493": "    /**\n     * Sets the value of the type property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link CorinaRequestType }\n     *     \n     */\n",
    "99495": "    /**\n     * Gets the value of the format property.\n     * \n     * @return\n     *     possible object is\n     *     {@link CorinaRequestFormat }\n     *     \n     */\n",
    "99498": "    /**\n     * Sets the value of the format property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link CorinaRequestFormat }\n     *     \n     */\n",
    "99500": "    /**\n     * Gets the value of the parentEntityID property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99502": "    /**\n     * Sets the value of the parentEntityID property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99503": "/**\n * XA_RecoverStatement is XA_RECOVER flag\n * displays the list of prepared transactions\n */\n",
    "99505": "    /**\n     * Sets the value of the projects property.\n     * \n     * @param projects\n     *     allowed object is\n     *     {@link TridasProject }\n     *     \n     */\n",
    "99507": "    /**\n     * Sets the value of the objects property.\n     * \n     * @param objects\n     *     allowed object is\n     *     {@link TridasObject }\n     *     \n     */\n",
    "99508": "    /**\n     * Sets the value of the elements property.\n     * \n     * @param elements\n     *     allowed object is\n     *     {@link TridasElement }\n     *     \n     */\n",
    "99509": "/**\n * XA_RollbackStatement is XA_Rollback xid\n * rolls back a global transaction\n */\n",
    "99512": "    /**\n     * Sets the value of the radiuses property.\n     * \n     * @param radiuses\n     *     allowed object is\n     *     {@link TridasRadius }\n     *     \n     */\n",
    "99513": "    /**\n     * Sets the value of the measurementSeries property.\n     * \n     * @param measurementSeries\n     *     allowed object is\n     *     {@link TridasMeasurementSeries }\n     *     \n     */\n",
    "99516": "/**\n * XA_StartStatement is XA_START [ XA_NOFLAGS | XA_JOIN | XA_RESUME ] xid\n * start or associates a transaction with the current XAConnection\n */\n",
    "99517": "    /**\n     * Sets the value of the derivedSeries property.\n     * \n     * @param derivedSeries\n     *     allowed object is\n     *     {@link TridasDerivedSeries }\n     *     \n     */\n",
    "99518": "    /**\n     * Sets the value of the users property.\n     * \n     * @param users\n     *     allowed object is\n     *     {@link SecurityUser }\n     *     \n     */\n",
    "99519": "    /**\n     * Sets the value of the boxes property.\n     * \n     * @param boxes\n     *     allowed object is\n     *     {@link WSIBox }\n     *     \n     */\n",
    "99521": "    /**\n     * Sets the value of the entities property.\n     * \n     * @param entities\n     *     allowed object is\n     *     {@link WSIEntity }\n     *     \n     */\n",
    "99535": "/**\n * CP_DataSourceStatement is\n *\tCP_DataSource 'dbname' [ <PROTOCOL> 'protocol' ]\n *\t\t- get a connection pool data source whose database name is\n *\t\tdbname and make that DataSource the current CPDataSource.  \n *\t\tIf <PROTOCOL> is specified, the DataSource may be\n *\t\tremote.\n */\n",
    "99543": "/**\n * CP_ConnectStatement is\n *\t<CP_CONNECT>\t[ <USER> 'user' ]\n *\t\t\t[ <PASSWORD> 'password' ]\n *\t\t\t[ <AS> cpconnid ]\n * make a PooledConnection using the current CPDataSource and\n * make that PooledConnection the current PooledConnection.\n * If cpconnid is given, then associate cpconnid with the\n * PooledConnection. (cpconnid not implemented).\n */\n",
    "99549": "/**\n * CP_GetConnectionStatement is\n *\t<CP_GETCONNECTION> [ <AS> connid ]\n * get a Connection object from the current PooledConnection.\n * If connid is given, the associate connid with the connection.\n * (connid not implemented)\n */\n",
    "99557": "    /**\n     * Sets the value of the taxons property.\n     * \n     * @param taxons\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99562": "/**\n * CP_DisconnectStatement is\n *\t<CP_DISCONNECT> [ cpconnid = identifier() ]\n * disconnect a PooledConnection.  If cpconnid is given, then\n * disconnect the PooledConnection with the given cpconnid. \n * (cpconnid not implemented)\n */\n",
    "99572": "    /**\n     * Sets the value of the objectTypes property.\n     * \n     * @param objectTypes\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99601": "    /**\n     * Sets the value of the remarks property.\n     * \n     * @param remarks\n     *     allowed object is\n     *     {@link TridasRemark }\n     *     \n     */\n",
    "99613": "    /**\n     * Sets the value of the locationTypes property.\n     * \n     * @param locationTypes\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99625": "    /**\n     * Sets the value of the sapwoods property.\n     * \n     * @param sapwoods\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99639": "    /**\n     * Gets the value of the code property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99640": "    /**\n     * Sets the value of the code property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99642": "    /**\n     * Sets the value of the content property.\n     * \n     * @param content\n     *     allowed object is\n     *     {@link Element }\n     *     {@link String }\n     *     \n     */\n",
    "99668": "    /**\n     * Sets the value of the heartwoods property.\n     * \n     * @param heartwoods\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99679": "    /**\n     * Sets the value of the memberOf property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link SecurityUser.MemberOf }\n     *     \n     */\n",
    "99686": "    /**\n     * Gets the value of the username property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99687": "    /**\n     * Sets the value of the username property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99690": "    /**\n     * Gets the value of the firstName property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99691": "    /**\n     * Sets the value of the firstName property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99693": "    /**\n     * Gets the value of the lastName property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99694": "    /**\n     * Sets the value of the lastName property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99704": "    /**\n     * Sets the value of the password property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99720": "        /**\n         * Sets the value of the securityGroups property.\n         * \n         * @param securityGroups\n         *     allowed object is\n         *     {@link SecurityGroup }\n         *     \n         */\n",
    "99734": "    /**\n     * Sets the value of the user property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link WSIHeader.User }\n     *     \n     */\n",
    "99737": "    /**\n     * Gets the value of the wsVersion property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99739": "    /**\n     * Sets the value of the wsVersion property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99743": "    /**\n     * Gets the value of the clientVersion property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99744": "    /**\n     * Sets the value of the clientVersion property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99746": "    /**\n     * Gets the value of the requestDate property.\n     * \n     * @return\n     *     possible object is\n     *     {@link XMLGregorianCalendar }\n     *     \n     */\n",
    "99748": "    /**\n     * Sets the value of the requestDate property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link XMLGregorianCalendar }\n     *     \n     */\n",
    "99752": "    /**\n     * Sets the value of the queryTime property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link WSIHeader.QueryTime }\n     *     \n     */\n",
    "99755": "    /**\n     * Gets the value of the requestUrl property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99756": "    /**\n     * Sets the value of the requestUrl property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99760": "    /**\n     * Gets the value of the requestType property.\n     * \n     * @return\n     *     possible object is\n     *     {@link CorinaRequestType }\n     *     \n     */\n",
    "99762": "    /**\n     * Sets the value of the requestType property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link CorinaRequestType }\n     *     \n     */\n",
    "99764": "    /**\n     * Gets the value of the status property.\n     * \n     * @return\n     *     possible object is\n     *     {@link CorinaRequestStatus }\n     *     \n     */\n",
    "99765": "    /**\n     * Sets the value of the status property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link CorinaRequestStatus }\n     *     \n     */\n",
    "99774": "    /**\n     * Gets the value of the nonce property.\n     * \n     * @return\n     *     possible object is\n     *     {@link WSINonce }\n     *     \n     */\n",
    "99775": "    /**\n     * Sets the value of the nonce property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link WSINonce }\n     *     \n     */\n",
    "99779": "    /**\n     * Sets the value of the messages property.\n     * \n     * @param messages\n     *     allowed object is\n     *     {@link WSIMessage }\n     *     \n     */\n",
    "99780": "    /**\n     * Sets the value of the timings property.\n     * \n     * @param timings\n     *     allowed object is\n     *     {@link WSIHeader.Timing }\n     *     \n     */\n",
    "99802": "        /**\n         * Gets the value of the unit property.\n         * \n         * @return\n         *     possible object is\n         *     {@link String }\n         *     \n         */\n",
    "99804": "        /**\n         * Sets the value of the unit property.\n         * \n         * @param value\n         *     allowed object is\n         *     {@link String }\n         *     \n         */\n",
    "99827": "        /**\n         * Gets the value of the label property.\n         * \n         * @return\n         *     possible object is\n         *     {@link String }\n         *     \n         */\n",
    "99829": "        /**\n         * Sets the value of the label property.\n         * \n         * @param value\n         *     allowed object is\n         *     {@link String }\n         *     \n         */\n",
    "99860": "        /**\n         * Gets the value of the firstname property.\n         * \n         * @return\n         *     possible object is\n         *     {@link String }\n         *     \n         */\n",
    "99862": "        /**\n         * Sets the value of the firstname property.\n         * \n         * @param value\n         *     allowed object is\n         *     {@link String }\n         *     \n         */\n",
    "99866": "        /**\n         * Gets the value of the lastname property.\n         * \n         * @return\n         *     possible object is\n         *     {@link String }\n         *     \n         */\n",
    "99867": "        /**\n         * Sets the value of the lastname property.\n         * \n         * @param value\n         *     allowed object is\n         *     {@link String }\n         *     \n         */\n",
    "99888": "    /**\n     * Sets the value of the coverageTemporalFoundations property.\n     * \n     * @param coverageTemporalFoundations\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99902": "    /**\n     * Sets the value of the elementAuthenticities property.\n     * \n     * @param elementAuthenticities\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "99917": "    /**\n     * Gets the value of the seq property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99918": "    /**\n     * Sets the value of the seq property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99931": "    /**\n     * Gets the value of the name property.\n     * \n     * @return\n     *     possible object is\n     *     {@link SearchParameterName }\n     *     \n     */\n",
    "99932": "    /**\n     * Sets the value of the name property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link SearchParameterName }\n     *     \n     */\n",
    "99934": "    /**\n     * Gets the value of the operator property.\n     * \n     * @return\n     *     possible object is\n     *     {@link SearchOperator }\n     *     \n     */\n",
    "99935": "    /**\n     * Sets the value of the operator property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link SearchOperator }\n     *     \n     */\n",
    "99951": "    /**\n     * Gets the value of the header property.\n     * \n     * @return\n     *     possible object is\n     *     {@link WSIHeader }\n     *     \n     */\n",
    "99952": "    /**\n     * Sets the value of the header property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link WSIHeader }\n     *     \n     */\n",
    "99954": "    /**\n     * Gets the value of the help property.\n     * \n     * @return\n     *     possible object is\n     *     {@link WSIHelp }\n     *     \n     */\n",
    "99956": "    /**\n     * Sets the value of the help property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link WSIHelp }\n     *     \n     */\n",
    "99959": "    /**\n     * Gets the value of the content property.\n     * \n     * @return\n     *     possible object is\n     *     {@link WSIContent }\n     *     \n     */\n",
    "99960": "    /**\n     * Sets the value of the content property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link WSIContent }\n     *     \n     */\n",
    "99962": "    /**\n     * Gets the value of the request property.\n     * \n     * @return\n     *     possible object is\n     *     {@link WSIRequest }\n     *     \n     */\n",
    "99963": "    /**\n     * Sets the value of the request property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link WSIRequest }\n     *     \n     */\n",
    "99974": "    /**\n     * Gets the value of the any property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Object }\n     *     \n     */\n",
    "99975": "    /**\n     * Sets the value of the any property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Object }\n     *     \n     */\n",
    "99989": "    /**\n     * Sets the value of the all property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link WSISearchParams.All }\n     *     \n     */\n",
    "99993": "    /**\n     * Gets the value of the returnObject property.\n     * \n     * @return\n     *     possible object is\n     *     {@link SearchReturnObject }\n     *     \n     */\n",
    "99994": "    /**\n     * Sets the value of the returnObject property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link SearchReturnObject }\n     *     \n     */\n",
    "99996": "    /**\n     * Gets the value of the limit property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "99997": "    /**\n     * Sets the value of the limit property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "99999": "    /**\n     * Gets the value of the skip property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "100000": "    /**\n     * Sets the value of the skip property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "100002": "    /**\n     * Gets the value of the includeChildren property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Boolean }\n     *     \n     */\n",
    "100003": "    /**\n     * Sets the value of the includeChildren property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Boolean }\n     *     \n     */\n",
    "100009": "    /**\n     * Sets the value of the params property.\n     * \n     * @param params\n     *     allowed object is\n     *     {@link WSIParam }\n     *     \n     */\n",
    "100038": "    /**\n     * Sets the value of the sampleTypes property.\n     * \n     * @param sampleTypes\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "100054": "    /**\n     * Gets the value of the cnonce property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "100055": "    /**\n     * Sets the value of the cnonce property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "100058": "    /**\n     * Gets the value of the snonce property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "100059": "    /**\n     * Sets the value of the snonce property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "100062": "    /**\n     * Gets the value of the hash property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "100064": "    /**\n     * Sets the value of the hash property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "100109": "    /**\n        Get the key for the preference which was changed.\n        \n        @return the key of the pref which was changed\n    */\n",
    "100364": "\t/**\n\t * Effectively removes this preference\n\t */\n",
    "100365": "\t/** \n\t * Sets the preference to the given value\n\t * @param value\n\t */\n",
    "100367": "\t/**\n\t * Get the value of this preference\n\t * @return the value of this preference, or its default\n\t */\n",
    "100398": "\t/**\n\t * Set the value of this preference\n\t * @param value\n\t */\n",
    "100399": "\t/**\n\t * Get the value of the pref referenced by this wrapper\n\t * @return\n\t */\n",
    "100405": "    /**\n       This method always throws UnsupportedOperationException.  It's\n       not implemented, and don't even think about implementing it\n       yourself!  It encourages being lazy and bypassing Year's\n       methods to just deal with ints.  And that defeats the whole\n       purpose of having Years.  So I'll just disallow it.  You don't\n       need it anyway.  If you really need the int for some reason I\n       can't imagine, you can always do\n       <code>Integer.parseInt(y.toString())</code>.  That way you know\n       you're doing it to get the int, and not for imagined\n       performance or convenience reasons.\n\n       @return never returns\n       @exception UnsupportedOperationException always!\n    */\n",
    "100406": "    /**\n       Return true, iff this is year 1.  (This actually comes up\n       fairly often.)\n\n       @return true iff this is year 1\n    */\n",
    "100407": "    /**\n       Adds (or subtracts, for negative values) some number of years,\n       and generates a new Year object.\n\n       @param dy the number of years to add (subtract)\n       @see #diff\n    */\n",
    "100408": "    /**\n       Calculate the number of years difference between two years.\n       That is, there are this many years difference between\n       <code>this</code> and <code>y2</code>; if they are equal, this\n       number is zero.\n\n       @param y2 the year to subtract\n       @return the number of years difference between\n       <code>this</code> and <code>y2</code>\n       @see #add\n    */\n",
    "100409": "    /**\n       Computes <code>this</code> modulo <code>m</code>.  Always\n       gives a positive result, even for negative numbers, so it is\n       suitable for computing a grid position for a span of years.\n\n       @param m base for modulo\n       @return the year modulo <code>m</code>\n    */\n",
    "100410": "    /**\n       Determines what row this year would be, if years were in a\n       grid 10 wide, with the left column years ending in zero.  Row\n       0 is years 1 through 9.\n\n       @return this year's row\n       @see #column\n    */\n",
    "100411": "    /**\n       Determines what column this year would be, if years were in a\n       grid 10 wide, with the left column years ending in zero.\n\n       Works for BC years, also:\n       <table border=\"1\" cellspacing=\"0\">\n\t   <tr><th>column()</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td>\n\t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n\t   <tr><th rowspan=\"3\">Year</th><td>-10</td><td>-9</td><td>-8</td><td>-7</td><td>-6</td>\n\t        <td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr>\n\t   <tr><td> </td><td>1</td><td>2</td><td>3</td><td>4</td>\n\t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n\t   <tr><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td>\n\t        <td>15</td><td>16</td><td>17</td><td>18</td><td>19</td></tr>\n       </table>\n\n       @return this year's column\n       @see #row\n    */\n",
    "100412": "    /**\n       Compares this and <code>o</code>.\n\n       @see java.lang.Comparable\n       @param o2 Object to compare\n       @return >0, =0, or <0 if this is greater-than, equal-to, or less-than o\n       @throws ClassCastException if o is not a Year\n    */\n",
    "100420": "    /**\n       Return the default extension for files of this type.  All of\n       the files I've seen end with \".out\", so that's what I'll use.\n\n       @return the string \".out\"\n    */\n",
    "100496": "\t/**\n\t * Quickly check to see if it's an XML document\n\t * @param r\n\t * @throws IOException\n\t */\n",
    "100500": "    /**\n       Throw a WrongFiletypeException; spreadsheet format is\n       write-only.\n\n       (This should never get called.)\n\n       @return never returns\n       @exception WrongFiletypeException every time\n    */\n",
    "100503": "    /**\n       Return the extension \".TXT\".  I don't know what format\n       spreadsheets normally expect, but it's just a text file, so\n       I'll use this for now.\n\n       @return the string \".TXT\"\n    */\n",
    "100639": "\t/**\n\t * If we've selected something, enable or disable the 'remeasure' button\n\t */\n",
    "100671": "\t/**\n\t * Apply a redate directly to the sample\n\t * @param dating\n\t */\n",
    "100728": "        /**\n         * Set the row and column without firing the listener\n         * @param row\n         * @param col\n         */\n",
    "100752": "\t/**\n\t * Set up our button behaviors\n\t */\n",
    "100773": "\t/**\n\t * update \"after:\" text with resultant range.\n\t */\n",
    "100776": "    /**\n       Return the height of this line: 18 points.\n\n       @param g the Graphics object\n       @return the height: 18 points\n    */\n",
    "100779": "    /**\n       Return the latitude, in degrees.\n        \n       @return the latitude, in degrees\n    */\n",
    "100780": "\t/** Set the font to use for the lines generated by this factory.\n\t @param f the font to use */\n",
    "100781": "    /**\n       Return the longitude, in degrees.\n\n       @return the longitude, in degrees\n    */\n",
    "100784": "    /**\n       Set the latitude, in degrees.\n\n       @param degrees the new latitude, in degrees\n    */\n",
    "100786": "    /**\n       Set the longitude, in degrees.\n\n       @param degrees the new longitude, in degrees\n    */\n",
    "100788": "    /**\n       Get the latitude, in seconds.\n\n       @return the latitude, in seconds\n    */\n",
    "100789": "    /**\n       Get the longitude, in seconds.\n\n       @return the longitude, in seconds\n    */\n",
    "100791": "    /**\n       Set the latitude, in seconds.\n\n       @param seconds the new latitude, in seconds\n    */\n",
    "100793": "    /**\n       Set the longitude, in seconds.\n\n       @param seconds the new longitude, in seconds\n    */\n",
    "100804": "    /**\n     * This method checks if a String contains only numbers\n     */\n",
    "100851": "\t/**\n\t * Ask our parent to repaint\n\t */\n",
    "100862": "\t/** Return the row count.  For the Data tab of a Sample (i.e., not\n\t Weiserjahre), it adds an extra row if the last datum is a -9\n\t year, thus ensuring that there's always one blank after the\n\t end for user editing.\n\t @return the number of displayable rows */\n",
    "100863": "\t/** Return the column count.  This is always 12: the decade, 10\n\t columns of data, and the histogram cell\n\t @return the number of columns, 12 */\n",
    "100878": "\t/**\n\t * Lazily-load this icon\n\t * \n\t * @param iconName\n\t * @return the icon, or null if iconName was null\n\t */\n",
    "100879": "\t/**\n\t * Get an icon for this tridas remark\n\t * @param remark\n\t * @return the icon, lazily loaded, or null\n\t */\n",
    "100880": "\t/**\n\t * Get an icon for this Corina remark (text)\n\t * @param remark\n\t * @return the icon, lazily loaded, or null\n\t */\n",
    "100898": "\t\t/**\n\t\t * Given the TridasObject, populate our internal structure\n\t\t * @param obj\n\t\t */\n",
    "100934": "\t/** Return the Year of the currently selected cell.\n\t @return the selected Year */\n",
    "100935": "\t/**\n\t * Lazily-load this icon\n\t * \n\t * @param iconName\n\t * @return the icon, or null if iconName was null\n\t */\n",
    "100940": "\t/**\n\t * Get an icon for this tridas remark\n\t * @param remark\n\t * @return the icon, lazily loaded, or null\n\t */\n",
    "100943": "\t/**\n\t * Get an icon for this Corina remark (text)\n\t * @param remark\n\t * @return the icon, lazily loaded, or null\n\t */\n",
    "100980": "\t/**\n\t * Add a cell modifier to the table and repaint\n\t * @param modifier\n\t */\n",
    "100987": "\t/**\n\t * Remove a cell modifier from the table and repaint\n\t * @param modifier\n\t */\n",
    "101142": "\t/**\n\t * When using heavyweight components, we have to make sure menus extend over them!\n\t */\n",
    "101178": "\t/**\n\t * Set a server query property for loading\n\t * \n\t * @param propertyName\n\t * @param value\n\t */\n",
    "101179": "\t/**\n\t * Set a server query property for saving\n\t * \n\t * @param propertyName\n\t * @param value\n\t */\n",
    "101195": "\t/**\n\t * Get the sampleDataView\n\t * @return The SampleDataVeiw I am holding\n\t */\n",
    "101202": "\t/**\n\t * Returns null if meta[key] doesn't exist, otherwise calls the object's tostring method\n\t * @param key\n\t * @return\n\t */\n",
    "101204": "\t/**\n\t * Create a default set of TridasValues\n\t * - 1/100th mm\n\t * - Ring widths\n\t * \n\t * @return a representative TridasValues object\n\t */\n",
    "101208": "\t/**\n\t * Create a default set of TridasValues\n\t * - 1/100th mm\n\t * - Ring widths\n\t * \n\t * @return a representative TridasValues object\n\t */\n",
    "101214": "\t/** Get the type of sample */\n",
    "101215": "\t/** Set the type of sample */\n",
    "101216": "\t/**\n\t * Get the attached series\n\t * @return The attached series\n\t */\n",
    "101217": "\t/**\n\t * Attach a different series\n\t * @param series\n\t */\n",
    "101218": "\t/**\n\t * Shortcut for getRemarksForYear(values, year)\n\t * Uses RING_WIDTH variable\n\t * \n\t * @param y the year\n\t * @return a TridasValue for the given year\n\t */\n",
    "101219": "\t/** Get the metadata interface */\n",
    "101220": "\t/**\n\t * Get the display title of this sample\n\t * Generally, this is the lab code\n\t * \n\t * For a menubar title, use toString()\n\t * \n\t * @return a String, probably lab code\n\t */\n",
    "101223": "\t/**\n\t * Get a TridasValue for a given year\n\t * \n\t * @param values\n\t * @param y\n\t * @return a TridasValue for the given year\n\t */\n",
    "101224": "\t/**\n\t * Get the associated tridas identifier\n\t */\n",
    "101231": "\t/** Clear the modified flag. */\n",
    "101239": "\t/**\n\t * Gets the name of the element\n\t * For a FileElement, returns the full path name\n\t * @return\n\t */\n",
    "101240": "\t/**\n\t * Gets the short name of the element\n\t * For a FileElement, returns the file's base name\n\t */\n",
    "101242": "\t/**\n\t * Compares names of one element against another\n\t */\n",
    "101249": "\t/**\n\t Load this Element.  Returns this Element in a Sample object.\n\n\t @return the Sample referenced by this Element\n\t @exception IOException if an IOException occurred while trying\n\t to load it; this can also be the subclasses\n\t FileNotFoundException\n\t */\n",
    "101252": "\t/** Count the total number of rings.  If this is a raw sample,\n\t returns the length.  If this is a summed sample, returns the\n\t sum of the count List.\n\t @return the total number of rings in this sample */\n",
    "101256": "\t/**\n\t Return this Element's filename, with\n\t <code>corina.dir.data</code> replaced by an \"?\", if it's in a\n\t subfolder of that.  (Otherwise, returns the absolute filename.)\n\n\t @return the filename, with ?'s\n\t */\n",
    "101265": "\t/**\n\t * Get the sample type we represent\n\t */\n",
    "101267": "\t/**\n\t * Copy an entire elementlist, preserving activeMap\n\t * @param src\n\t */\n",
    "101271": "\t/**\n\t * Shortcut method: returns a list of only active elements\n\t * @return\n\t */\n",
    "101284": "\t/** Return the default scale factor for graphing.\n\t @return scale factor of 1.0, or 0.1 for indexed files */\n",
    "101287": "\t/** Return the start date for a graph.\n\t @return start date of data to graph */\n",
    "101296": "\t/** \n\t * Return true if the sample is absolutely dated, else false.\n\t * @return true if the sample is absolutely dated \n\t */\n",
    "101300": "\t/** Return true if the sample is indexed, else false.\n\t @return true if the sample is indexed */\n",
    "101302": "\t/** Return true if the file was modified since last save.\n\t @return if the sample has been modified */\n",
    "101306": "\t/** <p>Return true if the sample is summed, else false.  Here\n\t \"summed\" is defined as:</p>\n\t <ul>\n\t <li>has a list of elements, or\n\t <li>has count data\n\t </ul>\n\t @return true if the sample is summed */\n",
    "101312": "\t/**\n\t * Note that getCount() will return a list that has all ones\n\t * when hasCount() can return false\n\t * @return true if counts exist\n\t */\n",
    "101320": "\t/** Set the modified flag. */\n",
    "101330": "\t/** Return a short version of the sample's title (without range info).\n\t @return the \"title\" tag from meta */\n",
    "101352": "  /** \n   * Indicate the progress of the operation being monitored.\n   * If the specified value is >= the maximum, the progress\n   * meter is closed. \n   * @param value an int specifying the current value, between the\n   *        maximum and minimum specified for this component\n   * @see #setMinimum\n   * @see #setMaximum\n   * @see #close\n   */\n",
    "101353": "  /**\n   * Indicate that the operation is complete.  This happens automatically\n   * when the value set by setProgress is >= max, but it may be called\n   * earlier if the operation ends early.\n   */\n",
    "101355": "  /**\n   * Returns the minimum value -- the lower end of the progress value.\n   * @return an int representing the minimum value\n   * @see #setMinimum\n   */\n",
    "101356": "  /**\n   * Specifies the minimum value.\n   * @param m an int specifying the minimum value\n   * @see #getMinimum\n   */\n",
    "101357": "  /**\n   * Returns the maximum value -- the higher end of the progress value.\n   * @return an int representing the maximum value\n   * @see #setMaximum\n   */\n",
    "101358": "  /**\n   * Specifies the maximum value.\n   * @param m an int specifying the maximum value\n   * @see #getMaximum\n   */\n",
    "101361": "  /**\n   * Specifies the amount of time to wait before deciding whether or\n   * not to notify listeners that they should display.\n   * @param millisToDecideToPopup an int specifying the time to wait,\n   *        in milliseconds\n   * @see #getMillisToDecideToPopup\n   */\n",
    "101362": "  /**\n   * Returns the amount of time this object waits before deciding whether\n   * or not to notify listeners to display.\n   * @see #setMillisToDecideToPopup\n   */\n",
    "101363": "  /**\n   * Specifies the amount of time it will take for listeners to be notified\n   * to display. (If the predicted time remaining is less than this time, then\n   * listeners won't be notified to display)\n   * @param millisToPopup  an int specifying the time in milliseconds\n   * @see #getMillisToPopup\n   */\n",
    "101365": "  /**\n   * Returns the amount of time it will take before listeners are notified\n   * to display.\n   * @see #setMillisToPopup\n   */\n",
    "101367": "  /**\n   * Specifies the additional note that is displayed along with the\n   * progress message.\n   * @param note a String specifying the note to display\n   * @see #getNote\n   */\n",
    "101368": "  /**\n   * Returns the additional note that is displayed along with the\n   * progress message.\n   * @return a String specifying the note to display\n   * @see #setNote\n   */\n",
    "101369": "\t/**\n\t * Set a new sort column. This is the index number to match of the headers.\n\t * The null value is allowed.\n\t * \n\t * @param sortColumn\n\t *            the number of the new column which is used for sorting\n\t */\n",
    "101371": "\t/**\n\t * Tell the renderer whether this sort is forward or reverse. If it's\n\t * reversed, the triangle is drawn upside-down.\n\t * \n\t * @param reversed\n\t *            is the sort a reverse-sort?\n\t */\n",
    "101372": "\t/**\n\t * Is this sort column reversed?\n\t * @return\n\t */\n",
    "101550": "    /**\n       Add the \"Labels\" menuitem.\n    */\n",
    "101551": "    /**\n    Add the \"Reports\" menuitem.\n    */\n",
    "101553": "\t /**\n\t Add the \"User and groups\" menuitem.\n\t*/\n",
    "101555": "\t /**\n\t Add the \"Curation\" menuitem.\n\t*/\n",
    "101557": "    /**\n       Add the \"Corina Help\" menuitem.\n    */\n",
    "101558": "    /**\n       Add the \"System Properties...\" menuitem.\n    */\n",
    "101561": "    /**\n       Add the \"About Corina...\" menuitem.\n    */\n",
    "101565": "    /**\n     * Returns the upper value in the range.\n     */\n",
    "101567": "    /**\n     * Sets the upper value in the range.\n     */\n",
    "101603": "    /**\n     * Paints the thumb for the lower value using the specified graphics object.\n     */\n",
    "101605": "    /**\n     * Paints the thumb for the upper value using the specified graphics object.\n     */\n",
    "101607": "    /**\n     * Returns a Shape representing a thumb.\n     */\n",
    "101609": "    /** \n     * Sets the location of the upper thumb, and repaints the slider.  This is\n     * called when the upper thumb is dragged to repaint the slider.  The\n     * <code>setThumbLocation()</code> method performs the same task for the\n     * lower thumb.\n     */\n",
    "101653": "\t/**\n\t * Check if an event changed our validity, and if it did, notify\n\t */\n",
    "101655": "\t/**\n\t * Get the search parameter name\n\t * @return The enum value, or null if not selected\n\t */\n",
    "101656": "\t/**\n\t * Get the search operator\n\t * @return the enum value\n\t */\n",
    "101658": "\t/**\n\t * Get the search value\n\t * @return the search value, or null if it is empty\n\t */\n",
    "101663": "\t/**\n\t * Add a listener for searchproperty changes\n\t * @param listener\n\t */\n",
    "101664": "\t/**\n\t * Remove a listener for search property changes\n\t * @param listener\n\t */\n",
    "101683": "\t/**\n\t * Used if we're actually doing a login!\n\t * @param nonce\n\t */\n",
    "101713": "    /**\n     * Initilize components of the gui\n     */\n",
    "101719": "    /**\n     * Play a beep.  Useful for when a barcode has been scanned.\n     */\n",
    "101731": "    /**\n     * Setup the search panel\n     * \n     */\n",
    "101732": "\t/**\n\t * Rebuild our panel: relayout everything\n\t */\n",
    "101733": "\t/**\n\t * Rebuild a search parameter list, and search if need be\n\t */\n",
    "101744": "\t/**\n\t * Force a re-sort\n\t */\n",
    "101745": "\t/**\n\t * Force a sort...\n\t * @param col the column to sort on\n\t * @param reverse force reverse\n\t */\n",
    "101755": "    /**\n        Return the minimum size required to lay out these components in\n        the parent.\n\n        @param the parent to lay out\n        @return the minimum layout size\n    */\n",
    "101756": "    /**\n        Return the preferred size required to lay out these components\n        in the parent.\n\n        @param the parent to lay out\n        @return the preferred layout size\n    */\n",
    "101757": "    /**\n        Optional, and not implemented.\n    */\n",
    "101758": "    /**\n        Optional, and not implemented.\n    */\n",
    "101821": "\t/**\n\t * Convenience method: Force a JTextField to auto-capitalize \n\t * and not allow any whitespace chars\n\t * @param field\n\t */\n",
    "101828": "\t/**\n\t * Convenience function: makes a JTextField select all\n\t * when it receives focus\n\t * @param field\n\t */\n",
    "101831": "\t/**\n\t * Set a component's maximum height to its preferred height\n\t * @param comp\n\t */\n",
    "101832": "\t/**\n\t * Sets the background color of the field depending on its\n\t * valid/invalid status\n\t * @param field\n\t * @param isGood\n\t */\n",
    "101846": "    /**\n     * Called right before we're about to be made visible, \n     * so we can perhaps do some last minute updates?\n     */\n",
    "101851": "    /**\n     * Get the selected object in this panel\n     * DON'T CALL BEFORE verifyAndSelectNextPanel()!!!\n     * @return\n     */\n",
    "101854": "    /**\n     * Called right before we're about to be made visible\n     */\n",
    "101855": "    /**\n     * is our form in a completely valid state?\n     */\n",
    "101856": "    /**\n     * check to see if our combobox is valid or not\n     */\n",
    "101862": "    /**\n     * Is the panel valid (e.g., can we move to the next panel?)\n     * @return\n     */\n",
    "101873": "    /**\n     * called when our child panel's validity state changes\n     */\n",
    "101889": "    /**\n     * adds an element to the list\n     * @param e\n     */\n",
    "101891": "\t/**\n\t * Set the new object to create\n\t * @param obj\n\t */\n",
    "101893": "    /**\n     * Does nothing for the final panel\n     */\n",
    "101896": "\t/**\n\t * Populate our dialog using any necessary information from our parent dialog\n\t */\n",
    "101897": "    /**\n     * Remove the element from all lists that I have\n     * @param e\n     */\n",
    "101898": "\t/**\n\t * Populate our dialog using the supplied prefix\n\t */\n",
    "101899": "\t/**\n\t * Query our webservice to create this object\n\t * \n\t * @param resource\n\t * @returns true if success\n\t */\n",
    "101901": "\t/**\n\t * Did we succeed in creating a new webdb object?\n\t * @return\n\t */\n",
    "101902": "\t/**\n\t * Makes this JTextField call our validateButtons() method\n\t * every time its contents change.\n\t * \n\t * @param field\n\t */\n",
    "101908": "\t/**\n\t * Return the value of our name field, if any\n\t * @return our name field or null\n\t */\n",
    "101909": "\t/**\n\t * Save our changes to the db\n\t */\n",
    "101913": "\t/**\n\t * Called to notify the wizard our 'ok' state has changed\n\t */\n",
    "101918": "    /**\n     * Is this element in the selected list?\n     * @param e\n     * @return true if the selected elements table contains this element\n     */\n",
    "101922": "\t/**\n\t * Causes the dialog to update the resource given instead of\n\t * creating a new resource.\n\t * \n\t * @param obj\n\t */\n",
    "101924": "\t/**\n\t * Steal the identify of our updating object, if it's set\n\t * @param obj\n\t */\n",
    "101926": "\t/**\n\t * Intended to be overridden by a function that enables/disables buttons.\n\t * Called by anything that has been added with setFieldValidateButtons\n\t */\n",
    "101929": "    /**\n     * How many elements need to be selected before we allow continuing?\n     * (defaults to 1, increase for sums?)\n     * @param value\n     */\n",
    "101935": "    /**\n     * Selects the site indicated by \"code\"\n     * No effect if code is invalid\n     * @param code\n     */\n",
    "101945": "    /**\n     * Get the JPanel that comprises space between invert...OK\n     * Not initialized; must be laid out manually\n     * @return\n     */\n",
    "101960": "    /**\n     * Return a default object for this class, if one exists\n     */\n",
    "101975": "\t\t/**\n\t\t * Show the search label (or not...)\n\t\t * @param shouldShow\n\t\t * @param hasProgress\n\t\t */\n",
    "102153": "\t/**\n\t * Get the name of the series\n\t * @return The name of the series\n\t */\n",
    "102160": "\t/**\n\t * Check if the fields exist; show a dialog and focus if they don't.\n\t * \n\t * @param valuesRequired\n\t * @return true if the values are satisfied, false otherwise\n\t */\n",
    "102238": "\t/**\n\t * Perform this action\n\t * \n\t * @param source\n\t */\n",
    "102239": "\t/** Called when our selection state changes */\n",
    "102240": "\t/**\n\t * Associate a toggleable button with this action's internal toggle state\n\t * \n\t * @param button the button to associate with\n\t * @param defaultValue the default boolean value, or null if we should try to automatically figure this out\n\t */\n",
    "102242": "\t/**\n\t * Associate a toggleable button with this action's internal toggle state\n\t * (Guess defaults!)\n\t * @param button\n\t */\n",
    "102262": "\t/**\n\t * Set the type of crossdate to display (e.g., TScore.class, RScore.class)\n\t * @param clazz\n\t */\n",
    "102264": "    /**\n     * Show an open dialog as a child of a frame\n     * @param parent\n     * @param preexistingElements\n     */\n",
    "102271": "\t/**\n\t * Get the number of items in the fullest bucket.\n\t * \n\t * @return the number of items in the fullest bucket\n\t */\n",
    "102273": "\t/**\n\t * Get the number of buckets. This is a compile-time constant.\n\t * \n\t * @see Histogram#NUMBER_OF_BUCKETS\n\t * @return the number of buckets\n\t */\n",
    "102274": "\t/**\n\t * Get the range spanned by a bucket. This is returned as a string, in the\n\t * format \"a - b\". The ends of the span are formatted in the provided\n\t * format.\n\t * \n\t * @param bucket\n\t *            which bucket to look at\n\t * @return the range spanned by that bucket, as a string \"a - b\"\n\t */\n",
    "102275": "\t/**\n\t * Gets the minimum value in a bucket\n\t * \n\t * @param bucket\n\t * @return\n\t */\n",
    "102276": "\t/**\n\t * Get the number of items in a bucket.\n\t * \n\t * @param bucket\n\t *            which bucket to look at\n\t * @return the number of items in that bucket\n\t */\n",
    "102278": "\t/** Return a prettier name for this cross: \"T-Score\".\n\t @return the name of this cross, \"T-Score\" */\n",
    "102279": "\t/** A format string for T-scores.\n\t @return a format string for T-scores */\n",
    "102291": "\t/**\n\t * Given the row and column, get a pairing.\n\t * \n\t * @param row\n\t * @param col\n\t * @return\n\t * @throws ArrayIndexOutOfBoundsException\n\t */\n",
    "102297": "\t/**\n\t * Find a pairing of the two given samples\n\t * \n\t * This can be time consuming with a huge amount of pairs...\n\t * \n\t * @param s1\n\t * @param s2\n\t * @return the pairing, or null if not found\n\t */\n",
    "102301": "\t/**\n\t   Returns a list of all fixed samples.\n\n\t   @return all fixed samples of this sequence\n\t */\n",
    "102302": "\t/**\n\t   Returns a list of all moving samples.\n\n\t   @return all moving samples of this sequence\n\t */\n",
    "102310": "\t/**\n\t   Return a new crossdate of the current pairing.\n\n\t   @exception IOException if one of the samples needed to make\n\t   this crossdate could not be loaded\n\t   @exception IllegalArgumentException if one of the algorithms\n\t   used by this Sequence isn't a valid crossdate (i.e.,\n\t   Cross.makeCross() throws an exception)\n\t */\n",
    "102311": "\t/**\n\t   Sets the algorithms to use for this sequence.  The format is an\n\t   array of Strings containing (fully-qualified) names of classes\n\t   which subclass corina.cross.Cross.  The order used is the order\n\t   they'll be presented to the user.\n\n\t   @param algorithms the new algorithms to use\n\t */\n",
    "102312": "\t/**\n\t   Go to the next pairing.  If already at the end, does nothing.\n\t */\n",
    "102314": "\t/**\n\t   Go to the previous pairing.  If already at the beginning, does\n\t   nothing.\n\t */\n",
    "102315": "\t/**\n\t   Is the current pairing the first pairing?\n\n\t   @return true, if this is the first pairing\n\t */\n",
    "102318": "\t/**\n\t   Is the current pairing the last pairing?\n\n\t   @return true, if this is the last pairing\n\t */\n",
    "102353": "\t/**\n\t Make a printable object for this crossdating grid.\n\n\t @return a Printable for this Grid\n\t */\n",
    "102376": "    /** Get notified when the graph changes */\n",
    "102412": "\t/**\n\t Make a printable object for this crossdating table.\n\n\t @return a Printable for this Table\n\t */\n",
    "102436": "    /**\n       Change the view to a different crossdate.\n\n       @param crossdate the new crossdate to view\n    */\n",
    "102445": "\t/**\n\t The number of samples in this Grid.  Add one to this value to\n\t get the number of cells high or wide the grid is.\n\n\t @return the number of samples in this Grid\n\t */\n",
    "102447": "\t/**\n\t Get a Cell from the grid.\n\n\t @param row the row\n\t @param column the column\n\t @return the cell at (row, column)\n\t */\n",
    "102454": "\t/**\n\t Get the error that occurred while computing the grid.  The\n\t run() method in Runnable can't throw any exceptions, so we just\n\t store them here for later use.\n\n\t @return an Exception, if one occurred, else null\n\t */\n",
    "102457": "\t/**\n\t A short preview for file dialogs.  Displays \"Crossdating Grid\",\n\t and lists the first few elements.\n\n\t @return a preview component for this grid\n\t */\n",
    "102549": "  /**\n   * Make a new graph (in a new window) from the selected crossdate.\n   */\n",
    "102598": "    /**\n       Make a new graph (in a new window) from the selected crossdate.\n    */\n",
    "102611": "\t/**\n\t * Get the score at this row, col\n\t * \n\t * @param row\n\t * @param col\n\t * @return\n\t */\n",
    "102613": "\t/**\n\t * Given the cell at row, col, give a range for\n\t * the secondary sample that produced that score\n\t * \n\t * @param row\n\t * @param col\n\t * @return\n\t */\n",
    "102615": "\t/**\n\t * Gets a redated sample, given a cell\n\t * \n\t * @param row\n\t * @param col\n\t * @return\n\t */\n",
    "102620": "\t/**\n\t * Get the overlap, given a range already\n\t * \n\t * @param newRange\n\t * @return\n\t */\n",
    "102637": "\t/** Return a prettier name for this cross: \"R-Value\".\n\t @return the name of this cross, \"R-Value\" */\n",
    "102639": "\t/** A format string for R-values.\n\t @return a format string for R-values */\n",
    "102645": "\t/** Compute the mean of an array of floats.\n\t @param array the array of floats to average\n\t @return the average (arithmetic mean) of the given array */\n",
    "102658": "\t/**\n\t * Get a crossdate score.\n\t * \n\t * Used only inside cross implementation by other crosses\n\t * \n\t * @param index\n\t *            the index of the score to get\n\t * @return the score at that index\n\t */\n",
    "102662": "\t/**\n\t * Get a crossdate score.\n\t * \n\t * TODO -- (what if you want data.length? use getRange().span().)\n\t * \n\t * @param year\n\t *            the end year of the moving sample\n\t * @return the score at that position\n\t */\n",
    "102665": "\t/**\n\t * Get a crossdate score signifigance.\n\t * \n\t * @param year\n\t *            the end year of the moving sample\n\t * @return the score signifigance at that position\n\t */\n",
    "102671": "\t/**\n\t * Returns the fixed sample.\n\t * \n\t * @return the fixed sample\n\t */\n",
    "102674": "\t/**\n\t * Returns the moving sample.\n\t * \n\t * @return the moving sample\n\t */\n",
    "102677": "\t/**\n\t * Is the run finished?\n\t * \n\t * @return true, if the crossdate is finished being run\n\t */\n",
    "102692": "\t/**\n\t * Crossdate preamble: any setup that needs to be done before the main loop\n\t * to compute individual scores.\n\t * \n\t * ----deprecated the preamble was always kind of silly\n\t * Not really - it's nice to separate this stuff!\n\t */\n",
    "102701": "\t/**\n\t * Returns the redated (secondary) sample for the specific row\n\t * \n\t * @param row\n\t * @return\n\t */\n",
    "102703": "\t/**\n\t * Returns the redated (secondary) sample range for the specific row\n\t * \n\t * @param row\n\t * @return\n\t */\n",
    "102769": "    /**\n       Save a sample into the database.  This operation is atomic.\n\n       @param sample the sample to save\n       @exception SQLException if an SQL exception occurs\n    */\n",
    "102773": "    /**\n       Import all files from a folder into the database.  All files in\n       sub-folders will be imported, as well.  Non-dendro files are\n       ignored.  The entire import is atomic.\n\n       @param folder the folder to import\n       @exception SQLException if there is an SQL exception while\n       importing data\n    */\n",
    "102828": "    /**\n     * Format this XML as pretty or not\n     * Returns self, so you can do:\n     *    new XMLBody(in).setPretty(true)...\n     * @param pretty\n     * @return\n     */\n",
    "102907": "\t/**\n\t * Get the current pageFormat\n\t * @return the pageFormat\n\t */\n",
    "102909": "\t/**\n\t * Change the associated page format\n\t * @param pageFormat\n\t */\n",
    "102910": "\t/**\n\t * Shortcut method for changing page orientation\n\t * Works the same as calling getPageFormat().setOrientation(orientation)\n\t * @see PageFormat#setOrientation(int)\n\t * @param orientation one of PageFormat.LANDSCAPE, PageFormat.PORTRIAT, PageFormat.REVERSE_LANDSCAPE, etc\n\t */\n",
    "102913": "\t/**\n\t * Actually print the PDF\n\t * @throws PrinterException\n\t */\n",
    "102966": "    /** Watch for mouse-pressed popup events.  Mac systems generate\n\tpopup events on mouse-down.\n\t@param e the mouse-pressed event\n    */\n",
    "102967": "    /** Watch for mouse-released popup events.  Windows systems\n\tgenerate popup events on mouse-up, because Windows supports\n\twhat is perhaps the weirdest and most counterintuitive user\n\tinteraction ever conceived: the\n\tright-click-drag-release-select-from-menu.\n\t@param e the mouse-released event\n    */\n",
    "102971": "    /**\n       Called when a popup mouse event is generated.  Implement this\n       method to do what you want on popup events.\n\n       <p>The default behavior is:</p>\n       <ul>\n         <li>if a JTable was clicked on, and the row that was clicked\n         on was not selected, select it (and deselect the rows that\n         were selected)\n\n\t <li>show the popup here (assuming it's non-null)\n       </ul>\n\n       <p>Remember, you can get the position of the click with\n       e.getX() and e.getY(), and the component that was clicked on\n       with e.getComponent().</p>\n\n       @param e the popup mouse event\n    */\n",
    "102997": "    /**\n       A \"document changed\" update occured.  Calls update().\n       @param e the document event\n    */\n",
    "102999": "    /**\n       A \"document insert\" update occured.  Calls update().\n       @param e the document event\n    */\n",
    "103001": "    /**\n       A \"document remove\" update occured.  Calls update().\n       @param e the document event\n    */\n",
    "103011": "\t/**\n\t * Convenience method to recreate a list without making a new one\n\t * @param c\n\t */\n",
    "103018": "\t/**\n\t * Return a sanitized filename\n\t * @return\n\t */\n",
    "103029": "\t/**\n\t * Output the XML document to a string\n\t */\n",
    "103033": "\t/**\n\t * Implementation of the ListModel interface\n\t */\n",
    "103035": "\t/**\n\t * Implementation of the ListModel interface\n\t */\n",
    "103038": "\t/**\n\t * Implementation of the method in the ListModel interface\n\t * @param listener ListDataListener\n\t */\n",
    "103041": "\t/**\n\t * Implementation of the method in the ListModel interface\n\t * @param listener ListDataListener\n\t */\n",
    "103043": "\t/**\n\t * Return the type of bug and message for this bug report\n\t */\n",
    "103054": "    /**\n       The compare method used by Comparator.  Simply calls\n<pre>\n   return compare((String) o1, (String) o2);\n</pre>\n\n       @param o1 the first string to compare\n       @param o2 the second string to compare\n       @return the result of their comparison\n    */\n",
    "103093": "    /** Write a portion of a character array, except <code>'\\r'</code>\n\tcharacters.\n\t@param cbuf the character array to read from\n\t@param off the offset into the array to start reading\n\t@param len the number of characters to read out of the array */\n",
    "103096": "    /**\n     * Is the given log level currently enabled?\n     *\n     * @param logLevel is this level enabled?\n     */\n",
    "103101": "    /**\n     * <p> Log a message with debug log level.</p>\n     */\n",
    "103108": "    /**\n     * <p> Log an error with debug log level.</p>\n     */\n",
    "103109": "\t/**\n\t * Get the starting year of this range.\n\t * \n\t * @return the starting year\n\t */\n",
    "103110": "\t/**\n\t * Get the ending year of this range.\n\t * \n\t * @return the ending year\n\t */\n",
    "103111": "    /**\n     * <p> Log a message with debug log level.</p>\n     */\n",
    "103112": "\t/**\n\t * Set the starting year of the range, and adjust the ending year to\n\t * maintain the same length.\n\t * \n\t * @param y\n\t *            new starting year for the range\n\t * @see #redateEndTo\n\t */\n",
    "103113": "\t/**\n\t * Redate a range by a certain number of years. Usually, you'll use\n\t * redateStartTo() or redateEndTo(), which are more convenient.\n\t * \n\t * @param dy\n\t *            the number of years to shift this range by\n\t */\n",
    "103114": "    /**\n     * <p> Log an error with debug log level.</p>\n     */\n",
    "103116": "\t/**\n\t * Return the number of years spanned by this range. For example, the range\n\t * 1001 - 1005 spans 5 years.\n\t * \n\t * @return the span of this range (difference between start and end,\n\t *         inclusive)\n\t */\n",
    "103118": "    /**\n     * <p> Log a message with info log level.</p>\n     */\n",
    "103119": "\t/**\n\t * Compute the number of rows this Range will take to display, assuming rows\n\t * are marked off as the row() method does.\n\t * \n\t * @return the number of rows this range spans\n\t */\n",
    "103121": "    /**\n     * <p> Log an error with info log level.</p>\n     */\n",
    "103122": "\t/**\n\t * Return a string representation of the range, including the span, like\n\t * \"(1001 - 1036, n=36)\".\n\t * \n\t * @return a string representation of the range, including span\n\t */\n",
    "103123": "    /**\n     * <p> Log a message with warn log level.</p>\n     */\n",
    "103124": "\t/**\n\t * Return true if (and only if) the given year is inside the range,\n\t * inclusive.\n\t * \n\t * @param y\n\t *            year to check\n\t * @return true if <code>y</code> is in the range, else false\n\t */\n",
    "103125": "\t/**\n\t * Return true if (and only if) the given range is completely inside the\n\t * range, inclusive.\n\t * \n\t * @param r\n\t *            range to check\n\t * @return true if <code>r</code> is entirely in the range, else false\n\t */\n",
    "103126": "    /**\n     * <p> Log an error with warn log level.</p>\n     */\n",
    "103127": "\t/**\n\t * Return true, iff this year is the start of a row. (Year 1 is considered\n\t * the start of that row.)\n\t * \n\t * @return true, iff this year is the start of a row\n\t */\n",
    "103129": "\t/**\n\t * Return true, iff this year is the end of a row.\n\t * \n\t * @return true, iff this year is the end of a row\n\t */\n",
    "103130": "    /**\n     * <p> Log a message with error log level.</p>\n     */\n",
    "103131": "\t/**\n\t * Return the number of years overlap between this range and the given\n\t * range.\n\t * \n\t * @param r\n\t *            range to compare\n\t * @return number of years overlap\n\t */\n",
    "103133": "\t/**\n\t * The intersection of this range with r. If they don't overlap, returns an\n\t * empty range (1 - -1).\n\t * \n\t * @see #union\n\t * @param r\n\t *            the range to intersect with this range\n\t * @return the intersection of this and r\n\t */\n",
    "103134": "\t/**\n\t * The union of this range with r. Since there is no concept of\n\t * \"range with a gap\" in Corina, it assumes they overlap.\n\t * \n\t * @see #intersection\n\t * @param r\n\t *            the range to union with this range\n\t * @return the union of this and r\n\t */\n",
    "103135": "    /**\n     * <p> Log an error with error log level.</p>\n     */\n",
    "103138": "    /**\n     * <p> Log a message with fatal log level.</p>\n     */\n",
    "103139": "\t/**\n\t * Compares this and o, for placing in fallback order. Fallback order sorts\n\t * ranges by their ending year, latest to earliest, and then by their\n\t * length, longest to shortest. (This is usually what people want when\n\t * looking at bargraphs.)\n\t * \n\t * @param o\n\t *            Object to compare\n\t * @return >0, ==0, or <0 if this is greater-than, equal-to, or less-than o\n\t * @throws ClassCastException\n\t *             if o is not a Range\n\t */\n",
    "103141": "    /**\n     * <p> Log an error with fatal log level.</p>\n     */\n",
    "103156": "        /**\n         * Method added by PHIL. [Thanks, PHIL. -Rob]\n         * This pads the buffer without closing the stream.\n         * @throws java.io.IOException  if there's an error.\n         */\n",
    "103183": "        /**\n         * Suspends encoding of the stream.\n         * May be helpful if you need to embed a piece of\n         * base64-encoded data in a stream.\n         *\n         * @throws java.io.IOException  if there's an error flushing\n         * @since 1.5.1\n         */\n",
    "103194": "        /**\n         * Resumes encoding of the stream.\n         * May be helpful if you need to embed a piece of\n         * base64-encoded data in a stream.\n         *\n         * @since 1.5.1\n         */\n",
    "103213": "\t/**\n\t * Save a single sample.\n\t * Pops up a dialog box asking for the file name to save to, exports to the type \n\t * passed in 'format' (ie, corina.Formats.Tucson)\n\t * \n\t * @param exportee the sample to export\n\t * @return The full path of the exported file name, or null if not saved\n\t */\n",
    "103221": "\t/**\n\t * Save a list of samples in packed format.\n\t * Pops up a dialog box asking for the file name to save to, exports to the type chosen in the\n\t * visible popup menu.\n\t * \n\t * @param exportee the sample to export\n\t * @return the full path of the saved packed sample, or null if not saved\n\t */\n",
    "103232": "\t/**\n\t * Saves multiple samples.\n\t * Pops up a dialog box asking for a folder to save to;\n\t * files are dumped in to this folder with a default extension added, ie:\n\t * ACM123.PIK becomes ACM123.PIK.TUC\n\t * \n\t * @param slist a List of samples\n\t * @return a List of saved file names, or null if not saved.\n\t */\n",
    "103334": "\t/**\n\t * Same as calling scaleToFitHeight(1)\n\t */\n",
    "103346": "\t/**\n\t * Set this as the default\n\t */\n",
    "103347": "\t/**\n\t * Get the internationalization tag for this plot agent\n\t * @return \"agent_xxx\"\n\t */\n",
    "103425": "    /**\n     * Set the plotting agent\n     * @param agent\n     */\n",
    "103430": "    /**\n     * Set the highlighted state of this graph\n     * @param highlighted\n     */\n",
    "103432": "    /**\n     * Is this graph mouseover highlighted\n     * @return true on highlgiht\n     */\n",
    "103433": "    /**\n     * Get the plotter\n     * @return The plotter used to graph this\n     */\n",
    "103445": "\t/**\n\t * Acquire a printing version of this graphInfo\n\t * \n\t * @return a GraphInfo copy for printing\n\t */\n",
    "103448": "\t/**\n\t * Reset graph colors to their default values\n\t */\n",
    "103498": "\t/**\n\t * Get the associated graph\n\t * @return a Graph structure\n\t */\n",
    "103500": "\t/**\n\t * Get the event type\n\t * @return a GrapherEvent.Type\n\t */\n",
    "103552": "\t/**\n\t * Get the graph height (via the panel, or the printHeight if printing)\n\t * @param panel\n\t * @return the height, in pixels\n\t */\n",
    "103668": "    /** Run all the indexes. */\n",
    "103691": "\t/**\n\t * Apply an index directly to a sample, not using a server...\n\t * @param index\n\t */\n",
    "103716": "\t/**\n\t   Return the name of this index in a user-readable format.  This\n\t   abstract class returns the name of the instantiated class (like\n\t   \"CubicSpline\")\n\n\t   @return the name of this index\n\t */\n",
    "103779": "\t/**\n\t * Method to determine if this field is a list (ie, combobox)\n\t * \n\t * @return true if this field contains a list of values, \n\t * false if it is free-editable (ie, a text field)\n\t */\n",
    "103833": "\t/**\n\t * Update the master list\n\t * @param masterList a new list, can't be null\n\t */\n",
    "103835": "\t/**\n\t * Resets the internal values list\n\t * @param in\n\t */\n",
    "103838": "\t/**\n\t * Resets the internal count list\n\t * @param in\n\t */\n",
    "103839": "\t/** \n\t * Get the actual underlying size of the count list\n\t * (size() is overridden to match the master list)\n\t * @return the actual size\n\t */\n",
    "103840": "\t/**\n\t * Get the actual underlying empty status\n\t * @return true if no count exists, false otherwise\n\t */\n",
    "103857": "\t/**\n\t * Get the WJ string for this index\n\t * Does no range checking\n\t * @param index\n\t * @return A weiserjahre value in \"incr/decr\" form\n\t */\n",
    "103863": "\t/**\n\t * Recursively add all objects to the list\n\t * Deals with the object tree being n-deep\n\t * @param obj\n\t * @param view\n\t */\n",
    "103868": "\t/**\n\t * Find a tridas object by site code\n\t * \n\t * @param siteCode\n\t * @return a tridas object\n\t */\n",
    "103884": "\t/**\n\t * Gets a key for this parent object\n\t * @param parentObject\n\t * @return\n\t */\n",
    "103891": "\t/**\n\t * Replace a property by identity (==).\n\t *  \n\t * @param oldProp the property to replace\n\t * @param newProp the property to replace it with\n\t */\n",
    "103897": "\t/**\n\t * Remove the geometry\n\t */\n",
    "103899": "\t/**\n\t * Pop up a dialog and select a new geometry\n\t */\n",
    "103918": "\t/**\n\t * Does this class represent an enum property?\n\t * If true, getEnumType() can be called\n\t * @return true if this class represents an enum property\n\t */\n",
    "103948": "\t/**\n\t * Set the type of the class\n\t * \n\t * Checks to see if we have dictionary mappings and\n\t * other annotations.\n\t * \n\t * @param clazz\n\t * @param field\n\t */\n",
    "103956": "\t/**\n\t * Writes the value of the Property to the given object. It uses reflection\n\t * and looks for a method starting with \"set\" followed by the capitalized\n\t * Property name and with one parameter with the same type as the Property.\n\t */\n",
    "103964": "\t/**\n\t * Translate the value for external representation\n\t * (how it's supposed to be represented in the object)\n\t * @return\n\t */\n",
    "103966": "\t/**\n\t * Remove the popup from the screen\n\t * @param resetFilter remove a filter, if true\n\t */\n",
    "103967": "\t/**\n\t * Translate the value for internal representation\n\t * (This is what we display in our property table)\n\t * @param value\n\t * @return\n\t */\n",
    "103979": "\t/**\n\t * Get the information in this dialog as represented by a TridasLocationGeometry\n\t * @return a geometry\n\t * @throws IllegalStateException if the dialog hasn't been used properly\n\t */\n",
    "103981": "\t/**\n\t * Called when the text in the search field changes\n\t */\n",
    "104003": "\t/**\n\t * Change the message when the graph is empty\n\t * @param emptyGraphText\n\t */\n",
    "104014": "\t/**\n\t * Paint a \"Nothing to graph\" when there's nothing available\n\t * @param g\n\t */\n",
    "104052": "\t/** \n\t * Clear the list of site codes\n\t */\n",
    "104054": "\t/** Scale an icon down to 20x20 */\n",
    "104066": "\t/**\n\t * Compare two string values, but try them as integers\n\t * \n\t * @param o1\n\t * @param o2\n\t * @return -1, 0, or 1, if o1 is less than, equal to, or greater than o2\n\t */\n",
    "104073": "\t/**\n\t * Determines if this is a top level object (has no parent)\n\t * @return true if this is a top level object\n\t */\n",
    "104075": "\t/**\n\t * Get the parent object\n\t * @return The parent object, or null if it doesn't exist\n\t */\n",
    "104076": "\t/**\n\t * Determines if this has any children\n\t * @return true of there are any sub-object children\n\t */\n",
    "104077": "\t/**\n\t * Does this object have a lab code?\n\t * @return true if getLabCode would return a valid labcode\n\t */\n",
    "104081": "\t/**\n\t * Sets the graph plot agent for all non-density graphs\n\t * Must call update(true) for graphs to be redrawn\n\t * @param agent\n\t */\n",
    "104083": "\t/**\n\t * Get a text representation of this site\n\t * @return A string in the form of '[CODE] title'\n\t */\n",
    "104101": "\t/**\n\t * Preprocess the query response\n\t * \n\t * Use this to check for things such as validity, login errors, etc, \n\t * and handle them appropriately. The default implementation always\n\t * returns success.\n\t * \n\t * If a failure occurs, throw a descriptive ResourceException. \n\t * Returning FAILURE just throws a generic ResourceException.\n\t * \n\t * @param object\n\t * @return a PreprocessResult\n\t * @throws ResourceException \n\t * @throws UserCancelledException \n\t * @see PreprocessResult for stuff\n\t */\n",
    "104102": "\t/**\n\t * Internal method: called when the query succeeds\n\t * \n\t * @param object\n\t */\n",
    "104103": "\t/**\n\t * Called by either button press to update the UI state\n\t */\n",
    "104104": "\t/**\n\t * Internal method: called when the query fails\n\t * \n\t * @param e the exception of failure!\n\t */\n",
    "104106": "\t/**\n\t * Called if processQueryResult returns true\n\t * \n\t * @param object The successful in object\n\t */\n",
    "104107": "\t/**\n\t * Called when the 'Change' button is pressed\n\t * Activates the combo box, allowing for changes\n\t */\n",
    "104108": "\t/**\n\t * In this function, handle any failure condition.\n\t * This is only called if processQueryResult() is not called.\n\t */\n",
    "104109": "\t/**\n\t * This procedure simply starts a new thread and calls queryWait\n\t */\n",
    "104115": "\t/**\n\t * Populate any parameters in a newly created entity\n\t * @param type the current EditType\n\t * @param entity the corresponding entity\n\t */\n",
    "104117": "\t/**\n\t * Associate an owner window with this resource (can be null)\n\t * @param window\n\t */\n",
    "104119": "\t/**\n\t * Get the associated owner window (can be null)\n\t * @return\n\t */\n",
    "104121": "\t/**\n\t * Whether the graph should scroll vertically\n\t * Defaults to false\n\t * \n\t * @param useVerticalScrollbar\n\t */\n",
    "104128": "\t/**\n\t * Set a property to the given value\n\t * @param propertyName\n\t * @param value\n\t */\n",
    "104130": "\t/**\n\t * Add all the properties in the given map\n\t * @param newProperties\n\t */\n",
    "104132": "\t/**\n\t * Check to see if this property is set\n\t * @param propertyName\n\t * @return true if this property exists, false otherwise\n\t */\n",
    "104133": "\t/**\n\t * Set the schema to validate against\n\t * @param schema the schema, or null for no validation\n\t */\n",
    "104141": "\t/**\n\t * Set the type associated with this result\n\t * @param associatedResult\n\t */\n",
    "104144": "\t/**\n\t * Get the type associated with this result\n\t * @return\n\t */\n",
    "104146": "\t/**\n\t * Sort a list of ITridas objects\n\t * \n\t * @param list\n\t */\n",
    "104160": "\t/**\n\t * Get the numeric code associated with this error\n\t * \n\t * @return The code associated with this error\n\t */\n",
    "104162": "\t/**\n\t * Gets the entity we're submitting to the server\n\t * for create or update.\n\t * <p>\n\t * Used by SeriesResource to handle version changes. \n\t * \n\t * @return the create or update entity, or null if it isn't present\n\t */\n",
    "104164": "\t/**\n\t * Checks to see if the entity is in the given list\n\t * \n\t * @param entity\n\t * @param list\n\t * @return The entity in the list (may be another instance) or null\n\t */\n",
    "104167": "\t/**\n\t * Retrieve the server's nonce\n\t * @return\n\t */\n",
    "104168": "\t/**\n\t * Retrieve the server's nonce sequence\n\t * @return\n\t */\n",
    "104169": "\t/**\n\t * Compute an md5 hash of this string\n\t * \n\t * @param in\n\t * @return an md5 hash, in string format\n\t */\n",
    "104175": "\t/**\n\t * Find a sample in our results that matches this identifier\n\t * \n\t * @param identifier\n\t * @return a sample, or null\n\t */\n",
    "104189": "\t/**\n\t * DANGER: do not use this during the processing of a query\n\t * \n\t * @param queryType the queryType to set\n\t */\n",
    "104192": "\t/**\n\t * Populate the combo box with a list\n\t * @param goRemote ensure we have remote stuff in the list\n\t */\n",
    "104193": "\t/**\n\t * Concatenate the contents of a WSIMessage\n\t * \n\t * @param msg\n\t * @return\n\t */\n",
    "104194": "\t/**\n\t * Set to true to return all objects of type 'returnObject'\n\t * Useful to search for all sites, for instance\n\t * @param all\n\t */\n",
    "104205": "\t/**\n\t * Marshall the object to disk...\n\t * \n\t * @param obj\n\t */\n",
    "104207": "\t/**\n\t * Populate this cookie store from an Apache cookie store\n\t * @param cs\n\t */\n",
    "104209": "\t/**\n\t * Suggest a selection for the given mode\n\t * \n\t * @param mode the mode\n\t * @param list a list of acceptable options for the mode\n\t * @return null to choose 'new', a member of the list, or really any ITridas derived thing\n\t */\n",
    "104221": "\t/**\n\t * The important part of this: query the server. This is a blocking call.\n\t * \n\t * @return A DOM document\n\t * @throws IOException\n\t */\n",
    "104223": "\t/**\n\t * Quick and dirty debug: gets a stack trace\n\t * @return\n\t */\n",
    "104224": "\t/**\n\t * Gets the schema object that we use for validation\n\t * \n\t * @return the schema object, or null for no validation\n\t */\n",
    "104225": "\t/**\n\t * Get the JAXB context for this accessor\n\t * \n\t * @return the jaxb context\n\t * @throws JAXBException\n\t */\n",
    "104226": "\t/**\n\t * Disable buttons below, enable buttons above\n\t * @param type\n\t */\n",
    "104228": "\t/**\n\t * Get a namespace prefix mapper for this instance\n\t * @return\n\t */\n",
    "104229": "\t/**\n\t * Set the object to use as an output request\n\t * \n\t * @param reqObj\n\t */\n",
    "104232": "\t/**\n\t * Creates a button to the button panel\n\t * @param type\n\t * @return\n\t */\n",
    "104235": "\t/**\n\t * Meant to be overridden:\n\t * \n\t * @param parentPreferredDimensions JPanel's idea of what our size should be\n\t * @param scrollExtentDimensions our parent JScrollPane viewport's size\n\t * @return our preferred dimensions\n\t */\n",
    "104238": "\t/** Return the folder the browser is currently viewing.\n\t @return the folder currently being browsed */\n",
    "104248": "\t\t/** \n\t\t * Get an entity from the sample\n\t\t * \n\t\t * @param s\n\t\t * @return\n\t\t */\n",
    "104253": "\t\t/**\n\t\t * Called when the status of the horizontal scrollbar chaged\n\t\t */\n",
    "104255": "\t\t/**\n\t\t * Associate a button with this type\n\t\t * @param button\n\t\t */\n",
    "104256": "\t\t/**\n\t\t * Get the associated button\n\t\t * @return\n\t\t */\n",
    "104258": "\t\t/**\n\t\t * Called when the status of the vertical axis changed\n\t\t */\n",
    "104259": "\t\t/**\n\t\t * Enable or disable the associated button\n\t\t * Has no effect on series\n\t\t * @param enabled\n\t\t */\n",
    "104262": "\t\t/**\n\t\t * Called when our underlying property changes\n\t\t */\n",
    "104265": "\t/**\n\t * Add a grapher listener to this graph\n\t * @param listener\n\t */\n",
    "104268": "\t/**\n\t * Remove a grapher listener from this graph\n\t * @param listener\n\t */\n",
    "104274": "    /**\n        Return the currently selected folder.\n\n        @return the selected folder\n    */\n",
    "104275": "    /**\n        Get the top-level folder of this popup.\n\n        @return the top-level folder of this popup\n    */\n",
    "104282": "    /**\n        Add a new listener.\n\n        @param listener the listener to add\n    */\n",
    "104284": "    /**\n        Remove a listener.\n\n        @param listener the listener to remove\n    */\n",
    "104286": "\t\t/**\n\t\t * Gets the previous EditType in the order\n\t\t * @return\n\t\t */\n",
    "104290": "\t\t/**\n\t\t * Gets the next EditType in the order\n\t\t * @return\n\t\t */\n",
    "104305": "\t/**\n\t * Called when someone changes something on our property list\n\t */\n",
    "104319": "    /**\n        Set a new sort column.  This is the text string to\n        match of the headers.  The null value is not allowed.\n\n        @param sortColumn the name of the new column which\n        is used for sorting\n    */\n",
    "104381": "    /** Add a \"New Folder\" menuitem. */\n",
    "104411": "    /** Add a \"Page Setup...\" menuitem. */\n",
    "104430": "\t/**\n\t * This function actually does the SQL Insert work...\n\t * Trust that our newVMeasurementID contains no ' chars?\n\t */\n",
    "104433": "\t/**\n\t * Closes all prepared statements.\n\t * @throws SQLException\n\t */\n",
    "104437": "\t/**\n\t Return the one selected row.  If more than one row is selected,\n\t usually this is the last row the user clicked on, and has a white\n\t outline or something like that around it - but you shouldn't\n\t expect just one row when there's actually more than one.  If\n\t nothing is selected, an exception is thrown.\n\n\t @return the selected row\n\t @exception NoSuchElementException if nothing is selected\n\t */\n",
    "104438": "\t/**\n\t * Starts the recursive process that gets the VMeasurementResult UUID\n\t * \n\t * Why a routine for 'safe' cleanup? Well, cleanup works under the native pl/java driver,\n\t * but doesn't work under the postgresql jdbc driver. Thus making testing a nightmare!\n\t * \n\t * @param VMeasurementID\n\t * @param safe true if we should attempt to rollback on failure\n\t * @throws SQLException\n\t */\n",
    "104454": "\t/**\n\t Return an Iterator that emits all of the selected Rows.\n\t @return an Iterator that goes throw all of the selected Rows\n\t */\n",
    "104482": "\t/**\n\t * Compute and populate our output variable. Results available via getOutput()\n\t * \n\t * In our base class, we do some sanity checking.\n\t * We cannot index twice, as some things rely on being set up properly first. This could be fixed,\n\t * but seems unnecessary.\n\t */\n",
    "104509": "    /**\n     * Gets the value of the addressLine1 property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104513": "    /**\n     * Sets the value of the addressLine1 property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104519": "    /**\n     * Gets the value of the addressLine2 property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104520": "    /**\n     * Sets the value of the addressLine2 property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104521": "    /**\n     * Gets the value of the type property.\n     * \n     * @return\n     *     possible object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "104523": "    /**\n     * Gets the value of the cityOrTown property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104524": "    /**\n     * Sets the value of the type property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "104525": "    /**\n     * Sets the value of the cityOrTown property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104529": "    /**\n     * Gets the value of the stateProvinceRegion property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104530": "    /**\n     * Sets the value of the stateProvinceRegion property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104533": "    /**\n     * Gets the value of the postalCode property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104534": "    /**\n     * Sets the value of the postalCode property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104538": "    /**\n     * Gets the value of the country property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104540": "    /**\n     * Sets the value of the country property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104542": "    /**\n     * Gets the value of the linkSeries property.\n     * \n     * @return\n     *     possible object is\n     *     {@link SeriesLinksWithPreferred }\n     *     \n     */\n",
    "104545": "    /**\n     * Sets the value of the linkSeries property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link SeriesLinksWithPreferred }\n     *     \n     */\n",
    "104559": "    /**\n     * Gets the value of the value property.\n     * \n     * @return\n     *     possible object is\n     *     {@link XMLGregorianCalendar }\n     *     \n     */\n",
    "104560": "    /**\n     * Sets the value of the value property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link XMLGregorianCalendar }\n     *     \n     */\n",
    "104561": "    /**\n     * Gets the value of the taxon property.\n     * \n     * @return\n     *     possible object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "104563": "    /**\n     * Gets the value of the certainty property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Certainty }\n     *     \n     */\n",
    "104564": "    /**\n     * Sets the value of the certainty property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Certainty }\n     *     \n     */\n",
    "104566": "    /**\n     * Sets the value of the taxon property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "104575": "    /**\n     * Gets the value of the shape property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasShape }\n     *     \n     */\n",
    "104578": "    /**\n     * Sets the value of the shape property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasShape }\n     *     \n     */\n",
    "104580": "    /**\n     * Gets the value of the normalTridas property.\n     * \n     * @return\n     *     possible object is\n     *     {@link NormalTridasRemark }\n     *     \n     */\n",
    "104583": "    /**\n     * Sets the value of the normalTridas property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link NormalTridasRemark }\n     *     \n     */\n",
    "104585": "    /**\n     * Gets the value of the inheritedCount property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104586": "    /**\n     * Gets the value of the dimensions property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasDimensions }\n     *     \n     */\n",
    "104587": "    /**\n     * Sets the value of the inheritedCount property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104589": "    /**\n     * Sets the value of the dimensions property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasDimensions }\n     *     \n     */\n",
    "104597": "    /**\n     * Gets the value of the authenticity property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104600": "    /**\n     * Sets the value of the authenticity property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104604": "    /**\n     * Gets the value of the type property.\n     * \n     * @return\n     *     possible object is\n     *     {@link NormalTridasDatingType }\n     *     \n     */\n",
    "104606": "    /**\n     * Sets the value of the type property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link NormalTridasDatingType }\n     *     \n     */\n",
    "104611": "    /**\n     * Gets the value of the location property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasLocation }\n     *     \n     */\n",
    "104617": "    /**\n     * Sets the value of the location property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasLocation }\n     *     \n     */\n",
    "104624": "    /**\n     * Gets the value of the processing property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104627": "    /**\n     * Sets the value of the processing property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104634": "    /**\n     * Gets the value of the marks property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104637": "    /**\n     * Sets the value of the marks property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104642": "    /**\n     * Gets the value of the altitude property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Double }\n     *     \n     */\n",
    "104645": "    /**\n     * Sets the value of the altitude property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Double }\n     *     \n     */\n",
    "104654": "    /**\n     * Gets the value of the slope property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasSlope }\n     *     \n     */\n",
    "104658": "    /**\n     * Sets the value of the slope property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasSlope }\n     *     \n     */\n",
    "104664": "    /**\n     * Gets the value of the normalTridas property.\n     * \n     * @return\n     *     possible object is\n     *     {@link NormalTridasVariable }\n     *     \n     */\n",
    "104665": "    /**\n     * Sets the value of the normalTridas property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link NormalTridasVariable }\n     *     \n     */\n",
    "104666": "    /**\n     * Gets the value of the soil property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasSoil }\n     *     \n     */\n",
    "104673": "    /**\n     * Sets the value of the soil property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasSoil }\n     *     \n     */\n",
    "104680": "    /**\n     * Gets the value of the value property.\n     * \n     * @return\n     *     possible object is\n     *     {@link BigInteger }\n     *     \n     */\n",
    "104681": "    /**\n     * Sets the value of the value property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link BigInteger }\n     *     \n     */\n",
    "104683": "    /**\n     * Gets the value of the bedrock property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasBedrock }\n     *     \n     */\n",
    "104688": "    /**\n     * Gets the value of the suffix property.\n     * \n     * @return\n     *     possible object is\n     *     {@link DatingSuffix }\n     *     \n     */\n",
    "104689": "    /**\n     * Sets the value of the bedrock property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasBedrock }\n     *     \n     */\n",
    "104690": "    /**\n     * Sets the value of the suffix property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link DatingSuffix }\n     *     \n     */\n",
    "104705": "    /**\n     * Gets the value of the dating property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasDating }\n     *     \n     */\n",
    "104707": "    /**\n     * Sets the value of the dating property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasDating }\n     *     \n     */\n",
    "104710": "    /**\n     * Gets the value of the firstYear property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Year }\n     *     \n     */\n",
    "104712": "    /**\n     * Sets the value of the firstYear property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Year }\n     *     \n     */\n",
    "104715": "    /**\n     * Gets the value of the lastYear property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Year }\n     *     \n     */\n",
    "104716": "    /**\n     * Sets the value of the lastYear property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Year }\n     *     \n     */\n",
    "104718": "    /**\n     * Sets the value of the files property.\n     * \n     * @param files\n     *     allowed object is\n     *     {@link TridasFile }\n     *     \n     */\n",
    "104720": "    /**\n     * Gets the value of the datingReference property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasDatingReference }\n     *     \n     */\n",
    "104721": "    /**\n     * Sets the value of the datingReference property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasDatingReference }\n     *     \n     */\n",
    "104722": "    /**\n     * Sets the value of the genericFields property.\n     * \n     * @param genericFields\n     *     allowed object is\n     *     {@link TridasGenericField }\n     *     \n     */\n",
    "104730": "    /**\n     * Gets the value of the pithYear property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Year }\n     *     \n     */\n",
    "104731": "    /**\n     * Sets the value of the pithYear property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Year }\n     *     \n     */\n",
    "104734": "    /**\n     * Gets the value of the deathYear property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Year }\n     *     \n     */\n",
    "104736": "    /**\n     * Sets the value of the deathYear property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Year }\n     *     \n     */\n",
    "104739": "    /**\n     * Gets the value of the provenance property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104741": "    /**\n     * Sets the value of the provenance property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104744": "    /**\n     * Sets the value of the statFoundations property.\n     * \n     * @param statFoundations\n     *     allowed object is\n     *     {@link TridasStatFoundation }\n     *     \n     */\n",
    "104764": "    /**\n     * Gets the value of the statValue property.\n     * \n     * @return\n     *     possible object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "104766": "    /**\n     * Sets the value of the statValue property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "104772": "    /**\n     * Gets the value of the significanceLevel property.\n     * \n     * @return\n     *     possible object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "104774": "    /**\n     * Sets the value of the significanceLevel property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "104777": "    /**\n     * Gets the value of the usedSoftware property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104779": "    /**\n     * Sets the value of the usedSoftware property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104797": "    /**\n     * Gets the value of the category property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasCategory }\n     *     \n     */\n",
    "104798": "    /**\n     * Gets the value of the measuringDate property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Date }\n     *     \n     */\n",
    "104800": "    /**\n     * Sets the value of the measuringDate property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Date }\n     *     \n     */\n",
    "104801": "    /**\n     * Sets the value of the category property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasCategory }\n     *     \n     */\n",
    "104805": "    /**\n     * Gets the value of the derivationDate property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Date }\n     *     \n     */\n",
    "104806": "    /**\n     * Gets the value of the investigator property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104807": "    /**\n     * Sets the value of the derivationDate property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Date }\n     *     \n     */\n",
    "104808": "    /**\n     * Sets the value of the investigator property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104813": "    /**\n     * Gets the value of the woodCompleteness property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasWoodCompleteness }\n     *     \n     */\n",
    "104814": "    /**\n     * Gets the value of the period property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104816": "    /**\n     * Sets the value of the woodCompleteness property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasWoodCompleteness }\n     *     \n     */\n",
    "104817": "    /**\n     * Sets the value of the period property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104821": "    /**\n     * Gets the value of the analyst property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104822": "    /**\n     * Gets the value of the requestDate property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Date }\n     *     \n     */\n",
    "104823": "    /**\n     * Sets the value of the analyst property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104824": "    /**\n     * Sets the value of the requestDate property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Date }\n     *     \n     */\n",
    "104828": "    /**\n     * Gets the value of the dendrochronologist property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104829": "    /**\n     * Gets the value of the commissioner property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104830": "    /**\n     * Sets the value of the dendrochronologist property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104831": "    /**\n     * Sets the value of the commissioner property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104836": "    /**\n     * Gets the value of the measuringMethod property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasMeasuringMethod }\n     *     \n     */\n",
    "104838": "    /**\n     * Sets the value of the measuringMethod property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasMeasuringMethod }\n     *     \n     */\n",
    "104849": "    /**\n     * Gets the value of the linkSeries property.\n     * \n     * @return\n     *     possible object is\n     *     {@link SeriesLinks }\n     *     \n     */\n",
    "104851": "    /**\n     * Sets the value of the linkSeries property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link SeriesLinks }\n     *     \n     */\n",
    "104857": "    /**\n     * Gets the value of the objective property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104860": "    /**\n     * Sets the value of the objective property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104863": "    /**\n     * Sets the value of the types property.\n     * \n     * @param types\n     *     allowed object is\n     *     {@link ControlledVoc }\n     *     \n     */\n",
    "104864": "    /**\n     * Gets the value of the standardizingMethod property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104867": "    /**\n     * Sets the value of the standardizingMethod property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104868": "    /**\n     * Sets the value of the laboratories property.\n     * \n     * @param laboratories\n     *     allowed object is\n     *     {@link TridasLaboratory }\n     *     \n     */\n",
    "104870": "    /**\n     * Sets the value of the references property.\n     * \n     * @param references\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104873": "    /**\n     * Gets the value of the author property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104874": "    /**\n     * Sets the value of the researches property.\n     * \n     * @param researches\n     *     allowed object is\n     *     {@link TridasResearch }\n     *     \n     */\n",
    "104875": "    /**\n     * Sets the value of the author property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104880": "    /**\n     * Gets the value of the version property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104882": "    /**\n     * Sets the value of the version property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104887": "    /**\n     * Gets the value of the interpretationUnsolved property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasInterpretationUnsolved }\n     *     \n     */\n",
    "104889": "    /**\n     * Sets the value of the interpretationUnsolved property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasInterpretationUnsolved }\n     *     \n     */\n",
    "104895": "    /**\n     * Gets the value of the interpretation property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasInterpretation }\n     *     \n     */\n",
    "104898": "    /**\n     * Sets the value of the interpretation property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasInterpretation }\n     *     \n     */\n",
    "104901": "    /**\n     * Create an instance of {@link TridasIdentifier }\n     * \n     */\n",
    "104904": "    /**\n     * Create an instance of {@link TridasFile }\n     * \n     */\n",
    "104907": "    /**\n     * Create an instance of {@link SeriesLink }\n     * \n     */\n",
    "104911": "    /**\n     * Gets the value of the missingHeartwoodRingsToPith property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104912": "    /**\n     * Create an instance of {@link TridasCoverage }\n     * \n     */\n",
    "104913": "    /**\n     * Sets the value of the missingHeartwoodRingsToPith property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104916": "    /**\n     * Gets the value of the missingHeartwoodRingsToPithFoundation property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104917": "    /**\n     * Sets the value of the missingHeartwoodRingsToPithFoundation property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104920": "    /**\n     * Create an instance of {@link TridasSlope }\n     * \n     */\n",
    "104921": "    /**\n     * Gets the value of the presence property.\n     * \n     * @return\n     *     possible object is\n     *     {@link ComplexPresenceAbsence }\n     *     \n     */\n",
    "104922": "    /**\n     * Sets the value of the presence property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link ComplexPresenceAbsence }\n     *     \n     */\n",
    "104926": "    /**\n     * Create an instance of {@link TridasPith }\n     * \n     */\n",
    "104932": "    /**\n     * Create an instance of {@link ControlledVoc }\n     * \n     */\n",
    "104939": "    /**\n     * Create an instance of {@link TridasVocabulary }\n     * \n     */\n",
    "104940": "    /**\n     * Gets the value of the content property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "104941": "    /**\n     * Sets the value of the content property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "104944": "    /**\n     * Gets the value of the presence property.\n     * \n     * @return\n     *     possible object is\n     *     {@link PresenceAbsence }\n     *     \n     */\n",
    "104945": "    /**\n     * Sets the value of the presence property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link PresenceAbsence }\n     *     \n     */\n",
    "104948": "    /**\n     * Create an instance of {@link TridasElement }\n     * \n     */\n",
    "104957": "    /**\n     * Create an instance of {@link TridasBedrock }\n     * \n     */\n",
    "104967": "    /**\n     * Create an instance of {@link TridasLaboratory }\n     * \n     */\n",
    "104969": "    /**\n     * Sets the value of the values property.\n     * \n     * @param values\n     *     allowed object is\n     *     {@link TridasValues }\n     *     \n     */\n",
    "104975": "    /**\n     * Create an instance of {@link TridasProject }\n     * \n     */\n",
    "104979": "    /**\n     * Create an instance of {@link TridasSoil }\n     * \n     */\n",
    "104984": "    /**\n     * Create an instance of {@link TridasLastRingUnderBark }\n     * \n     */\n",
    "104987": "    /**\n     * Create an instance of {@link TridasHeartwood }\n     * \n     */\n",
    "104992": "    /**\n     * Create an instance of {@link TridasValues }\n     * \n     */\n",
    "104995": "    /**\n     * Create an instance of {@link TridasDerivedSeries }\n     * \n     */\n",
    "104999": "    /**\n     * Create an instance of {@link TridasMeasurementSeriesPlaceholder }\n     * \n     */\n",
    "105002": "    /**\n     * Create an instance of {@link TridasAddress }\n     * \n     */\n",
    "105011": "    /**\n     * Create an instance of {@link TridasValue }\n     * \n     */\n",
    "105019": "    /**\n     * Create an instance of {@link TridasGenericField }\n     * \n     */\n",
    "105026": "    /**\n     * Create an instance of {@link TridasLocation }\n     * \n     */\n",
    "105037": "    /**\n     * Create an instance of {@link Year }\n     * \n     */\n",
    "105042": "    /**\n     * Gets the value of the polygon property.\n     * \n     * @return\n     *     possible object is\n     *     {@link PolygonType }\n     *     \n     */\n",
    "105043": "    /**\n     * Sets the value of the polygon property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link PolygonType }\n     *     \n     */\n",
    "105046": "    /**\n     * Create an instance of {@link TridasMeasuringMethod }\n     * \n     */\n",
    "105055": "    /**\n     * Create an instance of {@link Date }\n     * \n     */\n",
    "105062": "    /**\n     * Create an instance of {@link TridasObject }\n     * \n     */\n",
    "105066": "    /**\n     * Create an instance of {@link TridasWoodCompleteness }\n     * \n     */\n",
    "105072": "    /**\n     * Create an instance of {@link SeriesLinks }\n     * \n     */\n",
    "105076": "    /**\n     * Create an instance of {@link TridasSample }\n     * \n     */\n",
    "105080": "    /**\n     * Create an instance of {@link TridasLocationGeometry }\n     * \n     */\n",
    "105085": "    /**\n     * Create an instance of {@link TridasVariable }\n     * \n     */\n",
    "105089": "    /**\n     * Gets the value of the creator property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105090": "    /**\n     * Create an instance of {@link TridasStatFoundation }\n     * \n     */\n",
    "105091": "    /**\n     * Sets the value of the creator property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105096": "    /**\n     * Create an instance of {@link TridasUnitless }\n     * \n     */\n",
    "105097": "    /**\n     * Gets the value of the owner property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105098": "    /**\n     * Sets the value of the owner property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105100": "    /**\n     * Create an instance of {@link TridasRemark }\n     * \n     */\n",
    "105103": "    /**\n     * Gets the value of the coverage property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasCoverage }\n     *     \n     */\n",
    "105104": "    /**\n     * Sets the value of the coverage property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasCoverage }\n     *     \n     */\n",
    "105105": "    /**\n     * Create an instance of {@link TridasBark }\n     * \n     */\n",
    "105110": "    /**\n     * Create an instance of {@link TridasInterpretationUnsolved }\n     * \n     */\n",
    "105114": "    /**\n     * Create an instance of {@link TridasDating }\n     * \n     */\n",
    "105118": "    /**\n     * Create an instance of {@link TridasCategory }\n     * \n     */\n",
    "105123": "    /**\n     * Create an instance of {@link TridasSapwood }\n     * \n     */\n",
    "105127": "    /**\n     * Create an instance of {@link TridasDatingReference }\n     * \n     */\n",
    "105132": "    /**\n     * Create an instance of {@link TridasMeasurementSeries }\n     * \n     */\n",
    "105136": "    /**\n     * Create an instance of {@link TridasRadiusPlaceholder }\n     * \n     */\n",
    "105140": "    /**\n     * Create an instance of {@link TridasUnit }\n     * \n     */\n",
    "105145": "    /**\n     * Create an instance of {@link TridasDimensions }\n     * \n     */\n",
    "105149": "    /**\n     * Create an instance of {@link TridasTridas }\n     * \n     */\n",
    "105153": "    /**\n     * Create an instance of {@link TridasInterpretation }\n     * \n     */\n",
    "105156": "    /**\n     * Create an instance of {@link TridasRadius }\n     * \n     */\n",
    "105160": "    /**\n     * Create an instance of {@link DateTime }\n     * \n     */\n",
    "105163": "    /**\n     * Gets the value of the nrOfSapwoodRings property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105164": "    /**\n     * Sets the value of the nrOfSapwoodRings property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105168": "    /**\n     * Create an instance of {@link TridasShape }\n     * \n     */\n",
    "105169": "    /**\n     * Gets the value of the lastRingUnderBark property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasLastRingUnderBark }\n     *     \n     */\n",
    "105170": "    /**\n     * Sets the value of the lastRingUnderBark property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasLastRingUnderBark }\n     *     \n     */\n",
    "105173": "    /**\n     * Gets the value of the missingSapwoodRingsToBark property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105174": "    /**\n     * Sets the value of the missingSapwoodRingsToBark property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105175": "    /**\n     * Create an instance of {@link TridasResearch }\n     * \n     */\n",
    "105178": "    /**\n     * Gets the value of the missingSapwoodRingsToBarkFoundation property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105179": "    /**\n     * Sets the value of the missingSapwoodRingsToBarkFoundation property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105181": "    /**\n     * Create an instance of {@link SeriesLinksWithPreferred }\n     * \n     */\n",
    "105184": "    /**\n     * Gets the value of the angle property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105186": "    /**\n     * Sets the value of the angle property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105189": "    /**\n     * Gets the value of the azimuth property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105190": "    /**\n     * Sets the value of the azimuth property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105212": "    /**\n     * Gets the value of the unit property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasUnit }\n     *     \n     */\n",
    "105213": "    /**\n     * Sets the value of the unit property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasUnit }\n     *     \n     */\n",
    "105217": "    /**\n     * Gets the value of the height property.\n     * \n     * @return\n     *     possible object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "105221": "    /**\n     * Sets the value of the height property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "105227": "    /**\n     * Gets the value of the width property.\n     * \n     * @return\n     *     possible object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "105231": "    /**\n     * Sets the value of the width property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "105235": "    /**\n     * Gets the value of the locationGeometry property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasLocationGeometry }\n     *     \n     */\n",
    "105236": "    /**\n     * Gets the value of the depth property.\n     * \n     * @return\n     *     possible object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "105237": "    /**\n     * Sets the value of the locationGeometry property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasLocationGeometry }\n     *     \n     */\n",
    "105238": "    /**\n     * Sets the value of the depth property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "105242": "    /**\n     * Gets the value of the locationType property.\n     * \n     * @return\n     *     possible object is\n     *     {@link NormalTridasLocationType }\n     *     \n     */\n",
    "105243": "    /**\n     * Gets the value of the diameter property.\n     * \n     * @return\n     *     possible object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "105244": "    /**\n     * Sets the value of the locationType property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link NormalTridasLocationType }\n     *     \n     */\n",
    "105245": "    /**\n     * Sets the value of the diameter property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "105248": "    /**\n     * Gets the value of the locationPrecision property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105251": "    /**\n     * Sets the value of the locationPrecision property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105254": "    /**\n     * Gets the value of the locationComment property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105256": "    /**\n     * Sets the value of the locationComment property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105261": "    /**\n     * Gets the value of the address property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasAddress }\n     *     \n     */\n",
    "105263": "    /**\n     * Sets the value of the address property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasAddress }\n     *     \n     */\n",
    "105273": "    /**\n     * Gets the value of the normalTridas property.\n     * \n     * @return\n     *     possible object is\n     *     {@link NormalTridasUnit }\n     *     \n     */\n",
    "105275": "    /**\n     * Sets the value of the normalTridas property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link NormalTridasUnit }\n     *     \n     */\n",
    "105286": "    /**\n     * Gets the value of the count property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105290": "    /**\n     * Sets the value of the count property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105311": "    /**\n     * Gets the value of the normalStd property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105313": "    /**\n     * Sets the value of the normalStd property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105318": "    /**\n     * Gets the value of the normalId property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105321": "    /**\n     * Sets the value of the normalId property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105327": "    /**\n     * Gets the value of the normal property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105330": "    /**\n     * Sets the value of the normal property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105336": "    /**\n     * Gets the value of the lang property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105339": "    /**\n     * Sets the value of the lang property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105351": "    /**\n     * Gets the value of the preferredSeries property.\n     * \n     * @return\n     *     possible object is\n     *     {@link SeriesLink }\n     *     \n     */\n",
    "105353": "    /**\n     * Sets the value of the preferredSeries property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link SeriesLink }\n     *     \n     */\n",
    "105382": "    /**\n     * Gets the value of the azimuth property.\n     * \n     * @return\n     *     possible object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "105383": "    /**\n     * Sets the value of the xLink property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link SeriesLink.XLink }\n     *     \n     */\n",
    "105384": "    /**\n     * Sets the value of the azimuth property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link BigDecimal }\n     *     \n     */\n",
    "105388": "    /**\n     * Sets the value of the idRef property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link SeriesLink.IdRef }\n     *     \n     */\n",
    "105419": "        /**\n         * Gets the value of the ref property.\n         * \n         * @return\n         *     possible object is\n         *     {@link Object }\n         *     \n         */\n",
    "105423": "        /**\n         * Sets the value of the ref property.\n         * \n         * @param value\n         *     allowed object is\n         *     {@link Object }\n         *     \n         */\n",
    "105429": "    /**\n     * Gets the value of the depth property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Double }\n     *     \n     */\n",
    "105431": "    /**\n     * Sets the value of the depth property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Double }\n     *     \n     */\n",
    "105459": "    /**\n     * Sets the value of the projectCategory property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.ProjectCategory }\n     *     \n     */\n",
    "105475": "    /**\n     * Sets the value of the projectType property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.ProjectType }\n     *     \n     */\n",
    "105484": "    /**\n     * Gets the value of the domain property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105485": "    /**\n     * Sets the value of the domain property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105502": "    /**\n     * Gets the value of the variable property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasVariable }\n     *     \n     */\n",
    "105503": "    /**\n     * Sets the value of the variable property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVariable }\n     *     \n     */\n",
    "105505": "    /**\n     * Sets the value of the objectType property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.ObjectType }\n     *     \n     */\n",
    "105512": "    /**\n     * Gets the value of the unitless property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasUnitless }\n     *     \n     */\n",
    "105513": "    /**\n     * Sets the value of the unitless property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasUnitless }\n     *     \n     */\n",
    "105519": "    /**\n     * Sets the value of the values property.\n     * \n     * @param values\n     *     allowed object is\n     *     {@link TridasValue }\n     *     \n     */\n",
    "105532": "    /**\n     * Sets the value of the elementType property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.ElementType }\n     *     \n     */\n",
    "105549": "    /**\n     * Gets the value of the samplingDate property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Date }\n     *     \n     */\n",
    "105550": "    /**\n     * Sets the value of the sampleType property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.SampleType }\n     *     \n     */\n",
    "105552": "    /**\n     * Sets the value of the samplingDate property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Date }\n     *     \n     */\n",
    "105555": "    /**\n     * Gets the value of the position property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105557": "    /**\n     * Sets the value of the position property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105562": "    /**\n     * Gets the value of the state property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105564": "    /**\n     * Sets the value of the state property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105565": "    /**\n     * Sets the value of the derivedSeriesType property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.DerivedSeriesType }\n     *     \n     */\n",
    "105576": "    /**\n     * Gets the value of the knots property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Boolean }\n     *     \n     */\n",
    "105583": "    /**\n     * Sets the value of the knots property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Boolean }\n     *     \n     */\n",
    "105597": "    /**\n     * Gets the value of the normalTridas property.\n     * \n     * @return\n     *     possible object is\n     *     {@link NormalTridasShape }\n     *     \n     */\n",
    "105599": "    /**\n     * Sets the value of the normalTridas property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link NormalTridasShape }\n     *     \n     */\n",
    "105602": "    /**\n     * Sets the value of the elementTaxon property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.ElementTaxon }\n     *     \n     */\n",
    "105612": "    /**\n     * Gets the value of the radiusPlaceholder property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasRadiusPlaceholder }\n     *     \n     */\n",
    "105620": "    /**\n     * Sets the value of the radiusPlaceholder property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasRadiusPlaceholder }\n     *     \n     */\n",
    "105634": "    /**\n     * Sets the value of the elementShape property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.ElementShape }\n     *     \n     */\n",
    "105635": "    /**\n     * Gets the value of the normalTridas property.\n     * \n     * @return\n     *     possible object is\n     *     {@link NormalTridasCategory }\n     *     \n     */\n",
    "105636": "    /**\n     * Sets the value of the normalTridas property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link NormalTridasCategory }\n     *     \n     */\n",
    "105652": "    /**\n     * Gets the value of the coverageTemporal property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105653": "    /**\n     * Sets the value of the coverageTemporal property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105656": "    /**\n     * Gets the value of the coverageTemporalFoundation property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105657": "    /**\n     * Sets the value of the coverageTemporalFoundation property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105665": "    /**\n     * Sets the value of the measurementSeriesMeasuringMethod property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.MeasurementSeriesMeasuringMethod }\n     *     \n     */\n",
    "105672": "    /**\n     * Gets the value of the ringCount property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105673": "    /**\n     * Sets the value of the ringCount property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105677": "    /**\n     * Gets the value of the averageRingWidth property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Double }\n     *     \n     */\n",
    "105678": "    /**\n     * Sets the value of the averageRingWidth property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Double }\n     *     \n     */\n",
    "105681": "    /**\n     * Gets the value of the nrOfUnmeasuredInnerRings property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105683": "    /**\n     * Sets the value of the nrOfUnmeasuredInnerRings property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105685": "    /**\n     * Sets the value of the valuesVariable property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.ValuesVariable }\n     *     \n     */\n",
    "105687": "    /**\n     * Gets the value of the nrOfUnmeasuredOuterRings property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n",
    "105689": "    /**\n     * Sets the value of the nrOfUnmeasuredOuterRings property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n",
    "105692": "    /**\n     * Gets the value of the pith property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasPith }\n     *     \n     */\n",
    "105693": "    /**\n     * Sets the value of the pith property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasPith }\n     *     \n     */\n",
    "105697": "    /**\n     * Gets the value of the heartwood property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasHeartwood }\n     *     \n     */\n",
    "105698": "    /**\n     * Gets the value of the measurementSeriesPlaceholder property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasMeasurementSeriesPlaceholder }\n     *     \n     */\n",
    "105699": "    /**\n     * Sets the value of the measurementSeriesPlaceholder property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasMeasurementSeriesPlaceholder }\n     *     \n     */\n",
    "105700": "    /**\n     * Sets the value of the heartwood property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasHeartwood }\n     *     \n     */\n",
    "105705": "    /**\n     * Gets the value of the sapwood property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasSapwood }\n     *     \n     */\n",
    "105707": "    /**\n     * Sets the value of the valuesRemark property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.ValuesRemark }\n     *     \n     */\n",
    "105709": "    /**\n     * Sets the value of the sapwood property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasSapwood }\n     *     \n     */\n",
    "105714": "    /**\n     * Gets the value of the bark property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasBark }\n     *     \n     */\n",
    "105716": "    /**\n     * Sets the value of the bark property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasBark }\n     *     \n     */\n",
    "105733": "    /**\n     * Sets the value of the locationType property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.LocationType }\n     *     \n     */\n",
    "105743": "    /**\n     * Sets the value of the series property.\n     * \n     * @param series\n     *     allowed object is\n     *     {@link SeriesLink }\n     *     \n     */\n",
    "105773": "    /**\n     * Gets the value of the normalTridas property.\n     * \n     * @return\n     *     possible object is\n     *     {@link NormalTridasMeasuringMethod }\n     *     \n     */\n",
    "105774": "    /**\n     * Sets the value of the normalTridas property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link NormalTridasMeasuringMethod }\n     *     \n     */\n",
    "105775": "    /**\n     * Sets the value of the name property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasLaboratory.Name }\n     *     \n     */\n",
    "105780": "    /**\n     * Sets the value of the globalUnit property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary.GlobalUnit }\n     *     \n     */\n",
    "105795": "    /**\n     * Gets the value of the vocabulary property.\n     * \n     * @return\n     *     possible object is\n     *     {@link TridasVocabulary }\n     *     \n     */\n",
    "105796": "    /**\n     * Sets the value of the vocabulary property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link TridasVocabulary }\n     *     \n     */\n",
    "105817": "    /**\n     * Gets the value of the linkSeries property.\n     * \n     * @return\n     *     possible object is\n     *     {@link SeriesLink }\n     *     \n     */\n",
    "105818": "    /**\n     * Sets the value of the linkSeries property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link SeriesLink }\n     *     \n     */\n",
    "105831": "        /**\n         * Gets the value of the acronym property.\n         * \n         * @return\n         *     possible object is\n         *     {@link String }\n         *     \n         */\n",
    "105835": "        /**\n         * Sets the value of the acronym property.\n         * \n         * @param value\n         *     allowed object is\n         *     {@link String }\n         *     \n         */\n",
    "105886": "  /**\n   * Returns string representation.\n   */\n",
    "105917": "/**\n * Materialization strategy that just renders on demand\n * @author Aaron Hamid (aaron at users dot sf dot net)\n */\n",
    "105979": "    /**\n     * Takes a source-code with OCL-contrains in\n     * annotations and inserts methods and calls to check\n     * these contrains.<br/>\n     * Used by {@link #generateForSource(File, File)}\n     * @param source the source-code to parse\n     * @return the modified source-code or null on error\n     */\n",
    "105981": "    /**\n     * Takes a source-code with OCL-contrains in\n     * annotations and inserts methods and calls to check\n     * these contrains.<br/>\n     * Used by {@link #generateForSource(File, File)}\n     * @param source the source-code to parse\n     * @throws BadLocationException on Errors inserting the generated source-code\n     */\n",
    "105983": "    /**\n     * Takes a source-code with OCL-contrains in\n     * annotations and inserts methods and calls to check\n     * these contrains.<br/>\n     * Used by {@link #generateForSource(File, File)}\n     * @param source the source-code to parse\n     * @param cunit (may be null!) Optional existing compilation-unit representing source\n     * @return the modified source-code\n     */\n",
    "106061": "    /**\n     * Tests if a method returns void.\n     * @param assertedMethod the method to test\n     * @return true if it returns void\n     */\n",
    "106063": "        /**\n         * Sets the value of the shapes property.\n         * \n         * @param shapes\n         *     allowed object is\n         *     {@link TridasShape }\n         *     \n         */\n",
    "106064": "    /**\n     * We meight have a comment as the last statement and a return before\n     * that so this method looks for a return from the last statement to\n     * the first ignoring comments and returns true if the first real statement\n     * found that way is a return-statement.\n     * @param statements the statements of a block\n     * @return true if the last executable statement is a return-statement\n     */\n",
    "106090": "    /**\n     * For a paramatrized type with 1 parameter, get the parameter-type.\n     * @param paramType the parametrized type\n     * @return the fully qualified Class-Name\n     */\n",
    "106091": "    /**\n     * For a paramatrized type with 2 parameter, get the parameter-type.\n     * @param paramType the parametrized type\n     * @return the fully qualified Class-Name\n     */\n",
    "106093": "    /**\n     * Using the imports, find the fully qualified class-name.\n     * @param unqualifiedName name of the class\n     * @return fully qualified name of the class\n     */\n",
    "106142": "    /**\n     * Takes a lastSource-code with OCL-contrains in\n     * annotations and inserts methods and calls to check\n     * these contrains.\n     * @param type the class-decl to work on\n     * @param mon (may be null) Listener to progress-information\n     */\n",
    "106152": "    /**\n     * Is save to call even if it's unneeded because\n     * ${@link #deferedCodeInsertion} is falsw (default) and\n     * thus generated code is inserted the moment it is ready to.<br/>\n     * This method does not work in parallel because code-insertions are fast.\n     * @see ${@link #deferedCodeInsertion}\n     */\n",
    "106153": "    /**\n     * Takes a lastSource-code with OCL-contrains in\n     * annotations and inserts methods and calls to check\n     * these contrains.<br/>\n     * Used by {@link #generateForSource(File, File)}\n     * @param lastSource the lastSource-code to parse\n     * @param cunit (may be null!) Optional existing compilation-lastUnit representing lastSource\n     * @return the modified lastSource-code\n     */\n",
    "106154": "    /**\n     * Takes a lastSource-code with OCL-contrains in\n     * annotations and inserts methods and calls to check\n     * these contrains.<br/>\n     * Used by {@link #generateForSource(File, File)}\n     * @param lastSource the lastSource-code to parse\n     * @return the modified lastSource-code\n     */\n",
    "106182": "    /**\n     * Remove the parent-statement of node if the MethodInvocation\n     * is inside an 'assert' or 'if'.\n     * @param node the method-invocation to parse\n     */\n",
    "106187": "    /**\n     * Is save to call even if it's unneeded because\n     * ${@link #deferedCodeInsertion} is falsw (default) and\n     * thus generated code is inserted the moment it is ready to.<br/>\n     * This method does not work in parallel because code-insertions are fast.\n     * @see ${@link #deferedCodeInsertion}\n     */\n",
    "106188": "    /**\n     * Takes a lastSource-code with OCL-contrains in\n     * annotations and inserts methods and calls to check\n     * these contrains.<br/>\n     * Used by {@link #generateForSource(File, File)}\n     * @param lastSource the lastSource-code to parse\n     * @param cunit (may be null!) Optional existing compilation-lastUnit representing lastSource\n     * @return the modified lastSource-code\n     */\n",
    "106189": "    /**\n     * Takes a lastSource-code with OCL-contrains in\n     * annotations and inserts methods and calls to check\n     * these contrains.<br/>\n     * Used by {@link #generateForSource(File, File)}\n     * @param lastSource the lastSource-code to parse\n     * @return the modified lastSource-code\n     */\n",
    "106227": "    /** if a then b else c endif   <br>\n     *  Ocl? result=(a.isTrue()) ? (b) : (c);\n     *  <p>\n     *  For each if expression a new variable is generated.\n     */\n",
    "106238": "    /** a + b <br>\n     *  Ocl? result=Ocl.toOcl?(a).add(Ocl.toOcl?(b)); <br>\n     *  with Ocl? = OclReal | OclInteger | OclSet\n     *  <p>\n     *  A variable is generated for each AAdditiveExpression with tail.\n     */\n",
    "106242": "  /** This method is implemented to update the default context for the\n   *  FeatureCall's FeatureCallParameter node if the feature call is a\n   *  call to an iterating method.\n   */\n",
    "106243": "    /** not a <br>\n     *  OclBoolean result=a.not();\n     *  <p>\n     *  A variable is generated for each AUnaryUnaryExpression.\n     */\n",
    "106254": "    /** This method breaks the usual pattern of generating Java code postfix\n     *  since the collection must be declared and instanciated prior to setting\n     *  its contents (in <CODE>outAExpressionListOrRange</CODE>).\n     */\n",
    "106271": "    /**\n     * Determine if code ala \"A.featurePathName\" can be used or\n     * if we have to use A.getFeature(\"featurePathName\")\n     *\n     * @param appliedTo\n     * @param featurePathName\n     * @return\n     */\n",
    "106285": "    /** append the Java code for an AActualParameterList, excluding the\n     *  parentheses\n     *\n     *  @param apl may be null, then nothing is done\n     */\n",
    "106311": "        /**\n         * Sets the value of the units property.\n         * \n         * @param units\n         *     allowed object is\n         *     {@link TridasUnit }\n         *     \n         */\n",
    "106312": "  /** adds all expression types of an AActualParameterList to a List\n   *\n   *  @param recurse <code>apply(this)</code> is called for all these expressions\n   */\n",
    "106390": "  /** This method calls <CODE>union(OclSequence seq)</CODE> if the argument\n   *  <CODE>col</CODE> is of type <CODE>OclSequence</CODE>.\n   *  Return an undefined value, if not.\n   *\n   *  @see #union(OclSequence seq)\n   */\n",
    "106413": "  /** Please consult the documentation of <CODE>OclRoot.getFeatureAsCollection\n   *  </CODE> for a detailed explanation.\n   *\n   *  @see OclRoot#getFeatureAsCollection(String name)\n   */\n",
    "106439": "  /** This method checks the uniqueness of a given expression, evaluated for\n   *  all members of the collection. This is done by storing all evaluation\n   *  results in a HashSet. If an element is added that was already contained\n   *  in the HashSet, execution is stopped and FALSE returned.\n   *\n   *  @return OclBoolean.TRUE iff the OCL expression represented by parameter <CODE>eval</CODE>\n   *          returns different results for all members of the set\n   */\n",
    "106444": "        /**\n         * Sets the value of the locationTypes property.\n         * \n         * @param locationTypes\n         *     allowed object is\n         *     {@link NormalTridasLocationType }\n         *     \n         */\n",
    "106449": "  /** This method is the most general one of the iterating methods. All others\n   *  can be expressed through this.\n   *\n   *  @param accum the initial value of the accumulator that is updated\n   *         every iteration step by the result of eval\n   *  @see OclContainer\n   */\n",
    "106453": "  /** This method does almost the complete work necessary to implement\n   *  <CODE>select</CODE>. The only thing that has to be done in subclasses is\n   *  to call this method, get the result of the select operation as\n   *  a java.lang.List and wrap the result in the correct Ocl Collection.\n   *\n   *  @return <code>null</code> if this collection is undefined\n   */\n",
    "106467": "  /** This method does almost the complete work necessary to implement\n   *  <CODE>collect</CODE>. The only thing that has to be done in subclasses is\n   *  to call this method, get the result of the select operation as\n   *  a java.lang.List and wrap the result in the correct Ocl Collection.\n   *\n   *  @return <code>null</code> if this collection is undefined\n   */\n",
    "106476": "  /** checks if this collection contains the element given as argument\n   *  (i.e., if this collection contains an OclRoot that is equal to\n   *  the argument)\n   *\n   *  @see OclRoot#isEqualTo(Object o)\n   */\n",
    "106488": "\t/**\n\t * Remove the Ocl4Java-Builder from the Project\n\t */\n",
    "106493": "  /** check if there are any elements in the collection; an undefined\n   *  collection is not considered empty\n   */\n",
    "106500": "  /** This method sums up all elements of the collection. If any element does\n   *  not implement the interface <CODE>OclAddable</CODE>, the result is undefined.\n   *  If the collection is empty, an OclInteger representing 0 is returned.\n   *\n   *  @see OclAddable\n   */\n",
    "106515": "\t/**\n\t * This method is called upon plug-in activation\n\t */\n",
    "106516": "\t/**\n\t * This method is called when the plug-in is stopped\n\t */\n",
    "106521": "  /** an OclIterator is necessary to invoke the \"iterating methods\", e.g.\n   *  collect, forAll, iterate\n   */\n",
    "106546": "  /** Sets this collection to contain the range from <code>begin</code> to\n   *  <code>end</code>. This method is not specified as operation of the OCL\n   *  type but is necessary to convert range collection literals to Java. It\n   *  is not implemented side-effect free as the collection operations defined\n   *  in the OCL specification but changes the state of the OclCollection\n   *  called. Elements that are in the collection prior to the call to this\n   *  method remain there.\n   *\n   *  Makes this Collection undefined if begin is greater than end.\n   */\n",
    "106550": "  /** Sets this collection to contain the the object given as parameter.\n   *  This method is not specified as operation of the OCL type but is\n   *  necessary to convert collection literals to Java. It is not implemented\n   *  side-effect free but changes the called OclCollection. Elements that\n   *  are in the collection prior to the call to this\n   *  method remain there.\n   */\n",
    "106552": "\t/**\n\t * Remove all problem-markers we added.\n\t * @param file the file to remove all markers from\n\t */\n",
    "106574": "        /**\n         * Implements the IResourceDeltaVisitor-contract.\n         * @see org.eclipse.core.resources.IResourceDeltaVisitor#visit(org.eclipse.core.resources.IResourceDelta)\n         */\n",
    "106578": "        /**\n         * Implements the IResourceVisitor-contract.\n         * @see IResourceVisitor#visit(org.eclipse.core.resources.IResource)\n         */\n",
    "106594": "    /**\n     * Check if the user canceled the build.\n     * @param monitor\n     */\n",
    "106683": "        /**\n         * Sets the value of the measuringMethods property.\n         * \n         * @param measuringMethods\n         *     allowed object is\n         *     {@link TridasMeasuringMethod }\n         *     \n         */\n",
    "106905": "    /**\n     * Test code to fill something into the cache.\n     */\n",
    "106906": "    /**\n     * Signals that an article with a given mapKey is available.\n     */\n",
    "106907": "    /**\n     * Checks wheter an article with a given mapKey is available.\n     */\n",
    "106977": "    /**\n     * Authenticate by username and password\n     */\n",
    "107066": "    /**\n     * Returns true if the native evaluation library is loaded.\n     */\n",
    "107073": "    /**\n     * Get a numerical ranking of this hand. Uses a Native Method. (Make sure\n     * the feval library is installed!) Uses GNU Poker Lib: eval.h\n     * \n     * @param h\n     *            a 5-7 card hand\n     * @return a unique number representing the hand strength of the best 5-card\n     *         poker hand in the given 7 cards. The higher the number, the\n     *         better the hand is.\n     */\n",
    "107079": "    /**\n     * Get the size of the hand.\n     * \n     * @return the number of cards in the hand\n     */\n",
    "107080": "    /**\n     * Get a numerical ranking of this hand. Uses a Native Method. (Make sure\n     * the feval library is installed!) Uses GNU Poker Lib: eval.h\n     * \n     * @param c1\n     *            first hole card\n     * @param c2\n     *            second hole card\n     * @param h\n     *            a 3-5 card hand\n     * @return a unique number representing the hand strength of the best 5-card\n     *         poker hand in the given cards and board. The higher the number,\n     *         the better the hand is.\n     */\n",
    "107081": "    /**\n     * Remove the last card in the hand.\n     */\n",
    "107082": "    /**\n     * Remove the all cards from the hand.\n     */\n",
    "107083": "    /**\n     * Add a card to the hand. (if there is room)\n     * \n     * @param c\n     *            the card to add\n     * @return true if the card was added, false otherwise\n     */\n",
    "107084": "    /**\n     * Add a card to the hand. (if there is room)\n     * \n     * @param i\n     *            the index value of the card to add\n     * @return true if the card was added, false otherwise\n     */\n",
    "107085": "    /**\n     * Get the a specified card in the hand\n     * \n     * @param pos\n     *            the position (1..n) of the card in the hand\n     * @return the card at position pos\n     */\n",
    "107086": "    /**\n     * Add a card to the hand. (if there is room)\n     * \n     * @param c\n     *            the card to add\n     * @return true if the card was added, false otherwise\n     */\n",
    "107087": "    /**\n     * Bubble Sort the hand to have cards in descending order, but card index.\n     * Used for database indexing.\n     */\n",
    "107088": "    /**\n     * Get a string representation of this CardGroup.\n     */\n",
    "107089": "    /**\n     * Compares two 7 card hands against each other.\n     * \n     * @param h1\n     *            The first hand\n     * @param h2\n     *            The second hand\n     * @return 1 = first hand is best, 2 = second hand is best, 0 = tie\n     */\n",
    "107096": "    /**\n     * Compares two 5-7 card hands against each other.\n     * \n     * @param h1\n     *            The rank of the first hand\n     * @param h2\n     *            The second hand\n     * @return 1 = first hand is best, 2 = second hand is best, 0 = tie\n     */\n",
    "107101": "    /**\n     * Get a numerical ranking of this hand. Uses a Native Method. (Make sure\n     * the feval library is installed!) Uses GNU Poker Lib: eval7.h\n     * \n     * @param h\n     *            a 7 card hand\n     * @return a unique number representing the hand strength of the best 5-card\n     *         poker hand in the given 7 cards. The higher the number, the\n     *         better the hand is.\n     */\n",
    "107106": "    /**\n     * Calculates the probability of having the best hand against several\n     * opponents.\n     * \n     * @param c1\n     *            hole card 1\n     * @param c2\n     *            hole card 2\n     * @param h\n     *            the board\n     * @param np\n     *            the number of active opponents in the hand\n     * @return probability of having the best hand.\n     */\n",
    "107119": "    /**\n     * Get the number of hands worse than the last hand ranked.\n     */\n",
    "107120": "    /**\n     * Adds new row in the table with respective columns.\n     * @param pColumns Columns data of the new poker table.\n     */\n",
    "107121": "    /**\n     * Removes poker table from the list.\n     * @param pKey\tKey to identify poker table row.\n     */\n",
    "107122": "    /**\n     * Selects a poker table and send an notify to the listeners .\n     * @param pKey\tKey to identify poker table row.\n     */\n",
    "107123": "    /**\n     * Get the number of hands better than the last hand ranked.\n     */\n",
    "107124": "    /**\n     * Changes name of the poker table.\n     * @param pKey \tKey to identify poker table row.\n     * @param pName\tNew name.\n     */\n",
    "107126": "    /**\n     * Get the number of hands tied with the last hand ranked.\n     */\n",
    "107135": "    /**\n     * Get the best 5 card poker hand from a 7 card hand\n     * \n     * @param h\n     *            Any 7 card poker hand\n     * @return A CardGroup containing the highest ranked 5 card hand possible\n     *         from the input.\n     */\n",
    "107143": "    /**\n     * Get a string from a hand type.\n     * \n     * @param handtype\n     *            number coding a hand type\n     * @return name of hand type\n     */\n",
    "107249": "    /**\n     * Return the integer index for this card.\n     * \n     * @return the card's index value\n     */\n",
    "107251": "    /**\n     * Change the index of the card.\n     * \n     * @param index\n     *            the new index of the card\n     */\n",
    "107253": "    /**\n     * Change this card to another. This is more practical than creating a new\n     * object for optimization reasons.\n     * \n     * @param rank\n     *            face value of the card\n     * @param suit\n     *            suit of the card\n     */\n",
    "107256": "    /**\n     * Obtain the rank of this card\n     * \n     * @return rank\n     */\n",
    "107259": "    /**\n     * Obtain the suit of this card\n     * \n     * @return suit\n     */\n",
    "107261": "    /**\n     * Obtain a String representation of this Card\n     * \n     * @return A string for this card\n     */\n",
    "107267": "        /**\n         * Sets the value of the categories property.\n         * \n         * @param categories\n         *     allowed object is\n         *     {@link TridasCategory }\n         *     \n         */\n",
    "107346": "    /**\n     * Removes <code>newChild</code> from its present parent (if it has a\n     * parent), sets the child's parent to this node, and then adds the child\n     * to this node's child array at index <code>childIndex</code>.\n     * <code>newChild</code> must not be null and must not be an ancestor of\n     * this node.\n     *\n     * @param\tnewChild\tthe MutableTreeNode to insert under this node\n     * @param\tchildIndex\tthe index in this node's child array\n     *\t\t\t\twhere this node is to be inserted\n     * @exception\tArrayIndexOutOfBoundsException\tif\n     *\t\t\t\t<code>childIndex</code> is out of bounds\n     * @exception\tIllegalArgumentException\tif\n     *\t\t\t\t<code>newChild</code> is null or is an\n     *\t\t\t\tancestor of this node\n     * @exception\tIllegalStateException\tif this node does not allow\n     *\t\t\t\t\t\tchildren\n     * @see\t#isNodeDescendant\n     */\n",
    "107357": "    /**\n     * Removes the child at the specified index from this node's children\n     * and sets that node's parent to null. The child node to remove\n     * must be a <code>MutableTreeNode</code>.\n     *\n     * @param\tchildIndex\tthe index in this node's child array\n     *\t\t\t\tof the child to remove\n     * @exception\tArrayIndexOutOfBoundsException\tif\n     *\t\t\t\t<code>childIndex</code> is out of bounds\n     */\n",
    "107362": "    /**\n     * Sets this node's parent to <code>newParent</code> but does not \n     * change the parent's child array.  This method is called from\n     * <code>insert()</code> and <code>remove()</code> to\n     * reassign a child's parent, it should not be messaged from anywhere\n     * else.\n     *\n     * @param\tnewParent\tthis node's new parent\n     */\n",
    "107368": "    /**\n     * Returns this node's parent or null if this node has no parent.\n     *\n     * @return\tthis node's parent TreeNode, or null if this node has no parent\n     */\n",
    "107373": "    /**\n     * Returns the child at the specified index in this node's child array.\n     *\n     * @param\tindex\tan index into this node's child array\n     * @exception\tArrayIndexOutOfBoundsException\tif <code>index</code>\n     *\t\t\t\t\t\tis out of bounds\n     * @return\tthe TreeNode in this node's child array at  the specified index\n     */\n",
    "107378": "    /**\n     * Returns the number of children of this node.\n     *\n     * @return\tan int giving the number of children of this node\n     */\n",
    "107383": "    /**\n     * Returns the index of the specified child in this node's child array.\n     * If the specified node is not a child of this node, returns\n     * <code>-1</code>.  This method performs a linear search and is O(n)\n     * where n is the number of children.\n     *\n     * @param\taChild\tthe TreeNode to search for among this node's children\n     * @exception\tIllegalArgumentException\tif <code>aChild</code>\n     *\t\t\t\t\t\t\tis null\n     * @return\tan int giving the index of the node in this node's child \n     *          array, or <code>-1</code> if the specified node is a not\n     *          a child of this node\n     */\n",
    "107393": "    /**\n     * Creates and returns a forward-order enumeration of this node's\n     * children.  Modifying this node's child array invalidates any child\n     * enumerations created before the modification.\n     *\n     * @return\tan Enumeration of this node's children\n     */\n",
    "107402": "    /**\n     * Determines whether or not this node is allowed to have children. \n     * If <code>allows</code> is false, all of this node's children are\n     * removed.\n     * <p>\n     * Note: By default, a node allows children.\n     *\n     * @param\tallows\ttrue if this node is allowed to have children\n     */\n",
    "107413": "    /**\n     * Returns true if this node is allowed to have children.\n     *\n     * @return\ttrue if this node allows children, else false\n     */\n",
    "107421": "    /**\n     * Sets the user object for this node to <code>userObject</code>.\n     *\n     * @param\tuserObject\tthe Object that constitutes this node's \n     *                          user-specified data\n     * @see\t#getUserObject\n     * @see\t#toString\n     */\n",
    "107429": "    /**\n     * Returns this node's user object.\n     *\n     * @return\tthe Object stored at this node by the user\n     * @see\t#setUserObject\n     * @see\t#toString\n     */\n",
    "107430": "\t/**\n\t * This method initializes jToggleButton\t\n\t * \t\n\t * @return javax.swing.JToggleButton\t\n\t */    \n",
    "107435": "\t/**\n\t * This method initializes jTextArea1\t\n\t * \t\n\t * @return javax.swing.JTextArea\t\n\t */    \n",
    "107438": "    /**\n     * Removes the subtree rooted at this node from the tree, giving this\n     * node a null parent.  Does nothing if this node is the root of its\n     * tree.\n     */\n",
    "107445": "    /**\n     * Removes <code>aChild</code> from this node's child array, giving it a\n     * null parent.\n     *\n     * @param\taChild\ta child of this node to remove\n     * @exception\tIllegalArgumentException\tif <code>aChild</code>\n     *\t\t\t\t\tis null or is not a child of this node\n     */\n",
    "107453": "    /**\n     * Removes all of this node's children, setting their parents to null.\n     * If this node has no children, this method does nothing.\n     */\n",
    "107473": "    /**\n     * Returns true if <code>anotherNode</code> is an ancestor of this node\n     * -- if it is this node, this node's parent, or an ancestor of this\n     * node's parent.  (Note that a node is considered an ancestor of itself.)\n     * If <code>anotherNode</code> is null, this method returns false.  This\n     * operation is at worst O(h) where h is the distance from the root to\n     * this node.\n     *\n     * @see\t\t#isNodeDescendant\n     * @see\t\t#getSharedAncestor\n     * @param\tanotherNode\tnode to test as an ancestor of this node\n     * @return\ttrue if this node is a descendant of <code>anotherNode</code>\n     */\n",
    "107482": "    /**\n     * Returns true if <code>anotherNode</code> is a descendant of this node\n     * -- if it is this node, one of this node's children, or a descendant of\n     * one of this node's children.  Note that a node is considered a\n     * descendant of itself.  If <code>anotherNode</code> is null, returns\n     * false.  This operation is at worst O(h) where h is the distance from the\n     * root to <code>anotherNode</code>.\n     *\n     * @see\t#isNodeAncestor\n     * @see\t#getSharedAncestor\n     * @param\tanotherNode\tnode to test as descendant of this node\n     * @return\ttrue if this node is an ancestor of <code>anotherNode</code>\n     */\n",
    "107505": "    /**\n     * Returns the depth of the tree rooted at this node -- the longest\n     * distance from this node to a leaf.  If this node has no children,\n     * returns 0.  This operation is much more expensive than\n     * <code>getLevel()</code> because it must effectively traverse the entire\n     * tree rooted at this node.\n     *\n     * @see\t#getLevel\n     * @return\tthe depth of the tree whose root is this node\n     */\n",
    "107513": "    /**\n     * Returns the number of levels above this node -- the distance from\n     * the root to this node.  If this node is the root, returns 0.\n     *\n     * @see\t#getDepth\n     * @return\tthe number of levels above this node\n     */\n",
    "107521": "    /**\n     * Returns the root of the tree that contains this node.  The root is\n     * the ancestor with a null parent.\n     *\n     * @see\t#isNodeAncestor\n     * @return\tthe root of the tree that contains this node\n     */\n",
    "107530": "    /**\n     * Returns true if this node is the root of the tree.  The root is\n     * the only node in the tree with a null parent; every tree has exactly\n     * one root.\n     *\n     * @return\ttrue if this node is the root of its tree\n     */\n",
    "107542": "    /**\n     * Returns the node that follows this node in a preorder traversal of this\n     * node's tree.  Returns null if this node is the last node of the\n     * traversal.  This is an inefficient way to traverse the entire tree; use\n     * an enumeration, instead.\n     *\n     * @see\t#preorderEnumeration\n     * @return\tthe node that follows this node in a preorder traversal, or\n     *\t\tnull if this node is last\n     */\n",
    "107555": "    /**\n     * Returns the node that precedes this node in a preorder traversal of\n     * this node's tree.  Returns <code>null</code> if this node is the\n     * first node of the traversal -- the root of the tree. \n     * This is an inefficient way to\n     * traverse the entire tree; use an enumeration, instead.\n     *\n     * @see\t#preorderEnumeration\n     * @return\tthe node that precedes this node in a preorder traversal, or\n     *\t\tnull if this node is the first\n     */\n",
    "107560": "    /**\n     * Creates and returns an enumeration that traverses the subtree rooted at\n     * this node in preorder.  The first node returned by the enumeration's\n     * <code>nextElement()</code> method is this node.<P>\n     *\n     * Modifying the tree by inserting, removing, or moving a node invalidates\n     * any enumerations created before the modification.\n     *\n     * @see\t#postorderEnumeration\n     * @return\tan enumeration for traversing the tree in preorder\n     */\n",
    "107567": "    /**\n     * Creates and returns an enumeration that traverses the subtree rooted at\n     * this node in postorder.  The first node returned by the enumeration's\n     * <code>nextElement()</code> method is the leftmost leaf.  This is the\n     * same as a depth-first traversal.<P>\n     *\n     * Modifying the tree by inserting, removing, or moving a node invalidates\n     * any enumerations created before the modification.\n     *\n     * @see\t#depthFirstEnumeration\n     * @see\t#preorderEnumeration\n     * @return\tan enumeration for traversing the tree in postorder\n     */\n",
    "107575": "    /**\n     * Creates and returns an enumeration that traverses the subtree rooted at\n     * this node in breadth-first order.  The first node returned by the\n     * enumeration's <code>nextElement()</code> method is this node.<P>\n     *\n     * Modifying the tree by inserting, removing, or moving a node invalidates\n     * any enumerations created before the modification.\n     *\n     * @see\t#depthFirstEnumeration\n     * @return\tan enumeration for traversing the tree in breadth-first order\n     */\n",
    "107579": "  /**\n  * Show the splash screen to the end user.\n  *\n  * <P>Once this method returns, the splash screen is realized, which means \n  * that almost all work on the splash screen should proceed through the event \n  * dispatch thread. In particular, any call to <code>dispose</code> for the \n  * splash screen must be performed in the event dispatch thread.\n  */\n",
    "107581": "  /**\n  * Centers the frame on the screen.\n  *\n  * This centering service is more or less in {@link UiUtil}; this duplication \n  * is justified only because the use of {@link UiUtil} would entail more \n  * class loading, which is not desirable for a splash screen.\n  */\n",
    "107582": "    /**\n     * Creates and returns an enumeration that traverses the subtree rooted at\n     * this node in depth-first order.  The first node returned by the\n     * enumeration's <code>nextElement()</code> method is the leftmost leaf.\n     * This is the same as a postorder traversal.<P>\n     *\n     * Modifying the tree by inserting, removing, or moving a node invalidates\n     * any enumerations created before the modification.\n     *\n     * @see\t#breadthFirstEnumeration\n     * @see\t#postorderEnumeration\n     * @return\tan enumeration for traversing the tree in depth-first order\n     */\n",
    "107599": "    /**\n     * Creates and returns an enumeration that follows the path from\n     * <code>ancestor</code> to this node.  The enumeration's\n     * <code>nextElement()</code> method first returns <code>ancestor</code>,\n     * then the child of <code>ancestor</code> that is an ancestor of this\n     * node, and so on, and finally returns this node.  Creation of the\n     * enumeration is O(m) where m is the number of nodes between this node\n     * and <code>ancestor</code>, inclusive.  Each <code>nextElement()</code>\n     * message is O(1).<P>\n     *\n     * Modifying the tree by inserting, removing, or moving a node invalidates\n     * any enumerations created before the modification.\n     *\n     * @see\t\t#isNodeAncestor\n     * @see\t\t#isNodeDescendant\n     * @exception\tIllegalArgumentException if <code>ancestor</code> is\n     *\t\t\t\t\t\tnot an ancestor of this node\n     * @return\tan enumeration for following the path from an ancestor of\n     *\t\tthis node to this one\n     */\n",
    "107611": "    /**\n     * Returns true if <code>aNode</code> is a child of this node.  If\n     * <code>aNode</code> is null, this method returns false.\n     *\n     * @return\ttrue if <code>aNode</code> is a child of this node; false if \n     *  \t\t<code>aNode</code> is null\n     */\n",
    "107626": "    /**\n     * Returns this node's first child.  If this node has no children,\n     * throws NoSuchElementException.\n     *\n     * @return\tthe first child of this node\n     * @exception\tNoSuchElementException\tif this node has no children\n     */\n",
    "107640": "    /**\n     * Returns this node's last child.  If this node has no children,\n     * throws NoSuchElementException.\n     *\n     * @return\tthe last child of this node\n     * @exception\tNoSuchElementException\tif this node has no children\n     */\n",
    "107648": "    /**\n     * Returns the child in this node's child array that immediately\n     * follows <code>aChild</code>, which must be a child of this node.  If\n     * <code>aChild</code> is the last child, returns null.  This method\n     * performs a linear search of this node's children for\n     * <code>aChild</code> and is O(n) where n is the number of children; to\n     * traverse the entire array of children, use an enumeration instead.\n     *\n     * @see\t\t#children\n     * @exception\tIllegalArgumentException if <code>aChild</code> is\n     *\t\t\t\t\tnull or is not a child of this node\n     * @return\tthe child of this node that immediately follows\n     *\t\t<code>aChild</code>\n     */\n",
    "107658": "    /**\n     * Returns the child in this node's child array that immediately\n     * precedes <code>aChild</code>, which must be a child of this node.  If\n     * <code>aChild</code> is the first child, returns null.  This method\n     * performs a linear search of this node's children for <code>aChild</code>\n     * and is O(n) where n is the number of children.\n     *\n     * @exception\tIllegalArgumentException if <code>aChild</code> is null\n     *\t\t\t\t\t\tor is not a child of this node\n     * @return\tthe child of this node that immediately precedes\n     *\t\t<code>aChild</code>\n     */\n",
    "107668": "    /**\n     * Returns true if <code>anotherNode</code> is a sibling of (has the\n     * same parent as) this node.  A node is its own sibling.  If\n     * <code>anotherNode</code> is null, returns false.\n     *\n     * @param\tanotherNode\tnode to test as sibling of this node\n     * @return\ttrue if <code>anotherNode</code> is a sibling of this node\n     */\n",
    "107693": "    /**\n     * Returns the number of siblings of this node.  A node is its own sibling\n     * (if it has no parent or no siblings, this method returns\n     * <code>1</code>).\n     *\n     * @return\tthe number of siblings of this node\n     */\n",
    "107709": "    /**\n     * Returns the next sibling of this node in the parent's children array.\n     * Returns null if this node has no parent or is the parent's last child.\n     * This method performs a linear search that is O(n) where n is the number\n     * of children; to traverse the entire array, use the parent's child\n     * enumeration instead.\n     *\n     * @see\t#children\n     * @return\tthe sibling of this node that immediately follows this node\n     */\n",
    "107721": "    /**\n     * Returns the previous sibling of this node in the parent's children\n     * array.  Returns null if this node has no parent or is the parent's\n     * first child.  This method performs a linear search that is O(n) where n\n     * is the number of children.\n     *\n     * @return\tthe sibling of this node that immediately precedes this node\n     */\n",
    "107732": "    /**\n     * Returns true if this node has no children.  To distinguish between\n     * nodes that have no children and nodes that <i>cannot</i> have\n     * children (e.g. to distinguish files from empty directories), use this\n     * method in conjunction with <code>getAllowsChildren</code>\n     *\n     * @see\t#getAllowsChildren\n     * @return\ttrue if this node has no children\n     */\n",
    "107744": "    /**\n     * Finds and returns the first leaf that is a descendant of this node --\n     * either this node or its first child's first leaf.\n     * Returns this node if it is a leaf.\n     *\n     * @see\t#isLeaf\n     * @see\t#isNodeDescendant\n     * @return\tthe first leaf in the subtree rooted at this node\n     */\n",
    "107757": "    /**\n     * Finds and returns the last leaf that is a descendant of this node --\n     * either this node or its last child's last leaf. \n     * Returns this node if it is a leaf.\n     *\n     * @see\t#isLeaf\n     * @see\t#isNodeDescendant\n     * @return\tthe last leaf in the subtree rooted at this node\n     */\n",
    "107773": "    /**\n     * Returns the leaf after this node or null if this node is the\n     * last leaf in the tree.\n     * <p>\n     * In this implementation of the <code>MutableNode</code> interface,\n     * this operation is very inefficient. In order to determine the\n     * next node, this method first performs a linear search in the \n     * parent's child-list in order to find the current node. \n     * <p>\n     * That implementation makes the operation suitable for short\n     * traversals from a known position. But to traverse all of the \n     * leaves in the tree, you should use <code>depthFirstEnumeration</code>\n     * to enumerate the nodes in the tree and use <code>isLeaf</code>\n     * on each node to determine which are leaves.\n     *\n     * @see\t#depthFirstEnumeration\n     * @see\t#isLeaf\n     * @return\treturns the next leaf past this node\n     */\n",
    "107783": "    /**\n     * Returns the leaf before this node or null if this node is the\n     * first leaf in the tree.\n     * <p>\n     * In this implementation of the <code>MutableNode</code> interface,\n     * this operation is very inefficient. In order to determine the\n     * previous node, this method first performs a linear search in the \n     * parent's child-list in order to find the current node. \n     * <p>\n     * That implementation makes the operation suitable for short\n     * traversals from a known position. But to traverse all of the \n     * leaves in the tree, you should use <code>depthFirstEnumeration</code>\n     * to enumerate the nodes in the tree and use <code>isLeaf</code>\n     * on each node to determine which are leaves.\n     *\n     * @see\t\t#depthFirstEnumeration\n     * @see\t\t#isLeaf\n     * @return\treturns the leaf before this node\n     */\n",
    "107787": "    /**\n     * Returns the total number of leaves that are descendants of this node.\n     * If this node is a leaf, returns <code>1</code>.  This method is O(n)\n     * where n is the number of descendants of this node.\n     *\n     * @see\t#isNodeAncestor\n     * @return\tthe number of leaves beneath this node\n     */\n",
    "107791": "    /**\n     * Returns the result of sending <code>toString()</code> to this node's\n     * user object, or null if this node has no user object.\n     *\n     * @see\t#getUserObject\n     */\n",
    "107795": "    /**\n     * Overridden to make clone public.  Returns a shallow copy of this node;\n     * the new node has no parent or children and has a reference to the same\n     * user object, if any.\n     *\n     * @return\ta copy of this node\n     */\n",
    "108139": "    /**\n     * Returns the row specification that is used to separate component lines.\n     *  \n     * @return the <code>RowSpec</code> that is used to separate lines \n     */\n",
    "108143": "    /**\n     * Sets the size of gaps between component lines using the given \n     * constant size.<p>\n     * \n     * <strong>Examples:</strong><pre>\n     * builder.setLineGapSize(Sizes.ZERO);\n     * builder.setLineGapSize(Sizes.DLUY9);\n     * builder.setLineGapSize(Sizes.pixel(1));\n     * </pre>\n     *  \n     * @param lineGapSize   the <code>ConstantSize</code> that describes \n     *     the size of the gaps between component lines\n     */\n",
    "108145": "    /**\n     * Sets the size of gaps between paragraphs using the given \n     * constant size.<p>\n     * \n     * <strong>Examples:</strong><pre>\n     * builder.setParagraphGapSize(Sizes.DLUY14);\n     * builder.setParagraphGapSize(Sizes.dluY(22));\n     * builder.setParagraphGapSize(Sizes.pixel(42));\n     * </pre>\n     *  \n     * @param paragraphGapSize   the <code>ConstantSize</code> that describes \n     *     the size of the gaps between paragraphs\n     */\n",
    "108149": "    /**\n     * Returns the offset of the leading column, often 0 or 1.\n     * \n     * @return the offset of the leading column\n     */\n",
    "108152": "    /**\n     * Sets the offset of the leading column, often 0 or 1.\n     * \n     * @param columnOffset  the new offset of the leading column\n     */\n",
    "108155": "    /**\n     * Returns whether new data rows are being grouped or not.\n     * \n     * @return true indicates grouping enabled, false disabled\n     */\n",
    "108156": "\t/**\n     * Adds a text label and component to the panel; the component will span\n     * the specified number columns. Proceeds to the next data column.\n     * <p>\n     * The created label is labelling the given component; so the component\n     * gets the focus if the (optional) label mnemonic is pressed.\n     *\n     * If Component is Persistent glue label with component (iniPersistentLabel\n     *   \n     * @param textWithMnemonic  the label's text - may mark a mnemonic\n     * @param c                 the component to add, is a Persistent Component!?\n     * @param columnSpan        number of columns the component shall span\n     * @return the added label\n     * @see JLabel#setLabelFor(java.awt.Component)\n     */    \n",
    "108158": "    /**\n     * Enables or disables the grouping of new data rows.\n     * \n     * @param enabled  indicates grouping enabled, false disabled\n     */\n",
    "108161": "    /**\n     * Adds a component to the panel using the default constraints.\n     * Proceeds to the next data column.\n     * \n     * @param component\tthe component to add\n     */\n",
    "108165": "    /**\n     * Adds a component to the panel using the default constraints with\n     * the given columnSpan. Proceeds to the next data column.\n     * \n     * @param component the component to append\n     * @param columnSpan    the column span used to add \n     */\n",
    "108168": "    /**\n     * Adds two components to the panel; each component will span a single\n     * data column. Proceeds to the next data column.\n     * \n     * @param c1    the first component to add\n     * @param c2    the second component to add\n     */    \n",
    "108171": "    /**\n     * Adds three components to the panel; each component will span a single\n     * data column. Proceeds to the next data column.\n     * \n     * @param c1    the first component to add\n     * @param c2    the second component to add\n     * @param c3    the third component to add\n     */    \n",
    "108173": "    /**\n     * Adds a text label to the panel and proceeds to the next column.\n     * \n     * @param textWithMnemonic  the label's text - may mark a mnemonic\n     * @return the added label\n     */\n",
    "108176": "    /**\n     * Adds a text label and component to the panel. \n     * Then proceeds to the next data column.\n     * \n     * @param textWithMnemonic  the label's text - may mark a mnemonic\n     * @param component         the component to add\n     * @return the added label\n     */    \n",
    "108178": "    /**\n     * Adds a text label and component to the panel; the component will span\n     * the specified number columns. Proceeds to the next data column.\n     * <p>\n     * The created label is labelling the given component; so the component\n     * gets the focus if the (optional) label mnemonic is pressed.\n     * \n     * @param textWithMnemonic  the label's text - may mark a mnemonic\n     * @param c                 the component to add\n     * @param columnSpan        number of columns the component shall span\n     * @return the added label\n     * @see JLabel#setLabelFor(java.awt.Component)\n     */    \n",
    "108181": "    /**\n     * Adds a text label and two components to the panel; each component\n     * will span a single column. Proceeds to the next data column.\n     * \n     * @param textWithMnemonic  the label's text - may mark a mnemonic\n     * @param c1    the first component to add\n     * @param c2    the second component to add\n     * @return the added label\n     */    \n",
    "108184": "    /**\n     * Adds a text label and two components to the panel; each component\n     * will span a single column. Proceeds to the next data column.\n     * \n     * @param textWithMnemonic  the label's text - may mark a mnemonic\n     * @param c1      the first component to add\n     * @param c2      the second component to add\n     * @param colSpan the column span for the second component\n     */    \n",
    "108186": "    /**\n     * Adds a text label and three components to the panel; each component\n     * will span a single column. Proceeds to the next data column.\n     * \n     * @param textWithMnemonic  the label's text - may mark a mnemonic\n     * @param c1    the first component to add\n     * @param c2    the second component to add\n     * @param c3    the third component to add\n     * @return the added label\n     */    \n",
    "108190": "    /**\n     * Adds a text label and four components to the panel; each component\n     * will span a single column. Proceeds to the next data column.\n     * \n     * @param textWithMnemonic  the label's text - may mark a mnemonic\n     * @param c1    the first component to add\n     * @param c2    the second component to add\n     * @param c3    the third component to add\n     * @param c4    the fourth component to add\n     * @return the added label\n     */    \n",
    "108194": "    /**\n     * Adds an internationalized (i15d) text label to the panel using \n     * the given resource key and proceeds to the next column.\n     * \n     * @param resourceKey      the resource key for the the label's text\n     * @return the added label\n     */\n",
    "108207": "    /**\n     * Adds an internationalized (i15d) text label and component to the panel. \n     * Then proceeds to the next data column.\n     * \n     * @param resourceKey  the resource key for the text to add\n     * @param component  the component to add\n     * @return the added label\n     */    \n",
    "108212": "    /**\n     * Adds an internationalized (i15d) text label and component to the panel. \n     * Then proceeds to the next data column.\n     * Goes to the next line if the boolean flag is set.\n     * \n     * @param resourceKey  the resource key for the text to add\n     * @param component    the component to add\n     * @param nextLine     true forces a next line\n     * @return the added label\n     */    \n",
    "108221": "    /**\n     * Adds an internationalized (i15d) text label and four components to the panel; \n     * each component will span a single column. Proceeds to the next data column.\n     * \n     * @param resourceKey  the resource key for the text to add\n     * @param c1    the first component to add\n     * @param c2    the second component to add\n     * @param c3    the third component to add\n     * @param c4    the third component to add\n     * @return the added label\n     */    \n",
    "108223": "    /**\n     * Adds a title label to the panel and proceeds to the next column.\n     * \n     * @param textWithMnemonic  the label's text - may mark a mnemonic\n     * @return the added title label\n     */\n",
    "108225": "    /**\n     * Adds an internationalized title label to the panel and \n     * proceeds to the next column.\n     * \n     * @param resourceKey   the resource key for the title's text\n     * @return the added title label\n     */\n",
    "108227": "    /**\n     * Adds a separator without text that spans all columns.\n     * \n     * @return the added titled separator \n     */\n",
    "108231": "    /**\n     * Adds a separator with the given text that spans all columns.\n     * \n     * @param text      the separator title text\n     * @return the added titled separator \n     */\n",
    "108233": "    /**\n     * Appends an internationalized titled separator for \n     * the given resource key that spans all columns.\n     * \n     * @param resourceKey   the resource key for the separator title's text\n     */\n",
    "108235": "    /**\n     * Returns the leading column. Unlike the superclass this method\n     * honors the column offset.\n     * \n     * @return the leading column\n     */\n",
    "108237": "    /**\n     * Ensures that the cursor is in the grid. In case it's beyond the \n     * form's right hand side, the cursor is moved to the leading column\n     * of the next line.\n     */\n",
    "108239": "    /**\n     * Ensures that we have a gap row before the next component row.\n     * Checks if the current row is the given <code>RowSpec</code>\n     * and appends this row spec if necessary.\n     * \n     * @param gapRowSpec  the row specification to check for\n     */\n",
    "108242": "    /**\n     * Ensures that the form has a component row. Adds a component row\n     * if the cursor is beyond the form's bottom.\n     */\n",
    "108244": "    /**\n     * Looks up and returns the row specification of the current row.\n     *  \n     * @return the row specification of the current row\n     */\n",
    "108246": "\t/**\n\t * Adds a title , gradient color.\n\t * \n\t * @param text      the separator title text\n\t * @return the added titled gradient \n\t */\n",
    "108294": "        /**\n         * Sets the value of the variables property.\n         * \n         * @param variables\n         *     allowed object is\n         *     {@link TridasVariable }\n         *     \n         */\n",
    "108525": "    /**\n     * Checks and answers whether the given class supports bound properties, \n     * i.e. it provides a pair of multicast event listener registration methods \n     * for <code>PropertyChangeListener</code>s:\n     * <pre>\n     * public void addPropertyChangeListener(PropertyChangeListener x);\n     * public void removePropertyChangeListener(PropertyChangeListener x);\n     * </pre> \n     * \n     * @param clazz    the class to test\n     * @return true if the class supports bound properties, false otherwise\n     */\n",
    "109107": "\t/**\n     * Adds a text label and component to the panel; the component will span\n     * the specified number columns. Proceeds to the next data column.\n     * <p>\n     * The created label is labelling the given component; so the component\n     * gets the focus if the (optional) label mnemonic is pressed.\n     *\n     * If Component is Persistent glue label with component (iniPersistentLabel\n     *   \n     * @param textWithMnemonic  the label's text - may mark a mnemonic\n     * @param c                 the component to add, is a Persistent Component!?\n     * @param columnSpan        number of columns the component shall span\n     * @return the added label\n     * @see JLabel#setLabelFor(java.awt.Component)\n     */    \n",
    "109201": "\t/**\n\t * Adds a title , gradient color.\n\t * \n\t * @param text      the separator title text\n\t * @return the added titled gradient \n\t */\n",
    "110585": "\t/**\n\t * Returns the plugin's resource bundle,\n\t */\n",
    "110970": "    /**\n     * makes the TableCursor visible again.\n     * \n     * @see org.eclipse.jface.viewers.ICellEditorListener#applyEditorValue()\n     */\n",
    "110974": "    /**\n     * makes the TableCursor visible again.\n     * \n     * @see org.eclipse.jface.viewers.ICellEditorListener#cancelEditor()\n     */\n",
    "110983": "    /**\n     * subclass can override double click behavior.\n     * default activates cell editor\n     */\n",
    "111034": "    /**\n     * Adds the listener to the collection of listeners who will be notified\n     * when the receiver's selection changes, by sending it one of the messages\n     * defined in the <code>SelectionListener</code> interface.\n     * <p>\n     * When <code>widgetSelected</code> is called, the item field of the event\n     * object is valid. If the reciever has <code>SWT.CHECK</code> style set\n     * and the check selection changes, the event object detail field contains\n     * the value <code>SWT.CHECK</code>.<code>widgetDefaultSelected</code>\n     * is typically called when an item is double-clicked.\n     * </p>\n     * \n     * @param listener\n     *            the listener which should be notified\n     * \n     * @exception IllegalArgumentException\n     *                <ul>\n     *                <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n     *                </ul>\n     * @exception SWTException\n     *                <ul>\n     *                <li>ERROR_WIDGET_DISPOSED - if the receiver has been\n     *                disposed</li>\n     *                <li>ERROR_THREAD_INVALID_ACCESS - if not called from the\n     *                thread that created the receiver</li>\n     *                </ul>\n     * \n     * @see SelectionListener\n     * @see SelectionEvent\n     * @see #removeSelectionListener(SelectionListener)\n     *  \n     */\n",
    "111068": "    /**\n     * adds a figure or connection to the collection of figures which should be\n     * printed\n     */\n",
    "111090": "\t/**\n\t * Returns the end offset of the line that contains the specified offset or\n\t * if the offset is inside a line delimiter, the end offset of the next line.\n\t *\n\t * @param offset the offset whose line end offset must be computed\n\t * @return the line end offset for the given offset\n\t * @exception BadLocationException if offset is invalid in the current document\n\t */\n",
    "111140": "    /**\n     * Removes the listener from the collection of listeners who will be\n     * notified when the receiver's selection changes.\n     * \n     * @param listener\n     *            the listener which should no longer be notified\n     * \n     * @exception IllegalArgumentException\n     *                <ul>\n     *                <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n     *                </ul>\n     * @exception SWTException\n     *                <ul>\n     *                <li>ERROR_WIDGET_DISPOSED - if the receiver has been\n     *                disposed</li>\n     *                <li>ERROR_THREAD_INVALID_ACCESS - if not called from the\n     *                thread that created the receiver</li>\n     *                </ul>\n     * \n     * @see SelectionListener\n     * @see #addSelectionListener(SelectionListener)\n     * \n     * @since 3.0\n     */\n",
    "111158": "    /**\n     * Returns the column over which the TableCursor is positioned.\n     * \n     * @return the column for the current position\n     * \n     * @exception SWTException\n     *                <ul>\n     *                <li>ERROR_WIDGET_DISPOSED - if the receiver has been\n     *                disposed</li>\n     *                <li>ERROR_THREAD_INVALID_ACCESS - if not called from the\n     *                thread that created the receiver</li>\n     *                </ul>\n     */\n",
    "111164": "    /**\n     * Returns the row over which the TableCursor is positioned.\n     * \n     * @return the item for the current position\n     * \n     * @exception SWTException\n     *                <ul>\n     *                <li>ERROR_WIDGET_DISPOSED - if the receiver has been\n     *                disposed</li>\n     *                <li>ERROR_THREAD_INVALID_ACCESS - if not called from the\n     *                thread that created the receiver</li>\n     *                </ul>\n     */\n",
    "111307": "\t/**\n\t *  Add a CheckoutModuleData in the CheckoutData object\n\t *\n\t * @param  iModuleName          The name of the module to be added\n\t * @param  iCheckoutModuleData  The CheckoutData related to this module\n\t */\n",
    "111311": "\t/**\n\t *  remove a CheckoutModuleData in the CheckoutData object\n\t *\n\t * @param  iModuleName  Description of the Parameter\n\t */\n",
    "111347": "\t/**\n\t *  Check if all CheckoutModules are correct, i.e. if each CheckoutModuleDataField of each CheckoutModuleData for each CheckoutModule is valid.\n\t *\n\t * @return    true if all CheckoutModuleDataFields are correct, otherwise false.\n\t * @see CheckoutModuleData#isCorrect()\n\t */\n",
    "111351": "\t/**\n\t *  Sets all CheckoutModuleDataFields (for each module) to UNVERIFIED\n\t */\n",
    "111355": "\t/**\n\t *  Returns the max step of the checkout.\n\t * \n\t *  Each module has fields, and each field is associated with a step.\n\t * This method asks each module his max step, and returns the max step for all modules.\n\t *\n\t * @return    The maxStep for all modules\n\t */\n",
    "111357": "\t/**\n\t *  Returns the CheckoutModuleData associated with the specified module name \n\t *\n\t * @param  iKey  The name of the CheckoutModule\n\t * @return       The moduleData for this CheckoutModule, null if the module doesn't exist\n\t */\n",
    "111361": "\t/**\n\t *  Gets the modulesIterator attribute of the CheckoutData object\n\t *\n\t * @return    The modulesIterator value\n\t */\n",
    "111367": "\t/**\n\t *  Adds a feature to the InitError attribute of the CheckoutData object\n\t *\n\t * @param  iMap  The feature to be added to the InitError attribute\n\t */\n",
    "111371": "\t/**\n\t *  Clear all initialisation errors\n\t *  This method is called at the end of streamError().\n\t */\n",
    "111373": "\t/**\n\t *  Sets the label attribute of the CheckoutModuleDataField object\n\t *\n\t * @param  iLocale  The new label value\n\t * @param  iString  The new label value\n\t */\n",
    "111376": "\t/**\n\t *  Check if ther is no initialisation error\n\t *\n\t * @return    true if ther is no initialisation error, or false otherwise\n\t */\n",
    "111378": "\t/**\n\t *  Gets the label attribute of the CheckoutModuleDataField object\n\t *\n\t * @param  iLocale  Description of the Parameter\n\t * @return          The label value\n\t */\n",
    "111385": "\t/**\n\t *  Sets the askedStep attribute of the CheckoutData object\n\t *\n\t * @param  iStep  The new askedStep value\n\t */\n",
    "111386": "\t/**\n\t *  Sets the message attribute of the CheckoutModuleDataField object\n\t *\n\t * @param  iLocale  The new message value\n\t * @param  iString  The new message value\n\t */\n",
    "111387": "\t/**\n\t *  Gets the askedStep attribute of the CheckoutData object\n\t *\n\t * @return    The askedStep value\n\t */\n",
    "111389": "\t/**\n\t *  Gets the message attribute of the CheckoutModuleDataField object\n\t *\n\t * @param  iLocale  Description of the Parameter\n\t * @return          The message value\n\t */\n",
    "111390": "\t/**\n\t *  Sets the externalPayment attribute of the CheckoutData object\n\t *  If external payment is not null, then the PaymentProcessorCheckoutModule need to stream all the mandatory informations for the payment (URI, amount, company accounts...)with the setPaymentParameters(Map) method. \n\t *\n\t * @param  iExternalPayment  The new externalPayment value\n\t * @see #setPaymentParameters(Map)\n\t */\n",
    "111392": "\t/**\n\t *  Gets the externalPayment attribute of the CheckoutData object\n\t *\n\t * @return    The externalPayment value\n\t */\n",
    "111395": "\t/**\n\t *  Sets the orderLogStatus attribute of the CheckoutData object\n\t *  Used by the OrderLogCheckoutModule to know if the orderlog (in db for example) is correct. \n\t *\n\t * @param  iLog  The new orderLogStatus value\n\t */\n",
    "111396": "\t/**\n\t *  Sets the status attribute of the CheckoutModuleDataField object\n\t *\n\t * @param  iStatus  The new status value\n\t */\n",
    "111398": "\t/**\n\t *  Clear the orderLogStatus attribute.\n\t */\n",
    "111399": "\t/**\n\t *  Gets the status attribute of the CheckoutModuleDataField object\n\t *\n\t * @return    The status value\n\t */\n",
    "111400": "\t/**\n\t *  Gets the orderLogStatus attribute of the CheckoutData object\n\t *\n\t * @return    The orderLogStatus value\n\t */\n",
    "111402": "\t/**\n\t *  Sets the type attribute of the CheckoutModuleDataField object\n\t *\n\t * @param  iType  The new type value\n\t */\n",
    "111403": "\t/**\n\t *  Sets the orderNumber attribute of the CheckoutData object\n\t *\n\t * @param  iOrderNumber  The new orderNumber value\n\t */\n",
    "111406": "\t/**\n\t *  Gets the orderNumber attribute of the CheckoutData object\n\t *\n\t * @return    The orderNumber value\n\t */\n",
    "111431": "\t/**\n\t** Generates a string with a utility string buffer\n\t**/\n",
    "111456": "\t/**\n\t *  Gets the documentViewer attribute of the Thing object\n\t *\n\t * @param  ioDocumentData  Description of the Parameter\n\t * @return                 The documentViewer value\n\t */\n",
    "111462": "\t/**\n\t *  Gets the ontologyName name of the Thing object\n\t *\n\t * @return    The string \"thing\"\n\t */\n",
    "111468": "\t/**\n\t *  Always return null\n\t *\n\t * @param  iViewer           viewer object\n\t * @param  ioConnection      SQL connection\n\t * @param  uStringBuffer     StringBuffer utility object\n\t * @return                   null\n\t * @exception  SQLException  Description of the Exception\n\t */\n",
    "111500": "\t/**\n\t** Get initparameters in web.xml, convert the name of the parameters, and put the name and the value in jsMap\n\t**/\n",
    "111537": "\t/**\n\t*\tset Doc810 e-mail header\n\t*/\n",
    "111728": "\t/**\n\t* Get all Items.\n\t*/\n",
    "111967": "    /**\n     * Returns a dataisland object \n     * @param dataislandPrimitiveName the name of the dataisland primitive\n     * @param value object to be converted\n     * @return Returns a dataisland object corresponding to the primitive name\n     */\n",
    "112013": "    /**\n     * Iterates through a collection of potentially localizable (LocalizableEntity).\n     *\n     * @param localizableObjectCollection\n     * @param localizationContext\n     */\n",
    "112042": "    /**\n     * Compares this object with the specified object for order. Returns a\n     * negative integer, zero, or a positive integer as this object is less\n     * than, equal to, or greater than the specified object.\n     * @param o the Object to be compared.\n     * @return a negative integer, zero, or a positive integer as this object\n     *         is less than, equal to, or greater than the specified object\n     */\n",
    "112048": "    /**\n     * Compares this object with the specified object for order. Returns a\n     * negative integer, zero, or a positive integer as this object is less\n     * than, equal to, or greater than the specified object.\n     * @param o the Object to be compared.\n     * @return a negative integer, zero, or a positive integer as this object\n     *         is less than, equal to, or greater than the specified object\n     */\n",
    "112082": "\t/**\n\t* Retrieves the data island object that is able to generate the desired document.\n\t*\n\t* @return the data object.\n\t*/\n",
    "112083": "\t/**\n\t* Retrieves the key object that uniquely represent the information set of the document.\n\t*\n\t* @return the data object.\n\t*/\n",
    "112084": "\t/**\n\t* Sets the document type for this instance.\n\t*\n\t* Also invalidate the cached string representation.\n\t*\n\t* @param iDocumentType The document type for this instance.\n\t*/\n",
    "112085": "\t/**\n\t* Retrieves the last modification date of the document generated from the given parameters.\n\t*\n\t* @return the last modification date.\n\t*/\n",
    "112088": "\t/**\n\t* Gets the document type for this instance.\n\t*\n\t* @return The document type for this instance.\n\t*/\n",
    "112089": "\t/**\n\t* Retrieves the view of this document's serial number.\n\t*\n\t* @return the view object.\n\t*/\n",
    "112091": "\t/**\n\t* Retrieves the locale of this document's serial number.\n\t*\n\t* @return the locale object.\n\t*/\n",
    "112093": "\t/**\n\t* Sets the locale for this instance.\n\t*\n\t* Also invalidate the cached string representation.\n\t*\n\t* @param iLocale The locale for this instance.\n\t*/\n",
    "112094": "\t/**\n\t* Retrieves the document type of this document's serial number.\n\t*\n\t* @return the document type object.\n\t*/\n",
    "112095": "\t/**\n\t* Sets the data object.\n\t*\n\t* @param iDataIsland The data island object that is able to generate the desired document.\n\t*/\n",
    "112097": "\t/**\n\t* Sets the data object.\n\t*\n\t* @param iData The document data object.\n\t*/\n",
    "112098": "\t/**\n\t* Gets the locale for this instance.\n\t*\n\t* @return The locale for this instance.\n\t*/\n",
    "112099": "\t/**\n\t* Sets the last modification date of the document generated from the given parameters.\n\t*\n\t* @param iLastModified the last modification date.\n\t*\n\t* @throw IllegalArgumentException if the last changed date is null.\n\t*/\n",
    "112100": "\t/**\n\t* Sets the key object that uniquely represent the information set of the document.\n\t*\n\t* @param iKey The data key.\n\t*/\n",
    "112101": "\t/**\n\t* Sets the mode for this instance.\n\t*\n\t* Also invalidate the cached string representation.\n\t*\n\t* @param iMode The mode for this instance.\n\t*/\n",
    "112103": "\t/**\n\t* Sets the view of this document's serial number.\n\t*\n\t* @param iview The document locale to be set for this instance of the data island object.\n\t*\n\t* @throw IllegalArgumentException if any of the view or its locale or document type are null.\n\t*/\n",
    "112105": "\t/**\n\t* Gets the mode for this instance.\n\t*\n\t* @return The mode string for this instance.\n\t*/\n",
    "112112": "\t/**\n\t* Generate a textual representattion of this view.\n\t*\n\t* @return a String representation of this view\n\t*/\n",
    "112119": "\t/**\n\t* Indicates whether some other object is \"equal to\" this view.\n\t*\n\t* @param obj The object to be tested.\n\t*\n\t* @return true if both objects are equal\n\t*/\n",
    "112125": "\t/**\n\t* Returns the hash code value for this view (based on the string representation).\n\t*\n\t* @return the hash code value for this view.\n\t*/\n",
    "112148": "\t/**\n\t* Returns a view that with an XML document type, generated from a locale.\n\t*\n\t* @param locale The reference locale.\n\t*\n\t* @return the view.\n\t*/\n",
    "112161": "\t/**\n\t* Returns a list of locales extracted from a list of views.\n\t*\n\t* @param iViews The reference views.\n\t*\n\t* @return the list of locales.\n\t*\n\t* @see java.util.Locale\n\t*/\n",
    "112222": "\t/**\n\t* Internal initialization method.\n\t*\n\t* <p>All of the public constructors invoke this method.</p>\n\t*\n\t* @param oWriter The output destination. Throws IllegalArgumentException.\n\t*/\n",
    "112223": "\t/**\n\t* Return true if both objects are either null or equal (equals() function)\n\t*\n\t* @return true if both objects match.\n\t*/\n",
    "112224": "\t/**\n\t* Internal initialization method.\n\t*\n\t* <p>All of the public constructors invoke this method.</p>\n\t*\n\t* @param oWriter The output destination. Throws IllegalArgumentException.\n\t*/\n",
    "112227": "    /**\n    * Gets the query string.\n    *\n    * @return the query string or <code>null</code> if there is no parameter specified.\n    */\n",
    "112228": "\t/**\n\t* Set a new output destination for the document.\n\t*\n\t* @param oWriter The output destination.\n\t*/\n",
    "112236": "\t/**\n\t* Initializes the dataisland instance with the provided parameters.\n\t*\n\t* NOTE : this implementation simply does nothing.\n\t*\n\t* @param iParameters The initialization parameters for this data island instance.\n\t*/\n",
    "112249": "\t/**\n\t** Gets the DataIsland Includer context for this servlet concext\n\t**/\n",
    "112269": "\t/**\n\t* Returns the SAX2 content handler for the viewer.\n\t*/\n",
    "112277": "\t/**\n\t* Gets the best view for this viewer from a list of views.\n\t*/\n",
    "112278": "\t/**\n\t* Gets the best locale for this viewer from a list of locales.\n\t*/\n",
    "112282": "\t/**\n\t* Returns the SAX2 content handler for the viewer.\n\t*/\n",
    "112299": "\t/**\n\t** Remove the given parameter name from the reserved name list.\n\t**/\n",
    "112304": "\t/**\n\t* Sets the name  (root element type, or if is not xml, its extension).\n\t*\n\t* @param iName The name for this document type.\n\t*/\n",
    "112308": "\t/**\n\t* Indicates whether some other object is \"equal to\" this document type.\n\t*\n\t* @param iO - the reference object with which to compare.\n\t*\n\t* @return true if both document types are equal.\n\t*/\n",
    "112309": "\t/**\n\t* Generate a textual representattion of this document type.\n\t*\n\t* @return a String representation of this document type\n\t*/\n",
    "112330": "\t/**\n\t* Gets the directory object where the stylesheets (*.xsl) will be taken from.\n\t*\n\t*/\n",
    "112336": "\t/**\n\t* Sets the directory object where the stylesheets (*.xsl) will be taken from.\n\t*\n\t* @param iRepositoryDirectory The directory object where the stylesheets (*.xsl) will be taken from.\n\t*\n\t*/\n",
    "112338": "\t/**\n\t* Gets the common directory object where the stylesheets (*.xsl) will be taken from.\n\t*\n\t*/\n",
    "112339": "\t/**\n\t* Sets the directory object where the cache xml files will be dumped.\n\t*\n\t* @param repositoryDirectory The directory object where the cache xml files will be dumped.\n\t*/\n",
    "112342": "\t/**\n\t* Sets the directory object where the common stylesheets (*.xsl) will be taken from.\n\t*\n\t* @param iCommonRepositoryDirectory The directory object where the stylesheets (*.xsl) will be taken from.\n\t*\n\t*/\n",
    "112492": " \t/**\n    * Appends the parameters from the given query string to the given Map\n    *\n    * @param query The source query string (must not be <code>.\n    * @param parameters The destination <code>Map</map> instance.\n    */\n",
    "113156": "    /**\n     * Save detached group instance into database.\n     *\n     * @param group\n     * @return\n     * @throws org.dataisland.cms.exception.DataIslandCMSException\n     *\n     */\n",
    "113160": "    /**\n     * Fetch list of database group instances.\n     *\n     * @return\n     * @throws org.dataisland.cms.exception.DataIslandCMSException\n     *\n     */\n",
    "113162": "    /**\n     * Delete the group.\n     *\n     * @param group\n     * @throws org.dataisland.cms.exception.DataIslandCMSException\n     *\n     */\n",
    "113171": "    /**\n     * Save detached role instance into database.\n     *\n     * @param role\n     * @return\n     * @throws org.dataisland.cms.exception.DataIslandCMSException\n     *\n     */\n",
    "113174": "    /**\n     * Fetch list of database role instances.\n     *\n     * @return\n     * @throws org.dataisland.cms.exception.DataIslandCMSException\n     *\n     */\n",
    "113176": "    /**\n     * Delete the role.\n     *\n     * @param role\n     * @throws org.dataisland.cms.exception.DataIslandCMSException\n     *\n     */\n",
    "113185": "    /**\n     * Fetch list of database user instances.\n     *\n     * @return\n     * @throws DataIslandCMSException\n     */\n",
    "113188": "    /**\n     * Delete the user.\n     *\n     * @param user\n     * @throws DataIslandCMSException\n     */\n",
    "113197": "    /**\n     * Create Object from XML tag\n     * @param obj\n     * @param uctx\n     * @return\n     * @throws JiBXException\n     */\n",
    "113217": "    /**\n     * updates role bean according to actionForm\n     *\n     * @param actionForm\n     */\n",
    "113226": "    /**\n     * Populate form according to a group bean.\n     *\n     * @param actionForm\n     * @param group\n     */\n",
    "113229": "    /**\n     * Populate form according to a role bean.\n     *\n     * @param actionForm\n     * @param role\n     */\n",
    "113262": "    /**\n     * Populate form according to a user bean.\n     *\n     * @param actionForm\n     * @param user\n     */\n",
    "113265": "    /**\n     * Return a Role instance Set from an array of IDs.\n     *\n     * @param roleIds\n     * @return\n     * @throws DataIslandCMSException\n     */\n",
    "113292": "    /**\n     * The setter method for this user's id.\n     *\n     * @param id\n     */\n",
    "113294": "    /**\n     * The setter method for this user's password.\n     *\n     * @param password\n     */\n",
    "113296": "    /**\n     * The getter method for this user's login name.\n     *\n     * @return\n     * @hibernate.property unique=\"true\"\n     * column=\"LOGIN\"\n     */\n",
    "113297": "    /**\n     * The setter method for this user's login name.\n     *\n     * @param login\n     */\n",
    "113301": "    /**\n     * The getter method for this user's group.\n     *\n     * @return\n     * @hibernate.many-to-one column=\"SYSTEMGROUP_FK\"\n     */\n",
    "113303": "    /**\n     * The setter method for this user's group.\n     *\n     * @param group\n     */\n",
    "113305": "    /**\n     * The getter method for this user's email.\n     *\n     * @return\n     * @hibernate.property column=\"EMAIL\"\n     */\n",
    "113307": "    /**\n     * The setter method for this user's group.\n     *\n     * @param email\n     */\n",
    "113308": "    /**\n     * The getter method for this user's system status (system dependability).\n     *\n     * @return\n     * @hibernate.property column=\"SYSTEM\"\n     */\n",
    "113309": "    /**\n     * The setter method for this user's system status (system dependability).\n     *\n     * @param system\n     */\n",
    "113310": "    /**\n     * Get the context stack that is stored in the session\n     *\n     * @param contextStackKey\n     * @param httpServletRequest\n     * @return\n     */\n",
    "113330": "    /**\n     * Redirect the context stack key in the request\n     *\n     * @param contextStackKey\n     * @param httpServletRequest\n     */\n",
    "113347": "    /**\n     * The getter method for this group's role collection.\n     *\n     * @return\n     * @hibernate.set table=\"SYSTEMGROUP_ROLES\"\n     * @hibernate.collection-key column=\"SYSTEMGROUP_FK\"\n     * @hibernate.collection-many-to-many column=\"SYSTEMROLE_FK\"\n     * class=\"org.dataisland.cms.bean.Role\"\n     */\n",
    "113348": "    /**\n     * The getter method for this role's human readable key.\n     *\n     * @return\n     * @hibernate.property column=\"HUMAN_READABLE_KEY\"\n     */\n",
    "113349": "    /**\n     * The setter method for this group's role collection.\n     *\n     * @param roles\n     */\n",
    "113464": "   /**\n    * Add/replace the service context to the request.\n    *\n    * Service-contexts are not ordered in any way.\n    * \n    * @param serviceContext\n    */\n",
    "113470": "   /**\n    * The interceptor method that decodes the incoming message on the Server side.\n    *\n    * @param interfaceName The target interface class name\n    * @param methodName    The method name\n    * @param arguments     The arguments\n    * @param argumentTypes The argument class names to be used to identify an implementation Method\n    * @param contextList   The Context List to be set to Current\n    * @return The Response of the method invocation\n    */\n",
    "113473": "   /**\n    * This is not an action!!\n    *\n    * @return the exception to be returned to the client\n    */\n",
    "113474": "   /**\n    * This probably is only optional.\n    *\n    * @return the server object\n    */\n",
    "113475": "   /**\n    * Add/replace the service context to the request.\n    *\n    * Service-contexts are not ordered in any way.\n    *\n    * @param serviceContext\n    */\n",
    "113478": "   /**\n    * Get the Remote interface via a user-specified naming key.\n    *\n    * @param name The naming key for the remote interface\n    * @return the remote interface reference\n    * @throws net.sf.extrmi.naming.RMINamingException\n    *         if any error occurs (from server-side naming implementation)\n    */\n",
    "113480": "   /**\n    * The return value is always a stub.\n    *\n    * @param name The key\n    * @return the reference to the RMI stub of the lcoal RMI server object, return null if not found\n    */\n",
    "113481": "   /**\n    * The return value is never a stub.\n    *\n    * @param name The key\n    * @return the reference to the local RMI server object, return null if not found\n    */\n",
    "113488": "   /**\n    * Get the Remote interface via a user-specified naming key.\n    *\n    * @param name The naming key for the remote interface\n    * @return the remote interface reference\n    * @throws net.sf.extrmi.naming.RMINamingException\n    *                                  if any error occurs (from server-side naming implementation)\n    * @throws java.rmi.RemoteException\n    */\n",
    "113495": "   /**\n    * Get the Remote interface via a user-specified naming key.\n    *\n    * @param name The naming key for the remote interface\n    * @return the remote interface reference\n    * @throws net.sf.extrmi.naming.RMINamingException\n    *          if any error occurs. The implementation of this interface is\n    *          required to convert any underlying exception to this generic exception type\n    */\n",
    "113496": "   /**\n    * Returns the the cause of this exception (the <code>Throwable</code>\n    * instance wrapped in this <code>RMINamingException</code>,\n    * which may be <tt>null</tt>).\n    *\n    * @return the cause of this exception\n    */\n",
    "113499": "   /**\n    * Get the underlying RMINamingManager instance.\n    *\n    * @return The user provided naming function encapsulation\n    */\n",
    "113513": "   /**\n    * Check if the current context is of a Context id.\n    *\n    * @param id The context id\n    * @return true if the current context is of this context id\n    */\n",
    "113514": "   /**\n    * Get the xid as int value.\n    *\n    * @return xid\n    */\n",
    "113515": "   /**\n    * Get the context id.\n    *\n    * @return context id\n    */\n",
    "113517": "   /**\n    * Get the context data.\n    *\n    * @return context data. It can be null.\n    * @see #setContextData\n    */\n",
    "113520": "   /**\n    * Re-iterate what's in base class.\n    *\n    * @return null\n    */\n",
    "113521": "   /**\n    * To Object Id.\n    *\n    * @return String\n    */\n",
    "113523": "   /**\n    * the template method.\n    */\n",
    "113525": "   /**\n    * The template method.\n    */\n",
    "113526": "   /**\n    * The template method.\n    */\n",
    "113528": "   /**\n    * Start the dispatch thread.\n    */\n",
    "113537": "   /**\n    * Inovked from state sync timer.\n    */\n",
    "113545": "   /**\n    * Override to invoke the call-back.\n    */\n",
    "113546": "   /**\n      Called by JGroups to notify the target object of a change of membership.\n   */\n",
    "113547": "   /**\n    * Get the server states.\n    */\n",
    "113549": "   /** Called when a member is suspected */\n",
    "113550": "   /**\n    * Set the server states.\n    */\n",
    "113551": "   /** Block sending and receiving of messages until viewAccepted() is called */\n",
    "113552": "   /**\n    * The in-bound service-contexts. It saves the contexts to Current.\n    *\n    * @param requestInfo\n    */\n",
    "113553": "   /**\n    * The in-bound request. <p>\n    *\n    * It shall execute in the same thread as the target invocation.\n    *\n    * @param requestInfo\n    */\n",
    "113555": "   /**\n    * The out-bound reply. <p>\n    *\n    * It allows an interceptor to query reply information and modify the\n    * reply service context after the target operation has been invoked and before the\n    * reply is returned to the client. It shall execute in the same thread as the\n    * target invocation.\n    *\n    * @param requestInfo\n    */\n",
    "113557": "   /**\n    * The out-bound exception.\n    *\n    * @param requestInfo\n    */\n",
    "113561": "   /**\n    * The last request Id when this state is generated.\n    * @param requestId\n    */\n",
    "113563": "      /**\n       * Assign a new id. It is simply a counter.\n       *\n       * @return a new id\n       */\n",
    "113566": "   /**\n    * The template method.\n    */\n",
    "113570": "   /**\n    * The template method.\n    */\n",
    "113571": "   /**\n    * The in-bound reply. It allows the interceptor the query the reply information before\n    * control is returned to client.\n    *\n    * @param requestInfo\n    */\n",
    "113572": "   /**\n    * In case viewAccepted too late.\n    */\n",
    "113573": "   /**\n    * The in-bound exception.\n    *\n    * @param requestInfo\n    */\n",
    "113577": "   /**\n    * The in-bound reply. It allows the interceptor the query the reply information before\n    * control is returned to client.\n    *\n    * @param requestInfo\n    */\n",
    "113579": "   /**\n    * The in-bound exception.\n    *\n    * @param requestInfo\n    */\n",
    "113580": "   /**\n    * The in-bound reply. It allows the interceptor the query the reply information before\n    * control is returned to client.\n    *\n    * @param requestInfo\n    */\n",
    "113581": "   /**\n    * The in-bound exception.\n    *\n    * @param requestInfo\n    */\n",
    "113582": "   /**\n    * The in-bound service-contexts. It saves the contexts to Current.\n    * Only transaction-context is relevant here.\n    *\n    * @param requestInfo\n    */\n",
    "113583": "   /**\n    * The in-bound service-contexts. It saves the contexts to Current.\n    * Only transaction-context is relevant here.\n    *\n    * @param requestInfo\n    */\n",
    "113584": "   /**\n    * The in-bound request. <p>\n    *\n    * It shall execute in the same thread as the target invocation.\n    *\n    * @param requestInfo\n    */\n",
    "113585": "   /**\n    * The in-bound request. <p>\n    *\n    * It shall execute in the same thread as the target invocation.\n    *\n    * @param requestInfo\n    */\n",
    "113586": "   /**\n    * The out-bound reply. <p>\n    *\n    * It allows an interceptor to query reply information and modify the\n    * reply service context after the target operation has been invoked and before the\n    * reply is returned to the client. It shall execute in the same thread as the\n    * target invocation.\n    *\n    * @param requestInfo\n    */\n",
    "113587": "   /**\n    * The out-bound reply. <p>\n    *\n    * It allows an interceptor to query reply information and modify the\n    * reply service context after the target operation has been invoked and before the\n    * reply is returned to the client. It shall execute in the same thread as the\n    * target invocation.\n    *\n    * @param requestInfo\n    */\n",
    "113588": "   /**\n    * The out-bound exception.\n    *\n    * @param requestInfo\n    */\n",
    "113589": "   /**\n    * The out-bound exception.\n    *\n    * @param requestInfo\n    */\n",
    "113591": "   /**\n    * The object implements the writeExternal method to save its contents\n    * by calling the methods of DataOutput for its primitive values or\n    * calling the writeObject method of ObjectOutput for objects, strings,\n    * and arrays.\n    *\n    * @serialData Overriding methods should use this tag to describe\n    *             the data layout of this Externalizable object.\n    *             List the sequence of element types and, if possible,\n    *             relate the element to a public/protected field and/or\n    *             method of this Externalizable class.\n    *\n    * @param out the stream to write the object to\n    * @exception java.io.IOException Includes any I/O exceptions that may occur\n    */\n",
    "113594": "   /**\n    * The object implements the readExternal method to restore its\n    * contents by calling the methods of DataInput for primitive\n    * types and readObject for objects, strings and arrays.  The\n    * readExternal method must read the values in the same sequence\n    * and with the same types as were written by writeExternal.\n    *\n    * @param in the stream to read data from in order to restore the object\n    * @exception IOException if I/O errors occur\n    * @exception ClassNotFoundException If the class for an object being\n    *              restored cannot be found.\n    */\n",
    "113599": "   /**\n    * This is an extention. It clears the service context from the context list if any match.\n    *\n    * @param contextId\n    *\n    * @return a copy of the service context with the given id that is associated with\n    * the request. Return null otherwise.\n    */\n",
    "113602": "   /**\n    * Get the service context by contextId. The return value is a copy.\n    *\n    * @param contextId\n    *\n    * @return the service context if found, or null otherwise\n    */\n",
    "113603": "   /**\n    * Add/replace the service context.\n    *\n    * @param serviceContext\n    */\n",
    "113614": "   /**\n    * Remove a client-side request interceptor.\n    *\n    * For maintenance purpose only.\n    *\n    * @param name The interceptor name\n    */\n",
    "113615": "   /**\n    * The object implements the writeExternal method to save its contents\n    * by calling the methods of DataOutput for its primitive values or\n    * calling the writeObject method of ObjectOutput for objects, strings,\n    * and arrays.\n    *\n    * @serialData Overriding methods should use this tag to describe\n    *             the data layout of this Externalizable object.\n    *             List the sequence of element types and, if possible,\n    *             relate the element to a public/protected field and/or\n    *             method of this Externalizable class.\n    *\n    * @param out the stream to write the object to\n    * @exception java.io.IOException Includes any I/O exceptions that may occur\n    */\n",
    "113616": "   /**\n    * Get a client-side request interceptor by name.\n    *\n    * @param name The interceptor name\n    *\n    * @return the interceptor if any\n    */\n",
    "113617": "   /**\n    * The object implements the readExternal method to restore its\n    * contents by calling the methods of DataInput for primitive\n    * types and readObject for objects, strings and arrays.  The\n    * readExternal method must read the values in the same sequence\n    * and with the same types as were written by writeExternal.\n    *\n    * @param in the stream to read data from in order to restore the object\n    * @exception IOException if I/O errors occur\n    * @exception ClassNotFoundException If the class for an object being\n    *              restored cannot be found.\n    */\n",
    "113618": "   /**\n    * Get the property.\n    */\n",
    "113620": "   /**\n    * Set the property.\n    */\n",
    "113621": "   /**\n    * Remove a server-side request interceptor.\n    *\n    * For maintenance purpose only.\n    *\n    * @param name The interceptor name\n    */\n",
    "113622": "   /**\n    * Get the target Remote reference naming key.\n    */\n",
    "113623": "   /**\n    * Get a server-side request interceptor by name.\n    *\n    * @param name The interceptor name\n    *\n    * @return the interceptor if any\n    */\n",
    "113626": "   /**\n    * Add a client-side message interceptor. Only one is supported, and existing one\n    * will be overwritten.\n    *\n    * No overwritting checking here.\n    *\n    * @param interceptor\n    */\n",
    "113628": "   /**\n    * Process a reflection exception.\n    *\n    * @throws InvocationTargetException a wrapped exception\n    */\n",
    "113629": "   /**\n    * Remove the client-side message interceptor, if any.\n    *\n    * For maintenance purpose only.\n    *\n    * @param name The interceptor name, and optional for now (pass null)\n    */\n",
    "113630": "   /**\n    * Get a client-side message interceptor by name.\n    *\n    * @param name The interceptor name, optionl for now\n    *\n    * @return the interceptor if any\n    */\n",
    "113633": "   /**\n    * Get the registered client-side message interceptor.\n    *\n    * @return the registered interceptors\n    */\n",
    "113636": "   /**\n    * Add a server-side message interceptor. Only one is supported, and existing one\n    * will be overwritten.\n    *\n    * No overwritting checking here.\n    *\n    * @param interceptor\n    */\n",
    "113639": "   /**\n    * Remove the server-side message interceptor, if any.\n    *\n    * For maintenance purpose only.\n    *\n    * @param name The interceptor name, and optional for now (pass null)\n    */\n",
    "113642": "   /**\n    * Get a server-side message interceptor by name.\n    *\n    * @param name The interceptor name, optionl for now\n    *\n    * @return the interceptor if any\n    */\n",
    "113646": "   /**\n    * Get the registered server-side message interceptor.\n    *\n    * @return the registered interceptors\n    */\n",
    "113676": "   /**\n    * Get the Remote interface via a user-specified naming key.\n    *\n    * @param name The naming key for the remote interface\n    * @return the remote interface reference\n    *\n    * @throws net.sf.extrmi.naming.RMINamingException if any error occurs (from server-side naming implementation)\n    * @throws java.rmi.RemoteException\n    */\n",
    "113696": "   /**\n    * Check if the current context is of a service id.\n    *\n    * @param id The service id\n    * @return true if the current context is of this service id\n    */\n",
    "113697": "   /**\n    * Get the service id.\n    *\n    * @return service id\n    */\n",
    "113702": "   /**\n    * To Object Id.\n    *\n    * @return String\n    */\n",
    "113717": "   /**\n    * The template method.\n    */\n",
    "113719": "   /**\n    * Send (async) the invocation via multicast and receive (sync) the response via unicast.\n    */\n",
    "113725": "   /**\n    * The in-bound exception.\n    *\n    * @param requestInfo\n    */\n",
    "113729": "   /**\n    * The out-bound request.\n    *\n    * <pre>\n    * Possible functions:\n    * - modify service context.\n    * </pre>\n    *\n    * @param requestInfo\n    */\n",
    "113733": "   /**\n    * The in-bound service-contexts. It saves the contexts to Current.\n    * Only transaction-context is relevant here.\n    *\n    * @param requestInfo\n    */\n",
    "113749": "   /**\n    * This is an extention. It clears the service context from the context list if any match.\n    *\n    * @param serviceId\n    *\n    * @return a copy of the service context with the given id that is associated with\n    * the request. Return null otherwise.\n    */\n",
    "113751": "   /**\n    * Get the service context by serviceId. The return value is a copy.\n    *\n    * @param serviceId\n    *\n    * @return the service context if found, or null otherwise\n    */\n",
    "113766": "   /**\n    * The object implements the writeExternal method to save its contents\n    * by calling the methods of DataOutput for its primitive values or\n    * calling the writeObject method of ObjectOutput for objects, strings,\n    * and arrays.\n    *\n    * @serialData Overriding methods should use this tag to describe\n    *             the data layout of this Externalizable object.\n    *             List the sequence of element types and, if possible,\n    *             relate the element to a public/protected field and/or\n    *             method of this Externalizable class.\n    *\n    * @param out the stream to write the object to\n    * @exception java.io.IOException Includes any I/O exceptions that may occur\n    */\n",
    "113768": "   /**\n    * The object implements the readExternal method to restore its\n    * contents by calling the methods of DataInput for primitive\n    * types and readObject for objects, strings and arrays.  The\n    * readExternal method must read the values in the same sequence\n    * and with the same types as were written by writeExternal.\n    *\n    * @param in the stream to read data from in order to restore the object\n    * @exception IOException if I/O errors occur\n    * @exception ClassNotFoundException If the class for an object being\n    *              restored cannot be found.\n    */\n",
    "113811": "   /**\n    * Get the service context by serviceId. The return value is a copy.\n    *\n    * @param serviceId\n    *\n    * @return the service context if found, or null otherwise\n    */\n",
    "113812": "   /**\n    * Remove a client-side request interceptor.\n    *\n    * For maintenance purpose only.\n    *\n    * @param name The interceptor name\n    */\n",
    "113813": "   /**\n    * Add/replace the service context.\n    *\n    * @param serviceContext\n    */\n",
    "113817": "   /**\n    * The out-bound request.\n    *\n    * <pre>\n    * Possible functions:\n    * - modify service context.\n    * </pre>\n    *\n    * @param requestInfo\n    */\n",
    "113906": "   /**\n    * The in-bound service-contexts.\n    *\n    * @param requestInfo\n    */\n",
    "113922": "   /**\n    * The out-bound request.\n    *\n    * <pre>\n    * Possible functions:\n    * - modify service context.\n    * </pre>\n    *\n    * @param requestInfo\n    */\n",
    "113937": "   /**\n      Called by JGroups to notify the target object of a change of membership.\n   */\n",
    "113945": "   /** Block sending and receiving of messages until viewAccepted() is called */\n",
    "114218": "   /**\n    * Invoked from processMessage.\n    */\n",
    "114219": "   /**\n    * Inovked from state sync timer.\n    */\n",
    "114233": "   /**\n    * Get the server states.\n    */\n",
    "114237": "   /**\n    * Set the server states.\n    */\n",
    "114250": "   /**\n    * The template method.\n    */\n",
    "114339": "   /**\n    * The object implements the writeExternal method to save its contents\n    * by calling the methods of DataOutput for its primitive values or\n    * calling the writeObject method of ObjectOutput for objects, strings,\n    * and arrays.\n    *\n    * @serialData Overriding methods should use this tag to describe\n    *             the data layout of this Externalizable object.\n    *             List the sequence of element types and, if possible,\n    *             relate the element to a public/protected field and/or\n    *             method of this Externalizable class.\n    *\n    * @param out the stream to write the object to\n    * @exception java.io.IOException Includes any I/O exceptions that may occur\n    */\n",
    "114343": "   /**\n    * The object implements the readExternal method to restore its\n    * contents by calling the methods of DataInput for primitive\n    * types and readObject for objects, strings and arrays.  The\n    * readExternal method must read the values in the same sequence\n    * and with the same types as were written by writeExternal.\n    *\n    * @param in the stream to read data from in order to restore the object\n    * @exception IOException if I/O errors occur\n    * @exception ClassNotFoundException If the class for an object being\n    *              restored cannot be found.\n    */\n",
    "114411": "   /**\n    * The object implements the writeExternal method to save its contents\n    * by calling the methods of DataOutput for its primitive values or\n    * calling the writeObject method of ObjectOutput for objects, strings,\n    * and arrays.\n    *\n    * @serialData Overriding methods should use this tag to describe\n    *             the data layout of this Externalizable object.\n    *             List the sequence of element types and, if possible,\n    *             relate the element to a public/protected field and/or\n    *             method of this Externalizable class.\n    *\n    * @param out the stream to write the object to\n    * @exception java.io.IOException Includes any I/O exceptions that may occur\n    */\n",
    "114415": "   /**\n    * The object implements the readExternal method to restore its\n    * contents by calling the methods of DataInput for primitive\n    * types and readObject for objects, strings and arrays.  The\n    * readExternal method must read the values in the same sequence\n    * and with the same types as were written by writeExternal.\n    *\n    * @param in the stream to read data from in order to restore the object\n    * @exception IOException if I/O errors occur\n    * @exception ClassNotFoundException If the class for an object being\n    *              restored cannot be found.\n    */\n",
    "114539": "   /**\n    * Get the Remote interface via a user-specified naming key.\n    *\n    * @param name The naming key for the remote interface\n    * @return the remote interface reference\n    * @throws net.sf.extrmi.naming.RMINamingException\n    *         if any error occurs (from server-side naming implementation)\n    */\n",
    "114544": "   /**\n    * Get the Remote interface via a user-specified naming key.\n    *\n    * @param name The naming key for the remote interface\n    * @return the remote interface reference\n    * @throws net.sf.extrmi.naming.RMINamingException\n    *         if any error occurs (from server-side naming implementation)\n    */\n",
    "114549": "   /**\n    * The object group id this RMI server 0bject is associated with. This is\n    * considered an application concern in this framework.\n    *\n    * @param name The key of the server object\n    *\n    * @return its associated object group id, null if not specified\n    */\n",
    "114557": "   /**\n    * A new coordinator is installed - indicating a Home naming change.\n    */\n",
    "114560": "   /**\n    * A new coordinator is installed - indicating a Home naming change.\n    */\n",
    "114576": "    /**\n     * Method getNextException\n     *\n     *\n     * @return\n     *\n     */\n",
    "114578": "    /**\n     * Method setLogTarget\n     *\n     *\n     * @param target The the new log destination to be used.\n     *\n     */\n",
    "114579": "    /**\n     * Method getLogTarget\n     *\n     *\n     * @return The PrintStream used as the current log target\n     *\n     */\n",
    "114583": "    /**\n     * Method printStackTrace\n     *\n     *\n     * @param e\n     *\n     */\n",
    "114593": "    /**\n     * Method printStackTrace\n     *\n     *\n     * @param e\n     *\n     */\n",
    "114632": "   /**\n    * Get the local naming interface.\n    */\n",
    "114648": "   /**\n    * Check the object group, if already discovered.\n    *\n    * @param grpId\n    */\n",
    "114649": "   /**\n    * Check the object group queue.\n    *\n    * @param grpId\n    * @return an existing one or a new one\n    */\n",
    "114652": "   /**\n    * Clear the object group queue.\n    *\n    * @param grpId\n    * @return true if queue is actually empty\n    */\n",
    "114657": "   /**\n    * Override to invoke the call-back.\n    */\n",
    "114665": "   /**\n    * Set the server states.\n    */\n",
    "114671": "      /**\n       * Stop the thread in a safe manner.\n       * <p/>\n       * We don't interrupt the handler directly, which may be in application code.\n       */\n",
    "114682": "   /**\n    * In case viewAccepted too late.\n    */\n",
    "114702": "   /**\n    * Upon each view/coordinator change, register all the local stubs with the coordinator.\n    *\n    * @param serverId The server Id\n    * @param mgrProxyStub The mgr proxy stub\n    *\n    * @throws RemoteException\n    */\n",
    "114832": "\t\t/**\n\t\t* Slightly different symantics than normal read just for convenience.  This\n\t\t* is guaranteed to read _buffer.length many bytes from the stream (as opposed\n\t\t* to reading \"up to\" _buffer.length many bytes from the stream.\n\t\t*/\n",
    "114855": "\t/**\n\t * Copies the components of this vector into the specified array. The \n\t * item at index <tt>k</tt> in this vector is copied into component \n\t * <tt>k</tt> of <tt>anArray</tt>. The array must be big enough to hold \n\t * all the objects in this vector, else an \n\t * <tt>IndexOutOfBoundsException</tt> is thrown.\n\t *\n\t * @param   anArray   the array into which the components get copied.\n\t * @throws  NullPointerException if the given array is null.\n\t */\n",
    "114860": "\t/**\n\t * Trims the capacity of this vector to be the vector's current \n\t * size. If the capacity of this vector is larger than its current \n\t * size, then the capacity is changed to equal the size by replacing \n\t * its internal data array, kept in the field <tt>elementData</tt>, \n\t * with a smaller one. An application can use this operation to \n\t * minimize the storage of a vector. \n\t */\n",
    "114869": "\t/**\n\t * Increases the capacity of this vector, if necessary, to ensure \n\t * that it can hold at least the number of components specified by \n\t * the minimum capacity argument.\n\t *\n\t * <p>If the current capacity of this vector is less than\n\t * <tt>minCapacity</tt>, then its capacity is increased by replacing its\n\t * internal data array, kept in the field <tt>elementData</tt>, with a\n\t * larger one.  The size of the new data array will be the old size plus\n\t * <tt>capacityIncrement</tt>, unless the value of\n\t * <tt>capacityIncrement</tt> is less than or equal to zero, in which case\n\t * the new capacity will be twice the old capacity; but if this new size\n\t * is still smaller than <tt>minCapacity</tt>, then the new capacity will\n\t * be <tt>minCapacity</tt>.\n\t *\n\t * @param minCapacity the desired minimum capacity.\n\t */\n",
    "114873": "\t/** Determines the ordering of objects in this priority queue.  Subclasses\n\t  must define this one method. */\n",
    "114874": "\t/**\n\t * This implements the unsynchronized semantics of ensureCapacity.\n\t * Synchronized methods in this class can internally call this \n\t * method for ensuring capacity without incurring the cost of an \n\t * extra synchronization.\n\t *\n\t * @see java.util.Vector#ensureCapacity(int)\n\t */\n",
    "114882": "\t/**\n\t * Converts the buffer's contents into a string, translating bytes into\n\t * characters according to the platform's default character encoding.\n\t *\n\t * @return String translated from the buffer's contents.\n\t * @since   JDK1.1\n\t */\n",
    "114883": "\t/**\n\t * Sets the size of this vector. If the new size is greater than the \n\t * current size, new <code>null</code> items are added to the end of \n\t * the vector. If the new size is less than the current size, all \n\t * components at index <code>newSize</code> and greater are discarded.\n\t *\n\t * @param   newSize   the new size of this vector.\n\t * @throws  ArrayIndexOutOfBoundsException if new size is negative.\n\t */\n",
    "114886": "\t/**\n\t * Converts the buffer's contents into a string, translating bytes into\n\t * characters according to the specified character encoding.\n\t *\n\t * @param   enc  a character-encoding name.\n\t * @return String translated from the buffer's contents.\n\t * @throws UnsupportedEncodingException\n\t *         If the named encoding is not supported.\n\t * @since   JDK1.1\n\t */\n",
    "114889": "\t/**\n\t * Creates a newly allocated string. Its size is the current size of\n\t * the output stream and the valid contents of the buffer have been\n\t * copied into it. Each character <i>c</i> in the resulting string is\n\t * constructed from the corresponding element <i>b</i> in the byte\n\t * array such that:\n\t * <blockquote><pre>\n\t *     c == (char)(((hibyte &amp; 0xff) &lt;&lt; 8) | (b &amp; 0xff))\n\t * </pre></blockquote>\n\t *\n\t * @deprecated This method does not properly convert bytes into characters.\n\t * As of JDK&nbsp;1.1, the preferred way to do this is via the\n\t * <code>toString(String enc)</code> method, which takes an encoding-name\n\t * argument, or the <code>toString()</code> method, which uses the\n\t * platform's default character encoding.\n\t *\n\t * @param      hibyte    the high byte of each resulting Unicode character.\n\t * @return     the current contents of the output stream, as a string.\n\t * @see        java.io.ByteArrayOutputStream#size()\n\t * @see        java.io.ByteArrayOutputStream#toString(String)\n\t * @see        java.io.ByteArrayOutputStream#toString()\n\t */\n",
    "114890": "\t/**\n\t * Returns the current capacity of this vector.\n\t *\n\t * @return  the current capacity (the length of its internal \n\t *          data array, kept in the field <tt>elementData</tt> \n\t *          of this vector).\n\t */\n",
    "114892": "\t/**\n\t * Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in\n\t * this class can be called after the stream has been closed without\n\t * generating an <tt>IOException</tt>.\n\t * <p>\n\t *\n\t */\n",
    "114900": "\t/**\n\t * Returns the number of components in this vector.\n\t *\n\t * @return  the number of components in this vector.\n\t */\n",
    "114902": "    /**\n     * Sets the body object for this fragment. The body object contains the\n     * actual information for the fragment.\n     *\n     * @param body the body object\n     */\n",
    "114903": "    /**\n     * Returns the body object for this fragment. The body object contains the\n     * actual information for the fragment.\n     *\n     * @return the body object\n     */\n",
    "114905": "    /**\n     * Returns true if this object and its body equals the argument and its\n     * body. this object is equal if and only if they are the same class and\n     * have the same <code>getIdentifier</code> id string.\n     *\n     * @param obj object to determine equality of\n     *\n     * @return true if this object and its body equals the argument and its\n     *         body.\n     */\n",
    "114906": "\t/**\n\t * Tests if this vector has no components.\n\t *\n\t * @return  <code>true</code> if and only if this vector has \n\t *          no components, that is, its size is zero;\n\t *          <code>false</code> otherwise.\n\t */\n",
    "114908": "\t/**\n\t * Tests if the specified object is a component in this vector.\n\t *\n\t * @param   elem   an object.\n\t * @return  <code>true</code> if and only if the specified object \n\t * is the same as a component in this vector, as determined by the \n\t * <tt>equals</tt> method; <code>false</code> otherwise.\n\t */\n",
    "114910": "\t/**\n\t * Searches for the first occurence of the given argument, testing \n\t * for equality using the <code>equals</code> method. \n\t *\n\t * @param   elem   an object.\n\t * @return  the index of the first occurrence of the argument in this\n\t *          vector, that is, the smallest value <tt>k</tt> such that \n\t *          <tt>elem.equals(elementData[k])</tt> is <tt>true</tt>; \n\t *          returns <code>-1</code> if the object is not found.\n\t * @see     Object#equals(Object)\n\t */\n",
    "114913": "\t/**\n\t * Searches for the first occurence of the given argument, beginning \n\t * the search at <code>index</code>, and testing for equality using \n\t * the <code>equals</code> method. \n\t *\n\t * @param   elem    an object.\n\t * @param   index   the non-negative index to start searching from.\n\t * @return  the index of the first occurrence of the object argument in\n\t *          this vector at position <code>index</code> or later in the\n\t *          vector, that is, the smallest value <tt>k</tt> such that \n\t *          <tt>elem.equals(elementData[k]) && (k &gt;= index)</tt> is \n\t *          <tt>true</tt>; returns <code>-1</code> if the object is not \n\t *          found. (Returns <code>-1</code> if <tt>index</tt> &gt;= the\n\t *          current size of this <tt>Vector</tt>.)\n\t * @exception  IndexOutOfBoundsException  if <tt>index</tt> is negative.\n\t * @see     Object#equals(Object)\n\t */\n",
    "114916": "\t/**\n\t * Returns the index of the last occurrence of the specified object in\n\t * this vector.\n\t *\n\t * @param   elem   the desired component.\n\t * @return  the index of the last occurrence of the specified object in\n\t *          this vector, that is, the largest value <tt>k</tt> such that \n\t *          <tt>elem.equals(elementData[k])</tt> is <tt>true</tt>; \n\t *          returns <code>-1</code> if the object is not found.\n\t */\n",
    "114917": "\t/**\n\t * Searches backwards for the specified object, starting from the \n\t * specified index, and returns an index to it. \n\t *\n\t * @param  elem    the desired component.\n\t * @param  index   the index to start searching from.\n\t * @return the index of the last occurrence of the specified object in this\n\t *          vector at position less than or equal to <code>index</code> in\n\t *          the vector, that is, the largest value <tt>k</tt> such that \n\t *          <tt>elem.equals(elementData[k]) && (k &lt;= index)</tt> is \n\t *          <tt>true</tt>; <code>-1</code> if the object is not found.\n\t *          (Returns <code>-1</code> if <tt>index</tt> is negative.)\n\t * @exception  IndexOutOfBoundsException  if <tt>index</tt> is greater\n\t *             than or equal to the current size of this vector.\n\t */\n",
    "114920": "\t/**\n\t * Returns the component at the specified index.<p>\n\t *\n\t * This method is identical in functionality to the get method\n\t * (which is part of the List interface).\n\t *\n\t * @param      index   an index into this vector.\n\t * @return     the component at the specified index.\n\t * @exception  ArrayIndexOutOfBoundsException  if the <tt>index</tt> \n\t *             is negative or not less than the current size of this \n\t *             <tt>Vector</tt> object.\n\t *             given.\n\t * @see\t   #get(int)\n\t * @see\t   List\n\t */\n",
    "114922": "    /**\n     * Sets the filename tag for this MP3 File. Refer to\n     * <code>TagUtilities.parseFileName</code> and\n     * <code>TagUtilities.createID3v2Tag</code> for more information about\n     * parsing file names into <code>ID3v2_4</code> objects.\n     *\n     * @param filenameTag parsed <code>ID3v2_4</code> filename tag\n     */\n",
    "114923": "\t/**\n\t * Returns the first component (the item at index <tt>0</tt>) of \n\t * this vector.\n\t *\n\t * @return     the first component of this vector.\n\t * @exception  NoSuchElementException  if this vector has no components.\n\t */\n",
    "114924": "\t/**\n\t * Returns the last component of the vector.\n\t *\n\t * @return  the last component of the vector, i.e., the component at index\n\t *          <code>size()&nbsp;-&nbsp;1</code>.\n\t * @exception  NoSuchElementException  if this vector is empty.\n\t */\n",
    "114926": "    /**\n     * Sets the filename tag for this MP3 File. Refer to\n     * <code>TagUtilities.parseFileName</code> and\n     * <code>TagUtilities.createID3v2Tag</code> for more information about\n     * parsing file names into <code>ID3v2_4</code> objects.\n     *\n     * @return parsed <code>ID3v2_4</code> filename tag\n     */\n",
    "114927": "\t/**\n\t * Sets the component at the specified <code>index</code> of this \n\t * vector to be the specified object. The previous component at that \n\t * position is discarded.<p>\n\t *\n\t * The index must be a value greater than or equal to <code>0</code> \n\t * and less than the current size of the vector. <p>\n\t *\n\t * This method is identical in functionality to the set method\n\t * (which is part of the List interface). Note that the set method reverses\n\t * the order of the parameters, to more closely match array usage.  Note\n\t * also that the set method returns the old value that was stored at the\n\t * specified position.\n\t *\n\t * @param      obj     what the component is to be set to.\n\t * @param      index   the specified index.\n\t * @exception  ArrayIndexOutOfBoundsException  if the index was invalid.\n\t * @see        #size()\n\t * @see        List\n\t * @see\t   #set(int, java.lang.Object)\n\t */\n",
    "114929": "\t/**\n\t * Deletes the component at the specified index. Each component in \n\t * this vector with an index greater or equal to the specified \n\t * <code>index</code> is shifted downward to have an index one \n\t * smaller than the value it had previously. The size of this vector \n\t * is decreased by <tt>1</tt>.<p>\n\t *\n\t * The index must be a value greater than or equal to <code>0</code> \n\t * and less than the current size of the vector. <p>\n\t *\n\t * This method is identical in functionality to the remove method\n\t * (which is part of the List interface).  Note that the remove method\n\t * returns the old value that was stored at the specified position.\n\t *\n\t * @param      index   the index of the object to remove.\n\t * @exception  ArrayIndexOutOfBoundsException  if the index was invalid.\n\t * @see        #size()\n\t * @see\t   #remove(int)\n\t * @see\t   List\n\t */\n",
    "114930": "    /**\n     * Sets all four (id3v1, lyrics3, filename, id3v2) tags in this instance to\n     * the <code>frame</code> argument if the tag exists. This method does not\n     * use the options inside the <code>tagOptions</code> object.\n     *\n     * @param frame frame to set / replace in all four tags.\n     *\n     * @todo this method is very inefficient.\n     */\n",
    "114934": "\t/**\n\t * Inserts the specified object as a component in this vector at the \n\t * specified <code>index</code>. Each component in this vector with \n\t * an index greater or equal to the specified <code>index</code> is \n\t * shifted upward to have an index one greater than the value it had \n\t * previously. <p>\n\t *\n\t * The index must be a value greater than or equal to <code>0</code> \n\t * and less than or equal to the current size of the vector. (If the\n\t * index is equal to the current size of the vector, the new element\n\t * is appended to the Vector.)<p>\n\t *\n\t * This method is identical in functionality to the add(Object, int) method\n\t * (which is part of the List interface). Note that the add method reverses\n\t * the order of the parameters, to more closely match array usage.\n\t *\n\t * @param      obj     the component to insert.\n\t * @param      index   where to insert the new component.\n\t * @exception  ArrayIndexOutOfBoundsException  if the index was invalid.\n\t * @see        #size()\n\t * @see\t   #add(int, Object)\n\t * @see\t   List\n\t */\n",
    "114936": "\t/**\n\t * Adds the specified component to the end of this vector, \n\t * increasing its size by one. The capacity of this vector is \n\t * increased if its size becomes greater than its capacity. <p>\n\t *\n\t * This method is identical in functionality to the add(Object) method\n\t * (which is part of the List interface).\n\t *\n\t * @param   obj   the component to be added.\n\t * @see\t   #add(Object)\n\t * @see\t   List\n\t */\n",
    "114940": "\t/**\n\t * Removes the first (lowest-indexed) occurrence of the argument \n\t * from this vector. If the object is found in this vector, each \n\t * component in the vector with an index greater or equal to the \n\t * object's index is shifted downward to have an index one smaller \n\t * than the value it had previously.<p>\n\t *\n\t * This method is identical in functionality to the remove(Object) \n\t * method (which is part of the List interface).\n\t *\n\t * @param   obj   the component to be removed.\n\t * @return  <code>true</code> if the argument was a component of this\n\t *          vector; <code>false</code> otherwise.\n\t * @see\tList#remove(Object)\n\t * @see\tList\n\t */\n",
    "114942": "\t/**\n\t * Removes all components from this vector and sets its size to zero.<p>\n\t *\n\t * This method is identical in functionality to the clear method\n\t * (which is part of the List interface).\n\t *\n\t * @see\t#clear\n\t * @see\tList\n\t */\n",
    "114944": "\t/**\n\t * Returns a clone of this vector. The copy will contain a\n\t * reference to a clone of the internal data array, not a reference \n\t * to the original internal data array of this <tt>Vector</tt> object. \n\t *\n\t * @return  a clone of this vector.\n\t */\n",
    "114945": "    /**\n     * Sets the <code>ID3v1</code> tag for this object. A new\n     * <code>ID3v1_1</code> object is created from the argument and then used\n     * here.\n     *\n     * @param mp3tag Any MP3Tag object can be used and will be converted into a\n     *        new ID3v1_1 object.\n     */\n",
    "114947": "\t/**\n\t * Returns the element at the specified position in this Vector.\n\t *\n\t * @param index index of element to return.\n\t * @return object at the specified index\n\t * @exception ArrayIndexOutOfBoundsException index is out of range (index\n\t * \t\t  &lt; 0 || index &gt;= size()).\n\t * @since 1.2\n\t */\n",
    "114950": "\t/**\n\t * Replaces the element at the specified position in this Vector with the\n\t * specified element.\n\t *\n\t * @param index index of element to replace.\n\t * @param element element to be stored at the specified position.\n\t * @return the element previously at the specified position.\n\t * @exception ArrayIndexOutOfBoundsException index out of range\n\t *\t\t  (index &lt; 0 || index &gt;= size()).\n\t * @since 1.2\n\t */\n",
    "114952": "\t/**\n\t * Appends the specified element to the end of this Vector.\n\t *\n\t * @param o element to be appended to this Vector.\n\t * @return true (as per the general contract of Collection.add).\n\t * @since 1.2\n\t */\n",
    "114953": "    /**\n     * Returns the <code>ID3v1</code> tag for this object.\n     *\n     * @return the <code>ID3v1</code> tag for this object\n     */\n",
    "114954": "\t/**\n\t * Removes the first occurrence of the specified element in this Vector\n\t * If the Vector does not contain the element, it is unchanged.  More\n\t * formally, removes the element with the lowest index i such that\n\t * <code>(o==null ? get(i)==null : o.equals(get(i)))</code> (if such\n\t * an element exists).\n\t *\n\t * @param o element to be removed from this Vector, if present.\n\t * @return true if the Vector contained the specified element.\n\t * @since 1.2\n\t */\n",
    "114956": "    /**\n     * Sets the <code>ID3v2</code> tag for this object. A new\n     * <code>ID3v2_4</code> object is created from the argument and then used\n     * here.\n     *\n     * @param mp3tag Any MP3Tag object can be used and will be converted into a\n     *        new ID3v2_4 object.\n     */\n",
    "114957": "\t/**\n\t * Inserts the specified element at the specified position in this Vector.\n\t * Shifts the element currently at that position (if any) and any\n\t * subsequent elements to the right (adds one to their indices).\n\t *\n\t * @param index index at which the specified element is to be inserted.\n\t * @param element element to be inserted.\n\t * @exception ArrayIndexOutOfBoundsException index is out of range\n\t *\t\t  (index &lt; 0 || index &gt; size()).\n\t * @since 1.2\n\t */\n",
    "114962": "\t/**\n\t * Removes all of the elements from this Vector.  The Vector will\n\t * be empty after this call returns (unless it throws an exception).\n\t *\n\t * @since 1.2\n\t */\n",
    "114964": "\t/**\n\t * Compares the specified Object with this Vector for equality.  Returns\n\t * true if and only if the specified Object is also a List, both Lists\n\t * have the same size, and all corresponding pairs of elements in the two\n\t * Lists are <em>equal</em>.  (Two elements <code>e1</code> and\n\t * <code>e2</code> are <em>equal</em> if <code>(e1==null ? e2==null :\n\t * e1.equals(e2))</code>.)  In other words, two Lists are defined to be\n\t * equal if they contain the same elements in the same order.\n\t *\n\t * @param o the Object to be compared for equality with this Vector.\n\t * @return true if the specified Object is equal to this Vector\n\t */\n",
    "114965": "    /**\n     * Returns the <code>ID3v2</code> tag for this object.\n     *\n     * @return the <code>ID3v2</code> tag for this object\n     */\n",
    "114966": "\t/**\n\t * Removes from this List all of the elements whose index is between\n\t * fromIndex, inclusive and toIndex, exclusive.  Shifts any succeeding\n\t * elements to the left (reduces their index).\n\t * This call shortens the ArrayList by (toIndex - fromIndex) elements.  (If\n\t * toIndex==fromIndex, this operation has no effect.)\n\t *\n\t * @param fromIndex index of first element to be removed.\n\t * @param toIndex index after last element to be removed.\n\t */\n",
    "114978": "    /**\n     * Sets the <code>Lyrics3</code> tag for this object. A new\n     * <code>Lyrics3v2</code> object is created from the argument and then\n     * used here.\n     *\n     * @param mp3tag Any MP3Tag object can be used and will be converted into a\n     *        new Lyrics3v2 object.\n     */\n",
    "115001": "    /**\n     * Returns the <code>ID3v1</code> tag for this object.\n     *\n     * @return the <code>ID3v1</code> tag for this object\n     */\n",
    "115062": "    /**\n     * Gets the value of the frame identified by identifier\n     *\n     * @param identifier The three letter code\n     *\n     * @return The value associated with the identifier\n     */\n",
    "115072": "    /**\n     * Sets the factor to increase the id3v2 padding size. When the ID3v2 tag\n     * padding length is calculated and is not large enough to fit the current\n     * ID3v2 tag, the padding length will be multiplied by this number until\n     * it is large enough.\n     *\n     * @param mult new factor to increase the id3v2 padding size.\n     */\n",
    "115077": "    /**\n     * Returns the factor to increase the id3v2 padding size. When the ID3v2\n     * tag padding length is calculated and is not large enough to fit the\n     * current ID3v2 tag, the padding length will be multiplied by this number\n     * until it is large enough.\n     *\n     * @return the factor to increase the id3v2 padding size\n     */\n",
    "115081": "    /**\n     * Returns true if there are any unsynchronized tags in this object. A\n     * fragment is unsynchronized if it exists in two or more tags but is not\n     * equal across all of them.\n     *\n     * @return true of any fragments are unsynchronized.\n     *\n     * @todo there might be a faster way to do this, other than calling\n     *       <code>getUnsynchronizedFragments</code>\n     */\n",
    "115082": "    /**\n     * Sets the initial ID3v2 padding length. This will be the minimum padding\n     * length of the ID3v2 tag. The <code>willShorten</code> setting will not\n     * make the length shorter than this value.\n     *\n     * @param size the new initial ID3v2 padding length\n     */\n",
    "115087": "    /**\n     * Returns the initial ID3v2 padding length. This will be the minimum\n     * padding length of the ID3v2 tag. The <code>willShorten</code> setting\n     * will not make the length shorter than this value.\n     *\n     * @return the initial ID3v2 padding length\n     */\n",
    "115125": "    /**\n     * This method calls <code>toString</code> for all it's objects and appends\n     * them without any newline characters.\n     *\n     * @return brief description string\n     */\n",
    "115126": "    /**\n     * This method calls <code>toString</code> for all it's objects and appends\n     * them. It contains new line characters and is more suited for display\n     * purposes\n     *\n     * @return formatted description string\n     */\n",
    "115127": "    /**\n     * Sets the all objects of identifier type to <code>obj</code> argument.\n     *\n     * @param identifier <code>MP3Object</code> identifier\n     * @param obj new object value\n     */\n",
    "115128": "    /**\n     * Returns the object of the <code>MP3Object</code> with the specified\n     * <code>identifier</code>\n     *\n     * @param identifier <code>MP3Object</code> identifier\n     *\n     * @return the object of the <code>MP3Object</code> with the specified\n     *         <code>identifier</code>\n     */\n",
    "115132": "    /**\n     * Returns true if this instance and its entire <code>MP3Object</code>\n     * array list is a subset of the argument. This class is a subset if it is\n     * the same class as the argument.\n     *\n     * @param obj object to determine subset of\n     *\n     * @return true if this instance and its entire object array list is a\n     *         subset of the argument.\n     */\n",
    "115133": "    /**\n     * Returns true if this object and its entire <code>MP3Object</code> array\n     * list equals the argument. This object is equal to the argument if they\n     * are the same class.\n     *\n     * @param obj object to determine equality of\n     *\n     * @return true if this object and its entire <code>MP3Object</code> array\n     *         list equals the argument.\n     */\n",
    "115134": "    /**\n     * Returns an iterator of the <code>MP3Object</code> object list.\n     *\n     * @return iterator of the <code>MP3Object</code> object list.\n     */\n",
    "115138": "    /**\n     * Calls <code>toString</code> for all <code>MP3Object</code> objects and\n     * creates a string with a new line character.\n     *\n     * @return description string\n     */\n",
    "115143": "    /**\n     * Returns true if this object contains an filename pseudo-tag\n     *\n     * @return true if this object contains an filename pseudo-tag\n     */\n",
    "115147": "    /**\n     * This method is not yet supported.\n     *\n     * @throws java.lang.UnsupportedOperationException This method is not yet\n     *         supported\n     */\n",
    "115149": "    /**\n     * Returns true if this object contains an <code>Id3v1</code> tag\n     *\n     * @return true if this object contains an <code>Id3v1</code> tag\n     */\n",
    "115153": "    /**\n     * Sets the default language for any ID3v2 tag frames which require it.\n     * While the value will already exist when reading from a file, this value\n     * will be used when a new ID3v2 Frame is created from scratch.\n     *\n     * @param lang language ID, [ISO-639-2] ISO/FDIS 639-2 definition\n     */\n",
    "115161": "    /**\n     * Returns true if this object contains an <code>Id3v2</code> tag\n     *\n     * @return true if this object contains an <code>Id3v2</code> tag\n     */\n",
    "115166": "    /**\n     * Returns the default language for any ID3v2 tag frames which require it.\n     *\n     * @return language ID, [ISO-639-2] ISO/FDIS 639-2 definition\n     */\n",
    "115177": "    /**\n     * Returns true if this object contains an <code>Lyrics3</code> tag\n     *\n     * @return true if this object contains an <code>Lyrics3</code> tag\n     */\n",
    "115225": "    /**\n     * Sets if we should save the Lyrics3 field. Defaults to true.\n     *\n     * @param id Lyrics3 id string\n     * @param save true if you want to save this specific Lyrics3 field.\n     */\n",
    "115240": "    /**\n     * Returns true if we should save the Lyrics3 field asked for in the\n     * argument. Defaults to true.\n     *\n     * @param id Lyrics3 id string\n     *\n     * @return true if we should save the Lyrics3 field.\n     */\n",
    "115281": "    /**\n     * Returns the MP3 frame size for the file this object refers to. It\n     * assumes that <code>seekNextMP3Frame</code> has already been called.\n     *\n     * @return MP3 Frame size in bytes.\n     */\n",
    "115338": "    /**\n     * Sets the default play counter size for the PCNT ID3v2 frame. While the\n     * value will already exist when reading from a file, this value will be\n     * used when a new ID3v2 Frame is created from scratch.\n     *\n     * @param size the default play counter size for the PCNT ID3v2 frame\n     */\n",
    "115356": "    /**\n     * Returns the default play counter size for the PCNT ID3v2 frame.\n     *\n     * @return the default play counter size for the PCNT ID3v2 frame\n     */\n",
    "115377": "    /**\n     * Sets the default text encoding for any ID3v2 tag frames which require\n     * it. While the value will already exist when reading from a file, this\n     * value will be used when a new ID3v2 Frame is created from scratch.\n     * \n     * <P>\n     * $00   ISO-8859-1 [ISO-8859-1]. Terminated with $00.<BR> $01   UTF-16\n     * [UTF-16] encoded Unicode [UNICODE] with BOM. All strings in the same\n     * frame SHALL have the same byteorder. Terminated with $00 00.<BR> $02\n     * UTF-16BE [UTF-16] encoded Unicode [UNICODE] without BOM. Terminated\n     * with $00 00.<BR> $03   UTF-8 [UTF-8] encoded Unicode [UNICODE].\n     * Terminated with $00.<BR>\n     * </p>\n     *\n     * @param enc new default text encoding\n     */\n",
    "115386": "    /**\n     * Returns the default text encoding format for ID3v2 tags which require\n     * it.\n     * \n     * <P>\n     * $00   ISO-8859-1 [ISO-8859-1]. Terminated with $00.<BR> $01   UTF-16\n     * [UTF-16] encoded Unicode [UNICODE] with BOM. All strings in the same\n     * frame SHALL have the same byteorder. Terminated with $00 00.<BR> $02\n     * UTF-16BE [UTF-16] encoded Unicode [UNICODE] without BOM. Terminated\n     * with $00 00.<BR> $03   UTF-8 [UTF-8] encoded Unicode [UNICODE].\n     * Terminated with $00.<BR>\n     * </p>\n     *\n     * @return the default text encoding\n     */\n",
    "115399": "    /**\n     * Sets the default time stamp format for ID3v2 tags which require it.\n     * While the value will already exist when reading from a file, this value\n     * will be used when a new ID3v2 Frame is created from scratch.\n     * \n     * <P>\n     * $01  Absolute time, 32 bit sized, using MPEG frames as unit<br>\n     * $02  Absolute time, 32 bit sized, using milliseconds as unit<br>\n     * </p>\n     *\n     * @param tsf the new default time stamp format\n     */\n",
    "115416": "    /**\n     * Returns the default time stamp format for ID3v2 tags which require it.\n     * \n     * <P>\n     * $01  Absolute time, 32 bit sized, using MPEG frames as unit<br>\n     * $02  Absolute time, 32 bit sized, using milliseconds as unit<br>\n     * </p>\n     *\n     * @return the default time stamp format\n     */\n",
    "115660": "    /**\n     * Creates a new ObjectLyrics3TimeStamp object.\n     *\n     * @param timeStamp DOCUMENT ME!\n     * @param timeStampFormat DOCUMENT ME!\n     */\n",
    "115693": "    /**\n     * Returns true if the string has matching parenthesis. This method matches\n     * all four parenthesis and also enclosed parenthesis.\n     *\n     * @param str string to test\n     *\n     * @return true if the string has matching parenthesis\n     */\n",
    "115696": "    /**\n     * Reconstruct the filename that is represented by this composite.\n     *\n     * @return the filename that is represented by this composite.\n     */\n",
    "115699": "    /**\n     * Sets the composite that this tag will use.\n     *\n     * @param composite the composite that this tag will use.\n     */\n",
    "115701": "    /**\n     * Given an object, try to return it as a <code>long</code>. This tries to\n     * parse a string, and takes <code>Long, Short, Byte, Integer</code>\n     * objects and gets their value. An exception is not explicityly thrown\n     * here because it would causes too many other methods to also throw it.\n     *\n     * @param value object to find long from.\n     *\n     * @return <code>long</code> value\n     *\n     * @throws IllegalArgumentException DOCUMENT ME!\n     */\n",
    "115703": "    /**\n     * Returns the composite that this tag will use.\n     *\n     * @return the composite that this tag will use.\n     */\n",
    "115709": "    /**\n     * Sets the ID3v2 frame body that this token represents\n     *\n     * @param id3v2FrameBodyClass the ID3v2 frame body that this token\n     *        represents\n     */\n",
    "115710": "    /**\n     * Sets the frame of this tag\n     *\n     * @param frame the frame to set\n     */\n",
    "115711": "    /**\n     * Returns the ID3v2 frame body that this token represents\n     *\n     * @return the ID3v2 frame body that this token represents\n     */\n",
    "115712": "    /**\n     * Returns a frame of this tag\n     *\n     * @param identifier ID3v2_4 ID of frame to get\n     *\n     * @return a frame of this tag\n     */\n",
    "115713": "    /**\n     * Sets the token that this class contains\n     *\n     * @param token the token that this class contains\n     */\n",
    "115716": "    /**\n     * Return the token that this class contains\n     *\n     * @return the token that this class contains\n     */\n",
    "115717": "    /**\n     * Sets the ID3v2_4 representation of this tag.\n     *\n     * @param id3tag the ID3v2_4 representation of this tag\n     */\n",
    "115718": "    /**\n     * Reconstruct the filename that is represented by this composite.\n     *\n     * @return the filename that is represented by this composite.\n     */\n",
    "115720": "    /**\n     * Returns the ID3v2_4 representation of this tag\n     *\n     * @return the ID3v2_4 representation of this tag\n     */\n",
    "115721": "    /**\n     * Returns an iterator through each <code>FilenameToken</code> in this\n     * composite in the correct order for the file name.\n     *\n     * @return an iterator through each <code>FilenameToken</code> in this\n     *         composite\n     */\n",
    "115728": "    /**\n     * Returns a string containing debug information about this class\n     *\n     * @return a string containing debug information about this class\n     */\n",
    "115731": "    /**\n     * Returns true if the iteration has more elements. (In other words,\n     * returns true if next would return an element rather than throwing an\n     * exception.)\n     *\n     * @return true if the iteration has more elements\n     */\n",
    "115732": "    /**\n     * Returns the next element in the iteration.\n     *\n     * @return the next element in the iteration.\n     *\n     * @throws NoSuchElementException DOCUMENT ME!\n     */\n",
    "115734": "    /**\n     * This method is not supported in this iterator.\n     *\n     * @throws java.lang.UnsupportedOperationException This method is not\n     *         supported in this iterator\n     */\n",
    "115737": "    /**\n     * Returns true if the iteration has more elements. (In other words,\n     * returns true if next would return an element rather than throwing an\n     * exception.)\n     *\n     * @return true if the iteration has more elements\n     */\n",
    "115739": "    /**\n     * Returns the next element in the iteration.\n     *\n     * @return the next element in the iteration.\n     *\n     * @throws NoSuchElementException DOCUMENT ME!\n     */\n",
    "115742": "    /**\n     * Sets the original string that this composite represents.\n     *\n     * @param originalToken the original string that this composite represents.\n     */\n",
    "115743": "    /**\n     * Get the original string that this composite represents.\n     *\n     * @return the original string that this composite represents.\n     */\n",
    "115744": "    /**\n     * Returns true if the iteration has more elements. (In other words,\n     * returns true if next would return an element rather than throwing an\n     * exception.)\n     *\n     * @return true if the iteration has more elements\n     */\n",
    "115746": "    /**\n     * Returns the next element in the iteration.\n     *\n     * @return the next element in the iteration.\n     *\n     * @throws NoSuchElementException DOCUMENT ME!\n     */\n",
    "115748": "    /**\n     * Replace the Unix end of line character with the DOS end of line\n     * character.\n     *\n     * @param text string to search and replace\n     *\n     * @return replaced string\n     */\n",
    "115751": "    /**\n     * Sets the composite that goes between the parenthesis\n     *\n     * @param middleComposite the composite that goes between the parenthesis\n     */\n",
    "115753": "    /**\n     * Returnsthe composite that goes between the parenthesis\n     *\n     * @return the composite that goes between the parenthesis\n     */\n",
    "115754": "    /**\n     * Sets the opening parenthesis\n     *\n     * @param openDelimiter the opening parenthesis\n     */\n",
    "115756": "    /**\n     * Returns the opening parenthesis\n     *\n     * @return the opening parenthesis\n     */\n",
    "115757": "    /**\n     * Reconstruct the filename that is represented by this composite.\n     *\n     * @return the filename that is represented by this composite.\n     */\n",
    "115761": "    /**\n     * Returns an iterator through each <code>FilenameToken</code> in this\n     * composite in the correct order for the file name.\n     *\n     * @return an iterator through each <code>FilenameToken</code> in this\n     *         composite\n     */\n",
    "115763": "    /**\n     * Match all elements of this composite against the keywords for this class\n     * type found in <code>TagOptionSingleton</code>. If the\n     * <code>FilenameToken</code> matches the keyword, the token's class is\n     * set.\n     *\n     * @param id3v2FrameBodyClass Class of keywords to match against.\n     */\n",
    "115765": "    /**\n     * Match all elements of this composite against the given tag. If any\n     * element of <code>matchTag</code> matches any element of this tag's\n     * composite, then this tag's composite leaf node's class is set.\n     *\n     * @param matchTag Tag to match against\n     */\n",
    "115771": "    /**\n     * Remove all occurances of the given character from the string argument.\n     *\n     * @param str String to search\n     * @param ch character to remove\n     *\n     * @return new String without the given charcter\n     */\n",
    "115775": "    /**\n     * Sets the composite that comes after the delimiter.\n     *\n     * @param afterComposite The composite that comes after the delimiter.\n     */\n",
    "115776": "    /**\n     * Returns the composite that comes after the delimiter.\n     *\n     * @return the composite that comes after the delimiter.\n     */\n",
    "115777": "    /**\n     * Sets the composite that comes before the delimiter\n     *\n     * @param beforeComposite the composite that comes before the delimiter\n     */\n",
    "115778": "    /**\n     * Traverse the composite and set the class field to match keywords found\n     * in TagOptionSingleton.\n     *\n     * @param composite composite to update.\n     */\n",
    "115779": "    /**\n     * Returns the composite that comes before the delimiter\n     *\n     * @return the composite that comes before the delimiter\n     */\n",
    "115780": "    /**\n     * Sets the delimiter that splits the two halves of this composite\n     *\n     * @param delimiter delimiter that splits the two halves of this composite\n     */\n",
    "115781": "    /**\n     * Traverse the composite and set the class field to match frames from all\n     * three other tags that are already found in the MP3 file.\n     *\n     * @param composite composite to update\n     * @param mp3File mp3file to match all it's tags against.\n     */\n",
    "115782": "    /**\n     * Returns the delimiter that splits the two halfs of this composite\n     *\n     * @return the delimiter that splits the two halfs of this composite\n     */\n",
    "115786": "    /**\n     * Create the filename that this composite represents\n     *\n     * @return the filename that this composite represents\n     */\n",
    "115791": "    /**\n     * Returns an iterator through each <code>FilenameToken</code> in this\n     * composite in the correct order for the file name.\n     *\n     * @return an iterator through each <code>FilenameToken</code> in this\n     *         composite\n     */\n",
    "115794": "    /**\n     * Match all elements of this composite against the keywords for this class\n     * type found in <code>TagOptionSingleton</code>. If the\n     * <code>FilenameToken</code> matches the keyword, the token's class is\n     * set.\n     *\n     * @param id3v2FrameBodyClass Class of keywords to match against.\n     */\n",
    "115797": "    /**\n     * Match all elements of this composite against the given tag. If any\n     * element of <code>matchTag</code> matches any element of this tag's\n     * composite, then this tag's composite leaf node's class is set.\n     *\n     * @param matchTag Tag to match against\n     */\n",
    "115820": "    /**\n     * Capitalize the word with the first letter upper case and all others\n     * lower case.\n     *\n     * @param word word to capitalize.\n     * @param keepUppercase if true, keep a word if it is already all in\n     *        uppercase\n     *\n     * @return new capitalized word.\n     */\n",
    "116237": "    /**\n     * Adjust this position.\n     * This is useful in cases that an amount of text is inserted\n     * or removed before this position.\n     *\n     * @param adjustment amount (either positive or negative) to adjust this position.\n     * @return the DocPosition, adjusted properly.\n     */\n",
    "116238": "    /**\n     * Two DocPositions are equal iff they have the same internal position.\n     *\n     * @return if this DocPosition represents the same position as another.\n     */\n",
    "116241": "    /**\n     * A string representation useful for debugging.\n     *\n     * @return A string representing the position.\n     */\n",
    "116242": "    /**\n     * Does this Comparator equal another?\n     * Since all DocPositionComparators are the same, they\n     * are all equal.\n     *\n     * @return true for DocPositionComparators, false otherwise.\n     */\n",
    "116243": "    /**\n     * Compare two DocPositions\n     *\n     * @param o1 first DocPosition\n     * @param o2 second DocPosition\n     * @return negative if first < second, 0 if equal, positive if first > second\n     */\n",
    "116248": "\t/**\n\t * The colorer runs forever and may sleep for long periods of time. It\n\t * should be interrupted every time there is something for it to do.\n\t */\n",
    "116263": "\t/**\n\t * Color or recolor the entire document\n\t */\n",
    "116264": "\t/**\n\t * Color a section of the document. The actual coloring will start somewhere\n\t * before the requested position and continue as long as needed.\n\t * \n\t * @param position\n\t *            the starting point for the coloring.\n\t * @param adjustment\n\t *            amount of text inserted or removed at the starting point.\n\t */\n",
    "116268": "    /**\n     * Modifying the document while the reader is working is like\n     * pulling the rug out from under the reader.  Alerting the\n     * reader with this method (in a nice thread safe way, this\n     * should not be called at the same time as a read) allows\n     * the reader to compensate.\n     */\n",
    "116269": "    /**\n     * Has no effect.  This reader can be used even after\n     * it has been closed.\n     */\n",
    "116271": "    /**\n     * Save a position for reset.\n     *\n     * @param readAheadLimit ignored.\n     */\n",
    "116272": "    /**\n     * This reader support mark and reset.\n     *\n     * @return true\n     */\n",
    "116273": "    /**\n     * Read a single character.\n     *\n     * @return the character or -1 if the end of the document has been reached.\n     */\n",
    "116275": "    /**\n     * Read and fill the buffer.\n     * This method will always fill the buffer unless the end of the document is reached.\n     *\n     * @param cbuf the buffer to fill.\n     * @return the number of characters read or -1 if no more characters are available in the document.\n     */\n",
    "116276": "    /**\n     * Read and fill the buffer.\n     * This method will always fill the buffer unless the end of the document is reached.\n     *\n     * @param cbuf the buffer to fill.\n     * @param off offset into the buffer to begin the fill.\n     * @param len maximum number of characters to put in the buffer.\n     * @return the number of characters read or -1 if no more characters are available in the document.\n     */\n",
    "116281": "    /**\n     * Skip characters of input.\n     * This method will always skip the maximum number of characters unless\n     * the end of the file is reached.\n     *\n     * @param n number of characters to skip.\n     * @return the actual number of characters skipped.\n     */\n",
    "116283": "    /**\n     * Seek to the given position in the document.\n     *\n     * @param n the offset to which to seek.\n     */\n",
    "116287": "    /**\n     * Checks this token to see if it is a reserved word.\n     * Reserved words are explained in <A Href=http://java.sun.com/docs/books/jls/html/>Java\n     * Language Specification</A>.\n     *\n     * @return true if this token is a reserved word, false otherwise\n     */\n",
    "116291": "    /**\n     * Checks this token to see if it is an identifier.\n     * Identifiers are explained in <A Href=http://java.sun.com/docs/books/jls/html/>Java\n     * Language Specification</A>.\n     *\n     * @return true if this token is an identifier, false otherwise\n     */\n",
    "116294": "    /**\n     * Checks this token to see if it is a literal.\n     * Literals are explained in <A Href=http://java.sun.com/docs/books/jls/html/>Java\n     * Language Specification</A>.\n     *\n     * @return true if this token is a literal, false otherwise\n     */\n",
    "116299": "    /**\n     * Checks this token to see if it is a Separator.\n     * Separators are explained in <A Href=http://java.sun.com/docs/books/jls/html/>Java\n     * Language Specification</A>.\n     *\n     * @return true if this token is a Separator, false otherwise\n     */\n",
    "116302": "    /**\n     * Checks this token to see if it is a Operator.\n     * Operators are explained in <A Href=http://java.sun.com/docs/books/jls/html/>Java\n     * Language Specification</A>.\n     *\n     * @return true if this token is a Operator, false otherwise\n     */\n",
    "116309": "    /**\n     * Checks this token to see if it is a comment.\n     *\n     * @return true if this token is a comment, false otherwise\n     */\n",
    "116315": "    /**\n     * Checks this token to see if it is White Space.\n     * Usually tabs, line breaks, form feed, spaces, etc.\n     *\n     * @return true if this token is White Space, false otherwise\n     */\n",
    "116320": "    /**\n     * Checks this token to see if it is an Error.\n     * Unfinished comments, numbers that are too big, unclosed strings, etc.\n     *\n     * @return true if this token is an Error, false otherwise\n     */\n",
    "116325": "    /**\n     * A description of this token.  The description should\n     * be appropriate for syntax highlighting.  For example\n     * \"comment\" is returned for a comment.\n     *\n     * @return a description of this token.\n     */\n",
    "116711": "    /**\n     * Closes the lookup service.\n     */\n",
    "116716": "    /**\n     * Returns the country the IP address is in.\n     *\n     * @param ipAddress String version of an IP address, i.e. \"127.0.0.1\"\n     * @return the country the IP address is from.\n     */\n",
    "116721": "    /**\n     * Returns true if the database is the premium version.\n     *\n     * @return true if the premium version of the database.\n     */\n",
    "116722": "    /**\n     * Returns the date of the database.\n     *\n     * @return the date of the database.\n     */\n",
    "116724": "    /**\n     * Returns the country the IP address is in.\n     *\n     * @param ipAddress the IP address.\n     * @return the country the IP address is from.\n     */\n",
    "116727": "    /**\n     * Returns the ISO two-letter country code of this country.\n     *\n     * @return the country code.\n     */\n",
    "116733": "    /**\n     * Returns the country the IP address is in.\n     *\n     * @param ipAddress the IP address in long format.\n     * @return the country the IP address is from.\n     */\n",
    "116854": "\t/**\n\t * The wizard owning this page is responsible for calling this method with the\n\t * current selection. The selection is used to initialize the fields of the wizard \n\t * page.\n\t * \n\t * @param selection used to initialize the fields\n\t */\n",
    "117158": "\t/**\n\t * This method is called upon plug-in activation\n\t */\n",
    "117161": "\t/**\n\t * This method is called when the plug-in is stopped\n\t */\n",
    "117164": "\t/**\n\t * Get the root Preferences node\n\t * @return\n\t */\n",
    "117170": "\t/**\n\t * Adds a child node to this node and sets its parent link \n\t * @param child node to be added to this node\n\t */\n",
    "117172": "\t/**\n\t * Removes a chlid node from this node and removes the parent link \n\t * @param child node to be removed from this node\n\t */\n",
    "117175": "\t/** \n\t * Checks if this TreeNode has chlidren\n\t * @return true if this node has chlidren\n\t */\n",
    "117177": "\t/**\n\t * Removes all Children form this node\n\t *\n\t */\n",
    "117186": "\t/**\n\t * Sets the parent of this node\n\t * @param parent the new parent of this node\n\t */\n",
    "117188": "\t/**\n\t * Gets the parent node of this node\n\t * @return the parent of this node\n\t */\n",
    "117194": "\t/**\n\t * Returns the adapter\n\t * Required by the IAdaptable interface\n\t */\n",
    "117197": "\t/**\n\t * Add a new server to the model\n\t * @param server server to add to the tree\n\t */\t\n",
    "117204": "    /**\n\t * Disconnects and Removes a new server to the model\n\t * @param server server to remove from the tree\n\t */\t\n",
    "117208": "\t/**\n\t * Refeshes all Servers\n\t * @throws NotConnectedException\n\t * @throws CommunicationException\n\t */\n",
    "117220": "\t/**\n\t * This callback allows to create the viewer and initialize it.\n\t */\n",
    "117229": "\t/**\n\t * Hooks and registers the context menu \n\t *\n\t */\n",
    "117242": "\t/**\n\t * Invokes the methods which fill the toolbar\n\t *\n\t */\n",
    "117247": "\t/**\n\t * returns a control which consists of the ui elements of this page\n\t */\n",
    "117250": "\t/**\n\t * Fills the pulldown in the toolbar\n\t * \n\t */\n",
    "117252": "\t/**\n\t * performes the ok action for this property page\n\t */\n",
    "117262": "\t/**\n\t * Fills the toolbar\n\t * \n\t */\n",
    "117271": "\t/**\n\t * Defines the status of the available commands related to the tree entries\n\t * Updates the detail view if a new server or domain is selected\n\t * Registeres the listener for selection change evenets\n\t */\n",
    "117280": "\t/**\n\t * Helper mothod for displaying messages\n\t * @param message String to output\n\t */\n",
    "117282": "\t/**\n\t * Sets this processor's set of characters triggering the activation of the\n\t * completion proposal computation.\n\t *\n\t * @param activationSet the activation set\n\t */\n",
    "117284": "\t/**\n\t * Adds a server to the model\n\t * @param server to be added\n\t */\n",
    "117285": "\t/**\n\t * Tells this processor to restrict its proposal to those element\n\t * visible in the actual invocation context.\n\t *\n\t * @param restrict <code>true</code> if proposals should be restricted\n\t */\n",
    "117288": "\t/**\n\t * Tells this processor to order the proposals alphabetically.\n\t *\n\t * @param order <code>true</code> if proposals should be ordered.\n\t */\n",
    "117289": "\t/**\n\t * Removes the ModelChangedHandler\n\t */\n",
    "117290": "\t/**\n\t * Tells this processor to restrict is proposals to those\n\t * starting with matching cases.\n\t *\n\t * @param restrict <code>true</code> if proposals should be restricted\n\t */\n",
    "117293": "\t/**\n\t * Passing the focus request to the viewer's control.\n\t */\n",
    "117448": "    /**\n     * Update the endabled/disabled state of this Action. \n     * Overwrite it, so that the action is enabled when it\n     * makes sense\n     */\n",
    "117574": "    /**\n     * Defines the initial layout for the ChatApps perspective.  \n     *\n     * @param layout the factory used to add views to the perspective\n     */\n",
    "117883": "\t/** Opens the url <a href=\"http://www.jgpd.com/\">http://www.jgpd.com/</a>.\n\t * \n\t * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)\n\t */\n",
    "117886": "\t/** Opens the url <a href=\"http://sourceforge.net/tracker/?func=add&group_id=90011&atid=592210\">http://sourceforge.net/tracker/?func=add&group_id=90011&atid=592210</a>.\n\t * \n\t * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)\n\t */\n",
    "117898": "\t/** Remove all nodes except the root node. */\n",
    "117901": "\t/** Remove the currently selected node. */\n",
    "117904": "\t/** Add child to the currently selected node. */\n",
    "117949": "\t/**\n\t * Handles events from the editor button and from\n\t * the dialog's OK button.\n\t */\n",
    "118318": "\t/**\n\t * Create a clone of the cell. The cloning of the\n\t * user object is deferred to the cloneUserObject()\n\t * method.\n\t *\n\t * @return Object  a clone of this object.\n\t */\n",
    "118322": "\t/**\n\t * Create a clone of the user object. This is provided for\n\t * subclassers who need special cloning. This implementation\n\t * simply returns a reference to the original user object.\n\t *\n\t * @return Object  a clone of this cells user object.\n\t */\n",
    "118327": "    /**\n     * Returns the name of this algorithm.\n     */\n",
    "118332": "    /**\n     * returns the layout Algorithm\n     */\n",
    "118338": "/**\n * Transforms a string value in a boolean value. The string has be \"true\" or\n * \"false\". Lower or upper case doesn't matter.\n * \n * @param boolValue A String, consisting of the word \"true\" or \"false\".\n * @return The boolean expression of the string.\n */\n",
    "118341": "    /** \n     * Called by pressing the cancel button. Leaves the dialog without\n     * saving.\n     */\n",
    "118352": "    /**\n     * Returns true if the dialog has been canceled.\n     */\n",
    "118354": "/**\n * Sets the initial Values, gained from the {@link #config configuration} \n * into the Cells.\n * \n * @return Because the progress dialog is allready visible during the \n * initialisation, <b><code>true</code><b> is returned when cancel is pressed\n * on it.\n */\n",
    "118360": "/**\n * Sets the initial values for one Cell.\n * \n * @param view Cell, the initial values should be set for.\n */\n",
    "118368": "/**\n * Helps updating the progress dialog.\n * \n * @param phase Identifies the phase, the algorithmis doing.\n * @param round current round, the algorithm is performing\n * @param maxRound maximum number of rounds, the algorithm could perform\n */\n",
    "118372": "/**\n * Calculates the current impulse for the given cell.\n * \n * @param view Cell, the current impulse should be calculated\n * @see #computeImpulse(CellView)\n */    \n",
    "118377": "/**\n * Calculates the last impulse for the given cell. This is only nesessary while\n * initializing the cells.\n * \n * @param view Cell, the last impulse should be calculated\n * @see #computeImpulse(CellView)\n */\n",
    "118393": "    /** Closes the dialog \n     * @see #action_cancel\n     * */\n",
    "118400": "/**\n * Clears the temporary data from the cells in {@link #cellList} (all cells).\n */\n",
    "118410": "/**\n * Moves the graph to the upper left corner of the drawing space. This is done,\n * after a successfull run of the algorithm, to correct it's output.\n */\n",
    "118414": "/**\n * Computes the bounding box of the whole graph. The result is a Rectangle, \n * parallel to the X- and Y-axises of the drawing system, closing about the \n * whole graph.\n * @return Rectangle, that contains the whole graph.\n * @see #getBoundingBox(ArrayList) \n */\n",
    "118421": "/**\n * Returns the temperature of a cell contained in a given list.\n * \n * @param index Identifies the cell. This is the index of the cell in \n * a given list of CellViews\n * @param list List containing only CellViews\n * @see #getAttribute(int,String,ArrayList)\n */\n",
    "118438": "/**\n * Method for Classes that extend this Algorithm. Will be called when performing\n * {@link #computeImpulse(CellView)}.\n */\n",
    "118453": "/**\n * Recalculates the position of a cluster. The position of a cluster is defined\n * by the barycenter of the clustered vertices.\n * \n * @param cluster Cell, that has to be a cluster, should be repositioned.\n */\n",
    "118459": "/**\n * Returns <code><b>true</b></code> when a cell is a cluster, else \n * <code<b>false</b></code>. A cell is a cluster when it has under it's \n * attributes a attribute with the boolean value <code><b>true</b></code> under\n * the key {@link #KEY_IS_CLUSTER}.\n * \n * @param cell cell, that should be researched wheather it is a cluster or not.\n * @return <code><b>true</b></code> if cell is a cluster, else \n * <code><b>false</b></code>.\n */\n",
    "118473": "\t/** calculates the attractive forces\n\t */\n",
    "118475": "\t/** calculates the repulsive forces\n\t */\n",
    "118476": "\t/** Calculates the euklidische Norm\n\t *  for the point p.\n\t *\n\t */\n",
    "118485": "    /** Called by pressing the ok button\n     *\n     */\n",
    "118486": "    /**\n     * Returns true if the dialog has been canceled.\n     */\n",
    "118487": "    /**\n     * Returns the value of the \"Horizontal spacing\" as text.\n     */\n",
    "118488": "    /**\n     * Returns the value of the \"Vertical spacing\" as text.\n     */\n",
    "118489": "    /**\n     * Set the value of the \"Horizontal spacing\" text field.\n     */\n",
    "118490": "    /**\n     * Set the value of the \"Vertical Spacing\" text field.\n     */\n",
    "118506": "/**\n * Runs the Algorithm as a optimization Algorithm of another Algorithm\n * @param applyList List of all Cells, a new Layout should be found for.\n * @param allCellList List of all Cells of the Graph\n * @param allEdgeList List of all Edges of the Graph\n * @param dialog Progress Dialog of the Algorithm, this Algorithm is a \n * Optimizer for.\n * @return when Cancel is pressed during the optimization, the method returns\n * <code><b>true</b></code>, else, for a successfull run, \n * <code><b>false</b></code>.\n */\n",
    "118512": "/**\n * Method of classes extending this class, that want to load their initial\n * values from the configuration.\n * \n * @param configSwitch Determines which configurationvalues have to be loaded\n * Possible values are {@link #CONFIG_KEY_RUN} and \n * {@link #CONFIG_KEY_LAYOUT_UPDATE}\n * @see #loadConfiguration(int)\n */\n",
    "118524": "/**\n * Removes the temporary Data from the Cells of the graph. During the run of the\n * Algorithm there has been plenty of Data stored in the Cells. These are\n * removed here, if the Algorithm is canceled or finished.\n */\n",
    "118530": "/**\n * Runs the Algorithm until {@link #temperature} is lower than \n * {@link #minTemperature} or cancel on the progressdialog is pressed.\n * \n * @return When the Algorithm is Canceled, the Method breaks and returns \n * <code><b>true</b></code>.\n */\n",
    "118539": "/**\n * Method for classes that extends this Algorithm. Calls the Costfunctions of\n * the extending class.\n * @return costs generated with the additional costfunctions\n * @see #getGlobalCosts(double[])\n */\n",
    "118542": "/**\n * Calculates a break condition for {@link #performRound()} if uphill moves\n * are allowed. This is computed by a formular from Bolzman:<p>\n * <blockquote><blockquote><code>\n * random < e^(oldEnergy-newEnergy)\n * </code></blockquote></blockquote>\n * @param oldEnergy The Energy before the Energy has increased, so it's the \n * lower one, of the two values.\n * @param newEnergy The Energy after the Energy has increased, so it's the\n * higher one, of the two values\n * @return sometimes <code><b>true</b></code> when the random number is\n * smaler than <code>e^(oldEnergy-newEnergy)</code>\n */\n",
    "118544": "/**\n * Calculates the maximal number of rounds, by flattening the actual \n * {@link #temperature} with the temperature scaling factor \n * {@link #tempScaleFactor}\n * \n * @param actualTemperature The Temperature of the actual Graph\n * @return The number of Rounds that have to be performed until \n * {@link #temperature} falls under {@link #minTemperature}.\n */\n",
    "118568": "/**\n * Returns all Edges that are connected with cells, member of \n * {@link #applyCellList}, except the edges connected the the given cell.\n * @param except Edges connected to this cell are not of interest\n * @return List of all interesting Edges\n */\n",
    "118570": "/**\n * Sets the position of a CellView to the given Position\n * \n * @param view The CellView, the position should be set\n * @param pos New Position\n * @see #setAttribute(CellView,String,Object)\n */\n",
    "118574": "/**\n * Sets the position of a CellView member of {@link #applyCellList} to the given\n * position.\n * \n * @param index ID of the CellView in {@link #applyCellList}\n * @param x X-Coordinate of the new position\n * @param y Y-Coordinate of the new position\n * @see #setPosition(CellView,double,double)\n */\n",
    "118579": "/**\n * Sets the position of a CellView to the given Position\n * \n * @param view The CellView, the position should be set\n * @param x X-Coordinate of the new position\n * @param y Y-Coordinate of the new position\n * @see #setPosition(CellView,Point2D.Double)\n */\n",
    "118582": "/**\n * Sets an attribute in a CellView\n * \n * @param view CellView, the attribute should be set\n * @param key The attribute will be stored in the CellView under that key.\n * @param obj Object representing the attribute, that should be stored.\n */\n",
    "118584": "/**\n * Returns an attribute from a CellView\n * \n * @param view CellView, that stores the attribute\n * @param key The attribute is stored in the CellView with this key\n * @return Object stored with the given key in the given CellView\n */\n",
    "118591": "/**\n * Retrieves the Cells that are directly connected to the given Cell and\n * member of the given list.\n * @param list Only relatives from this List are allowed\n * @param view Relatives from this view are requested\n * @return Relatives from view that are in the list\n * @see #getRelatives(CellView)\n */\n",
    "118684": "        /** initializes the dialog\n         */\n",
    "118685": "        /** Fills the List with the LayoutControllers\n         *  from the LayoutRegistry.\n         *  \n         *  @see LayoutRegistry\n         */\n",
    "118686": "        /** Will call if the user cancels the dialog\n         *\n         */\n",
    "118687": "        /** Will call if the user finishs the dialog\n         *\n         */\n",
    "118689": "        /** Will call if the user clicks on the configuration button.\n         *  if the layout controller is configurable the method\n         *  calls the configure method at the controller.\n         * \n         *  @see LayoutController#configure\n         *\n         */\n",
    "118692": "        /** Returns the selected \n         *  LayoutController of null if\n         *  no LayoutController was selected\n         *\n         */\n",
    "118703": "        /** calls the cancel method\n         *  @see #cancel\n         */\n",
    "118722": "\t/** Debugdisplay for the edge crosses indicators on the System out\n\t */\n",
    "118724": "\t/** Debugdisplay for the grid positions on the System out\n\t */\n",
    "118725": "\t/** Debugdisplay for the priorities on the System out\n\t */\n",
    "118735": "\t/** Updates the progress based on the movements count\n\t *\n\t */\n",
    "118773": "\t/** sets the minimum value to the progressbar\n\t */\n",
    "118774": "\t/** sets the maximum value to the progressbar\n\t */\n",
    "118775": "\t/** sets the progressbar to the maximumvalue\n\t */\n",
    "118776": "\t/**\n\t * Returns whether or not the specified data flavor is supported for\n\t * this object.\n\t * @param flavor the requested flavor for the data\n\t * @return boolean indicating whether or not the data flavor is supported\n\t */\n",
    "118777": "\t/** sets the specified value to the progressbar\n\t */\n",
    "118780": "\t/** returns the current value from the progressbar\n\t */\n",
    "118782": "\t/** sets the progress message\n\t */\n",
    "118784": "\t/** returns true if the user\n\t *  has clicked on the cancel button\n\t */\n",
    "118785": "\t/**\n\t * Returns whether or not the specified data flavor is an HTML flavor that\n\t * is supported.\n\t * @param flavor the requested flavor for the data\n\t * @return boolean indicating whether or not the data flavor is supported\n\t */\n",
    "118786": "\t/** sets the cancel button visible or not\n\t *\n\t *  @param visible the parameter specifies state\n\t */\n",
    "118787": "\t/**\n\t * Should the HTML flavors be offered?  If so, the method\n\t * getHTMLData should be implemented to provide something reasonable.\n\t */\n",
    "118788": "\t/** sets the cancel button enabled or not\n\t *\n\t *  @param visible the parameter specifies state\n\t */\n",
    "118789": "\t/** Returns the cancel button\n\t */\n",
    "118790": "\t/**\n\t * Fetch the data in a text/html format\n\t */\n",
    "118791": "\t/**\n\t * called to save the state of a component in case it needs to\n\t * be restored because a drop is not performed.\n\t */\n",
    "118792": "\t/**\n\t * Returns whether or not the specified data flavor is an plain flavor that\n\t * is supported.\n\t * @param flavor the requested flavor for the data\n\t * @return boolean indicating whether or not the data flavor is supported\n\t */\n",
    "118794": "\t/**\n\t * called to restore the state of a component in case a drop\n\t * is not performed.\n\t */\n",
    "118795": "\t/**\n\t * Should the plain text flavors be offered?  If so, the method\n\t * getPlainData should be implemented to provide something reasonable.\n\t */\n",
    "118796": "\t/**\n\t * called to restore the state of a component in case a drop\n\t * is performed.\n\t */\n",
    "118797": "\t/**\n\t * called to set the insertion location to match the current\n\t * mouse pointer coordinates.\n\t */\n",
    "118798": "\t/**\n\t * Fetch the data in a text/plain format.\n\t */\n",
    "118799": "\t/**\n\t * Initializes the internal properties if they haven't been already\n\t * inited. This is done lazily to avoid loading of desktop properties.\n\t */\n",
    "118800": "\t/**\n\t * Returns whether or not the specified data flavor is a String flavor that\n\t * is supported.\n\t * @param flavor the requested flavor for the data\n\t * @return boolean indicating whether or not the data flavor is supported\n\t */\n",
    "118806": "\t/**\n\t * Cleans up internal state after the drop has finished (either succeeded\n\t * or failed).\n\t */\n",
    "118807": "\t/**\n\t * Sets the GraphModel. This invokes <code>updateSize</code>.\n\t */\n",
    "118808": "\t/** Creates a frame for this Graphpad panel\n\t *\n\t */\n",
    "118812": "\t/**\n\t * Sets the GraphLayoutCache (geometric pattern).\n\t * This invokes <code>updateSize</code>.\n\t */\n",
    "118816": "\t/**\n\t * Sets the marquee handler.\n\t */\n",
    "118817": "\t/** Returns the current Action Map\n\t */\n",
    "118820": "\t/**\n\t * Find the hosting frame, for the file-chooser dialog.\n\t */\n",
    "118821": "\t/**\n\t * Resets the selection model. The appropriate listeners are installed\n\t * on the model.\n\t */\n",
    "118825": "\t/**\n\t * Returns the handle that is currently active, or null, if no\n\t * handle is currently active. Typically, the returned objects\n\t * are instances of the RootHandle inner class.\n\t */\n",
    "118827": "\t/** Show a dialog with the given error message.\n\t * */\n",
    "118828": "\t/**\n\t * Returns the current graph.\n\t * @return GPGraph\n\t */\n",
    "118829": "\t/**\n\t * Returns the cell that has the focus.\n\t */\n",
    "118833": "\t/**\n\t * Returns the current export model.\n\t * @return GPGraph\n\t */\n",
    "118836": "\t/**\n\t * Returns the currently selected internal frame\n\t * If no one is selected, then the first one will be select.\n\t *\n\t * @return GPDocument\n\t */\n",
    "118837": "\t/**\n\t * Returns the current location of the Drag-and-Drop activity.\n\t */\n",
    "118839": "\t/**\n\t * Returns the currently selected document.\n\t * If no one is selected, then the first one will be select.\n\t * @return GPDocument\n\t */\n",
    "118841": "\t/**\n\t * Returns the undoAction.\n\t * @return UndoAction\n\t */\n",
    "118842": "\t/**\n\t * Sets the current location for Drag-and-Drop activity. Should be\n\t * set to null after a drop. Used from within DropTargetListener.\n\t */\n",
    "118843": "\t/**\n\t * Returns the redoAction.\n\t *\n\t * @return RedoAction\n\t */\n",
    "118856": "\t/** Adds a new Internal Frame to the Graphpad\n\t */\n",
    "118862": "\t/** removes the specified Internal Frame from the Graphpad\n\t */\n",
    "118867": "\t/** Adds a new Document based on the GraphModelProvider.\n\t *\n\t */\n",
    "118868": "\t/**\n\t * Messaged to update the selection based on a MouseEvent over a\n\t * particular cell. If the event is a toggle selection event, the\n\t * cell is either selected, or deselected. Otherwise the cell is\n\t * selected.\n\t */\n",
    "118871": "\t/** Adds a new Document based on the GraphModelProvider.\n\t *\n\t */\n",
    "118874": "\t/** Adds a new Document based on the GraphModelProvider.\n\t *\n\t */\n",
    "118876": "\t/**\n\t * Messaged to update the selection based on a toggle selection\n\t * event, which means the cell's selection state is inverted.\n\t */\n",
    "118878": "\t/** Adds a new Document based on the GraphModelProvider.\n\t *\n\t */\n",
    "118881": "\t/** Adds a new Document based on the GraphModelProvider.\n\t *\n\t */\n",
    "118884": "\t/**\n\t * Returning true signifies that cells are added to the selection.\n\t */\n",
    "118891": "\t/**\n\t * Returning true signifies a mouse event on the cell should toggle\n\t * the selection of only the cell under mouse.\n\t */\n",
    "118899": "\t/**\n\t  * Returns the first cell.\n\t  */\n",
    "118901": "\t/**\n\t * Returns true if the first cell has been added to the selection,\n\t * a return value of false means the first cell has been\n\t * removed from the selection.\n\t */\n",
    "118902": "\t/**\n\t * Returns true if the cell identified by cell was added to the\n\t * selection. A return value of false means the cell was in the\n\t * selection but is no longer in the selection. This will raise if\n\t * cell is not one of the cells identified by this event.\n\t */\n",
    "118903": "\t/**\n\t * Returns true if the cell identified by <code>index</code> was added to\n\t * the selection. A return value of false means the cell was in the\n\t * selection but is no longer in the selection. This will raise if\n\t * index < 0 || >= <code>getPaths</code>.length.\n\t *\n\t * @since 1.3\n\t */\n",
    "118904": "\t/**\n\t * Returns a copy of the receiver, but with the source being newSource.\n\t */\n",
    "118905": "\t/**\n\t * Returns the object that constitues the change.\n\t */\n",
    "118907": "\t/**\n\t * Returns the barFactory.\n\t * @return GPBarFactory\n\t */\n",
    "118909": "\t/**\n\t * Returning true signifies the marquee handler has precedence over\n\t * other handlers, and is receiving subsequent mouse events.\n\t */\n",
    "118910": "\t/**\n\t * Sets the barFactory.\n\t * @param barFactory The barFactory to set\n\t */\n",
    "118912": "\t/**\n\t * Returning true signifies a move should only be\n\t * applied to one direction.\n\t */\n",
    "118913": "\t/**\n\t * Returns the L&F object that renders this component.\n\t * @return the GraphUI object that renders this component\n\t */\n",
    "118914": "\t/**\n\t * Returns the marqueeHandler.\n\t * @return JGpdMarqueeHandler\n\t */\n",
    "118916": "\t/**\n\t * Sets the L&F object that renders this component.\n\t * @param ui the GraphUI L&F object\n\t * @see javax.swing.UIDefaults#getUI(JComponent)\n\t *\n\t */\n",
    "118917": "\t/**\n\t  * Returns true if the graph is being edited.  The item that is being\n\t  * edited can be returned by getEditingPath().\n\t  */\n",
    "118920": "\t/**\n\t * Notification from the <code>UIManager</code> that the L&F has changed.\n\t * Replaces the current UI object with the latest version from the\n\t * <code>UIManager</code>. Subclassers can override this to support\n\t * different GraphUIs.\n\t * @see JComponent#updateUI\n\t *\n\t */\n",
    "118922": "\t/**\n\t  * Stops the current editing session.  This has no effect if the\n\t  * graph isn't being edited.  Returns true if the editor allows the\n\t  * editing session to stop.\n\t  */\n",
    "118924": "\t/**\n\t * Returns true if the edge shape intersects the given rectangle.\n\t */\n",
    "118925": "\t/**\n\t * Returns the bounds of the edge shape.\n\t */\n",
    "118926": "\t/**\n\t * Returns the name of the L&F class that renders this component.\n\t * @return the string \"GraphUI\"\n\t * @see JComponent#getUIClassID\n\t *\n\t */\n",
    "118927": "\t/**\n\t * Returns the label bounds of the specified view in the given graph.\n\t */\n",
    "118929": "\t/**\n\t  * Cancels all current editing sessions.\n\t  */\n",
    "118930": "\t/**\n\t * Returns the label size of the specified view in the given graph.\n\t */\n",
    "118932": "\t/**\n\t * Returns a map of (cell, clone)-pairs for all <code>cells</code>\n\t * and their children. Special care is taken to replace the anchor\n\t * references between ports. (Iterative implementation.)\n\t */\n",
    "118934": "\t/**\n\t * Returns the bounds of the edge shape without label\n\t */\n",
    "118935": "\t/**\n\t  * Selects the cell and tries to edit it.  Editing will\n\t  * fail if the CellEditor won't allow it for the selected item.\n\t  */\n",
    "118938": "\t/**\n\t * Returns the topmost cell at the specified location.\n\t * @param x an integer giving the number of pixels horizontally from\n\t * the left edge of the display area, minus any left margin\n\t * @param y an integer giving the number of pixels vertically from\n\t * the top of the display area, minus any top margin\n\t * @return the topmost cell at the specified location\n\t */\n",
    "118941": "\t/**\n\t * Returns the element that is being edited.\n\t */\n",
    "118943": "\t/**\n\t * Returns the cell at the specified location that is \"behind\" the\n\t * <code>current</code> cell. Returns the topmost cell if there are\n\t * no more cells behind <code>current</code>.\n\t */\n",
    "118945": "\t/**\n\t * Overridden for performance reasons.\n\t * See the <a href=\"#override\">Implementation Note</a>\n\t * for more information.\n\t */\n",
    "118947": "\t/**\n\t * Returns the bounding rectangle of the specified cell.\n\t */\n",
    "118948": "\t/**\n\t * Overridden for performance reasons.\n\t * See the <a href=\"#override\">Implementation Note</a>\n\t * for more information.\n\t */\n",
    "118949": "\t/**\n\t * Overridden for performance reasons.\n\t * See the <a href=\"#override\">Implementation Note</a>\n\t * for more information.\n\t */\n",
    "118950": "\t/**\n\t * Overridden for performance reasons.\n\t * See the <a href=\"#override\">Implementation Note</a>\n\t * for more information.\n\t */\n",
    "118951": "\t/**\n\t * Returns the bounding rectangle of the specified cells.\n\t */\n",
    "118953": "\t/**\n\t * Invoked after the <code>graph</code> instance variable has been\n\t * set, but before any defaults/listeners have been installed.\n\t */\n",
    "118957": "\t/**\n\t * Returns the next view at the specified location wrt. <code>current</code>.\n\t * This is used to iterate overlapping cells, and cells that are grouped.\n\t * The current selection affects this method.\n\t */\n",
    "118959": "\t/**\n\t * Invoked from installUI after all the defaults/listeners have been\n\t * installed.\n\t */\n",
    "118964": "\t/**\n\t * Invoked as part from the boilerplate install block. This\n\t * sets the look and feel specific variables in JGraph.\n\t */\n",
    "118966": "\t/**\n\t * Convenience method to return the port at the specified location.\n\t */\n",
    "118970": "\t/**\n\t  * Includes the specified startPoint in the marquee selection. Calls\n\t  * overlay.\n\t  */\n",
    "118972": "\t/** \n\t\t* Called after the component was repainted (ie. after autoscroll).\n\t  * This is used to indicate that the graphics is no more dirty.\n\t  */\n",
    "118974": "\t/**\n\t  * Start the marquee at the specified startPoint. This invokes\n\t  * expandMarqueeToPoint to initialize marquee selection.\n\t  */\n",
    "118976": "\t/**\n\t * Returns the currentPoint.\n\t * @return Point\n\t */\n",
    "118977": "\t/**\n\t * Returns the marqueeBounds.\n\t * @return Rectangle\n\t */\n",
    "118978": "\t/**\n\t * Returns the portview at the specified location.\n\t */\n",
    "118979": "\t/**\n\t * Returns the previousCursor.\n\t * @return Cursor\n\t */\n",
    "118980": "\t/**\n\t * Returns the startPoint.\n\t * @return Point\n\t */\n",
    "118981": "\t/**\n\t * Sets the currentPoint.\n\t * @param currentPoint The currentPoint to set\n\t */\n",
    "118982": "\t/**\n\t * Sets the marqueeBounds.\n\t * @param marqueeBounds The marqueeBounds to set\n\t */\n",
    "118983": "\t/**\n\t * Invoked as part from the boilerplate install block.\n\t */\n",
    "118984": "\t/**\n\t * Sets the previousCursor.\n\t * @param previousCursor The previousCursor to set\n\t */\n",
    "118985": "\t/**\n\t * Sets the startPoint.\n\t * @param startPoint The startPoint to set\n\t */\n",
    "118987": "\t/**\n\t * Overrides the parent method to udpate the cached points,\n\t * source and target port. If the source or target is removed,\n\t * a point is inserted into the array of points.\n\t */\n",
    "118988": "\t/**\n\t * Converts the specified value to string. If the value is an instance of\n\t * CellView or the current GraphLayoutCache returns a mapping for value, then\n\t * then value attribute of that CellView is used. (The value is retrieved using\n\t * getAllAttributes.) If the value is an instance\n\t * of DefaultMutableTreeNode (e.g. DefaultGraphCell), then the userobject\n\t * is returned as a String.\n\t */\n",
    "118989": "\t/**\n\t * Update attributes and recurse children.\n\t */\n",
    "118990": "\t/**\n\t * Returns true if this view intersects the given rectangle.\n\t */\n",
    "118991": "\t/**\n\t * Intalls the subcomponents of the graph, which is the renderer pane.\n\t */\n",
    "118992": "\t/**\n\t * Returns the location for this portview.\n\t */\n",
    "118994": "\t/**\n\t * Returns the local renderer. Do not access the renderer\n\t * field directly. Use this method instead!\n\t */\n",
    "118995": "\t/**\n\t * Returns the given point applied to the grid.\n\t * @param p a point in screen coordinates.\n\t * @return the same point applied to the grid.\n\t */\n",
    "118996": "\t/**\n\t * Returns a renderer for the class.\n\t */\n",
    "118997": "\t/**\n\t * Returns a cell handle for the view.\n\t */\n",
    "118998": "\t/**\n\t * Creates an instance of TransferHandler. Used for subclassers\n\t * to provide different TransferHandler.\n\t */\n",
    "118999": "\t/**\n\t * Returns the CellView that represents the source of the edge.\n\t */\n",
    "119000": "\t/**\n\t * Returns the given point applied to the grid.\n\t * @param p a point in screen coordinates.\n\t * @return the same point applied to the grid.\n\t */\n",
    "119001": "\t/**\n\t * Sets the <code>sourceView</code> of the edge.\n\t */\n",
    "119002": "\t/**\n\t * Returns the CellView that represents the target of the edge.\n\t */\n",
    "119003": "\t/**\n\t * Sets the <code>targetView</code> of the edge.\n\t */\n",
    "119004": "\t/**\n\t * Creates a listener that is responsible to update the UI based on\n\t * how the graph's bounds properties change.\n\t */\n",
    "119005": "\t/**\n\t * Returns a point that describes the position of the label.\n\t */\n",
    "119006": "\t/**\n\t * Upscale the given point in place, ie.\n\t * using the given instance.\n\t * @param p the point to be upscaled\n\t * @return the upscaled point instance\n\t */\n",
    "119007": "\t/**\n\t * Sets the description of the label position.\n\t */\n",
    "119008": "\t/**\n\t * Returns the number of point for this edge.\n\t */\n",
    "119010": "\t/**\n\t * Returns the cached points for this edge.\n\t */\n",
    "119011": "\t/**\n\t * Creates the listener responsible for calling the correct handlers\n\t * based on mouse events, and to select invidual cells.\n\t */\n",
    "119012": "\t/**\n\t * Sets the point at <code>index</code> to <code>p</code>.\n\t */\n",
    "119013": "\t/**\n\t * Downscale the given point in place, ie.\n\t * using the given instance.\n\t * @param p the point to be downscaled\n\t * @return the downscaled point instance\n\t */\n",
    "119015": "\t/**\n\t * Removes the point at position <code>index</code>.\n\t */\n",
    "119016": "\t/**\n\t * Returning true signifies a mouse event adds a new point to an edge.\n\t */\n",
    "119017": "\t/**\n\t * Upscale the given rectangle in place, ie.\n\t * using the given instance.\n\t * @param rect the rectangle to be upscaled\n\t * @return the upscaled rectangle instance\n\t */\n",
    "119018": "\t/**\n\t * Creates the listener reponsible for getting key events from\n\t * the graph.\n\t */\n",
    "119023": "\t/**\n\t * Downscale the given rectangle in place, ie.\n\t * using the given instance.\n\t * @param rect the rectangle to be downscaled\n\t * @return the down-scaled rectangle instance\n\t */\n",
    "119024": "\t/**\n\t * Creates the listener that updates the display based on selection change\n\t * methods.\n\t */\n",
    "119028": "\t/**\n\t * Constructs a view for the specified cell and associates it\n\t * with the specified object using the specified CellMapper.\n\t * This calls refresh on the created CellView to create all\n\t * dependent views.<p>\n\t * Note: The mapping needs to be available before the views\n\t * of child cells and ports are created.\n\t *\n\t * @param cell reference to the object in the model\n\t */\n",
    "119030": "\t/**\n\t * Creates a listener to handle events from the current editor.\n\t */\n",
    "119034": "\t/**\n\t * Computes and updates the size for <code>view</code>.\n\t */\n",
    "119035": "\t\t/**\n\t\t * Invoked when the mouse pointer has been moved on a component\n\t\t * (with no buttons down).\n\t\t */\n",
    "119036": "\t/**\n\t * Creates and returns a new ComponentHandler.\n\t */\n",
    "119039": "\t/**\n\t * Constructs an EdgeView view for the specified object.\n\t */\n",
    "119041": "\t/**\n\t * Returns the renderer pane that renderer components are placed in.\n\t */\n",
    "119043": "\t/**\n\t * Constructs a PortView view for the specified object.\n\t */\n",
    "119045": "\t/**\n\t * Returns the graph associated with the view.\n\t */\n",
    "119046": "\t/**\n\t * Returns the model associated with the view.\n\t */\n",
    "119047": "\t/**\n\t * Returns a listener that can update the graph when the view changes.\n\t */\n",
    "119048": "\t/**\n\t * Returns the cell mapper associated with the view.\n\t */\n",
    "119049": "\t/**\n\t * Returns the model object that this view represents.\n\t */\n",
    "119051": "\t/**\n\t * Constructs an EdgeView view for the specified object.\n\t *\n\t * @deprecated\treplaced by {@link #createEdgeView(Object,CellMapper)}\n\t *\t\tsince JGraph no longer exposes dependecies on\n\t * \t\tGraphCell subclasses (Port, Edge)\n\t */\n",
    "119053": "\t/**\n\t * Update attributes and recurse children.\n\t */\n",
    "119054": "\t/**\n\t * This method implements the merge between the\n\t * cell's and the view's attributes. The view's\n\t * attributes override the cell's attributes\n\t * with one exception.\n\t */\n",
    "119056": "\t/**\n\t * Returns the parent view for this view.\n\t */\n",
    "119057": "\t/**\n\t * Returns a listener that can update the graph when the model changes.\n\t */\n",
    "119058": "\t/**\n\t * Removes this view from the list of childs of the parent.\n\t */\n",
    "119060": "\t/**\n\t * Returns true if the view is a leaf.\n\t */\n",
    "119061": "\t/**\n\t * Constructs a PortView view for the specified object.\n\t*\n\t* @deprecated\treplaced by {@link #createPortView(Object,CellMapper)}\n\t*\t\tsince JGraph no longer exposes dependecies on\n\t* \t\tGraphCell subclasses (Port, Edge)\n\t */\n",
    "119062": "\t/**\n\t * Return the attributes of the view.\n\t */\n",
    "119063": "\t/**\n\t * Returns the attributes of the view combined with the\n\t * attributes of the corresponding cell. The view's attributes\n\t * override the cell's attributes with the same key.\n\t */\n",
    "119064": "\t/**\n\t * Applies <code>change</code> to the attributes of the view\n\t * and calls update.\n\t */\n",
    "119069": "\t/**\n\t * Constructs a VertexView view for the specified object.\n\t */\n",
    "119070": "\t/**\n\t * Returns true if the view intersects the given rectangle.\n\t */\n",
    "119072": "\t/**\n\t * Returns a cell editor for the view.\n\t */\n",
    "119073": "\t/**\n\t * Returns an iterator of the edges connected\n\t * to the port.\n\t */\n",
    "119074": "\t/**\n\t * Adds <code>edge</code> to the list of ports.\n\t */\n",
    "119075": "\t/**\n\t * Removes <code>edge</code> from the list of ports.\n\t */\n",
    "119076": "\t/**\n\t * Returns the anchor of this port.\n\t */\n",
    "119077": "\t/**\n\t * Sets the anchor of this port.\n\t */\n",
    "119078": "\t/**\n\t * Returns the anchor of this port.\n\t */\n",
    "119079": "\t/**\n\t * Sets the anchor of this port.\n\t */\n",
    "119080": "\t/**\n\t * Returns the number of clicks for editing to start.\n\t */\n",
    "119081": "\t/**\n\t * Create a clone of the cell. The cloning of the\n\t * user object is deferred to the cloneUserObject()\n\t * method.\n\t *\n\t * @return Object  a clone of this object.\n\t */\n",
    "119092": "\t/**\n\t * Sets the number of clicks for editing to start.\n\t */\n",
    "119101": "\t/**\n\t * Returns true if the graph accepts drops/pastes from external sources.\n\t */\n",
    "119102": "\t/**\n\t * Returns the number of roots in the model.  Returns 0 if the\n\t * model is empty.\n\t *\n\t * @return  the number of roots in the model\n\t */\n",
    "119104": "\t/**\n\t * Returns the root at index <I>index</I> in the model.\n\t * This should not return null if <i>index</i> is a valid\n\t * index for the model (that is <i>index</i> >= 0 &&\n\t * <i>index</i> < getRootCount()).\n\t *\n\t * @return  the root of at index <I>index</I>\n\t */\n",
    "119105": "\t/**\n\t * Returns the index of <code>root</code> in the model.\n\t * If root is <code>null</code>, returns -1.\n\t * @param parent a root in the model, obtained from this data source\n\t * @return the index of the root in the model, or -1\n\t *    if the parent is <code>null</code>\n\t */\n",
    "119106": "\t/**\n\t * Sets if the graph accepts drops/pastes from external sources.\n\t */\n",
    "119107": "\t/**\n\t * Returns <code>true</code> if <code>node</code> or one of its\n\t * ancestors is in the model.\n\t *\n\t * @return <code>true</code> if  <code>node</code> is in the model\n\t */\n",
    "119108": "\t/**\n\t * Uninstalls the renderer pane.\n\t */\n",
    "119109": "\t/**\n\t * Returns a <code>Map</code> that represents the attributes for\n\t * the specified cell. This attributes have precedence over each\n\t * view's attributes, regardless of isAttributeStore.\n\t *\n\t * @return attributes of <code>node</code> as a <code>Map</code>\n\t */\n",
    "119110": "\t/**\n\t * Returns true if the graph uses Drag-and-Drop to move cells.\n\t */\n",
    "119111": "\t/**\n\t * Returns the source of <code>edge</code>. <I>edge</I> must be an object\n\t * previously obtained from this data source.\n\t *\n\t * @return <code>Object</code> that represents the source of <i>edge</i>\n\t */\n",
    "119113": "\t/**\n\t * Returns the target of <code>edge</code>. <I>edge</I> must be an object\n\t * previously obtained from this data source.\n\t *\n\t * @return <code>Object</code> that represents the target of <i>edge</i>\n\t */\n",
    "119115": "\t/**\n\t * Sets if the graph uses Drag-and-Drop to move cells.\n\t */\n",
    "119116": "\t/**\n\t * Returns <code>true</code> if <code>port</code> is a valid source\n\t * for <code>edge</code>. <I>edge</I> and <I>port</I> must be\n\t * objects previously obtained from this data source.\n\t *\n\t * @return <code>true</code> if <code>port</code> is a valid source\n\t *                           for <code>edge</code>.\n\t */\n",
    "119117": "\t/**\n\t * Returns <code>true</code> if <code>port</code> is a valid target\n\t * for <code>edge</code>. <I>edge</I> and <I>port</I> must be\n\t * objects previously obtained from this data source.\n\t *\n\t * @return <code>true</code> if <code>port</code> is a valid target\n\t *                           for <code>edge</code>.\n\t */\n",
    "119120": "\t/**\n\t * Returns an iterator of the edges connected to <code>port</code>.\n\t * <I>port</I> must be a object previously obtained from\n\t * this data source. This method never returns null.\n\t *\n\t * @param   port  a port in the graph, obtained from this data source\n\t * @return  <code>Iterator</code> that represents the connected edges\n\t */\n",
    "119123": "\t/**\n\t * Sets if the graph allows movement of cells.\n\t */\n",
    "119124": "\t/**\n\t * Paint the background of this graph. Calls paintGrid.\n\t */\n",
    "119126": "\t/**\n\t * Returns true if the graph allows adding/removing/modifying points.\n\t */\n",
    "119127": "\t/**\n\t * Returns the parent of <I>child</I> in the model.\n\t * <I>child</I> must be a node previously obtained from\n\t * this data source. This returns null if <i>child</i> is\n\t * a root in the model.\n\t *\n\t * @param   child  a node in the graph, obtained from this data source\n\t * @return  the parent of <I>child</I>\n\t */\n",
    "119130": "\t/**\n\t * Returns the index of child in parent.\n\t * If either the parent or child is <code>null</code>, returns -1.\n\t * @param parent a note in the tree, obtained from this data source\n\t * @param child the node we are interested in\n\t * @return the index of the child in the parent, or -1\n\t *    if either the parent or the child is <code>null</code>\n\t */\n",
    "119133": "\t/**\n\t * Sets if the graph allows adding/removing/modifying points.\n\t */\n",
    "119134": "\t/**\n\t * Paint the foreground of this graph. Calls paintPorts.\n\t */\n",
    "119135": "\t/**\n\t * Returns the number of children of <I>parent</I>.  Returns 0 if the node\n\t * is a leaf or if it has no children.  <I>parent</I> must be a node\n\t * previously obtained from this data source.\n\t *\n\t * @param   parent  a node in the tree, obtained from this data source\n\t * @return  the number of children of the node <I>parent</I>\n\t */\n",
    "119136": "\t/**\n\t * Returns whether the specified node is a leaf node.\n\t * The way the test is performed depends on the.\n\t *\n\t * @param node the node to check\n\t * @return true if the node is a leaf node\n\t */\n",
    "119137": "\t/**\n\t * Returns true if the graph allows new connections to be established.\n\t */\n",
    "119140": "\t/**\n\t * Setse if the graph allows new connections to be established.\n\t */\n",
    "119141": "\t/**\n\t * Removes <code>cells</code> from the model.\n\t * Notifies the model- and undo listeners of the change.\n\t */\n",
    "119144": "\t/**\n\t * Update the handle using createHandle.\n\t */\n",
    "119145": "\t/**\n\t * Returns true if the graph allows existing connections to be removed.\n\t */\n",
    "119146": "\t/**\n\t * Sends <code>cells</code> to back.\n\t */\n",
    "119147": "\t/**\n\t * Brings <code>cells</code> to front.\n\t */\n",
    "119149": "\t/**\n\t * Sets if the graph allows existing connections to be removed.\n\t */\n",
    "119152": "\t/**\n\t * Returns true if cells are cloned on CTRL-Drag operations.\n\t */\n",
    "119153": "\t/**\n\t * Constructs the \"root handle\" for <code>context</code>.\n\t *\n\t * @param context reference to the context of the current selection.\n\t */\n",
    "119154": "\t/**\n\t * Returns an edit that represents a remove.\n\t */\n",
    "119156": "\t/**\n\t * Sets if cells are cloned on CTRL-Drag operations.\n\t */\n",
    "119157": "\t/**\n\t * Messages the Graph with <code>graphDidChange</code>.\n\t */\n",
    "119161": "\t/**\n\t * Returns true if the graph allows cells to be resized.\n\t */\n",
    "119164": "\t/**\n\t * Sets if the graph allows cells to be resized.\n\t */\n",
    "119165": "\t/**\n\t * Applies <code>connectionSet</code> to the model. Returns\n\t * a connection set that may be used to undo this change.\n\t */\n",
    "119166": "\t/** Sets the preferred minimum size.\n\t  */\n",
    "119167": "\t/**\n\t * Inserts the specified connection into the model.\n\t */\n",
    "119168": "\t/**\n\t * Returns true if selected edges should be disconnected from\n\t * unselected vertices when they are moved.\n\t */\n",
    "119170": "\t/** Returns the minimum preferred size.\n\t  */\n",
    "119172": "\t/**\n\t * Adds a listener for the GraphModelEvent posted after the graph changes.\n\t *\n\t * @see     #removeGraphModelListener\n\t * @param   l       the listener to add\n\t */\n",
    "119173": "\t/**\n\t * Sets if selected edges should be disconnected from\n\t * unselected vertices when they are moved.\n\t */\n",
    "119175": "\t/**\n\t * Removes a listener previously added with <B>addGraphModelListener()</B>.\n\t *\n\t * @see     #addGraphModelListener\n\t * @param   l       the listener to remove\n\t */\n",
    "119176": "\t/**\n\t * Returns true if selected edges should be disconnected from\n\t * unselected vertices when they are moved.\n\t */\n",
    "119177": "\t/** Returns the preferred size to properly display the graph.\n\t  */\n",
    "119180": "\t/**\n\t * Sets if selected edges should be disconnected from\n\t * unselected vertices when they are moved.\n\t */\n",
    "119181": "\t/**\n\t  * Returns the minimum size for this component.  Which will be\n\t  * the min preferred size or 0, 0.\n\t  */\n",
    "119182": "\t\t/**\n\t\t * Adds the groups that become empty to the cells that\n\t\t * will be removed. (Auto remove empty cells.) Removed\n\t\t * cells will be re-inserted on undo, and the parent-\n\t\t * child relations will be restored.\n\t\t */\n",
    "119184": "\t/**\n\t * Returns true if the grid is active.\n\t * @see #snap\n\t *\n\t */\n",
    "119185": "\t/**\n\t  * Returns the maximum size for this component, which will be the\n\t  * preferred size if the instance is currently in a JGraph, or 0, 0.\n\t  */\n",
    "119187": "\t\t/**\n\t\t * Returns the source of this change. This can either be a\n\t\t * view or a model, if this change is a GraphModelChange.\n\t\t */\n",
    "119188": "\t/**\n\t * If set to true, the grid will be active.\n\t * @see #snap\n\t *\n\t */\n",
    "119189": "\t\t/**\n\t\t * Returns a map that contains (object, map) pairs\n\t\t * of the attributes that have been stored in the model.\n\t\t */\n",
    "119190": "\t/**\n\t * Messages to stop the editing session. If the UI the receiver\n\t * is providing the look and feel for returns true from\n\t * <code>getInvokesStopCellEditing</code>, stopCellEditing will\n\t * invoked on the current editor. Then completeEditing will\n\t * be messaged with false, true, false to cancel any lingering\n\t * editing.\n\t */\n",
    "119192": "\t/**\n\t * Returns the maximum distance between the mousepointer and a cell to\n\t * be selected.\n\t */\n",
    "119193": "\t\t/**\n\t\t * Returns the connectionSet.\n\t\t * @return ConnectionSet\n\t\t */\n",
    "119195": "\t/**\n\t * Sets the maximum distance between the mousepointer and a cell to\n\t * be selected.\n\t */\n",
    "119197": "\t\t/**\n\t\t * Returns the parentMap.\n\t\t * @return ParentMap\n\t\t */\n",
    "119199": "\t/**\n\t * Returns the size of the handles.\n\t */\n",
    "119202": "\t/**\n\t * Sets the size of the handles.\n\t */\n",
    "119203": "\t\t/**\n\t\t * Redoes a change.\n\t\t *\n\t\t * @exception CannotRedoException if the change cannot be redone\n\t\t */\n",
    "119205": "\t\t/**\n\t\t * Undoes a change.\n\t\t *\n\t\t * @exception CannotUndoException if the change cannot be undone\n\t\t */\n",
    "119206": "\t/**\n\t * Returns the miminum amount of pixels for a move operation.\n\t */\n",
    "119208": "\t\t/**\n\t\t * Creates, if necessary, and starts a Timer to check if need to\n\t\t * resize the bounds.\n\t\t */\n",
    "119210": "\t/**\n\t * Sets the miminum amount of pixels for a move operation.\n\t */\n",
    "119212": "\t\t/**\n\t\t * Returns the JScrollPane housing the JGraph, or null if one isn't\n\t\t * found.\n\t\t */\n",
    "119215": "\t/**\n\t * Returns the current grid color.\n\t */\n",
    "119217": "\t\t/**\n\t\t * Public as a result of Timer. If the scrollBar is null, or\n\t\t * not adjusting, this stops the timer and updates the sizing.\n\t\t */\n",
    "119219": "\t/**\n\t * Sets the current grid color.\n\t */\n",
    "119222": "\t/**\n\t * Returns the current handle color.\n\t */\n",
    "119224": "\t\t/**\n\t\t * Allows a <code>GraphLayoutCache</code> to add and execute and\n\t\t * UndoableEdit in this change. This does also work if the\n\t\t * parent edit has already been executed, in which case the\n\t\t * to be added edit will be executed immediately, after\n\t\t * addition.\n\t\t * This is used to handle changes to the view that are \n\t\t * triggered by certain changes of the model. Such implicit\n\t\t * edits may be associated with the view so that they may be\n\t\t * undone and redone correctly, and are stored in the model's\n\t\t * global history together with the parent event as one unit.\n\t\t */\n",
    "119225": "\t/**\n\t * Sets the current handle color.\n\t */\n",
    "119228": "\t\t/**\n\t\t * Returns the views that have not changed explicitly, but\n\t\t * implicitly because one of their dependent cells has changed.\n\t\t */\n",
    "119229": "\t/**\n\t * Returns the current second handle color.\n\t */\n",
    "119231": "\t\t/**\n\t\t * Messaged when the selection changes in the graph we're displaying\n\t\t * for. Stops editing, updates handles and displays the changed cells.\n\t\t */\n",
    "119232": "\t\t/**\n\t\t * Returns the list that exclusively contains <code>view</code>.\n\t\t */\n",
    "119233": "\t/**\n\t * Sets the current second handle color.\n\t */\n",
    "119235": "\t\t/** Messaged when editing has stopped in the graph. */\n",
    "119237": "\t/**\n\t * Returns the current marquee color.\n\t */\n",
    "119240": "\t\t/** Messaged when editing has been canceled in the graph. */\n",
    "119241": "\t/**\n\t * Sets the current marquee color.\n\t */\n",
    "119243": "\t/**\n\t  * Sets the color to use for the border.\n\t  */\n",
    "119244": "\t/**\n\t  * Returns the color the border is drawn.\n\t  */\n",
    "119246": "\t/**\n\t * Sets the font to edit with. null indicates the renderers font should\n\t * be used. This will NOT override any font you have set in the editor\n\t * the receiver was instantied with. If null for an editor was passed in\n\t * a default editor will be created that will pick up this font.\n\t *\n\t * @param font  the editing Font\n\t * @see #getFont\n\t */\n",
    "119247": "\t/**\n\t * Returns the current highlight color.\n\t */\n",
    "119248": "\t/**\n\t * Gets the font used for editing.\n\t *\n\t * @return the editing Font\n\t * @see #setFont\n\t */\n",
    "119250": "\t/**\n\t * Returns the value currently being edited.\n\t */\n",
    "119251": "\t/**\n\t * If the realEditor returns true to this message, prepareForEditing\n\t * is messaged and true is returned.\n\t */\n",
    "119252": "\t/**\n\t * Messages the realEditor for the return value.\n\t */\n",
    "119253": "\t/**\n\t * Sets the current selection highlight color.\n\t */\n",
    "119254": "\t/**\n\t * If the realEditor will allow editing to stop, the realEditor is\n\t * removed and true is returned, otherwise false is returned.\n\t */\n",
    "119256": "\t/**\n\t * Messages cancelCellEditing to the realEditor and removes it from this\n\t * instance.\n\t */\n",
    "119257": "\t/**\n\t * Adds the CellEditorListener.\n\t */\n",
    "119259": "\t/**\n\t  * Removes the previously added CellEditorListener l.\n\t  */\n",
    "119260": "\t/**\n\t * Resets lastPath.\n\t */\n",
    "119261": "\t/**\n\t * Messaged when the timer fires, this will start the editing\n\t * session.\n\t */\n",
    "119263": "\t/**\n\t * Returns the current scale.\n\t * @return the current scale as a double\n\t */\n",
    "119264": "\t/**\n\t * Sets the tree currently editing for. This is needed to add\n\t * a selection listener.\n\t */\n",
    "119266": "\t/**\n\t * Returns true if <code>event</code> is a MouseEvent and the click\n\t * count is 1.\n\t */\n",
    "119268": "\t/**\n\t * Should return true if the passed in location is a valid mouse location\n\t * to start editing from. This is implemented to return false if\n\t * <code>x</code> is <= the width of the icon and icon gap displayed\n\t * by the renderer. In other words this returns true if the user\n\t * clicks over the text part displayed by the renderer, and false\n\t * otherwise.\n\t */\n",
    "119270": "\t/**\n\t * Sets the current scale.\n\t * <p>\n\t * Fires a property change for the SCALE_PROPERTY.\n\t * @param newValue the new scale\n\t */\n",
    "119271": "\t/**\n\t * Invoked just before editing is to start. Will add the\n\t * <code>editingComponent</code> to the\n\t * <code>editingContainer</code>.\n\t */\n",
    "119272": "\t/**\n\t * Creates the container to manage placement of editingComponent.\n\t */\n",
    "119276": "\t/**\n\t * Returns the size of the grid in pixels.\n\t * @return the size of the grid as an int\n\t */\n",
    "119279": "\t\t/**\n\t\t * Overrides <code>JComponent.getBorder</code> to\n\t\t * returns the current border.\n\t\t */\n",
    "119283": "\t/**\n\t * Returns the current grid view mode.\n\t */\n",
    "119284": "\t\t/**\n\t\t * Overrides <code>Container.paint</code> to paint the node's\n\t\t * icon and use the selection color for the background.\n\t\t */\n",
    "119285": "\t\t/**\n\t\t * Lays out this Container.  If editing, the editor will be placed at\n\t\t * offset in the x direction and 0 for y.\n\t\t */\n",
    "119287": "\t\t/**\n\t\t * Returns the preferred size for the Container.  This will be\n\t\t * the preferred size of the editor offset by offset.\n\t\t */\n",
    "119288": "\t\t/**\n\t\t * Invoked when the mouse pointer has been moved on a component\n\t\t * (with no buttons down).\n\t\t */\n",
    "119289": "\t/**\n\t * Overrides the parent method to udpate the cached points.\n\t */\n",
    "119291": "\t/**\n\t * Sets the size of the grid.\n\t * <p>\n\t * Fires a property change for the GRID_SIZE_PROPERTY.\n\t * @param newSize the new size of the grid in pixels\n\t */\n",
    "119292": "\t/**\n\t * Returns the cached bounds for the vertex.\n\t */\n",
    "119298": "\t/**\n\t * Sets the current grid view mode.\n\t *\n\t * @param mode The current grid view mode. Valid values are\n\t *    <CODE>DOT_GRID_MODE</CODE>,\n\t *    <CODE>CROSS_GRID_MODE</CODE>, and\n\t *    <CODE>LINE_GRID_MODE</CODE>.\n\t */\n",
    "119300": "\t/**\n\t * Returns a cell handle for the view, if the graph and the view\n\t * are sizeable.\n\t */\n",
    "119301": "\t/**\n\t * Returns the center of this vertex.\n\t */\n",
    "119302": "\t/**\n\t * Returns the intersection of the bounding rectangle and the\n\t * straight line between the source and the specified point p.\n\t * The specified point is expected not to intersect the bounds.\n\t * Note: You must override this method if you use a different\n\t * renderer. This is because this method relies on the\n\t * VertexRenderer interface, which can not be safely assumed\n\t * for subclassers.\n\t */\n",
    "119305": "\t/**\n\t * Returns true if the grid will be visible.\n\t * @return true if the grid is visible\n\t */\n",
    "119309": "\t\t/**\n\t\t * Invoked when the mouse pointer has been moved on a component\n\t\t * (with no buttons down).\n\t\t */\n",
    "119310": "\t\t/** Process mouse pressed event. */\n",
    "119312": "\t/**\n\t * If set to true, the grid will be visible. <p>\n\t * Fires a property change for the GRID_VISIBLE_PROPERTY.\n\t */\n",
    "119318": "\t/**\n\t * Adds the connections in <code>views</code> to the connection set.\n\t */\n",
    "119319": "\t/**\n\t * Returns true if the ports will be visible.\n\t * @return true if the ports are visible\n\t */\n",
    "119320": "\t/**\n\t * Connect <code>edge</code> to <code>source</code>\n\t * and <code>target</code> in the connection set. The\n\t * previous connections between <code>edge</code> and\n\t * its source and target are replaced in the set.\n\t */\n",
    "119321": "\t/**\n\t * Connect <code>edge</code> to <code>port</code>.\n\t * <code>source</code> indicates if <code>port</code> is the\n\t * source of <code>edge</code>. The previous connections\n\t * between <code>edge</code> and its source or target\n\t * in the set is replaced.\n\t */\n",
    "119322": "\t/**\n\t * Disconnect <code>edge</code> from <code>source</code>\n\t * and <code>target</code> in the connection set. The\n\t * previous connections between <code>edge</code> and\n\t * its source and target are replaced in the set.\n\t */\n",
    "119323": "\t/**\n\t * Disconnect <code>edge</code> from <code>port</code>.\n\t * <code>source</code> indicates if <code>port</code> is the\n\t * source of <code>edge</code>.  The previous connections\n\t * between <code>edge</code> and its source or target\n\t * in the set is replaced.\n\t */\n",
    "119324": "\t/**\n\t * Returns <code>true</code> if the connection set is empty.\n\t */\n",
    "119325": "\t/**\n\t * Returns the number of (edge, port)-pairs.\n\t */\n",
    "119327": "\t/**\n\t * Returns an <code>Iterator</code> for the connections in this set.\n\t */\n",
    "119328": "\t/**\n\t * Returns a <code>Set</code> for the edges in this connection set.\n\t */\n",
    "119329": "\t/**\n\t * If set to true, the ports will be visible. <p>\n\t * Fires a property change for the PORTS_VISIBLE_PROPERTY.\n\t */\n",
    "119330": "\t/**\n\t * Creates a new connection set based on this connection set,\n\t * where the edges, and ports are mapped using <code>map</code>.\n\t * If a port is not found, the old port is used. If both, the\n\t * edge and the port are not in <code>map</code>, the entry\n\t * is ignored.<p>\n\t * <strong>Note:</strong> Consequently, unselected edges are\n\t * only reconnected at the first \"paste\" after a \"cut\", because\n\t * in this case the ConnectionSet is not cloned.\n\t */\n",
    "119331": "\t\t/**\n\t\t * Returns the edge of the connection.\n\t\t */\n",
    "119332": "\t\t/**\n\t\t * Returns the port of the connection.\n\t\t */\n",
    "119333": "\t\t/**\n\t\t *  Returns <code>true</code> if <code>port</code> is the source\n\t\t *  of <code>edge</code>.\n\t\t */\n",
    "119334": "\t\t/**\n\t\t * Two connections are equal if they represent the source\n\t\t * or target of the same edge. That is, if <p>\n\t\t * c1.edge == c2.edge && c1.isSource == c2.isSource.\n\t\t */\n",
    "119335": "\t\t/**\n\t\t * Ensure equality of hashCode wrt. equals().\n\t\t */\n",
    "119336": "\t/**\n\t * Returns true if the graph will be anti aliased.\n\t * @return true if the graph is anti aliased\n\t */\n",
    "119347": "\t/**\n\t * Sets antialiasing on or off based on the boolean value.\n\t * <p>\n\t * Fires a property change for the ANTIALIASED_PROPERTY.\n\t * @param newValue whether to turn antialiasing on or off\n\t */\n",
    "119348": "\t/**\n\t * Sets the selection mode, which must be one of SINGLE_TREE_SELECTION,\n\t */\n",
    "119350": "\t/**\n\t * Returns the selection mode, one of <code>SINGLE_TREE_SELECTION</code>,\n\t * <code>DISCONTIGUOUS_TREE_SELECTION</code> or\n\t * <code>CONTIGUOUS_TREE_SELECTION</code>.\n\t */\n",
    "119351": "\t/**\n\t  * Sets if the selection model allows the selection\n\t  * of children.\n\t  */\n",
    "119352": "\t/**\n\t  * Returns true if the selection model allows the selection\n\t  * of children.\n\t  */\n",
    "119353": "\t/**\n\t * Returns true if the graph is editable, ie. if it allows\n\t * cells to be edited.\n\t * @return true if the graph is editable\n\t */\n",
    "119354": "\t/**\n\t  * Hook for subclassers for fine-grained control over stepping-into cells.\n\t  * This implementation returns <code>childrenSelectable</code>.\n\t  */\n",
    "119355": "\t/**\n\t  * Sets the selection to path. If this represents a change, then\n\t  * the TreeSelectionListeners are notified. If <code>path</code> is\n\t  * null, this has the same effect as invoking <code>clearSelection</code>.\n\t  *\n\t  * @param path new path to select\n\t  */\n",
    "119357": "\t\t/**\n\t\t * Invoked when the mouse pointer has been moved on a component\n\t\t * (with no buttons down).\n\t\t */\n",
    "119358": "\t/**\n\t  * Adds path to the current selection. If path is not currently\n\t  * in the selection the TreeSelectionListeners are notified. This has\n\t  * no effect if <code>path</code> is null.\n\t  *\n\t  * @param path the new path to add to the current selection\n\t  */\n",
    "119359": "\t/**\n\t  * Adds cells to the current selection. If any of the paths in\n\t  * paths are not currently in the selection the TreeSelectionListeners\n\t  * are notified. This has\n\t  * no effect if <code>paths</code> is null.\n\t  * <p>The lead path is set to the last element in <code>paths</code>.\n\t  * <p>If the selection mode is <code>CONTIGUOUS_TREE_SELECTION</code>,\n\t  * and adding the new paths would make the selection discontiguous.\n\t  * Then two things can result: if the TreePaths in <code>paths</code>\n\t  * are contiguous, then the selection becomes these TreePaths,\n\t  * otherwise the TreePaths aren't contiguous and the selection becomes\n\t  * the first TreePath in <code>paths</code>.\n\t  *\n\t  * @param path the new path to add to the current selection\n\t  */\n",
    "119360": "\t/**\n\t * Determines whether the graph is editable. Fires a property\n\t * change event if the new setting is different from the existing\n\t * setting.\n\t * <p>\n\t * Note: Editable determines whether the graph allows editing. This\n\t * is not to be confused with enabled, which allows the graph to\n\t * handle mouse events (including editing).\n\t * @param flag a boolean value, true if the graph is editable\n\t */\n",
    "119361": "\t/**\n\t  * Removes path from the selection. If path is in the selection\n\t  * The TreeSelectionListeners are notified. This has no effect if\n\t  * <code>path</code> is null.\n\t  *\n\t  * @param path the path to remove from the selection\n\t  */\n",
    "119362": "\t/**\n\t  * Removes paths from the selection.  If any of the paths in paths\n\t  * are in the selection the TreeSelectionListeners are notified.\n\t  * This has no effect if <code>paths</code> is null.\n\t  *\n\t  * @param path the path to remove from the selection\n\t  */\n",
    "119363": "\t/**\n\t  * Returns the first cell in the selection. This is useful if there\n\t  * if only one item currently selected.\n\t  */\n",
    "119365": "\t/**\n\t * Returns the number of paths that are selected.\n\t */\n",
    "119366": "\t/**\n\t * Returns the <code>GraphModel</code> that is providing the data.\n\t * @return the model that is providing the data\n\t */\n",
    "119367": "\t/**\n\t  * Returns true if the cell, <code>cell</code>,\n\t  * is in the current selection.\n\t  */\n",
    "119369": "\t/**\n\t  * Returns true if the cell, <code>cell</code>,\n\t  * has selected children.\n\t  */\n",
    "119370": "\t/**\n\t  * Returns true if the selection is currently empty.\n\t  */\n",
    "119371": "\t\t/**\n\t\t * Hook for subclassers to return a different view for a mouse click\n\t\t * at <code>pt</code>. For example, this can be used to return a leaf\n\t\t * cell instead of a group.\n\t\t */\n",
    "119372": "\t/**\n\t * Sets the <code>GraphModel</code> that will provide the data.\n\t * Note: Updates the current GraphLayoutCache's model using setModel if the\n\t * GraphLayoutCache points to a different model. <p>\n\t * Fires a property change for the GRAPH_MODEL_PROPERTY.\n\t * @param newModel the <code>GraphModel</code> that is to provide the data\n\t */\n",
    "119373": "\t/**\n\t  * Empties the current selection.  If this represents a change in the\n\t  * current selection, the selection listeners are notified.\n\t  */\n",
    "119374": "\t/**\n\t  * Returns the number of selected childs for <code>cell</code>.\n\t  */\n",
    "119375": "\t/**\n\t  * Sets the number of selected childs for <code>cell</code>\n\t  * to <code>count</code>.\n\t  */\n",
    "119377": "\t/**\n\t * Returns the <code>GraphLayoutCache</code> that is providing the view-data.\n\t * @return the view that is providing the view-data\n\t */\n",
    "119379": "\t/**\n\t  * Adds x to the list of listeners that are notified each time the\n\t  * set of selected TreePaths changes.\n\t  *\n\t  * @param x the new listener to be added\n\t  */\n",
    "119380": "\t/**\n\t  * Removes x from the list of listeners that are notified each time\n\t  * the set of selected TreePaths changes.\n\t  *\n\t  * @param x the listener to remove\n\t  */\n",
    "119381": "\t/**\n\t * Sets the <code>GraphLayoutCache</code> that will provide the view-data. <p>\n\t * Note: Updates the GraphLayoutCache's model using setModel if the\n\t * GraphLayoutCache points to an other model than this graph. <p>\n\t * Fires a property change for the GRAPH_LAYOUT_CACHE_PROPERTY.\n\t * @param newView the <code>GraphLayoutCache</code> that is to provide the view-data\n\t */\n",
    "119383": "\t/**\n\t * Notifies all listeners that are registered for\n\t * tree selection events on this object.\n\t * @see #addGraphSelectionListener\n\t * @see EventListenerList\n\t */\n",
    "119384": "\t/**\n\t  * Notifies listeners of a change in path. changePaths should contain\n\t  * instances of PathPlaceHolder.\n\t  */\n",
    "119385": "\t/**\n\t * Returns a clone of this object with the same selection.\n\t * This method does not duplicate\n\t * selection listeners and property listeners.\n\t *\n\t * @exception CloneNotSupportedException never thrown by instances of\n\t *                                       this class\n\t */\n",
    "119386": "\t/**\n\t * Returns the <code>MarqueeHandler</code> that will handle\n\t * marquee selection.\n\t */\n",
    "119389": "\t\t/**\n\t\t * Returns the isNew.\n\t\t * @return boolean\n\t\t */\n",
    "119390": "\t\t/**\n\t\t * Sets the cell.\n\t\t * @param cell The cell to set\n\t\t */\n",
    "119391": "\t/**\n\t * Sets the <code>MarqueeHandler</code> that will handle\n\t * marquee selection.\n\t */\n",
    "119393": "\t\t/**\n\t\t * Sets the isNew.\n\t\t * @param isNew The isNew to set\n\t\t */\n",
    "119395": "\t/**\n\t * Returns the number of all objects (cells and children) in this object.\n\t */\n",
    "119397": "\t/**\n\t * Returns <code>true</code> if <code>node</code> or one of\n\t * its ancestors is contained in this object.\n\t */\n",
    "119398": "\t/**\n\t * Returns the <code>CellView</code> that is mapped to <code>cell</code>\n\t * in the graph context. New views are created based on whether cell\n\t * is containes in the context. The <code>create</code>-flag is ignored.\n\t */\n",
    "119399": "\t/**\n\t * Determines what happens when editing is interrupted by selecting\n\t * another cell in the graph, a change in the graph's data, or by some\n\t * other means. Setting this property to <code>true</code> causes the\n\t * changes to be automatically saved when editing is interrupted.\n\t * <p>\n\t * Fires a property change for the INVOKES_STOP_CELL_EDITING_PROPERTY.\n\t * @param newValue true means that <code>stopCellEditing</code> is invoked\n\t * when editing is interruped, and data is saved; false means that\n\t * <code>cancelCellEditing</code> is invoked, and changes are lost\n\t */\n",
    "119402": "\t/**\n\t * Associates <code>cell</code> with <code>view</code>\n\t * in the graph context.\n\t */\n",
    "119403": "\t/**\n\t * Sets the factory that creates the cell views.\n\t */\n",
    "119405": "\t/**\n\t * Returns the indicator that tells what happens when editing is\n\t * interrupted.\n\t * @return the indicator that tells what happens when editing is\n\t * interrupted\n\t * @see #setInvokesStopCellEditing\n\t *\n\t */\n",
    "119407": "\t/**\n\t * Returns the factory that was passed to the constructor.\n\t */\n",
    "119408": "\t/**\n\t * Sets the current model.\n\t */\n",
    "119410": "\t/**\n\t * Returns <code>isEditable</code>. This is invoked from the UI before\n\t * editing begins to ensure that the given cell can be edited. This\n\t * is provided as an entry point for subclassers to add filtered\n\t * editing without having to resort to creating a new editor.\n\t * @return true if the specified cell is editable\n\t * @see #isEditable\n\t *\n\t */\n",
    "119413": "\t/**\n\t * Updates the cached array of ports.\n\t */\n",
    "119414": "\t/**\n\t * Overrides <code>JComponent</code>'s <code>getToolTipText</code>\n\t * method in order to allow the graph to create a tooltip\n\t * for the topmost cell under the mousepointer. This differs from JTree\n\t * where the renderers tooltip is used.\n\t * <p>\n\t * NOTE: For <code>JGraph</code> to properly display tooltips of its\n\t * renderers, <code>JGraph</code> must be a registered component with the\n\t * <code>ToolTipManager</code>.  This can be done by invoking\n\t * <code>ToolTipManager.sharedInstance().registerComponent(graph)</code>.\n\t * This is not done automatically!\n\t * @param event the <code>MouseEvent</code> that initiated the\n\t * <code>ToolTip</code> display\n\t * @return a string containing the  tooltip or <code>null</code>\n\t * if <code>event</code> is null\n\t */\n",
    "119418": "\t/**\n\t * Sets the graph's selection model. When a <code>null</code> value is\n\t * specified an emtpy\n\t * <code>selectionModel</code> is used, which does not allow selections.\n\t * @param selectionModel the <code>GraphSelectionModel</code> to use,\n\t * or <code>null</code> to disable selections\n\t * @see GraphSelectionModel\n\t *\n\t */\n",
    "119423": "\t/**\n\t * Returns the model for selections. This should always return a\n\t * non-<code>null</code> value. If you don't want to allow anything\n\t * to be selected\n\t * set the selection model to <code>null</code>, which forces an empty\n\t * selection model to be used.\n\t * @return the current selection model\n\t * @see #setSelectionModel\n\t *\n\t */\n",
    "119426": "\t/**\n\t * Clears the selection.\n\t */\n",
    "119429": "\t/**\n\t * Adds the specified model root cells to the view.\n\t */\n",
    "119430": "\t/**\n\t * Returns true if the selection is currently empty.\n\t * @return true if the selection is currently empty\n\t */\n",
    "119431": "\t/**\n\t * Returns the view for the specified cell. If create is true\n\t * and no view is found then a view is created using\n\t * createView(Object).\n\t */\n",
    "119433": "\t/**\n\t * Associates the specified model cell with the specified view.\n\t * Updates the portlist if necessary.\n\t */\n",
    "119434": "\t/**\n\t * Adds a listener for <code>GraphSelection</code> events.\n\t * @param tsl the <code>GraphSelectionListener</code> that will be notified\n\t * when a cell is selected or deselected (a \"negative\n\t * selection\")\n\t */\n",
    "119435": "\t/**\n\t * Removes the associaten for the specified model cell and\n\t * returns the view that was previously associated with the cell.\n\t * Updates the portlist if necessary.\n\t */\n",
    "119439": "\t/**\n\t * Removes a <code>GraphSelection</code> listener.\n\t * @param tsl the <code>GraphSelectionListener</code> to remove\n\t */\n",
    "119443": "\t/**\n\t * Notifies all listeners that have registered interest for\n\t * notification on this event type.  The event instance\n\t * is lazily created using the parameters passed into\n\t * the fire method.\n\t * @param e the <code>GraphSelectionEvent</code> generated by the\n\t * <code>GraphSelectionModel</code>\n\t * when a cell is selected or deselected\n\t * @see javax.swing.event.EventListenerList\n\t *\n\t */\n",
    "119447": "\t/**\n\t * Selects the specified cell.\n\t * @param cell the <code>Object</code> specifying the cell to select\n\t */\n",
    "119451": "\t/**\n\t * Selects the specified cells.\n\t * @param cells an array of objects that specifies\n\t * the cells to select\n\t */\n",
    "119455": "\t/**\n\t * Adds the cell identified by the specified <code>Object</code>\n\t * to the current selection.\n\t * @param cell the cell to be added to the selection\n\t */\n",
    "119459": "\t/**\n\t * Adds each cell in the array of cells to the current selection.\n\t * @param cells an array of objects that specifies the cells to add\n\t */\n",
    "119462": "\t/**\n\t * Removes the cell identified by the specified Object from the current\n\t * selection.\n\t * @param cell the cell to be removed from the selection\n\t */\n",
    "119465": "\t/**\n\t * Removes <code>cells</code> from the model. If <code>removeChildren</code>\n\t * is <code>true</code>, the children are also removed.\n\t * Notifies the model- and undo listeners of the change.\n\t */\n",
    "119466": "\t/**\n\t * Returns the first selected cell.\n\t * @return the <code>Object</code> for the first selected cell,\n\t * or <code>null</code> if nothing is currently selected\n\t */\n",
    "119469": "\t/**\n\t * Sends <code>cells</code> to back. Note: This expects an array of cells!\n\t */\n",
    "119470": "\t/**\n\t * Returns the number of cells selected.\n\t * @return the number of cells selected\n\t */\n",
    "119472": "\t/**\n\t * Brings <code>cells</code> to front. Note: This expects an array of cells!\n\t */\n",
    "119473": "\t/**\n\t * Returns true if the cell is currently selected.\n\t * @param cell an object identifying a cell\n\t * @return true if the cell is selected\n\t */\n",
    "119478": "\t/**\n\t * Scrolls to the specified cell. Only works when this\n\t * <code>JGraph</code> is contained in a <code>JScrollPane</code>.\n\t * @param cell the object identifying the cell to bring into view\n\t */\n",
    "119479": "\t\t/**\n\t\t * Returns the source of this change. This can either be a\n\t\t * view or a model, if this change is a GraphModelChange.\n\t\t */\n",
    "119481": "\t/**\n\t * Makes sure the specified point is visible.\n\t * @param p the point that should be visible\n\t */\n",
    "119486": "\t/**\n\t * Returns true if the graph is being edited. The item that is being\n\t * edited can be obtained using <code>getEditingCell</code>.\n\t * @return true if the user is currently editing a cell\n\t * @see #getSelectionCell\n\t *\n\t */\n",
    "119490": "\t/**\n\t * Ends the current editing session.\n\t * (The <code>DefaultGraphCellEditor</code>\n\t * object saves any edits that are currently in progress on a cell.\n\t * Other implementations may operate differently.)\n\t * Has no effect if the tree isn't being edited.\n\t * <blockquote>\n\t * <b>Note:</b><br>\n\t * To make edit-saves automatic whenever the user changes\n\t * their position in the graph, use {@link #setInvokesStopCellEditing}.\n\t * </blockquote>\n\t * @return true if editing was in progress and is now stopped,\n\t * false if editing was not in progress\n\t */\n",
    "119493": "\t/**\n\t * Cancels the current editing session. Has no effect if the\n\t * graph isn't being edited.\n\t */\n",
    "119496": "\t\t/**\n\t\t * Returns the source of this change. This can either be a\n\t\t * view or a model, if this change is a GraphModelChange.\n\t\t */\n",
    "119497": "\t/**\n\t * Selects the specified cell and initiates editing.\n\t * The edit-attempt fails if the <code>CellEditor</code>\n\t * does not allow\n\t * editing for the specified item.\n\t */\n",
    "119498": "\t\t/**\n\t\t * Returns a map of (cell view, attribute) pairs.\n\t\t */\n",
    "119499": "\t\t/**\n\t\t * called to save the state of a component in case it needs to\n\t\t * be restored because a drop is not performed.\n\t\t */\n",
    "119500": "\t/**\n\t * Returns the cell that is currently being edited.\n\t * @return the cell being edited\n\t */\n",
    "119501": "\t\t/**\n\t\t * Redoes a change.\n\t\t *\n\t\t * @exception CannotRedoException if the change cannot be redone\n\t\t */\n",
    "119504": "\t\t/**\n\t\t * called to restore the state of a component\n\t\t * because a drop was not performed.\n\t\t */\n",
    "119505": "\t/**\n\t * Messaged when the graph has changed enough that we need to resize\n\t * the bounds, but not enough that we need to remove the cells\n\t * (e.g cells were inserted into the graph). You should never have to\n\t * invoke this, the UI will invoke this as it needs to. (Note: This\n\t * is invoked by GraphUI, eg. after moving.)\n\t */\n",
    "119506": "\t\t/**\n\t\t * Execute this edit such that the next invocation to this\n\t\t * method will invert the last execution.\n\t\t */\n",
    "119507": "\t\t/**\n\t\t * called to set the insertion location to match the current\n\t\t * mouse pointer coordinates.\n\t\t */\n",
    "119510": "\t\t/**\n\t\t * Returns the list that exclusively contains <code>view</code>.\n\t\t */\n",
    "119513": "\t/**\n\t * Returns the hiddenSet.\n\t * @return Map\n\t */\n",
    "119515": "\t/**\n\t * Returns the hideEdgesOnBecomeInvisible.\n\t * @return boolean\n\t */\n",
    "119516": "\t\t/** Returns a shared instance of an empty selection model. */\n",
    "119518": "\t/**\n\t * Returns the hideEdgesOnHide.\n\t * @return boolean\n\t */\n",
    "119520": "\t\t/** A <code>null</code> implementation that selects nothing. */\n",
    "119521": "\t/**\n\t * Returns the rememberCellViews.\n\t * @return boolean\n\t */\n",
    "119523": "\t/**\n\t * Returns the showAllEdgesForVisibleVertices.\n\t * @return boolean\n\t */\n",
    "119524": "\t\t/** A <code>null</code> implementation that adds nothing. */\n",
    "119525": "\t/**\n\t * Returns the showEdgesOnShow.\n\t * @return boolean\n\t */\n",
    "119527": "\t\t/** A <code>null</code> implementation that removes nothing. */\n",
    "119530": "\t/**\n\t * Sets the hideEdgesOnBecomeInvisible.\n\t * @param hideEdgesOnBecomeInvisible The hideEdgesOnBecomeInvisible to set\n\t */\n",
    "119531": "\t\t/**\n\t\t * Invoked by the <code>GraphSelectionModel</code> when the\n\t\t * selection changes.\n\t\t *\n\t\t * @param e the <code>GraphSelectionEvent</code> generated by the\n\t\t *\t\t<code>GraphSelectionModel</code>\n\t\t */\n",
    "119532": "\t/**\n\t * Sets the hideEdgesOnHide.\n\t * @param hideEdgesOnHide The hideEdgesOnHide to set\n\t */\n",
    "119533": "\t/**\n\t* Returns the preferred display size of a <code>JGraph</code>. The height is\n\t* determined from <code>getPreferredWidth</code>.\n\t* @return the graph's preferred size\n\t*/\n",
    "119534": "\t/**\n\t * Sets the rememberCellViews.\n\t * @param rememberCellViews The rememberCellViews to set\n\t */\n",
    "119536": "\t/**\n\t * Sets the showAllEdgesForVisibleVertices.\n\t * @param showAllEdgesForVisibleVertices The showAllEdgesForVisibleVertices to set\n\t */\n",
    "119539": "\t/**\n\t * Sets the showEdgesOnShow.\n\t * @param showEdgesOnShow The showEdgesOnShow to set\n\t */\n",
    "119542": "\t/**\n\t * Paint the renderer. Overrides superclass paint\n\t * to add specific painting.\n\t */\n",
    "119543": "\t/**\n\t * Provided for subclassers to paint a selection border.\n\t */\n",
    "119552": "\t/**\n\t* Returns false to indicate that the width of the viewport does not\n\t* determine the width of the graph, unless the preferred width of\n\t* the graph is smaller than the viewports width.  In other words:\n\t* ensure that the graph is never smaller than its viewport.\n\t* @return false\n\t* @see Scrollable#getScrollableTracksViewportWidth\n\t*\n\t*/\n",
    "119561": "\t/**\n\t* Returns false to indicate that the height of the viewport does not\n\t* determine the height of the graph, unless the preferred height\n\t* of the graph is smaller than the viewports height.  In other words:\n\t* ensure that the graph is never smaller than its viewport.\n\t* @return false\n\t* @see Scrollable#getScrollableTracksViewportHeight\n\t*\n\t*/\n",
    "119564": "\t/**\n\t * Returns the hideGroups.\n\t * @return boolean\n\t */\n",
    "119565": "\t/**\n\t * Sets the hideGroups.\n\t * @param hideGroups The hideGroups to set\n\t */\n",
    "119567": "\t/**\n\t * Returns the connections between <code>cells</code> (and possibly\n\t * other, unselected cells).\n\t */\n",
    "119569": "\t/**\n\t * Returns a map of (GraphCell, Map)-pairs that represent the\n\t * view attributes for the respecive cells.\n\t */\n",
    "119572": "\t/**\n\t* Returns a string representation of this <code>JGraph</code>.\n\t* This method\n\t* is intended to be used only for debugging purposes, and the\n\t* content and format of the returned string may vary between\n\t* implementations. The returned string may be empty but may not\n\t* be <code>null</code>.\n\t* @return a string representation of this <code>JGraph</code>.\n\t*/\n",
    "119574": "\t/**\n\t * Returns true if the transferable support a text/plain format.\n\t */\n",
    "119575": "\t/**\n\t * Fetch the data in a text/plain format.\n\t */\n",
    "119576": "\t/**\n\t * If this UndoManager is inProgress, undo the last significant\n\t * UndoableEdit wrt. to source, and all insignificant edits back to\n\t * it. Updates indexOfNextAdd accordingly.\n\t *\n\t * <p>If not inProgress, indexOfNextAdd is ignored and super's routine is\n\t * called.</p>\n\t *\n\t * @see UndoManager#undo\n\t */\n",
    "119577": "\t/**\n\t * Returns true if the transferable support a text/html format.\n\t */\n",
    "119579": "\t/**\n\t * Fetch the data in a text/html format.\n\t */\n",
    "119580": "\t/**\n\t * Returns the the next significant edit wrt. to current\n\t * to be undone if undo is called. May return null.\n\t */\n",
    "119582": "\t/**\n\t * If this <code>UndoManager</code> is <code>inProgress</code>,\n\t * redoes the last significant <code>UndoableEdit</code> with\n\t * respect to source or after, and all insignificant\n\t * edits up to it. Updates <code>indexOfNextAdd</code> accordingly.\n\t *\n\t * <p>If not <code>inProgress</code>, <code>indexOfNextAdd</code>\n\t * is ignored and super's routine is called.</p>\n\t */\n",
    "119583": "\t/**\n\t * Returns the source of the edge.\n\t */\n",
    "119585": "\t/**\n\t * Returns the target of the edge.\n\t */\n",
    "119586": "\t/**\n\t * Returns the the next significant edit wrt. to current\n\t * to be redone if redo is called. May return null.\n\t */\n",
    "119587": "\t/**\n\t * Sets the source of the edge.\n\t */\n",
    "119588": "\t/**\n\t * Add a new entry for this child, parent pair to the parent map.\n\t * The child and parent are added to the set of changed nodes.\n\t * Note: The previous parent is changed on execution of this parent\n\t * map and must be added by the GraphModel and reflected by the\n\t * GraphChange.getChanged method.\n\t * TODO: In general, the GraphModel should be in charge of computing\n\t * the set of changed cells.\n\t */\n",
    "119589": "\t/**\n\t * Returns the target of <code>edge</code>.\n\t */\n",
    "119590": "\t/**\n\t * Returns the number of entries.\n\t */\n",
    "119591": "\t/**\n\t * Create a clone of the cell. The cloning of the\n\t * user object is deferred to the cloneUserObject()\n\t * method.\n\t *\n\t * @return Object  a clone of this object.\n\t */\n",
    "119593": "\t/**\n\t * Returns an <code>Iterator</code> for the entries in the map.\n\t */\n",
    "119596": "\t/**\n\t * Returns a <code>Set</code> for the nodes, childs and parents,\n\t * in this parent map.\n\t */\n",
    "119597": "\t/**\n\t * This method ensures a non-null value. If the super method\n\t * returns null then the last valid parent is returned.\n\t * Note: If a vertex is removed, all ports will be replaced\n\t * in connected edges. The ports are replaced by the center\n\t * point of the <i>last</i> valid vertex view.\n\t */\n",
    "119598": "\t/**\n\t * Creates a new parent map based on this parent map,\n\t * where the child and parents are mapped using <code>map</code>.\n\t * If one the cells is not in <code>map</code>, then the original\n\t * cell is used instead.<p>\n\t */\n",
    "119599": "\t/**\n\t * Returns the bounds for the port view.\n\t */\n",
    "119600": "\t\t/**\n\t\t * Returns the child of the relation.\n\t\t */\n",
    "119602": "\t\t/**\n\t\t * Returns the parent of the relation.\n\t\t */\n",
    "119606": "\t/**\n\t * Returns the point that is closest to the port view on\n\t * <code>edge</code>. Returns <code>null</code> if\n\t * <code>edge</code> has less than 2 points.\n\t */\n",
    "119607": "\t/**\n\t * Override parent method to synchronize value property and userObject.\n\t * The following holds for each GraphCell c:<p>\n\t * GraphConstants.getValue(c.getAttributes()) == c.getUserObject()<p>\n\t * <strong>Note:</strong> A cell's userObject can be set using\n\t * GraphModel.edit() with a propertyMap that carries a value entry\n\t * for that cell.\n\t */\n",
    "119608": "\t/**\n\t * Returns the point of <code>edge</code> at index\n\t * <code>index</code>. Avoids calling <code>getLocation</code>\n\t * on the opposite port of <code>edge</code> (possible\n\t * infinite recursion).\n\t */\n",
    "119609": "\t/**\n\t * Provides access to the children list to change ordering.\n\t * This method returns a <code>Collections.EMPTY_LIST</code>\n\t * if the list of childrenpoints to <code>null</code>.\n\t */\n",
    "119615": "\t/**\n\t * Sets the attributes.\n\t * @param attributes The attributes to set\n\t */\n",
    "119617": "\t/**\n\t * Create a clone of the cell. The cloning of the\n\t * user object is deferred to the cloneUserObject()\n\t * method.\n\t *\n\t * @return Object  a clone of this object.\n\t */\n",
    "119620": "\t/**\n\t * Override tool tip method to display URL\n\t *\n\t * @param event  event passed\n\t * @return       tooltip as URL\n\t */\n",
    "119621": "\t/**\n\t * Sets the {3} attribute of the UserProperties object\n\t *\n\t * @param key The new {3} value\n\t * @param buttonRectangle The new {3} value\n\t */\n",
    "119624": "\t/**\n\t * Override Swing's poor label position choice. The new behaviour\n\t * shows the label relative to the current location of the mouse.\n\t *\n\t * @param event  tool tip location event\n\t * @return       tool tip location\n\t */\n",
    "119625": "\t/**\n\t * Gets the {3} attribute of the UserProperties object\n\t *\n\t * @param key Description of Parameter\n\t * @return The {3} value\n\t */\n",
    "119626": "\t/**\n\t * Determines if current mouse location is hovering over a hyperlink.\n\t * Remember, <code>CustomLinkHandler</code> is NOT notified of hyperlink\n\t * events if editing is enabled by defintion in JEditorPane. In otherwords,\n\t * when HTML code is being displayed, then hyperlink tracking is not occuring.\n\t *\n\t * @return   <code>true</code> if mouse if hovering over hyperlink and pane\n\t * is not editable\n\t */\n",
    "119627": "\t/**\n\t * Description of the Method\n\t */\n",
    "119628": "\t/**\n\t * Gets the URL being hovered over.\n\t *\n\t * @return   The URL value if mouse is currently hovering over a URL, or\n\t * <code>null</code> if not currently hovering over a URL\n\t */\n",
    "119630": "\t\t/**\n\t\t * Determines if current mouse location is hovering over a hyperlink.\n\t\t * Remember, <code>CustomLinkHandler</code> is NOT notified of hyperlink\n\t\t * events if editing is enabled by defintion in JEditorPane. In otherwords,\n\t\t * when HTML code is being displayed, then hyperlink tracking is not occuring.\n\t\t *\n\t\t * @return   true if mouse if hovering over hyperlink and pane is not editable\n\t\t */\n",
    "119631": "\t/** Removes the current instance from the  \n\t *  position manager and from\n\t *  the locale change adapter.\n\t *  After that the method calls\n\t *  the super implementation. \n\t *  \n\t * @see java.lang.Object#finalize()\n\t */\n",
    "119632": "\t\t/**\n\t\t * Gets the URL being hovered over.\n\t\t *\n\t\t * @return   The URL value if mouse is currently hovering over a URL, or\n\t\t * <code>null</code> if not currently hovering over a URL\n\t\t */\n",
    "119633": "\t/** Calls the super implementation\n\t *  and makes an update for the\n\t *  component by using the locale\n\t *  change adapter and the \n\t *  position manager.\n\t *  \n\t *  @param name the new name\n\t *  @see PositionManager#updateComponent(Component)\n\t *  @see LocaleChangeAdapter#updateComponent(Component)\n\t *  @see java.awt.Component#setName(java.lang.String)\n\t * \n\t */\n",
    "119636": "\t/** makes an update for the locale\n\t *  dependent values from the whole\n\t *  container and calls\n\t *  the super implementation \n\t *  \n\t * @see java.awt.Component#validate()\n\t * @see LocaleChangeAdapter#updateContainer(Container)\n\t * @see java.awt.Container#validate()\n\t */\n",
    "119638": "\t/** Registers the default \n\t *  window esc action for this\n\t *  frame. \n\t * \n\t *  @see GPEscAction\n\t *  \n\t */\n",
    "119640": "\t/** Registers the specified\n\t *  action for a esc action \n\t *  of this frame. \n\t * \n\t *  @param action the action \n\t *  \n\t */\n",
    "119642": "\t/** Unregisters the esc action \n\t *  of this frame. \n\t *  \n\t */\n",
    "119644": "\t/** Registers the specified button\n\t *  for the default esc button.\n\t * \n\t * @param button\n\t */\t\n",
    "119647": "\t/** Registers the specified button\n\t *  for the default button.\n\t * \n\t * @param button\n\t */\t\n",
    "119649": "\t/**If the button is set, then\n\t * the method will call the do click\n\t * method at the button.\n\t * \n\t * If the event source \n\t * is a JInternalFrame or a Window, then\n\t * the action will call the dispose method. \n\t * \n\t * \n\t * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)\n\t * @see javax.swing.JButton#doClick()\n\t */\n",
    "119653": "\t/** Removes the Split Pane from the \n\t *  position manager and calls\n\t *  the super implementation. \n\t *  \n\t * @see java.lang.Object#finalize()\n\t */\n",
    "119661": "\t/** Will be called from the translator \n\t *  if a locale was changed\n\t *  \n\t */\n",
    "119664": "\t/** returns the keys for the proper names\n\t * \n\t */\n",
    "119666": "\t/** returns the value for a proper name key\n\t * \n\t */\n",
    "119670": "\t/**\n\t *  Sets the bounds attribute of the JFrameP object\n\t *\n\t *@param  buttonRectangle  The new bounds value\n\t */\n",
    "119672": "\t/** Stores the property value for some special\n\t *  properties.\n\t * \n\t *  The method considers the property\n\t *  <ul>\n\t *  <li>{@link JSplitPane#DIVIDER_LOCATION_PROPERTY}</li>\n\t *  </ul> \n\t * \n\t * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)\n\t */\n",
    "119673": "\t/**\n\t *  Sets the location attribute of the JFrameP object\n\t *\n\t *@param  p  The new location value\n\t */\n",
    "119674": "\t/**\n\t * Sets the mode of the snapSelectedView drag operation.\n\t * @param bSnapToGrid specifies if the snap-to-grid mode should be applied during a drag operation.\n\t * If it is enabled,  the view, that is returned by the findViewForPoint(Point pt),\n\t * will be snapped to the grid lines. <br>\n\t * By default, findViewForPoint() returns the first view from the GraphContext whose bounds intersect with snap proximity of a mouse pointer.\n\t * If snap-to-grid mode is disabled, views are moved by a snap increment.\n\t */\n",
    "119675": "\t/**\n\t *  Sets the size attribute of the JFrameP object\n\t *\n\t *@param  d  The new size value\n\t */\n",
    "119680": "\t/**\n\t *  Description of the Method\n\t */\n",
    "119694": "\t/**\n\t *  Description of the Method\n\t */\n",
    "119697": "\t/**\n\t *  Description of the Method\n\t */\n",
    "119701": "\t/**\n\t * Returns the document.\n\t * @return GPDocument\n\t */\n",
    "119704": "\t/**\n\t * Sets the document.\n\t * @param document The document to set\n\t */\n",
    "119715": "\t/**\n\t * Description of the Method\n\t */\n",
    "119731": "\t/**\n\t * Returns the filename.\n\t * @return String\n\t */\n",
    "119734": "\t/**\n\t * Sets the filename.\n\t * @param filename The filename to set\n\t */\n",
    "119750": "\t/**\n\t * Fetch the editor contained in this panel\n\t */\n",
    "119752": "\t/** Returns a file filter for the <tt>pad_xml</tt> extension.\n\t *\n\t * @see org.jgraph.pad.GraphModelFileFormat#getFileFilter()\n\t */\n",
    "119759": "\t/** Returns the compZipSelect object.\n\t *\n\t * @see #compZipSelect\n\t * @see org.jgraph.pad.GraphModelFileFormat#getWriteAccessory()\n\t */\n",
    "119760": "\t/** returns the GPGraph UI\n\t */\n",
    "119762": "\t/** Returns the view from the current graph\n\t *\n\t */\n",
    "119768": "\t/**\n\t * Puts the value from the checkbox into the properties hashtable\n\t *\n\t * @see org.jgraph.pad.GraphModelFileFormat#getWriteProperties(JComponent)\n\t */\n",
    "119805": "\t/** not from Printable interface, but related\n\t */\n",
    "119831": "\t/**\n\t * Returns the graphUndoManager.\n\t * @return GraphUndoManager\n\t */\n",
    "119834": "\t/**\n\t * Sets the graphUndoManager.\n\t * @param graphUndoManager The graphUndoManager to set\n\t */\n",
    "119837": "\t/** Delete element from library.  Caller is responsible for any warning messages\n\t * as this method immediately deletes without any prompts.\n\t */\n",
    "119838": "\t/** Resets the Graph undo manager\n\t */\n",
    "119840": "\t\t/**\n\t\t * Create a Transferable to use as the source for a data transfer.\n\t\t *\n\t\t * @param buttonCircle  The component holding the data to be transfered.  This\n\t\t *  argument is provided to enable sharing of TransferHandlers by\n\t\t *  multiple components.\n\t\t * @return  The representation of the data to be transfered.\n\t\t *\n\t\t */\n",
    "119841": "\t/**\n\t * Returns the graphpad.\n\t * @return GPGraphpad\n\t */\n",
    "119845": "\t/**\n\t * Sets the graphpad.\n\t * @param graphpad The graphpad to set\n\t */\n",
    "119849": "\t/**\n\t * Returns the touch.\n\t * @return Touch\n\t */\n",
    "119852": "\t/**\n\t * Sets the touch.\n\t * @param touch The touch to set\n\t */\n",
    "119858": "\t\t/**\n\t\t * Messaged when the Document has created an edit, the edit is\n\t\t * added to <code>graphUndoManager</code>, an instance of UndoManager.\n\t\t */\n",
    "119859": "\t/**\n\t * Returns the actionMap.\n\t * @return ActionMap\n\t */\n",
    "119861": "\t/**\n\t * Sets the actionMap.\n\t * @param actionMap The actionMap to set\n\t */\n",
    "119862": "  /**\n   * Returns the old Locale\n   */\n",
    "119863": "  /**\n   * Returns the new Locale\n   */\n",
    "119864": "  /** Adds the Propernameprovider and asks him for\n   *  the proper names.\n   *\n   */\n",
    "119866": "  /** removes the propernameprovider\n   *\n   */\n",
    "119869": "  /** merges the keys of any registered ProperNameProvider and returns them.\n   *\n   */\n",
    "119870": "  /** Returns the object for the key or null\n   *\n   */\n",
    "119873": "\t/**\n\t * Returns the findPattern.\n\t * @return String\n\t */\n",
    "119877": "\t/**\n\t * Sets the findPattern.\n\t * @param findPattern The findPattern to set\n\t */\n",
    "119881": "\t/**\n\t * Returns the lastFound.\n\t * @return Object\n\t */\n",
    "119884": "\t/**\n\t * Sets the lastFound.\n\t * @param lastFound The lastFound to set\n\t */\n",
    "119888": "\t/**\n\t * Returns the overviewDialog.\n\t * @return JDialog\n\t */\n",
    "119891": "\t/**\n\t * Returns true if <code>object</code> is a vertex, that is, if it\n\t * is not an instance of Port or Edge, and all of its children are\n\t * ports, or it has no children.\n\t */\n",
    "119892": "\t/**\n\t * Sets the overviewDialog.\n\t * @param overviewDialog The overviewDialog to set\n\t */\n",
    "119893": "\t/**\n\t * Returns true if <code>object</code> is a vertex, that is, if it\n\t * is not an instance of Port or Edge, and all of its children are\n\t * ports, or it has no children.\n\t */\n",
    "119896": "\t/**\n\t * Returns the splitPane.\n\t * @return JSplitPane\n\t */\n",
    "119900": "\t/**\n\t * Sets the splitPane.\n\t * @param splitPane The splitPane to set\n\t */\n",
    "119904": "\t/**\n\t * Returns the scrollPane.\n\t * @return JScrollPane\n\t */\n",
    "119908": "\t/**\n\t * Sets the scrollPane.\n\t * @param scrollPane The scrollPane to set\n\t */\n",
    "119909": "\t/**\n\t * Overrides <code>JComponent</code>'buttonSelect <code>getToolTipText</code>\n\t * method in order to allow the graph controller to create a tooltip\n\t * for the topmost cell under the mousepointer. This differs from JTree\n\t * where the renderers tooltip is used.\n\t * <p>\n\t * NOTE: For <code>JGraph</code> to properly display tooltips of its\n\t * renderers, <code>JGraph</code> must be a registered component with the\n\t * <code>ToolTipManager</code>.  This can be done by invoking\n\t * <code>ToolTipManager.sharedInstance().registerComponent(graph)</code>.\n\t * This is not done automatically!\n\t * @param event the <code>MouseEvent</code> that initiated the\n\t * <code>ToolTip</code> display\n\t * @return a string containing the  tooltip or <code>null</code>\n\t * if <code>event</code> is null\n\t */\n",
    "119913": "\t/**\n\t * Returns the columnRule.\n\t * @return Rule\n\t */\n",
    "119914": "\t/**\n\t * Notification from the <code>UIManager</code> that the L&F has changed.\n\t * Replaces the current UI object with the latest version from the\n\t * <code>UIManager</code>. Subclassers can override this to support\n\t * different GraphUIs.\n\t * @see JComponent#updateUI\n\t *\n\t */\n",
    "119919": "\t/**\n\t * Returns the rowRule.\n\t * @return Rule\n\t */\n",
    "119920": "\t/** Returns true if the given vertices are conntected by a single edge\n\t * in this document.\n\t */\n",
    "119926": "\t/**Overriden, in order to be able to deal with window events*/\n",
    "119927": "\t/**\n\t * Sets the columnRule.\n\t * @param columnRule The columnRule to set\n\t */\n",
    "119934": "\t/**\n\t * Sets the rowRule.\n\t * @param rowRule The rowRule to set\n\t */\n",
    "119940": "\t/**\n\t * Returns the enableTooltips.\n\t * @return boolean\n\t */\n",
    "119947": "\t/**\n\t * Sets the enableTooltips.\n\t * @param enableTooltips The enableTooltips to set\n\t */\n",
    "119950": "\t/** Sets the current text area\n\t *\n\t */\n",
    "119952": "\t/** clears the window\n\t */\n",
    "119953": "\t/**\n\t * Returns the internalFrame.\n\t * @return GPInternalFrame\n\t */\n",
    "119956": "\t/** writes a boolean value to the target\n\t */\n",
    "119958": "\t/** writes a boolean value to the target\n\t *\n\t */\n",
    "119959": "\t/**\n\t * Sets the internalFrame.\n\t * @param internalFrame The internalFrame to set\n\t */\n",
    "119960": "\t\t\t/**\n\t\t\t * Overriting this so that I could modify an eiditor container.\n\t\t\t * see http://sourceforge.net/forum/forum.php?thread_id=781479&forum_id=140880\n\t\t\t */\n",
    "119961": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119962": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119965": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119966": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119968": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119971": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119972": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119973": "\t/**\n\t * Returns the writeProperties.\n\t * @return Hashtable\n\t */\n",
    "119974": "\t/**\n\t * Returns the graphModelProvider.\n\t * @return GraphModelProvider\n\t */\n",
    "119975": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119976": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119977": "\t/**\n\t * Sets the writeProperties.\n\t * @param writeProperties The writeProperties to set\n\t */\n",
    "119979": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119980": "\t/**\n\t * Returns the networkModel.\n\t * @return GraphNetworkModel\n\t */\n",
    "119984": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119986": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119989": "\t/**\n\t * Sets the networkModel.\n\t * @param networkModel The networkModel to set\n\t */\n",
    "119990": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119994": "\t/** writes the value to the target\n\t *\n\t */\n",
    "119997": "\t/** writes the value to the target\n\t *\n\t */\n",
    "120002": "\t/** writes the value to the target\n\t *\n\t */\n",
    "120005": "\t/** writes the value to the target\n\t *\n\t */\n",
    "120016": "\t/**\n\t * Returns the barKey.\n\t * @return String\n\t */\n",
    "120017": "\t/**\n\t * Returns the barValue.\n\t * @return String\n\t */\n",
    "120020": "\t/**\n\t * Returns the pos.\n\t * @return int\n\t */\n",
    "120021": "\t/**\n\t * Sets the barKey.\n\t * @param barKey The barKey to set\n\t */\n",
    "120022": "\t/**\n\t * Sets the barValue.\n\t * @param barValue The barValue to set\n\t */\n",
    "120024": "\t/**\n\t * Sets the pos.\n\t * @param pos The pos to set\n\t */\n",
    "120025": "\t/** Prints the Entry with all properties.\n\t * \n\t */\t\n",
    "120039": "\t/**\n\t * Create the menubar for the app.  By default this pulls the\n\t * definition of the menu from the associated resource file.\n\t */\n",
    "120043": "\t/** creates the popup menu for the graph\n\t */\n",
    "120046": "\t/** creates the popup menu for the library\n\t */\n",
    "120049": "\t/** creates a popup menu for the specified key.\n\t */\n",
    "120050": "\t\t/**\n\t\t * Returns a new map that contains all (key, value)-pairs\n\t\t * of <code>newState</code> where either key is not used\n\t\t * or value is different for key in <code>oldState</code>.\n\t\t * In other words, this method removes the common entries\n\t\t * from oldState and newState, and returns the \"difference\"\n\t\t * between the two.\n\t\t * \n\t\t * This method never returns null.\n\t\t */\n",
    "120052": "\t/** creates a menu for the specified key\n\t */\n",
    "120114": "\t/** updates all Abstract Buttons from this action\n\t */\n",
    "120116": "\t/** Should return presentation Text for the \n\t *  action command or null \n\t *  for the default\n\t */\n",
    "120142": "\t/** Shows a file open dialog and returns the filename. */\n",
    "120146": "\t/** Shows a file save dialog and returns the filename. */\n",
    "120150": "\t\t/** Returns true if the file ends with the full extension or\n\t\t *  if the file is a directory\n\t\t *\n\t\t */\n",
    "120153": "\t\t/** returns the desc\n\t\t */\n",
    "120173": "\t/** Returns the List Cell Renderer for the\n\t *  Items. By default returns null.\n\t *\n\t */\n",
    "120176": "\t/** Returns the item presentation text\n\t *  (buttonEdge.g. for the MenuItem)\n\t *\n\t *  The default Implemenation returns\n\t *  <tt>item.toString()</tt>\n\t *\n\t */\n",
    "120191": "\t/**\n\t * Returns the buttonActivity.\n\t * @return JToggleButton\n\t */\n",
    "120201": "\t/** updates all Abstract Buttons from this action\n\t */\n",
    "120202": "\t/** removes the abstract action from the\n\t *  action control\n\t */\n",
    "120210": "\t/**\n\t * Returns the buttonDecision.\n\t * @return JToggleButton\n\t */\n",
    "120225": "\t/**\n\t * Returns the buttonStart.\n\t * @return JToggleButton\n\t */\n",
    "120244": "\t/**\n\t * Returns the buttonEnd.\n\t * @return JToggleButton\n\t */\n",
    "120265": "\t/** Shows a file chooser with the\n\t *  file filters from the file formats\n\t *  to select a file.\n\t *\n\t *  Furthermore the method uses the selected\n\t *  file format for the read process.\n\t *\n\t *  @see java.awt.event.ActionListener#actionPerformed(ActionEvent)\n\t *  @see GraphModelProviderRegistry\n\t */\n",
    "120268": "\t/**\n\t * Returns the buttonSplit.\n\t * @return JToggleButton\n\t */\n",
    "120277": "\t/**\n\t * Calls the method setMaximum(true) for each\n\t * JInternalFrame.\n\t *\n\t * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)\n\t */\n",
    "120281": "\t/**\n\t * Calls the method setIcon(true) for each\n\t * JInternalFrame.\n\t * \n\t * \n\t * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)\n\t */\n",
    "120291": "\t/**\n\t * Returns the buttonJoin.\n\t * @return JToggleButton\n\t */\n",
    "120313": "\t/**\n\t * Returns the buttonEdge.\n\t * @return JToggleButton\n\t */\n",
    "120314": "\t/**\n\t * Override or implement to map from cells to urls.\n\t * @param cell Cell that should be converted to a URL\n\t * @return String String that can be used as a href\n\t */\n",
    "120316": "\t/**\n\t * Override or implement to map from cells to labels.\n\t * @param cell Cell that should be converted to a label\n\t * @return String String that can be used as a label\n\t */\n",
    "120320": "\t/** Returns the name of the action\n\t *\n\t */\n",
    "120331": "\t/**\n\t * Returns the buttonLine.\n\t * @return JToggleButton\n\t */\n",
    "120337": "\t/**\n\t * Gets the GPInternalFrame from the ActionEvent and sets the\n\t * frame toFront and selected.\n\t *\n\t * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)\n\t */\n",
    "120339": "\t/**Returns a JMenu and stores the JMenu at the menus Vector\n\t *\n\t * @see #menus\n\t * @see org.jgraph.pad.actions.AbstractActionList#getMenuBarComponent()\n\t */\n",
    "120340": "\t/** returns the actionCommand (The presentation file name from the document)\n\t */\n",
    "120343": "\t/** updates the window list at the menu entries\n\t *\n\t */\n",
    "120344": "\t/** Returns a JMenuItem with a link to this action.\n\t */\n",
    "120346": "\t/**\n\t * Returns the buttonSelect.\n\t * @return JToggleButton\n\t */\n",
    "120348": "\t/** Returns a clean JButton which has a link to this action.\n\t *\n\t */\n",
    "120354": "\t/** empty implementation for this typ of action\n\t *\n\t */\n",
    "120357": "\t/** Should return presentation Text for the\n\t *  action command or null\n\t *  for the default\n\t */\n",
    "120363": "\t/**\n\t * Returns the buttonText.\n\t * @return JToggleButton\n\t */\n",
    "120382": "\t/**\n\t * Returns the buttonZoomArea.\n\t * @return JToggleButton\n\t */\n",
    "120385": "\t/**\n\t * Returns the message.\n\t *\n\t * @return The message from the status bar\n\t */\n",
    "120386": "\t/**Returns <tt>Default Graph Model</tt>\n\t *\n\t * @see org.jgraph.pad.GraphModelProvider#getPresentationName()\n\t */\n",
    "120388": "\t/**\n\t * Returns the scale.\n\t * @return JLabel\n\t */\n",
    "120392": "\t/**\n\t * Sets the message.\n\t * @param message The message to set\n\t */\n",
    "120394": "\t/**\n\t * Sets the scale.\n\t * @param scale The scale to set\n\t */\n",
    "120395": "\t/**\n\t * Creates a clean default graph model.\n\t *\n\t * @see DefaultGraphModel\n\t * @see org.jgraph.pad.GraphModelProvider#createCleanGraphModel()\n\t */\n",
    "120397": "\t/** Currently returns every time false.\n\t *\n\t * @see org.jgraph.pad.GraphModelProvider#isMutateAbleTo(Class)\n\t */\n",
    "120404": "\t/**Adds a Port to the model specific vertex object\n\t *\n\t * @see org.jgraph.pad.GraphModelProvider#addPort(Object, Object)\n\t */\n",
    "120408": "\t/**\n\t * Creates a new clean graph for this model provider\n\t *\n\t * @see org.jgraph.pad.GraphModelProvider#createCleanGraph(GraphModel model)\n\t */\n",
    "120412": "\t/**Returns the selected graph model provider\n\t *\n\t */\n",
    "120426": "\t/**\n\t * Returns the answer.\n\t * @return int\n\t */\n",
    "120432": "\t/** shows the select dialog. If only one\n\t *  graph model provider is available the\n\t *  method returns directly.\n\t */\n",
    "120538": "\t/**\n\t * Create a clone of the user object. This is provided for\n\t * subclassers who need special cloning. This implementation\n\t * simply returns a reference to the original user object.\n\t *\n\t * @return Object  a clone of this cells user object.\n\t */\n",
    "120540": "\t/**\n\t * Returns a cell handle for the view, if the graph and the view\n\t * are sizeable.\n\t */\n",
    "120684": "\t/** removes the specified Internal Frame from the Graphpad\n\t */\n",
    "120743": "\t/**\n\t * Returns the marqueeHandler.\n\t * @return JGpdMarqueeHandler\n\t */\n",
    "121353": "\t/**Returns a JMenu and stores the JMenu at the menus Vector\n\t *\n\t * @see #menus\n\t * @see org.jgraph.pad.actions.AbstractActionList#getMenuBarComponent()\n\t */\n",
    "121420": "\t/**\n\t * Creates a new clean graph for this model provider\n\t *\n\t * @see org.jgraph.pad.GraphModelProvider#createCleanGraph(GraphModel model)\n\t */\n",
    "121484": "  /**\n   * This puts a property in the map. It is indexed by its\n   * name and holds the specified value. Stands for Put PROPerty.\n   * @param name String\n   * @param value Object\n   */\n",
    "121487": "  /**\n   * Removes a property from the list. Stands for\n   * Remove PROPerty.\n   * @param name String\n   */\n",
    "121488": "  /**\n   * Gets the property indexed by the name specified.\n   * Stands for Get PROPerty.\n   * @param name String\n   * @return Object\n   */\n",
    "121492": "  /**\n   * Returns a list of all property indexes contained within the\n   * map.\n   * @return LogoList\n   */\n",
    "121494": "  /**\n   * Returns a string of the data within.\n   * @return String\n   */\n",
    "121497": "  /**\n   * Creates a copy of this map and returns it.\n   * @return LogoMap\n   */\n",
    "121502": "  /**\n   * Puts a link at the front of the list.\n   * @param o Object\n   */\n",
    "121505": "  /**\n   * Puts a link at the front of a copied list and returns the\n   * copy.\n   * @param o Object\n   * @return LogoList\n   */\n",
    "121508": "  /**\n   * Puts a link at the end of the list\n   * @param o Object\n   */\n",
    "121512": "  /**\n   * Puts a link at the end of a copied list and returns\n   * the copy\n   * @param o Object\n   * @return LogoList\n   */\n",
    "121516": "  /**\n   * Returns whether there are elements in this list.\n   * @return boolean\n   */\n",
    "121518": "  /**\n   * Returns a reference to the first object in the list\n   * @return Object\n   */\n",
    "121522": "  /**\n   * Returns a reference to the last object in the list\n   * @return Object\n   */\n",
    "121524": "  /**\n   * Returns a list with all but the first element if this list.\n   * @return LogoList\n   */\n",
    "121526": "  /**\n   * Returns a list with all but the last element of this list.\n   * @return LogoList\n   */\n",
    "121527": "  /**\n   * Prepares the object for use.\n   * @param file String\n   * @param out OutputStream\n   * @throws IOException\n   */\n",
    "121528": "  /**\n   * Removes the first element from the list. Returns a reference to this list.\n   * @return LogoList\n   */\n",
    "121531": "  /**\n   * Removes the last element of the list. Returns a reference to this list.\n   * @return LogoList\n   */\n",
    "121533": "  /**\n   * Returns the number of elements in this list.\n   * @return int\n   */\n",
    "121535": "  /**\n   * Removes comments and junk only humans need and puts in LogoList. Step 1\n   * @throws IOException - if file cannot be opened for any reason.\n   * @param file file to preparse\n   */\n",
    "121539": "  /**\n   * Creates a copy of this list and returns it.\n   * @return LogoList\n   */\n",
    "121543": "  /**\n   * Returns a string representation of this list. Conforms to Logo display.\n   * @return String\n   */\n",
    "121546": "  /**\n   * Fast removal of any occurances of \"o\"\n   * @param o Object\n   */\n",
    "121548": "  /**\n   * Imitates a doList command in logo. Pass the ForEachListener with the\n   * appropriate instructions to run on each list item.\n   * @param fel ForEachListener\n   */\n",
    "121551": "  /**\n   * Returns whether the list contains the object requested.\n   * @param o Object\n   * @return boolean\n   */\n",
    "121552": "  /**\n   * Removes all data from this object.\n   */\n",
    "121554": "  /**\n   * Rewrites the type so that the information is correctly formatted for\n   * SQL\n   * @param value String\n   * @param type String\n   * @return String\n   */\n",
    "121567": "  /**\n   * Finite State Machine, Compiler Directive?\n   * Returns if this line is a compiler directive or not.\n   * @param line String\n   * @return boolean\n   */\n",
    "121585": "  /**\n   * Sends output to console if debug is on.\n   * @param text String\n   */\n",
    "121607": "\t/**\n\t * This method initializes jContentPane\n\t * \n\t * @return javax.swing.JPanel\n\t */\n",
    "121610": "\t/**\n\t * This method initializes jJMenuBar\n\t * \n\t * @return javax.swing.JMenuBar\n\t */\n",
    "121612": "\t/**\n\t * This method initializes jMenu\n\t * \n\t * @return javax.swing.JMenu\n\t */\n",
    "121614": "\t/**\n\t * This method initializes jMenu\n\t * \n\t * @return javax.swing.JMenu\n\t */\n",
    "121616": "\t/**\n\t * This method initializes jMenuItem\n\t * \n\t * @return javax.swing.JMenuItem\n\t */\n",
    "121620": "\t/**\n\t * This method initializes jMenuItem\n\t * \n\t * @return javax.swing.JMenuItem\n\t */\n",
    "121627": "\t/**\n\t * This method initializes txtDistance\n\t * \n\t * @return javax.swing.JTextField\n\t */\n",
    "121629": "\t/**\n\t * This method initializes txtConsumption\n\t * \n\t * @return javax.swing.JTextField\n\t */\n",
    "121631": "\t/**\n\t * This method initializes cboDistanceUnit\n\t * \n\t * @return javax.swing.JComboBox\n\t */\n",
    "121633": "\t/**\n\t * This method initializes cboConsumptionUnit\n\t * \n\t * @return javax.swing.JComboBox\n\t */\n",
    "121636": "\t/**\n\t * This method initializes bttnCalculate\n\t * \n\t * @return javax.swing.JButton\n\t */\n",
    "121639": "\t/**\n\t * Calculates the consumption in MPG\n\t * \n\t * @param distanceInKm\n\t *            Distance in kilometers\n\t * @param numberOfLiters\n\t *            Number of liters used\n\t * @return Consumption in MPG\n\t */\n",
    "121642": "\t/**\n\t * Calculates the consumption in MPG\n\t * \n\t * @param distanceInKm\n\t *            Distance in kilometers\n\t * @param numberOfGallons\n\t *            Number of US Gallons used\n\t * @return Consumption in MPG\n\t */\n",
    "121643": "  /**\n   * Rewrites the type so that the information is correctly formatted for\n   * SQL\n   * @param value String\n   * @param type String\n   * @return String\n   */\n",
    "121645": "\t/**\n\t * Calculates the consumption in MPG\n\t * \n\t * @param distanceInMiles\n\t *            Distance in miles\n\t * @param numberOfLiters\n\t *            Number of liters used\n\t * @return Consumption in MPG\n\t */\n",
    "121648": "\t/**\n\t * Calculates the consumption in L100Km\n\t * \n\t * @param distanceInKm\n\t *            Distance in kilometers\n\t * @param numberOfLiters\n\t *            Number of liters used\n\t * @return Consumption in L100Km\n\t */\n",
    "121661": "\t/**\n\t *  Show this dialog\n\t */\n",
    "121663": "\t/**\n\t *  Sets the current attribute (progress value) of the ProgressDialog\n\t *\n\t * @param  aCurrent  The new current (progress) value\n\t */\n",
    "121664": "\t/**\n\t *  Gets the current attribute (progress value) of the ProgressDialog\n\t *\n\t * @return    The current (progress) value\n\t */\n",
    "121665": "\t/**\n\t * A non-polymorphic pack-and-set-visible returning the boolean result\n\t * of the dialog.\n\t *\n\t * @return    User response, {@code true} is \"yes\".\n\t */\n",
    "121666": "\t/**\n\t *  Instances the Listener for user input during progress\n\t *\n\t * @param  aDoCancel  The new doCancel value\n\t */\n",
    "121670": "\t/**\n\t *  Sets the max (complete progress) of the ProgressDialog\n\t *\n\t * @param  aMax  The new max value\n\t */\n",
    "121673": "\t/**\n\t *  Gets the max (complete progress) of the ProgressDialog\n\t *\n\t * @return    The max value\n\t */\n",
    "121675": "\t/**\n\t *  Sets the message attribute of the ProgressDialog object\n\t *\n\t * @param  aMessage  The new message value\n\t */\n",
    "121678": "\t/**\n\t *  Gets the message attribute of the ProgressDialog object\n\t *\n\t * @return    The message value\n\t */\n",
    "121682": "\t/**\n\t *  Sets the min (zero progress) of the ProgressDialog\n\t *\n\t * @param  aMin  The new min value\n\t */\n",
    "121685": "\t/**\n\t *  Gets the min (zero progress)of the ProgressDialog\n\t *\n\t * @return    The min value\n\t */\n",
    "121687": "\t/**\n\t *  Close the dialog\n\t */\n",
    "121699": "\t/**\n\t *  Sets the title attribute of the ProgressDialog\n\t *\n\t * @param  aTitle  The new title value\n\t */\n",
    "121707": "\t/**\n\t * The method sets the background color\n\t *\n\t * @param  background  value to be set\n\t */\n",
    "121714": "\t/**\n\t * Sets the black-white mode attribute\n\t *\n\t * @param  blackWhiteAttribute  new black-white mode attribute\n\t */\n",
    "121722": "\t/**\n\t * Sets the color mode attribute\n\t *\n\t * @param  colorAttribute  new color mode attribute\n\t */\n",
    "121729": "\t/**\n\t * The method sets the foreground color\n\t *\n\t * @param  foreground  value to be set\n\t */\n",
    "121732": "\t/**\n\t * The method gets the foreground color\n\t *\n\t * @return    the foreground color\n\t */\n",
    "121735": "\t/**\n\t *  Represent the character colors as a string\n\t *\n\t * @return    the character colors as a string\n\t */\n",
    "121739": "\t/**\n\t *  Gets the colorName attribute of the CharColor object\n\t *\n\t * @param  index  Description of the Parameter\n\t * @return        The colorName value\n\t */\n",
    "121743": "\t/**\n\t *  Generate a file filter from a string.\n\t *\n\t * @param  filterString  string showing acceptable file patterns\n\t * @return               Filter object modelled on filterString\n\t */\n",
    "121745": "\t/**\n\t *  Gets the modusName attribute of the CharColor object\n\t *\n\t * @param  index  Description of the Parameter\n\t * @return        The modusName value\n\t */\n",
    "121751": "\t/**\n\t * Verify the color attribute as being one we support\n\t *\n\t * @param  attribute                  the color attribute\n\t * @throws  IllegalArgumentException  on unknown color attribute\n\t */\n",
    "121756": "\t/**\n\t * Verify the color attribute as being one we support\n\t *\n\t * @param  color                      the color\n\t * @throws  IllegalArgumentException  on unknown color\n\t */\n",
    "121787": "\t/**\n\t *  Sets the borderColors attribute of the Window object\n\t *\n\t * @param  aColors  The new borderColors value\n\t */\n",
    "121793": "\t/**\n\t *  Gets the borderColors attribute of the Window object\n\t *\n\t * @return    The borderColors value\n\t */\n",
    "121806": "\t/**\n\t * The method defines a new window's closing character. Default is escape.\n\t *\n\t * {@code null} means no closing character\n\t *\n\t * @param  character  new window's closing character - {@code null} means no closing character\n\t */\n",
    "121812": "\t/**\n\t * The method returns the character which, when encountered in the default input handler\n\t * causes JCurses to close this window.\n\t *\n\t * @return    window's closing character - {@code null} means no closing character\n\t */\n",
    "121814": "\t/**\n\t *  Gets the defaultBorderColors attribute of the Window object\n\t *\n\t * @return    The defaultBorderColors value\n\t */\n",
    "121817": "\t/**\n\t *  Gets the defaultTitleColors attribute of the Window object\n\t *\n\t * @return    The defaultTitleColors value\n\t */\n",
    "121830": "\t/**\n\t * Sets the root panel of the window. This is the top most widget container in the window's widget hierarchy. It occupies the entire window out of the border\n\t * (if exists ).\n\t *\n\t * @param  root  a Panel suitable to be a root panel.\n\t */\n",
    "121831": "\t/**\n\t * Sets the text to use by painting separators\n\t *\n\t *\n\t * @param  value  separator string\n\t *\n\t */\n",
    "121832": "\t/**\n\t * Returns the text used by painting separators\n\t *\n\t *\n\t * @return    separator string\n\t *\n\t */\n",
    "121833": "\t/**\n\t * Adds a separator at the specified position\n\t *\n\t *\n\t * @param  index  position to add a separator\n\t *\n\t */\n",
    "121834": "\t/**\n\t * Adds a separator at the end of the list\n\t */\n",
    "121836": "\t/**\n\t *  Gets the itemRepresentation attribute of the MenuList object\n\t *\n\t * @param  item  Description of the Parameter\n\t * @return       The itemRepresentation value\n\t */\n",
    "121838": "\t/**\n\t *  Gets the preferredSize attribute of the MenuList object\n\t *\n\t * @return    The preferredSize value\n\t */\n",
    "121839": "\t/**\n\t * Returns the  root panel of the window. This is the top most widget container in the window's widget hierarchy. It occupies the entire window out of the border\n\t * (if exists ).\n\t *\n\t * @return    the root panel of the window\n\t */\n",
    "121840": "\t/**\n\t *  Gets the selectable attribute of the MenuList object\n\t *\n\t * @param  index  Description of the Parameter\n\t * @return        The selectable value\n\t */\n",
    "121841": "\t/**\n\t *  Description of the Method\n\t *\n\t * @param  ch  Description of the Parameter\n\t * @return     Description of the Return Value\n\t */\n",
    "121843": "\t/**\n\t *  Gets the maxItemLength attribute of the MenuList object\n\t *\n\t * @return    The maxItemLength value\n\t */\n",
    "121847": "\t/**\n\t * The method defines whether the window is to paint with a shadow.\n\t *\n\t * @param  value  true if a shadow is to paint, false otherwise\n\t */\n",
    "121852": "\t/**\n\t *  Indicates whether the window is to paint with a shadow.\n\t *\n\t * @return    true if a shadow is to paint, false otherwise\n\t */\n",
    "121858": "\t/**\n\t *  Sets the titleColors attribute of the Window object\n\t *\n\t * @param  aColors  The new titleColors value\n\t */\n",
    "121863": "\t/**\n\t *  Gets the titleColors attribute of the Window object\n\t *\n\t * @return    The titleColors value\n\t */\n",
    "121868": "\t/**\n\t * The method changes the window's visibility status\n\t *\n\t * @param  aVisible  true, if the window becomes visible, false in other case\n\t */\n",
    "121875": "\t/**\n\t * The method returns the window's visibility status\n\t *\n\t * @return    true, if the window becomes visible, false in other case\n\t */\n",
    "121880": "\t/**\n\t * The method adds a listener to the window\n\t *\n\t * @param  listener  the listener to add\n\t */\n",
    "121887": "\t/**\n\t * The method closed the window, that is removes it from window stack and\n\t * eventually from the rendered display, if the window was visible.\n\t */\n",
    "121893": "\t/**\n\t * The method hides the window\n\t */\n",
    "121895": "\t/**\n\t *  Gets the borderColors attribute of the BorderPanel object\n\t *\n\t * @return    The borderColors value\n\t */\n",
    "121896": "\t/**\n\t *  Sets the borderColors attribute of the BorderPanel object\n\t *\n\t * @param  colors  The new borderColors value\n\t */\n",
    "121898": "\t/**\n\t *  Gets the defaultBorderColors attribute of the BorderPanel object\n\t *\n\t * @return    The defaultBorderColors value\n\t */\n",
    "121899": "\t/**\n\t *  Gets the clientArea attribute of the BorderPanel object\n\t *\n\t * @return    The clientArea value\n\t */\n",
    "121900": "\t/**\n\t * The method moves the window to the top of the stack\n\t */\n",
    "121903": "\t/**\n\t * The method computes new window's layout. The method must already be called, if anything on the window building is changed, for example, an widget is\n\t * removed or isn't more focusable ( because not visible or other ).\n\t */\n",
    "121908": "\t/**\n\t * The method remove a listener from the window\n\t *\n\t * @param  listener  the listener to remove\n\t */\n",
    "121911": "\t/**\n\t * The method shows the window\n\t */\n",
    "121919": "\t/**\n\t * Returns the rectangle occupied by the window.\n\t *\n\t * @return    the rectangle occupied by the window\n\t */\n",
    "121922": "\t/**\n\t * Accounts for shadow is any\n\t *\n\t * @return    the rectangle occupied by the window\n\t */\n",
    "121925": "\t/**\n\t * The method is called, if the window gets focus.\n\t */\n",
    "121928": "\t/**\n\t *  Changes the focus between widgets and propagates the change notification.\n\t *  Internal only, should not be called by application code.\n\t *\n\t * @param  aWidgetIndex  Index of widget to receive focus.\n\t */\n",
    "121931": "\t/**\n\t *  Changes the focus between widgets and propagates the change notification.\n\t *  Internal only, should not be called by application code. \n\t *\n\t * @param  aWidget  the Widge itself to which the focus is to be changed.\n\t */\n",
    "121935": "\t/**\n\t *  Changes the focus between widgets and propagates the change notification\n\t *  merely by incrementing the index, wrapping to zero (0) if necessary.\n\t *  Internal only, should not be called by application code. \n\t */\n",
    "121943": "\t/**\n\t * The method is called, if the window is to be closed.\n\t */\n",
    "121948": "\t/**\n\t * The method is called, if the window loses focus.\n\t */\n",
    "121967": "\t/**\n\t * The method paint's the window\n\t */\n",
    "121986": "\t/**\n\t *  Resize to specified size \n\t *\n\t * @param  width   d'oh\n\t * @param  height  d'oh\n\t */\n",
    "121994": "\t/**\n\t *  Gets the currentWidget attribute of the Window object\n\t *\n\t * @return    The currentWidget value\n\t */\n",
    "121999": "\t/**\n\t *  Gets the defaultClosingChar attribute of the Window object\n\t *\n\t * @return    The defaultClosingChar value\n\t */\n",
    "122003": "\t/**\n\t *  Gets the defaultFocusChangeChar attribute of the Window object\n\t *\n\t * @return    The defaultFocusChangeChar value\n\t */\n",
    "122009": "\t/**\n\t *  Gets the focusableIndex attribute of the Window object\n\t *\n\t * @param  aIdx  Description of the Parameter\n\t * @return       The focusableIndex value\n\t */\n",
    "122010": "\t/**\n\t *  Gets the text of the Label\n\t *\n\t * @return    The text value\n\t */\n",
    "122011": "\t/**\n\t *  Sets the text  of the Label\n\t *\n\t * @param  aText  The new text value\n\t */\n",
    "122012": "\t/**\n\t *  Calculates the preferred size of the Label.\n\t *\n\t * @return    The preferred size\n\t */\n",
    "122013": "\t/**\n\t *  The interface method that draws the label in its rectangle in its colors.\n\t */\n",
    "122015": "    /**\n     * Sets button's label\n     *\n     * @param  aLabel  buttton's label\n     */ \n",
    "122018": "\t/**\n\t * Input handler to identify shortcuts <br>\n\t * There are four important cases:\n\t * <ol>\n\t * <li>Window close key was entered</li>\n\t * <li>Shift focus to next widget key was entered</li>\n\t * <li>Some other defined shortcut key was entered</li>\n\t * <li>Handling input from a child that has the focus</li>\n\t * </ol>\n\t * Behandlung der Eingabe. <br>\n\t * Vier m?gliche F?lle: <br>\n\t * 1. Fenster schliessen. <br>\n\t * 2. Zum n?chsten Widget springen. <br>\n\t * 3. Shortcut bearbeiten. <br>\n\t * 3. Eingabe vom aktuell Fokus habenden Kind bearbeiten lassen.\n\t *\n\t * @param  inp  object instance representing the input char\n\t * @return      true if this char is to be handled as a shortcut\n\t */\n",
    "122023": "    /**\n     * Sets button's shortcut char's colors. If the button has a shortcut char\n     * and this char is contained by the label, than the char within the label will be\n     * painted in different colors, set by this method\n     *\n     * @param  aColor  button's shortcut char's colors\n     */ \n",
    "122024": "    /**\n     * Adds a listener to the button.\n     *\n     * @param  listener  listener to add\n     */ \n",
    "122026": "\t/**\n\t *  Finds a widget from its associated shortcut char\n\t *\n\t * @param  inp  object instance representing the input char.\n\t * @return      The widget indexed in the shortcuts by the input char\n\t */\n",
    "122027": "    /**\n     * Removes a listener from the button.\n     *\n     * @param  listener  listener to remove\n     */ \n",
    "122028": "    /**\n     * Set's button's shortcut char. If this shortcut is typed, then the button\n     * will handle the char, as described by <code>Widget</code>, and generate an\n     * Event as if the button were 'clicked'.\n     *\n     * @param  c  The new shortCut value\n     */ \n",
    "122029": "    /**\n     *  Gets the preferredSize attribute of the Button object\n     *\n     * @return    The preferredSize value\n     */ \n",
    "122032": "    /**\n     *  Gets the shortCutsList attribute of the Button object\n     *\n     * @return    The shortCutsList value\n     */ \n",
    "122033": "\t/**\n\t *  Create (if necessary) a root panel and do some rectangle math on\n\t * the root panel so it fits\n\t */\n",
    "122034": "    /**\n     *  Gets the focusable attribute of the Button object\n     *\n     * @return    The focusable value\n     */ \n",
    "122035": "    /**\n     *  Input handler,just looks for the shortcut char\n     * and performs the action if the shortcut char is encountered.\n     *\n     * @param  ch  Description of the Parameter\n     * @return     Description of the Return Value\n     */ \n",
    "122036": "    /**\n     *  Handle getting focus, paint self.\n     */ \n",
    "122038": "    /**\n     *  Description of the Method\n     */ \n",
    "122039": "    /**\n     *  Gets the shortCut character of the Button object\n     *\n     * @return    The shortCut value\n     */ \n",
    "122041": "    /**\n     *  Description of the Method\n     */ \n",
    "122042": "    /**\n     *  Description of the Method\n     */ \n",
    "122048": "\t/**\n\t * Draw features like border and title if needed\n\t */\n",
    "122057": "\t/**\n\t *  Load and show in order (i.e., changing focus) each of the window's focusable children.\n\t */\n",
    "122063": "\t/**\n\t *  Load the shortcut table\n\t */\n",
    "122067": "\t/**\n\t *  Paint the title\n\t */\n",
    "122076": "\t/**\n\t * Set the Window title\n\t * @param  aTitle  The title to set.\n\t */\n",
    "122080": "\t/**\n\t *  Description of the Method\n\t *\n\t * @param  obj1  Description of the Parameter\n\t * @param  obj2  Description of the Parameter\n\t * @return       Description of the Return Value\n\t */\n",
    "122096": "   /**\n\t* The method returns the page offset for the given index\n\t* \n\t* @param index the index to calculate the page offset\n\t* @return start index\n\t* \n\t*/\n",
    "122256": "    /**\n     * See section 7.10.3 of the EJB 2.0 specification\n     * See section 7.11.3 of the EJB 2.1 specification\n     */\n",
    "122309": "    /**\n     * See section 7.10.3 of the EJB 2.0 specification\n     * See section 7.11.3 of the EJB 2.1 specification\n     */\n",
    "122333": "    /**\n     * See section 7.10.3 of the EJB 2.0 specification\n     * See section 7.11.3 of the EJB 2.1 specification\n     */\n",
    "122380": "    /**\n     * Switches the states\n     */\n",
    "122407": "    /**\n     * Given a String containing the name of the state, it returns\n     * the occupancy number calculated as L/(L+Kd) using the value of \n     * Kd that corresponds to the state.\n     *  \n     * @param state\n     * @return occupancy number corresponding to that state\n     */\n",
    "122426": "    /**\n     * Given a volume, returns the concentration in Mol\n     * @param volume (in liters)\n     * @return [C] = copynumber / (vol * avogadro)\n     */\n",
    "122505": "    /**\n     * Sets the random number seed for this model, and recreates a\n     * uniform distribution with that seed.\n     */\n",
    "122532": "    /**\n     * Counts the number of rotations since last Gram-Schmidt. If the rotationsCount is above\n     * rotationsCountThreshold, Gram-Schmidt is applied to the orientation.\n     */\n",
    "122539": "\t/**\n\t * Read receptors occupation and update stochsim corresponding dynamicValues\n\t */\n",
    "122760": "    /**\n     * Switches the states\n     */\n",
    "122776": "  /**\n   * Sets the model associated with this controller.\n   *\n   * @param model the model associated with this BaseController\n   */\n",
    "122783": "  /**\n   * Returns the SimModel currently associated with this BaseController.\n   */\n",
    "122788": "  /**\n   * Gets the display cell width. The display cell size is the size in pixels\n   * of the cells in which agents, environments and so forth are drawn.\n   *\n   * @return the display cell size\n   */\n",
    "122793": "  /**\n   * Sets the display cell width. The display cell size is the size in pixels\n   * of the cells in which agents, environments and so forth are drawn. Values\n   * between 5 and 50 work well depending on the size of the \"space\"\n   * being displayed.\n   *\n   * @param cellSize the new display cell size\n   * @see #getCellWidth()\n   */\n",
    "122797": "  /**\n   * Gets the display cell height. The display cell size is the size in pixels\n   * of the cells in which agents, environments and so forth are drawn.\n   *\n   * @return the display cell size\n   */\n",
    "122801": "  /**\n   * Sets the display cell height. The display cell size is the size in pixels\n   * of the cells in which agents, environments and so forth are drawn. Values\n   * between 5 and 50 work well depending on the size of the \"space\"\n   * being displayed.\n   *\n   * @param cellSize the new display cell size\n   * @see #getCellHeight()\n   */\n",
    "122806": "  /**\n   * Gets the display cell depth. The display cell size is the size in pixels\n   * of the cells in which agents, environments and so forth are drawn.\n   *\n   * @return the display cell size\n   */\n",
    "122811": "  /**\n   * Sets the display cell depth. The display cell size is the size in pixels\n   * of the cells in which agents, environments and so forth are drawn. Values\n   * between 5 and 50 work well depending on the size of the \"space\"\n   * being displayed.\n   *\n   * @param cellSize the new display cell size\n   * @see #getCellDepth()\n   */\n",
    "122813": "    /**\n     * Tests the PCall.\n     */\n",
    "122818": "  /**\n   * Sets the schedule to be run by the controller.\n   *\n   * @param schedule the schedule to be run by this BaseController.\n   * @see Schedule\n   */\n",
    "122822": "  /**\n   * Returns the Schedule associated with BaseController\n   */\n",
    "122824": "  /**\n   * Gets the current simulation time (tick count) - the current number of\n   * execution cycles completed by main schedule.\n   *\n   * @return the current simulation time\n   */\n",
    "122828": "  /**\n   * Gets the current simulation time (tick count) - the current number of\n   * execution cycles completed by main schedule.\n   *\n   * @return the current simulation time\n   */\n",
    "122830": "    /**\n     * Tests the TS.\n     */\n",
    "122831": "  /**\n   * Sets the random seed for the current model. The random number generator\n   * will be reset each time the model is run.\n   *\n   * @param seed the new random seed\n   * @see SimModelImpl#setRngSeed(long)\n   */\n",
    "122833": "    /**\n     * Tests the TSTypes.\n     */\n",
    "122835": "  /**\n   * Gets the current random seed for the current model\n   */\n",
    "122841": "  /**\n   * Starts the simulation. Fires a START_EVENT before the simulation\n   * thread is actually started.\n   */\n",
    "122844": "  /**\n   * Notifies object monitor that controlls pausing.\n   */\n",
    "122853": "  /**\n   * Gets the parameters of the current loaded model.\n   * @deprecated replaced by ParameterUtilities.#getModelProperties(SimModel)\n   */\n",
    "122859": "  /**\n   * Pauses the simulation\n   */\n",
    "122863": "  /**\n   * Stops the simulation.\n   */\n",
    "122864": "    /**\n     * Tests the TS.\n     */\n",
    "122865": "  /**\n   * Is this a BatchController. Returns false.\n   */\n",
    "122869": "   /**\n   * Adds a SimEventListener to listen for SimEvents broadcast from\n   * this BaseController.\n   *\n   * @param l the SimEventListener to add\n   * @see SimEventListener\n   */\n",
    "122870": "  /**\n   * Removes a SimEventListener from the list of listeners listening for\n   * SimEvents broadcast from this BaseController.\n   *\n   * @param l the SimEventListener to remove.\n   * @see SimEventListener\n   */\n",
    "122874": "   /**\n   * Fires a SimEvent to the registered listeners.\n   *\n   * @param evt the SimEvent to fire\n   */\n",
    "122876": "  /**\n   * Allows for the storage of objects to persist beyond the life of a\n   * single run by objects that do not so persist.\n   *\n   * @param key a unique identifier for the object to store\n   * @param val the actual object to store\n   */\n",
    "122880": "  /**\n   * Gets a stored persistent (over the life of many runs) object.\n   *\n   * @param key the unique identifier for the persistent object\n   */\n",
    "122943": "    /**\n     * Tests the JHelpContextMgr with XML parsing/writing.\n     */\n",
    "122991": "    /**\n     * Decreases this table capacity by C0 (down to C0).\n     * \n     * @throws IllegalStateException if <code>(_size >= _capacity - C0)</code>\n     */\n",
    "122997": "    /**\n     * Returns the hash code value for this list.  The hash code of a list\n     * is defined to be the result of the following calculation:[code]\n     *  h = 1;\n     *  Iterator i = list.iterator();\n     *  while (i.hasNext()) {\n     *      Object obj = i.next();\n     *      h = 31 * h +  this.getValueComparator().hashCodeOf(obj);\n     *  }[/code]\n     *\n     * @return the hash code value for this list.\n     */\n",
    "123095": "    /**\n     * Acquires the lock.\n     */\n",
    "123097": "    /**\n     * Acquires the lock only if it not held by another thread.\n     *\n     * @return <code>true</code> if the lock was free and was acquired by the\n     *         current thread, or the lock was already held by the current\n     *         thread; <code>false</code> otherwise.\n     */\n",
    "123098": "    /**\n     * Attempts to release this lock. The lock is actually released if at\n     * least as many {@link #unlock} as {@link #lock} have been performed\n     * on this {@link ReentrantLock} by the current thread.\n     *\n     * throws IllegalMonitorStateExeception if the current thread does not hold\n     *        this lock.\n     */\n",
    "123099": "    /**\n     * Returns the thread owner of this {@link ReentrantLock}.\n     *\n     * @return the owner of this lock.\n     */\n",
    "123114": "    /**\n     * Returns the value comparator for this collection (default \n     * {@link FastComparator#DEFAULT}).\n     *\n     * @return the comparator to use for value equality (or ordering if \n     *        the collection is ordered)\n     */\n",
    "123115": "    /**\n     * Appends the specified value to the end of this collection\n     * (optional operation).\n     * \n     * <p>Note: This default implementation always throws \n     *          <code>UnsupportedOperationException</code>.</p>\n     * \n     * @param value the value to be appended to this collection.\n     * @return <code>true</code> (as per the general contract of the\n     *         <code>Collection.add</code> method).\n     * @throws UnsupportedOperationException if not supported.\n     */\n",
    "123117": "    /**\n     * Removes the first occurrence in this collection of the specified value\n     * (optional operation).\n     *\n     * @param value the value to be removed from this collection.\n     * @return <code>true</code> if this collection contained the specified\n     *         value; <code>false</code> otherwise.\n     * @throws UnsupportedOperationException if not supported.\n     */\n",
    "123118": "    /**\n     * Removes all of the values from this collection (optional operation).\n     *\n     * @throws UnsupportedOperationException if not supported.\n     */\n",
    "123120": "    /**\n     * Indicates if this map supports concurrent operations without \n     * synchronization (default unshared).\n     * \n     * @return <code>true</code> if this map is thread-safe; <code>false</code> \n     *         otherwise.\n     */\n",
    "123121": "    /**\n     * Indicates if this collection contains the specified value.\n     *\n     * @param value the value whose presence in this collection \n     *        is to be tested.\n     * @return <code>true</code> if this collection contains the specified\n     *         value;<code>false</code> otherwise.\n     */\n",
    "123123": "    /**\n     * Appends all of the values in the specified collection to the end of\n     * this collection, in the order that they are returned by the specified\n     * collection's iterator or the node order if the specified collection\n     * is a {@link FastCollection}.\n     *\n     * @param c collection whose values are to be added to this collection.\n     * @return <code>true</code> if this collection changed as a result of \n     *         the call; <code>false</code> otherwise.\n     */\n",
    "123125": "    /**\n     * Returns the key comparator for this fast map.\n     * \n     * @return the key comparator.\n     */\n",
    "123126": "    /**\n     * Indicates if this collection contains all of the values of the\n     * specified collection.\n     *\n     * @param  c collection to be checked for containment in this collection.\n     * @return <code>true</code> if this collection contains all of the values\n     *         of the specified collection; <code>false</code> otherwise.\n     */\n",
    "123129": "    /**\n     * Returns the value comparator for this fast map.\n     * \n     * @return the value comparator.\n     */\n",
    "123132": "    /**\n     * Removes from this collection all the values that are contained in the\n     * specified collection.\n     *\n     * @param c collection that defines which values will be removed from\n     *          this collection.\n     * @return <code>true</code> if this collection changed as a result of \n     *         the call; <code>false</code> otherwise.\n     */\n",
    "123133": "    /**\n     * Retains only the values in this collection that are contained in the\n     * specified collection.\n     *\n     * @param c collection that defines which values this set will retain.\n     * @return <code>true</code> if this collection changed as a result of \n     *         the call; <code>false</code> otherwise.\n     */\n",
    "123134": "    /**\n     * Compares the specified object with this map for equality.\n     * Returns <code>true</code> if the given object is also a map and the two\n     * maps represent the same mappings (regardless of collection iteration\n     * order).\n     * \n     * @param obj the object to be compared for equality with this map.\n     * @return <code>true</code> if the specified object is equal to this map;\n     *         <code>false</code> otherwise.\n     */\n",
    "123135": "    /**\n     * Returns the textual representation of this collection.\n     * \n     * @return this collection textual representation.\n     */\n",
    "123137": "    /**\n     * Compares the specified object with this collection for equality.  Returns\n     * <code>true</code> if and only both collection contains the same values\n     * regardless of the order; unless this collection is a list instance \n     * in which case both collection must be list with the same order. \n     *\n     * @param obj the object to be compared for equality with this collection.\n     * @return <code>true</code> if the specified object is equal to this\n     *         collection; <code>false</code> otherwise.\n     */\n",
    "123138": "    /**\n     * Returns the hash code value for this map.\n     * \n     * @return the hash code value for this map.\n     */\n",
    "123141": "    /**\n     * Returns the hash code for this collection (independent from the \n     * collection order; unless this collection is a list instance).\n     *\n     * @return the hash code for this collection.\n     */\n",
    "123144": "    /**\n     * Returns the textual representation of this map.\n     * \n     * @return the textual representation of the entry set.\n     */\n",
    "123199": "    /**\n     * Sets the default value for the specified key (typically done at \n     * initialization). \n     * \n     * @param key the key with which the specified value is to be associated.\n     * @param defaultValue the default value to be associated with the \n     *        specified key.\n     * @return the previous default value associated with specified key, or\n     *         <code>null</code> if there was no mapping for key. A\n     *         <code>null</code> return can also indicate that the map\n     *         previously associated <code>null</code> with the specified key.\n     * @throws NullPointerException if the key is <code>null</code>.\n     */\n",
    "123200": "    /**\n     * Returns the number of key-value mappings in this map.\n     * \n     * @return this map's size.\n     */\n",
    "123202": "    /**\n     * Indicates if this map contains no key-value mappings.\n     * \n     * @return <code>true</code> if this map contains no key-value mappings;\n     *         <code>false</code> otherwise.\n     */\n",
    "123203": "    /**\n     * Indicates if this map contains a mapping for the specified key.\n     * \n     * @param key the key whose presence in this map is to be tested.\n     * @return <code>true</code> if this map contains a mapping for the\n     *         specified key; <code>false</code> otherwise.\n     * @throws NullPointerException if the key is <code>null</code>.\n     */\n",
    "123204": "    /**\n     * Indicates if this map associates one or more keys to the \n     * specified value.\n     * \n     * @param value the value whose presence in this map is to be tested.\n     * @return <code>true</code> if this map maps one or more keys to the\n     *         specified value.\n     * @throws NullPointerException if the key is <code>null</code>.\n     */\n",
    "123205": "    /**\n     * Returns the value to which this map associates the specified key.\n     * \n     * @param key the key whose associated value is to be returned.\n     * @return the value to which this map maps the specified key, or\n     *         <code>null</code> if there is no mapping for the key.\n     * @throws NullPointerException if key is <code>null</code>.\n     */\n",
    "123206": "    /**\n     * Associates the specified value with the specified key in this map.\n     * \n     * @param key the key with which the specified value is to be associated.\n     * @param value the value to be associated with the specified key.\n     * @return the previous value associated with specified key, or\n     *         <code>null</code> if there was no mapping for key. A\n     *         <code>null</code> return can also indicate that the map\n     *         previously associated <code>null</code> with the specified key.\n     * @throws NullPointerException if the key is <code>null</code>.\n     */\n",
    "123207": "    /**\n     * Copies all of the mappings from the specified map to this map.\n     * \n     * @param map the mappings to be stored in this map.\n     * @throws NullPointerException the specified map is <code>null</code>,\n     *         or the specified map contains <code>null</code> keys.\n     */\n",
    "123209": "    /**\n     * Removes the mapping for this key from this map if present\n     * (sets the local value to <code>null</code>).\n     * \n     * @param key the key whose value is set to <code>null</code>\n     * @return <code>put(key, null)</code>\n     * @throws NullPointerException if the key is <code>null</code>.\n     */\n",
    "123211": "    /**\n     * Removes all mappings from this map (sets the local values to\n     * <code>null</code>).\n     */\n",
    "123245": "\t/**\n\t * Reads this struct from the specified input stream  \n\t * (convenience method when using Stream I/O). For better performance,\n\t * use of Block I/O (e.g. <code>java.nio.channels.*</code>) is recommended.\n\t *\n\t * @param in the input stream being read from.\n\t * @return the number of bytes read (typically the {@link #size() size}\n\t *         of this struct.\n\t * @throws IOException if an I/O error occurs.\n\t */\n",
    "123247": "\t/**\n\t * Writes this struct to the specified output stream  \n\t * (convenience method when using Stream I/O). For better performance,\n\t * use of Block I/O (e.g. <code>java.nio.channels.*</code>) is recommended.\n\t *\n\t * @param out the output stream to write to.\n\t * @throws IOException if an I/O error occurs.\n\t */\n",
    "123249": "\t/**\n\t * Returns the <code>String</code> representation of this struct\n\t * in the form of its constituing bytes (hexadecimal). For example:[code]\n\t *     public static class Student extends Struct {\n\t *         Utf8String name  = new Utf8String(16);\n\t *         Unsigned16 year  = new Unsigned16();\n\t *         Float32    grade = new Float32();\n\t *     }\n\t *     Student student = new Student();\n\t *     student.name.set(\"John Doe\");\n\t *     student.year.set(2003);\n\t *     student.grade.set(12.5f);\n\t *     System.out.println(student);\n\t *\n\t *     4A 6F 68 6E 20 44 6F 65 00 00 00 00 00 00 00 00\n\t *     07 D3 00 00 41 48 00 00[/code]\n\t *\n\t * @return a hexadecimal representation of the bytes content for this \n\t *         struct.\n\t */\n",
    "123255": "\t/**\n\t * Indicates if this struct's members are mapped to the same location\n\t * in memory (default <code>false</code>). This method is useful for\n\t * applications extending {@link Struct} with new member types in order to \n\t * create unions from these new structs. For example:[code]\n\t * public abstract class FortranStruct extends Struct {\n\t *     public class FortranString extends Member {...}\n     *     protected FortranString[] array(FortranString[] array, int stringLength) { ... }\n\t * }\n\t * public abstract class FortranUnion extends FortranStruct {\n\t *     // Inherits new members and methods.\n\t *     public final isUnion() {\n\t *         return true;\n\t *     }\n\t * }[/code]\n\t *\n\t * @return <code>true</code> if this struct's members are mapped to \n\t *         to the same location in memory; <code>false</code> \n\t *         otherwise.\n\t * @see Union\n\t */\n",
    "123260": "\t/**\n\t * Returns the byte order for this struct (configurable). \n\t * The byte order is inherited by inner structs. Sub-classes may change \n\t * the byte order by overriding this method. For example:[code]\n\t * public class TopStruct extends Struct {\n\t *     ... // Members initialization.\n\t *     public ByteOrder byteOrder() {\n\t *         // TopStruct and its inner structs use hardware byte order.\n\t *         return ByteOrder.nativeOrder();\n\t *    }\n\t * }}[/code]</p></p>\n\t *\n\t * @return the byte order when reading/writing multibyte values\n\t *         (default: network byte order, <code>BIG_ENDIAN</code>).\n\t */\n",
    "123266": "    /**\n     * Adds a new entry for the specified key and value.\n     * \n     * @param hash the hash of the key, generated with {@link #keyHash}.\n     * @param key the entry's key.\n     * @param value the entry's value.\n     */\n",
    "123268": "\t/**\n\t * Indicates if this struct is packed (configurable).\n\t * By default, {@link Member members} of a struct are aligned on the\n\t * boundary corresponding to the member base type; padding is performed\n\t * if necessary. This directive is inherited by inner structs.\n\t * Sub-classes may change the packing directive by overriding this method.\n\t * For example:[code]\n\t * public class TopStruct extends Struct {\n\t *     ... // Members initialization.\n\t *     public boolean isPacked() {\n\t *         // TopStruct and its inner structs are packed.\n\t *         return true;\n\t *     }\n\t * }}[/code]\n\t *\n\t * @return <code>true</code> if alignment requirements are ignored.\n\t *         <code>false</code> otherwise (default).\n\t */\n",
    "123298": "    /**\n     * Requires special handling during serialization process.\n     *\n     * @param  stream the object output stream.\n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123301": "    /**\n     * Tests the testJSCSArray.\n     */\n",
    "123302": "        /**\n         * Indicates if this entry is considered equals to the specified entry\n         * (using default value and key equality comparator to ensure symetry).\n         * \n         * @param that the object to test for equality.\n         * @return <code>true<code> if both entry have equal keys and values.\n         *         <code>false<code> otherwise.\n         */\n",
    "123305": "        /**\n         * Returns the hash code for this entry.\n         * \n         * @return this entry hash code.\n         */\n",
    "123308": "    /**\n     * Tests the testJSCSArray.\n     */\n",
    "123355": "    /**\n     * Sets the byte buffer to use for writing until this writer is closed.\n     *\n     * @param  byteBuffer the destination byte buffer.\n     * @return this UTF-8 writer.\n     * @throws IllegalStateException if this writer is being reused and \n     *         it has not been {@link #close closed} or {@link #reset reset}.\n     */\n",
    "123356": "    /**\n     * Writes a single character. This method supports 16-bits\n     * character surrogates.\n     *\n     * @param  c <code>char</code> the character to be written (possibly\n     *        a surrogate).\n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123357": "    /**\n     * Writes a character given its 31-bits Unicode.\n     *\n     * @param  code the 31 bits Unicode of the character to be written.\n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123360": "    /**\n     * Writes a portion of an array of characters.\n     *\n     * @param  cbuf the array of characters.\n     * @param  off the offset from which to start writing characters.\n     * @param  len the number of characters to write.\n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123361": "    /**\n     * Writes a portion of a string.\n     *\n     * @param  str a String.\n     * @param  off the offset from which to start writing characters.\n     * @param  len the number of characters to write.\n     * @throws IOException if an I/O error occurs\n     */\n",
    "123362": "    /**\n     * Writes the specified character sequence.\n     *\n     * @param  csq the character sequence.\n     * @throws IOException if an I/O error occurs\n     */\n",
    "123363": "    /**\n     * Flushes the stream (this method has no effect, the data is \n     * always directly written to the <code>ByteBuffer</code>).\n     *\n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123367": "    /**\n     * Sets the <code>ByteBuffer</code> to use for reading available bytes\n     * from current buffer position.\n     *\n     * @param  byteBuffer the <code>ByteBuffer</code> source.\n     * @return this UTF-8 reader.\n     * @throws IllegalStateException if this reader is being reused and \n     *         it has not been {@link #close closed} or {@link #reset reset}.\n     */\n",
    "123368": "    /**\n     * Indicates if this stream is ready to be read.\n     *\n     * @return <code>true</code> if the byte buffer has remaining bytes to \n     *         read; <code>false</code> otherwise.\n     * @throws  IOException if an I/O error occurs.\n     */\n",
    "123370": "    /**\n     * Reads a single character.  This method does not block, <code>-1</code>\n     * is returned if the buffer's limit has been reached.\n     *\n     * @return the 31-bits Unicode of the character read, or -1 if there is \n     *         no more remaining bytes to be read.\n     * @throws IOException if an I/O error occurs (e.g. incomplete \n     *         character sequence being read).\n     */\n",
    "123374": "    /**\n     * Reads characters into the specified appendable. This method does not \n     * block.\n     *\n     * <p> Note: Characters between U+10000 and U+10FFFF are represented\n     *     by surrogate pairs (two <code>char</code>).</p>\n     *\n     * @param  dest the destination buffer.\n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123377": "    /**\n     * Sets the output stream to use for writing until this writer is closed.\n     * For example:[code]\n     *     Writer writer = new Utf8StreamWriter().setOutputStream(out);\n     * [/code] is equivalent but writes faster than [code]\n     *     Writer writer = new java.io.OutputStreamWriter(out, \"UTF-8\");\n     * [/code]\n     *\n     * @param  out the output stream.\n     * @return this UTF-8 writer.\n     * @throws IllegalStateException if this writer is being reused and \n     *         it has not been {@link #close closed} or {@link #reset reset}.\n     */\n",
    "123380": "    /**\n     * Writes a character given its 31-bits Unicode.\n     *\n     * @param  code the 31 bits Unicode of the character to be written.\n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123382": "    /**\n     * Writes a portion of an array of characters.\n     *\n     * @param  cbuf the array of characters.\n     * @param  off the offset from which to start writing characters.\n     * @param  len the number of characters to write.\n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123383": "    /**\n     * Writes a portion of a string.\n     *\n     * @param  str a String.\n     * @param  off the offset from which to start writing characters.\n     * @param  len the number of characters to write.\n     * @throws IOException if an I/O error occurs\n     */\n",
    "123384": "    /**\n     * Writes the specified character sequence.\n     *\n     * @param  csq the character sequence.\n     * @throws IOException if an I/O error occurs\n     */\n",
    "123385": "    /**\n     * Flushes the stream.  If the stream has saved any characters from the\n     * various write() methods in a buffer, write them immediately to their\n     * intended destination.  Then, if that destination is another character or\n     * byte stream, flush it.  Thus one flush() invocation will flush all the\n     * buffers in a chain of Writers and OutputStreams.\n     *\n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123389": "    /**\n     * Flushes the internal bytes buffer.\n     *\n     * @throws IOException if an I/O error occurs\n     */\n",
    "123391": "    /**\n     * Sets the input stream to use for reading until this reader is closed.\n     * For example:[code]\n     *     Reader reader = new Utf8StreamReader().setInputStream(inStream);\n     * [/code] is equivalent but reads twice as fast as [code]\n     *     Reader reader = new java.io.InputStreamReader(inStream, \"UTF-8\");\n     * [/code]\n     *\n     * @param  inStream the input stream.\n     * @return this UTF-8 reader.\n     * @throws IllegalStateException if this reader is being reused and \n     *         it has not been {@link #close closed} or {@link #reset reset}.\n     */\n",
    "123392": "    /**\n     * Indicates if this stream is ready to be read.\n     *\n     * @return <code>true</code> if the next read() is guaranteed not to block\n     *         for input; <code>false</code> otherwise.\n     * @throws  IOException if an I/O error occurs.\n     */\n",
    "123395": "    /**\n     * Reads a single character.  This method will block until a character is\n     * available, an I/O error occurs or the end of the stream is reached.\n     *\n     * @return the 31-bits Unicode of the character read, or -1 if the end of\n     *         the stream has been reached.\n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123411": "    /**\n     * Sets this reference to the specified value only if \n     * <code>(value.compareTo(this.get()) &gt; 0)</code>.\n     * \n     * @param value the minimum value for this reference.\n     * @throws IllegalArgumentException if the specified value is not \n     *         {@link Comparable} or an {@link Integer} instance (J2ME).\n     */\n",
    "123414": "    /**\n     * Sets this reference to the specified value only if \n     * <code>(value.compareTo(this.get()) &lt; 0)</code>.\n     * \n     * @param value the maximum value for this reference.\n     * @throws IllegalArgumentException if the specified value is not \n     *         {@link Comparable} or an {@link Integer} instance (J2ME).\n     */\n",
    "123415": "    /**\n     * Returns the string representation of the current value of this \n     * reference.\n     *\n     * @return <code>String.valueOf(this.get())</code>\n     */\n",
    "123416": "    /**\n     * Indicates if the specified character is contained by this character set.\n     * \n     * @param c the character to test.\n     * @return <code>true</code> if this character set contains the specified\n     *         character; <code>false</code> otherwise.\n     */\n",
    "123417": "    /**\n     * Returns the character set containing the characters from this \n     * character set plus the characters from the character set specified.\n     * \n     * @param that the set containing the characters to be added.\n     * @return <code>this + that</code>\n     */\n",
    "123418": "    /**\n     * Returns the character set containing the characters from this \n     * character minus the characters from the character set specified.\n     * \n     * @param that the set containing the character to be removed.\n     * @return <code>this - that</code>\n     */\n",
    "123420": "    /**\n     * Returns the textual representation of this character set.\n     *  \n     * @return the textual representation.\n     */\n",
    "123421": "    /**\n     * Returns a copy of this character set.\n     *  \n     * @return an independant copy.\n     */\n",
    "123443": "    /**\n     * Appends the specified text to this text builder. \n     * If the specified text is <code>null</code> this method \n     * is equivalent to <code>append(\"null\")</code>. \n     *\n     * @param text the text to append or <code>null</code>.\n     * @return <code>this</code>\n     */\n",
    "123456": "    /**\n     * Returns the default textual representation of this realtime object.\n     * \n     * @return the textual representation of this object.\n     */\n",
    "123460": "    /**\n     * Recycles this object and its internals only. This method should only be\n     * called when it can be asserted that this object is not going to be \n     * referenced anymore. \n     * This method affects only local objects and has no effect on heap objects\n     * or objects allocated outside of the current pool context. \n     * Unlike the {@link #move move} operations, recycling is limited to this\n     * object and its internals and has no effect on external \n     * variable members ({@link javolution37.javolution.realtime.Realtime real-time} or not).\n     */\n",
    "123479": "    /**\n     * Clears this context and releases any associated resource. Dead threads\n     * contexts are automatically cleared before finalization.\n     */\n",
    "123484": "    /**\n     * Moves all objects belonging to this pool context to the heap.\n     */\n",
    "123500": "    /**\n     * Returns a factory object possibly recycled or preallocated.\n     * This method is equivalent to <code>object(PoolContext.current())</code>.\n     * \n     * @return a recycled, pre-allocated or new factory object.\n     */\n",
    "123503": "    /**\n     * Cleans-up this factory's objects for future reuse. \n     * When overriden, this method is called on objects being recycled to \n     * dispose of system resources or to clear references to external\n     * objects potentially on the heap (it allows these external objects to\n     * be garbage collected immediately and therefore reduces the memory \n     * footprint).\n     *\n     * @param  obj the object product of this factory being recycled.\n     * @throws UnsupportedOperationException if this factory does not \n     *         support object clean-up (default).\n     */\n",
    "123522": "    /**\n     * Terminates all the concurrent threads associated to this concurrent \n     * context.\n     */\n",
    "123538": "    /**\n     * Returns the original cause of the exception or error.\n     *\n     * @return the exception or error as it has been raised by the\n     *         <code>java.lang.Runnable</code>.\n     */\n",
    "123540": "    /**\n     * Removes all local settings for this context.\n     */\n",
    "123549": "    /**\n     * Returns the text representation of the current value of this \n     * reference.\n     *\n     * @return <code>Text.valueOf(this.get())</code>\n     */\n",
    "123551": "    /**\n     * Overrides parent's <code>toString</code> method.\n     */\n",
    "123557": "    /**\n     * Terminates this thread (called when holder context is disposed).\n     */\n",
    "123558": "    /**\n     * Sets the local value (referent) for this reference.\n     *\n     * @param value the new local value or <code>null</code> to inherit\n     *        the outer value.\n     */\n",
    "123559": "    /**\n     * Returns the default value for this reference.\n     *\n     * @return the defaultValue.\n     */\n",
    "123561": "    /**\n     * Returns the local (non-inherited) value for this reference.\n     *\n     * @return the local value or <code>null</code> if none (value to be \n     *         inherited or not set).\n     */\n",
    "123562": "    /**\n     * Sets the default value for this reference.\n     *\n     * @param  defaultValue the root value.\n     */\n",
    "123563": "    /**\n     * Allows an application to register a real-time content event handler.\n     *\n     * <p> If the application does not register a content handler, all\n     *     content events reported by the SAX parser will be silently\n     *     ignored.</p>\n     *\n     * <p> Applications may register a new or different handler in the\n     *     middle of a parse, and the SAX parser must begin using the new\n     *     handler immediately.</p>\n     *\n     * @param  handler the real-time content handler.\n     * @throws NullPointerException if the handler argument is null.\n     * @see    #getContentHandler\n     */\n",
    "123565": "\t/** \n\t * Sets the xml document writer.\n\t * \n\t * @param writer the document writer.\n\t * @return <code>this</code>\n\t */\n",
    "123566": "    /**\n     * Returns the current real-time content handler.\n     *\n     * @return the current real-time content handler, or <code>null</code>\n     *         if none has been registered.\n     * @see    #setContentHandler\n     */\n",
    "123567": "\t/** \n\t * Sets the indentation sequence (default none).\n\t * \n\t * @param indent a character sequence containing spaces or a tabulation character.\n\t */\n",
    "123569": "\t/** \n\t * Sets the prolog to write at the beginning of the xml document\n\t * (default none).\n\t * \n\t * @param prolog the character sequence to be written at the beginning \n\t *        of the document.\n\t */\n",
    "123571": "    /**\n     * Allows an application to register an error event handler.\n     *\n     * <p> If the application does not register an error handler, all\n     *     error events reported by the SAX parser will be silently\n     *     ignored; however, normal processing may not continue.  It is\n     *     highly recommended that all SAX applications implement an\n     *     error handler to avoid unexpected bugs.</p>\n     *\n     * <p> Applications may register a new or different handler in the\n     *     middle of a parse, and the SAX parser must begin using the new\n     *     handler immediately.</p>\n     *\n     * @param  handler the error handler.\n     * @throws NullPointerException if the handler argument is null.\n     * @see    #getErrorHandler\n     */\n",
    "123574": "    /**\n     * Returns the current error handler.\n     *\n     * @return the current error handler, or <code>null</code> if none\n     *         has been registered.\n     * @see    #setErrorHandler\n     */\n",
    "123578": "    /**\n     * Parses an XML document from the specified input stream (UTF-8 encoding).\n     *\n     * @param in the input stream with UTF-8 encoding.\n     * @throws org.xml.sax.SAXException any SAX exception, possibly\n     *         wrapping another exception.\n     * @throws IOException an IO exception from the parser,\n     *         possibly from a byte stream or character stream\n     *         supplied by the application.\n     * @see    javolution37.javolution.io.Utf8StreamReader\n     */\n",
    "123583": "    /**\n     * Parses an XML document from the specified <code>ByteBuffer</code>\n     * (UTF-8 encoding).\n     *\n     * @param  byteBuffer the byte buffer with UTF-8 encoding.\n     * @throws org.xml.sax.SAXException any SAX exception, possibly\n     *         wrapping another exception.\n     * @throws IOException an IO exception from the parser,\n     *         possibly from a byte stream or character stream\n     *         supplied by the application.\n     * @see    javolution37.javolution.io.Utf8ByteBufferReader\n     */\n",
    "123586": "    /**\n     * Parses an XML document using the specified reader.\n     *\n     * @param  reader the document reader.\n     * @throws SAXException any SAX exception, possibly wrapping another\n     *         exception.\n     * @throws IOException an IO exception from the parser, possibly from\n     *         a byte stream or character stream supplied by the application.\n     */\n",
    "123605": "    /**\n     * Receives notification of a warning. The default behaviour is to take no\n     * action.\n     *\n     * @param  e the warning information encapsulated in a SAX parse exception.\n     * @throws org.xml.sax.SAXException any SAX exception.\n     */\n",
    "123606": "    /**\n     * Allows an application to register an entity resolver (ignored by this\n     * parser).\n     *\n     * @param resolver the entity resolver.\n     */\n",
    "123608": "    /**\n     * Receives notification of recoverable parser error. The default behaviour\n     * is to take no action.\n     *\n     * @param  e the error information encapsulated in a SAX parse exception.\n     * @throws org.xml.sax.SAXException any SAX exception.\n     */\n",
    "123609": "    /**\n     * Reports a fatal XML parsing error. The default behaviour is to throw\n     * the specified exception.\n     *\n     * @param  e the error information encapsulated in a SAX parse exception.\n     * @throws org.xml.sax.SAXException any SAX exception.\n     */\n",
    "123613": "    /**\n     * Returns the current entity resolver.\n     *\n     * @return the current entity resolver, or <code>null</code> if none\n     *         has been registered.\n     * @see    #setEntityResolver\n     */\n",
    "123620": "    /**\n     * Allows an application to register a DTD handler (ignored by this parser).\n     *\n     * @param handler the DTD handler.\n     */\n",
    "123625": "    /**\n     * Returns the current DTD handler.\n     *\n     * @return the current DTD handler, or <code>null</code> if none\n     *         has been registered.\n     * @see    #setDTDHandler\n     */\n",
    "123750": "    /**\n     * Clear the attribute list for reuse.\n     */\n",
    "123753": "    /**\n     * Adds a new attribute whose values is to be hold by the specified \n     * {@link TextBuilder}.\n     * \n     * @param qName the qualified (prefixed) name.\n     * @return an empty text builder to hold the attribute value.\n     */\n",
    "123754": "    /**\n     * Removes the attribute at the specified index.\n     * \n     * @param index \n     * @param value the attribute value.\n     */\n",
    "123755": "    /**\n     * Converts a String to a CharSequence (for J2ME compatibility)\n     * \n     * @param str the String to convert.\n     * @return the corresponding CharSequence instance.\n     */\n",
    "123757": "    /**\n     * Returns the string representation of these attributes.\n     * \n     * @return this attributes textual representation.\n     */\n",
    "123759": "    /**\n     * Sets the document namespaces for this writer.\n     *\n     * @param  prefix the namespace prefix or an empty sequence to set \n     *         the default namespace.\n     * @param  uri the namespace uri.\n     * @throws IllegalArgumentException if the prefix is \"j\" (reserved for \n     *         the \"http://javolution.org\" uri).\n     */\n",
    "123760": "    /**\n     * Maps a namespace to a Java package. The specified prefix is used to \n     * shorten the class name of the object being serialized.\n     *\n     * @param  prefix the namespace prefix or empty sequence to set \n     *         the default namespace.\n     * @param  packageName of the package associated to the specified prefix.\n     * @throws IllegalArgumentException if the prefix is \"j\" (reserved for \n     *         the \"http://javolution.org\" uri).\n     */\n",
    "123761": "    /**\n     * Writes the specified object to the given writer in XML format.\n     * The writer is closed after serialization. To serialize multiple \n     * objects over a persistent connection {@link XmlOutputStream}\n     * should be used instead.\n     *\n     * @param  obj the object to format.\n     * @param  writer the writer to write to.\n     * @throws IOException if there's any problem writing.\n     */\n",
    "123763": "    /**\n     * Writes the specified object to the given output stream in XML format. \n     * The characters are written using UTF-8 encoding. \n     * The output streamwriter is closed after serialization. To serialize \n     * multiple objects over a persistent connection {@link XmlOutputStream}\n     * should be used instead.\n     *\n     * @param  obj the object to format.\n     * @param  out the output stream to write to.\n     * @throws IOException if there's any problem writing.\n     */\n",
    "123769": "    /**\n     * Resets all internal data maintained by this writer including any \n     * namespace associations; objects previously written will not be\n     * referred to, they will be send again.\n     */\n",
    "123771": "    /**\n     * Enables/disables xml elements cross references (default \n     * <code>false</code>).\n     * When enabled, identifiers attributes are added during serialization; \n     * the name of these attributes is defined by {@link XmlFormat#identifier}.\n     * \n     * @param enabled <code>true</code> if an unique identifier attribute is\n     *        added to objects being serialized; <code>false</code> otherwise.\n     */\n",
    "123773": "    /**\n     * Controls whether or not references are expanced (default \n     * <code>false</code>). References are not expanded if currently \n     * being expanded (to avoid infinite recursion).\n     * \n     * @param value <code>true</code> to expand references;\n     *        <code>false</code> otherwise.\n     * @see   XmlFormat#identifier \n     */\n",
    "123775": "    /**\n     * Enables/disables class identifier attributes (default <code>true<code>).\n     * Disabling the class identifier should only be done if the serialized\n     * objects does not need to be deserialized (e.g. pure xml formatting).\n     * \n     * @param enabled <code>true</code> to allow for an additional \"j:class\"\n     *        attribute; <code>false</code> otherwise. \n     * @see   XmlElement#add(Object)\n     * @see   XmlElement#add(Object, String)\n     */\n",
    "123777": "    /**\n     * Sets the element name or the root object.\n     * \n     * @param name the name of the root element.\n     */\n",
    "123778": "    /**\n     * Creates an object from its XML representation read from\n     * the specified <code>Reader</code>. This method reads until the  \n     * end of stream; to read multiple objects over a persistent connection\n     * {@link XmlInputStream} should be used instead.\n     *\n     * @param  reader the reader containing the XML representation of the\n     *         object being created.\n     * @return the object corresponding to the xml root element.\n     * @throws XmlException if the object cannot be created.\n     */\n",
    "123779": "    /**\n     * Creates an object from its XML representation read from\n     * the specified <code>InputStream</code>. This method reads until the  \n     * end of stream; to read multiple objects over a persistent connection\n     * {@link XmlInputStream} should be used instead.\n     *\n     * @param  in the input stream containing the XML representation of the\n     *         object being created.\n     * @return the object corresponding to the xml root element.\n     * @throws XmlException if the object cannot be created.\n     */\n",
    "123780": "    /**\n     * Creates an object from its XML representation read from\n     * the specified <code>ByteBuffer</code>. This method reads from \n     * the current buffer position up to the buffer's limit.\n     *\n     * @param  byteBuffer the byte buffer containing the XML representation \n     *         of the object being created.\n     * @return the object corresponding to the xml root element.\n     * @throws XmlException if the object cannot be created.\n     */\n",
    "123783": "    /**\n     * Resets this object reader; objects previously read cannot be refered to,\n     * they will have to be send again.\n     */\n",
    "123791": "    /**\n     * Returns the length of this character sequence.\n     *\n     * @return the number of characters (16-bits Unicode) composing this\n     *         character sequence.\n     */\n",
    "123792": "    /**\n     * Returns the character at the specified index.\n     *\n     * @param  index the index of the character starting at <code>0</code>.\n     * @return the character at the specified index of this character sequence.\n     * @throws IndexOutOfBoundsException  if <code>((index < 0) || \n     *         (index >= length))</code>\n     */\n",
    "123793": "    /**\n     * Returns a new character sequence that is a subsequence of this sequence.\n     *\n     * @param  start the index of the first character inclusive.\n     * @param  end the index of the last character exclusive.\n     * @return the character sequence starting at the specified\n     *         <code>start</code> position and ending just before the specified\n     *         <code>end</code> position.\n     * @throws IndexOutOfBoundsException if <code>(start < 0) || (end < 0) ||\n     *         (start > end) || (end > this.length())</code>\n     */\n",
    "123794": "    /**\n     * Returns the <code>String<code> corresponding to this character\n     * sequence. The <code>String</code> returned is always allocated on the\n     * heap and can safely be referenced elsewhere.\n     *\n     * @return the <code>java.lang.String</code> for this character sequence.\n     */\n",
    "123795": "    /**\n     * Returns the hash code for this {@link CharSequenceImpl}.\n     *\n     * <p> Note: Returns the same hashCode as <code>java.lang.String</code>\n     *           (consistent with {@link #equals})</p>\n     *\n     * @return the hash code value.\n     */\n",
    "123797": "    /**\n     * Compares this character sequence against the specified object\n     * (<code>String</code> or <code>CharSequence</code>).\n     *\n     * @param  that the object to compare with.\n     * @return <code>true</code> if both objects represent the same sequence;\n     *         <code>false</code> otherwise.\n     */\n",
    "123798": "    /**\n     * Compares this character sequence against the specified\n     * {@link CharSequenceImpl}.\n     *\n     * @param  that the character sequence to compare with.\n     * @return <code>true</code> if both objects represent the same sequence;\n     *         <code>false</code> otherwise.\n     */\n",
    "123799": "    /**\n     * Compares this character sequence against the specified String.\n     * \n     * @param  chars the character sequence to compare with.\n     * @return <code>true</code> if both objects represent the same sequence;\n     *         <code>false</code> otherwise.\n     */\n",
    "123800": "    /**\n     * Compares this character sequence against the specified character\n     * sequence.\n     * \n     * @param  chars the character sequence to compare with.\n     * @return <code>true</code> if both objects represent the same sequence;\n     *         <code>false</code> otherwise.\n     */\n",
    "123804": "    /**\n     * Returns the default namespace.\n     */\n",
    "123805": "    /**\n     * Returns the numbers of elements in the namespace stack for the given\n     * depth.\n     * \n     * @param depth the element depth.\n     */\n",
    "123807": "    /**\n     * Returns the namespace prefix at the specified position.\n     * \n     * @param pos the position in the namespace stack.\n     * @return the namespace prefix.\n     */\n",
    "123808": "    /**\n     * Returns the namespace uri at the specified position.\n     * \n     * @param pos the position in the namespace stack.\n     * @return the namespace uri.\n     */\n",
    "123810": "    /**\n     * Returns the namespace for the specified prefix or the default \n     * namespace is the prefix is <code>null</code>.\n     * \n     * @param prefix the prefix to search for or <code>null</code>.\n     * @return the associated namespace uri.\n     */\n",
    "123811": "    /**\n     * Adds the specified mapping to the current mapping buffer.\n     *\n     * @param  prefix the prefix to be mapped or <code>null</code> to \n     *         map the defaut namespace.\n     * @param  uri the associated uri.\n     * @throws SAXException any SAX exception, possibly wrapping another\n     *         exception.\n     */\n",
    "123813": "    /**\n     * Flushes the current mapping buffer (equivalent to push() then pop()).\n     */\n",
    "123814": "    /**\n     * Sets the byte buffer this parser is going to process\n     * (UTF-8 encoding).\n     *\n     * @param  byteBuffer the byte buffer with UTF-8 encoding.\n     * @see    Utf8ByteBufferReader\n     */\n",
    "123815": "    /**\n     * Pushes the current namespaces.\n     */\n",
    "123816": "    /**\n     * Pops the current namespaces.\n     */\n",
    "123818": "    /**\n     * Resizes internal arrays.\n     */\n",
    "123821": "    /**\n     * Sets the input stream this parser is going to process\n     * (UTF-8 encoding).\n     *\n     * @param in the input stream with UTF-8 encoding.\n     * @see    Utf8StreamReader\n     */\n",
    "123846": "    /**\n     * Sets the underlying input source for this stream.\n     * \n     * @param in the input source.\n     * @return <code>this</code> \n     * @throws IllegalStateException if this stream is being reused and \n     *         it has not been {@link #close closed} or {@link #reset reset}.\n     */\n",
    "123847": "    /**\n     * Reads an object from the underlying stream using an {@link ObjectReader}.\n     * \n     * @return the object read from its xml representation. \n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123851": "    /**\n     * Reads the next byte of data from the input stream.\n     * \n     * @return the next byte of data, or -1 if the end of the stream is reached.\n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123856": "        /**\n         * Resumes reading after an {@link XmlOutputStream#END_UTF8} byte \n         * is encountered. \n         */\n",
    "123859": "    /**\n     * Returns SAX-2 like attributes for the current element.\n     * \n     * @return the attributes of the current element.\n     */\n",
    "123870": "    /**\n     * Returns the Java(tm) class corresponding to this XML element;\n     * the class is identified by the tag name of this xml element or the <code>\n     * \"j:class\" attribute when present. \n     *\n     * @return this XML element's corresponding class.\n     */\n",
    "123873": "    /**\n     * Returns the content handler used during serialization (typically\n     * a {@link javolution37.javolution.xml.sax.WriterHandler WriterHandler}).\n     *\n     * @return the content handler receiving the SAX-2 events.\n     */\n",
    "123877": "    /**\n     * Sets the underlying output destination for this stream.\n     * \n     * @param out the output destination.\n     * @return <code>this</code> \n     * @throws IllegalStateException if this stream is being reused and \n     *         it has not been {@link #close closed} or {@link #reset reset}.\n     */\n",
    "123878": "    /**\n     * Writes an object to the underlying stream using an {@link ObjectWriter}.\n     * \n     * @param obj the object writen using its xml representation. \n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123880": "    /**\n     * Writes the specified byte to this output stream\n     * \n     * @param b the byte. \n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123881": "    /**\n     * Flushes this output stream and forces any buffered output bytes \n     * to be written out.\n     *  \n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123883": "    /**\n     * Writes the specified number of bytes from the specified byte array \n     * starting at the specified offset to this output stream. \n     * \n     * @param b the data.\n     * @param off the start offset in the data.\n     * @param len the number of bytes to write. \n     * @throws IOException if an I/O error occurs.\n     */\n",
    "123892": "    /**\n     * Returns the name to be used when objects associated to this \n     * format are added with no name specified (default <code>null</code>\n     * the element name is the object class name).\n     *\n     * @return the default element name for objects using this format.\n     */\n",
    "123895": "    /**\n     * Returns the index of the first character in this character data.\n     *\n     * @return the first character index.\n     */\n",
    "123898": "    /**\n     * Adds the specified object as a named nested element of known type\n     * (<code>null</code> objects are ignored). \n     *\n     * @param obj the object added as nested element or <code>null</code>.\n     * @param qName the qualified name of the nested element.\n     * @param clazz the class identifying the xml format to use.\n     */\n",
    "123899": "    /**\n     * Returns the character at the specified index.\n     *\n     * @param  index the index of the character.\n     * @return the character at the specified index.\n     * @throws IndexOutOfBoundsException if index is negative, or index \n     *         is equal or greater than <code>this.length()</code>.\n     */\n",
    "123900": "    /**\n     * Returns a subsequence of this character data.\n     *\n     * @param  start the index of the first character inclusive.\n     * @param  end the index of the last character exclusive.\n     * @return a character data subsequence of this one.\n     * @throws IndexOutOfBoundsException if <code>(start < 0) || (end < 0) ||\n     *         (start > end) || (end > this.length())</code>\n     */\n",
    "123902": "    /**\n     * Returns the names of the identifiers attributes when cross-reference \n     * is enabled. The default implementation returns \n     *  <code>isReference ? \"j:ref\" : \"j:id\"</code>. \n     * Format sub-classes may override this method to use different \n     * attribute names. This method may also return <code>null</code> for \n     * objects exclusively manipulated by value (e.g. immutable objects).\n     *\n     * @param isReference indicates if the attribute name returned is for\n     *        a reference or an identifier.\n     * @return the name of the attribute identifier or <code>null</code>\n     *         if references should not be used.\n     * @see ObjectWriter#setReferencesEnabled(boolean)\n     */\n",
    "123903": "    /**\n     * Calls supermethod and updates layout in a new thread. It also set the\n     * symboltables for the childs.\n     */\n",
    "123904": "    /**\n     * Creates a new attribute for this xml element.\n     * \n     * This method allows for custom attribute formatting. For example:[code]\n     *     // Formats the color RGB value in hexadecimal.\n     *     xml.newAttribute(\"color\").append(_color.getRGB(), 16);\n     *     \n     *     // Formats the error using 4 digits.\n     *     xml.newAttribute(\"error\").append(error, 4, false, false);[/code]\n     *\n     * @param  name the attribute name.\n     * @return the text builder to hold the attribute value.\n     */\n",
    "123907": "    /**\n     * Gets the column width of the alpha table.\n     * \n     * @return column width\n     */\n",
    "123908": "    /**\n     * Allocates a new object corresponding to this xml element.\n     * By default, the {@link XmlElement#object} method returns an object \n     * created using the deserialized class public no-arg constructor.\n     * Xml formats may perform custom allocations by overriding this method.  \n     *\n     * @param xml the xml elements.\n     * @return the object corresponding to the specified xml element.\n     */\n",
    "123909": "    /**\n     * Gets the mouse listener of the underlying coefficients tables.\n     * \n     * @return java.awt.event.MouseListener\n     */\n",
    "123910": "    /**\n     * Sets the specified <code>CharSequence</code> attribute\n     * (<code>null</code> values are ignored).\n     *\n     * @param  name the attribute name.\n     * @param  value the attribute value or <code>null</code>.\n     */\n",
    "123912": "    /**\n     * Gets the precision of the underlying coefficients tables.\n     * \n     * @return precision\n     */\n",
    "123913": "    /**\n     * Gets the cell renderer of the underlying coefficients tables.\n     * \n     * @return javax.swing.table.TableCellRenderer\n     */\n",
    "123915": "    /**\n     * Sets the specified <code>String</code> attribute\n     * (<code>null</code> values are ignored).\n     *\n     * @param  name the attribute name.\n     * @param  value the attribute value.\n     */\n",
    "123916": "    /**\n     * Gets the lag that this equation term starts with. Usually this is -1.\n     * \n     * @return int start lag\n     */\n",
    "123917": "\t/**\n\t * Adds only those columns that are in the sub matrix range.\n\t * \n\t * \n\t * @param tc the column to add\n\t */\n",
    "123918": "\t/**\n\t * Gets the index represented by this part.\n\t * \n\t * @return index\n\t */\n",
    "123919": "\t/**\n\t * Gets the number of columns of this table model.\n\t * \n\t * @return col number\n\t */\n",
    "123921": "\t/**\n\t * Sets the index of this part of the equation.\n\t * \n\t * @param arg index\n\t */\n",
    "123923": "\t/**\n\t * Sets the number of columns in this model.\n\t * \n\t * @param arg number of columns\n\t */\n",
    "123924": "    /**\n     * Gets the symbolname for the coefficients.\n     * \n     * @return symbol name\n     */\n",
    "123925": "    /**\n     * Gets the data object storing the subset restrictions or <code>null</code>\n     * if no subset restrictions are set.\n     * \n     * @return data object with subset restrictions\n     */\n",
    "123926": "    /**\n     * Gets the underlying <code>SubMatModel</code>.\n     * \n     * @return sub matrix model\n     */\n",
    "123927": "    /**\n     * Gets the symbolname for the subset restrictions or <code>null</code> if\n     * none was set.\n     * \n     * @return symbol name\n     */\n",
    "123928": "    /**\n     * Gets the symbolname for the lags. Ther underlying data must be a\n     * <code>JSCInt</code>.\n     * \n     * @return symbol name\n     */\n",
    "123929": "    /**\n     * Manages visibility of this component.\n     */\n",
    "123930": "    /**\n     * Sets the column count of this table.\n     * \n     * @param arg\n     *            number of cols\n     */\n",
    "123932": "    /**\n     * Sets the column model for all columns of this table. Works only, if a\n     * submatrix model was set before.\n     * \n     * @param newModel\n     *            the table model\n     * @throws IllegalStateException\n     *             <code>if (subMatrixModel != null)</code>\n     */\n",
    "123933": "    /**\n     * Gets the symbolname for the subset restrictions corresponding to the\n     * coefficients.\n     * \n     * @return symbol name\n     */\n",
    "123934": "    /**\n     * Sets the specified <code>boolean</code> attribute.\n     * \n     * @param  name the attribute name.\n     * @param  value the <code>boolean</code> value for the specified attribute.\n     * @see    #getAttribute(String, boolean)\n     */\n",
    "123935": "    /**\n     * Sets the index denoting the part in the equation for this table.\n     * \n     * @param arg\n     *            equation index\n     */\n",
    "123936": "    /**\n     * Sets the symbol name of the subset restrictions that correspond to the\n     * coefficients displayed in this table. How the restrictions affect the\n     * behaviour of this table is determined by the cell renderer, mouse\n     * listener, editor and table popup.\n     * \n     * @param newSymbolNameSubsetRes\n     * @throws IllegalArgumentException\n     *             if <code>newSymbolNameSubsetRes</code> is not a valid name\n     *             for a symbol\n     */\n",
    "123937": "    /**\n     * Gets the symbolname for the names of the variables.\n     * \n     * @return symbol name\n     */\n",
    "123939": "    /**\n     * Extends the super method by firering the (boolean) property change\n     * \"visible\".\n     * \n     * @param aFlag\n     *            true to make the component visible\n     */\n",
    "123941": "    /**\n     * Manages visibility of this table on table changed events.\n     */\n",
    "123942": "    /**\n     * Gets the popup menu for the underlying coefficients tables.\n     * \n     * @return popup menu\n     */\n",
    "123943": "\t/**\n\t * Gets the column width of the alpha table.\n\t * \n\t * @return column width\n\t */\n",
    "123945": "    /**\n     * Gets whether the underlying coefficients tables are editable.\n     * \n     * @return <code>true</code> if editable\n     */\n",
    "123946": "\t/**\n\t * Gets the mouse listener of the underlying coefficients\n\t * tables.\n\t * \n\t * @return java.awt.event.MouseListener\n\t */\n",
    "123947": "    /**\n     * Sets the specified <code>int</code> attribute.\n     * \n     * @param  name the attribute name.\n     * @param  value the <code>int</code> value for the specified attribute.\n     * @see    #getAttribute(String, int)\n     */\n",
    "123948": "\t/**\n\t * Gets the precision of the underlying coefficients\n\t * tables.\n\t * \n\t * @return precision\n\t */\n",
    "123950": "\t/**\n\t * Gets the cell renderer of the underlying coefficients\n\t * tables.\n\t * \n\t * @return javax.swing.table.TableCellRenderer\n\t */\n",
    "123951": "    /**\n     * Manages visibility of tis term.\n     * \n     * @param evt\n     *            property change event\n     */\n",
    "123952": "\t/**\n\t * Gets the symbolname for the alpha coefficients.\n\t * \n\t * @return symbol name \n\t */\n",
    "123953": "\t/**\n\t * Gets the symbolname for the subset restrictions\n\t * corresponding to the alpha coefficients.\n\t * \n\t * @return symbol name \n\t */\n",
    "123954": "    /**\n     * Sets the column width of the underlying coefficients tables.\n     * \n     * @param colWidth\n     *            column width\n     */\n",
    "123955": "\t/**\n\t * Gets the symbolname for the beta coefficients\n\t * of the endogenous variables.\n\t * \n\t * @return symbol name \n\t */\n",
    "123957": "\t/**\n\t * Gets the symbolname for the beta coefficients\n\t * of the restricted deterministic variables.\n\t * \n\t * @return symbol name \n\t */\n",
    "123958": "\t/**\n\t * Gets the symbolname for the subset restrictions\n\t * corresponding to the beta coefficients of the\n\t * restricted deterministic variables.\n\t * \n\t * @return symbol name \n\t */\n",
    "123959": "    /**\n     * Sets whether the underlying coefficients tables are editable.\n     * \n     * @param isEditable\n     *            <code>true</code> if editable\n     */\n",
    "123960": "    /**\n     * Sets the specified <code>long</code> attribute.\n     * \n     * @param  name the attribute name.\n     * @param  value the <code>long</code> value for the specified attribute.\n     * @see    #getAttribute(String, long)\n     */\n",
    "123961": "\t/**\n\t * Gets the symbolname for the subset restrictions\n\t * corresponding to the beta coefficients of the\n\t * endogenous variables.\n\t * \n\t * @return symbol name \n\t */\n",
    "123962": "\t/**\n\t * Gets the symbolname for the names of the deterministic\n\t * variables.\n\t * \n\t * @return symbol name \n\t */\n",
    "123963": "    /**\n     * Manages visibility of the leading sign label.\n     * \n     * @param isVisible\n     *            <code>true</code> if visible\n     */\n",
    "123965": "\t/**\n\t * Gets the symbolname for the names of the endogenous\n\t * variables.\n\t * \n\t * @return symbol name \n\t */\n",
    "123966": "\t/**\n\t * Gets whether the underlying coefficients tables\n\t * are editable.\n\t * \n\t * @return <code>true</code> if editable\n\t */\n",
    "123967": "    /**\n     * Sets the symbol scope, which defines which symbol table to use (\n     * <code>local</code>,<code>global</code> or <code>upper</code>).\n     * \n     * @param scope\n     *            the symbol scope\n     * @throws IllegalArgumentException\n     *             <code>if (scope == null)</code>\n     */\n",
    "123969": "\t/**\n\t * Sets the column width of the underlying \n\t * coefficients tables.\n\t * \n\t * @param colWidth column width\n\t */\n",
    "123972": "\t/**\n\t * Sets whether the underlying coefficients tables\n\t * are editable.\n\t * \n\t * @param isEditable <code>true</code> if editable\n\t */\n",
    "123973": "    /**\n     * Sets the mouse listener for the underlying coefficients tables.\n     * \n     * @param listener\n     *            java.awt.event.MouseListener\n     */\n",
    "123974": "\t/**\n\t * Manages visibility of the leading sign label.\n\t * \n\t * @param isVisible <code>true</code> if visible\n\t */\n",
    "123975": "\t/**\n\t * Sets the symbol scope, which defines which symbol\n\t * table to use (<code>local</code>, <code>global</code>\n\t * or <code>upper</code>). \n\t * \n\t * @param scope the symbol scope\n\t * @throws IllegalArgumentException <code>if (scope == null)</code>\n\t */\n",
    "123976": "    /**\n     * Sets the precision for the underlying coefficients tables.\n     * \n     * @param precision\n     */\n",
    "123977": "\t/**\n\t * Sets the mouse listener for the underlying coefficients tables.\n\t * \n\t * @param arg java.awt.event.MouseListener\n\t */\n",
    "123978": "    /**\n     * Returns the current element qualified name.\n     *\n     * @return the qualified name of the current element (prefix:localName).\n     */\n",
    "123979": "\t/**\n\t * Sets the precision for the underlying coefficients tables.\n\t *\n\t * @param precision\n\t */\n",
    "123980": "    /**\n     * Sets the cell renderer for the underlying coefficients tables.\n     * \n     * @param renderer\n     *            javax.swing.table.TableCellRenderer\n     */\n",
    "123981": "\t/**\n\t * Sets the cell renderer for the underlying coefficients tables.\n\t * \n\t * @param renderer javax.swing.table.TableCellRenderer\n\t */\n",
    "123983": "\t/**\n\t * Sets the symbolname for the alpha coefficients.\n\t * \n\t * @param symbolName for alpha\n\t */\n",
    "123984": "    /**\n     * Sets with which lag the equation term starts with. Only backward lags are\n     * supported, meaning that startLag must greater or equal to zero.\n     * \n     * @param startLag\n     *            lag to start from\n     * @throws IllegalArgumentException\n     *             <code>if (startLag &lt; 0)</code>\n     */\n",
    "123986": "\t/**\n\t * Sets the symbolname for the subset restrictions\n\t * corresponding to the alpha coefficients.\n\t * \n\t * @param symbolName for alpha restrictions\n\t */\n",
    "123987": "\t/**\n\t * Sets the symbolname for the beta coefficients\n\t * of the endogenous variables.\n\t * \n\t * @param symbolName for beta\n\t */\n",
    "123988": "    /**\n     * Sets the symbolname for the coefficients.\n     * \n     * @param symbolName\n     *            for coefficients\n     */\n",
    "123989": "\t/**\n\t * Sets the symbolname for the beta coefficients\n\t * of the restricted deterministic variables.\n\t * \n\t * @param symbolName for beta_d\n\t */\n",
    "123991": "\t/**\n\t * Sets the symbolname for the subset restrictions\n\t * corresponding to the beta coefficients of the\n\t * restricted deterministic variables.\n\t * \n\t * @param symbolName for beta_d subset restrictions\n\t */\n",
    "123992": "    /**\n     * Sets the symbolname for the lags. Ther underlying data must be a\n     * <code>JSCInt</code>.\n     * \n     * @param newSymbolNameLags\n     */\n",
    "123993": "    /**\n     * Sets the specified <code>Boolean</code> attribute.\n     * \n     * @param  name the name of the attribute.\n     * @param  value the <code>Boolean</code> value for the specified attribute\n     *         or <code>null</code> in which case the attribute is not set.\n     * @see    #getAttribute(String, Boolean)\n     */\n",
    "123994": "\t/**\n\t * Sets the symbolname for the subset restrictions\n\t * corresponding to the beta coefficients of the\n\t * endogenous variables.\n\t * \n\t * @param symbolName for beta subset restrictions\n\t */\n",
    "123995": "\t/**\n\t * Sets the symbolname for the names of the deterministic\n\t * variables.\n\t * \n\t * @param symbolName for deterministics variable names \n\t */\n",
    "123996": "    /**\n     * Sets the symbolname for the subset restrictions corresponding to the\n     * coefficients.\n     * \n     * @param symbolName\n     *            for subset restrictions\n     */\n",
    "123998": "\t/**\n\t * Sets the symbolname for the names of the endogenous\n\t * variables.\n\t * \n\t * @param symbolName for endogenous variable names \n\t */\n",
    "123999": "\t/**\n\t * Gets the index denoting the part of the equation\n\t * that this component belongs to.\n\t * \n\t * @return equation index\n\t */\n",
    "124000": "\t/**\n\t * Helper method to get the formatted index string.\n\t *\n\t * @return String formatted string\n\t *                if index &lt; 0 return (t-index) \n\t *                if index &gt; 0 return (t+index) \n\t *                if index = 0 return (t)\n\t */\n",
    "124001": "\t/**\n\t * Gets whether the time index should be shown. Should be\n\t * <code>false</code> for deterministics.\n\t *\n\t * @return <code>true</code> if shown\n\t */\n",
    "124002": "    /**\n     * Sets the symbolname for the names of the variables.\n     * \n     * @param symbolName\n     *            for the variable names\n     */\n",
    "124003": "\t/**\n\t * Sets the coefficients table to be referenced.\n\t *\n\t * @param newCoeffTable coefficients table\n\t */\n",
    "124004": "\t/**\n\t * Sets the current lag index to be shown.\n\t *\n\t * @param newIndex int\n\t */\n",
    "124005": "\t/**\n\t * Sets whether the time index should be shown. Should be\n\t * <code>false</code> for deterministics.\n\t * \n\t * @param isShowingTimeIndex <code>true</code> if shown\n\t */\n",
    "124008": "\t/**\n\t * Updates the column count and the \"visible\" property.\n\t */\n",
    "124009": "    /**\n     * Sets the specified <code>Byte</code> attribute.\n     * \n     * @param  name the name of the attribute.\n     * @param  value the <code>Byte</code> value for the specified attribute\n     *         or <code>null</code> in which case the attribute is not set.\n     * @see    #getAttribute(String, Byte)\n     */\n",
    "124010": "    /**\n     * Sets the popup menu for the underlying coefficients tables.\n     * \n     * @param newTablePopup\n     *            popup component\n     */\n",
    "124012": "    /**\n     * Manages visibility of scrollbar.\n     * \n     * @param scrollBar\n     */\n",
    "124018": "    /**\n     * Manages visibility of components.\n     * \n     * @param arg\n     *            to updated only index from <code>arg</code> onwards\n     */\n",
    "124020": "    /**\n     * Sets the specified <code>Short</code> attribute.\n     *\n     * @param  name the name of the attribute.\n     * @param  value the <code>Short</code> value for the specified attribute\n     *         or <code>null</code> in which case the attribute is not set.\n     * @see    #getAttribute(String, Short)\n     */\n",
    "124021": "    /**\n     * Returns the maximum dimensions needed to layout the components contained\n     * in the specified target container.\n     * \n     * @param target\n     *            the component which needs to be laid out\n     * @return the maximum dimensions to lay out the subcomponents of the\n     *         specified container.\n     */\n",
    "124023": "    /**\n     * Returns the minimum dimensions needed to layout the components contained\n     * in the specified target container.\n     * \n     * @param target\n     *            the component which needs to be laid out\n     * @return the minimum dimensions to lay out the subcomponents of the\n     *         specified container.\n     */\n",
    "124024": "    /**\n     * Updates layout on symbol events of the underlying lag symbol.\n     * \n     * @param evt\n     *            symbol event\n     */\n",
    "124026": "    /**\n     * Returns the preferred dimensions for this layout given the components in\n     * the specified target container.\n     * \n     * @param target\n     *            the component which needs to be laid out\n     * @return the preferred dimensions to lay out the subcomponents of the\n     *         specified container.\n     * @see Container\n     * @see #minimumLayoutSize\n     * @see java.awt.Container#getPreferredSize\n     */\n",
    "124029": "    /**\n     * Sets the specified <code>Integer</code> attribute.\n     * \n     * @param  name the name of the attribute.\n     * @param  value the <code>Integer</code> value for the specified attribute\n     *         or <code>null</code> in which case the attribute is not set.\n     * @see    #getAttribute(String, Integer)\n     */\n",
    "124030": "\t/**\n\t * Gets the column width of the underlying coefficients table.\n\t * \n\t * @return column width\n\t */\n",
    "124031": "\t/**\n\t * Gets the maximum size, which is equal to the preferred size.\n\t * \n\t * @return java.awt.Dimension\n\t */\n",
    "124032": "\t/**\n\t * Gets the index for the lag.\n\t * \n\t * @return lag index\n\t */\n",
    "124033": "\t/**\n\t * Gets the minimum size that is not less than 20.\n\t * \n\t * @return java.awt.Dimension\n\t */\n",
    "124034": "\t/**\n\t * Gets the preferred size which is not less than the\n\t * minimum size.\n\t * \n\t * @return java.awt.Dimension\n\t */\n",
    "124036": "\t/**\n\t * Sets whether data is available and manages \n\t * visibility accordingly.\n\t * \n\t * @param isDataAvailable <code>true</code> if available, component\n\t *                        will be set visible\n\t */\n",
    "124037": "\t/**\n\t * Gets the precision of the underlying coefficients table.\n\t * \n\t * @return precision\n\t */\n",
    "124038": "\t/**\n\t * Extends the super method by firering the (boolean) property change \"visible\".\n\t * \n\t * @param aFlag  true to make the component visible\n\t */\n",
    "124039": "\t/**\n\t * Gets the cell renderer of the underlying coefficients table.\n\t * \n\t * @return javax.swing.table.TableCellRenderer\n\t */\n",
    "124040": "\t/**\n\t * Gets the current scope, which defines which symbol\n\t * table to use (<code>local</code>, <code>global</code>\n\t * or <code>upper</code>).\n\t * \n\t * @return symbol scope\n\t */\n",
    "124041": "\t/**\n\t * Gets the symbol name for the coefficients.\n\t * \n\t * @return symbol name\n\t */\n",
    "124042": "\t/**\n\t * Sets the symbol scope, which defines which symbol\n\t * table to use (<code>local</code>, <code>global</code>\n\t * or <code>upper</code>). \n\t * \n\t * @param scope the symbol scope\n\t * @throws IllegalArgumentException <code>if (scope == null)</code>\n\t */\n",
    "124045": "\t/**\n\t * Gets the symbol name for the subset restrictions\n\t * that are set for the coefficients.\n\t * \n\t * @return symbol name\n\t */\n",
    "124046": "\t/**\n\t * Delegates <code>setEnabled</code> to all childs of this container.\n\t * \n\t * @param c java.awt.Component[]\n\t * @param enabled boolean\n\t */\n",
    "124047": "\t/**\n\t * Overwrites supermethod to delegate the call to \n\t * all childs.\n\t *\n\t * @param enabled <code>true</code> if enabled\n\t */\n",
    "124048": "\t/**\n\t * Gets the symbol name for the variable names \n\t * corresponding to the coefficients.\n\t * \n\t * @return symbol name\n\t */\n",
    "124049": "    /**\n     * Sets the specified <code>Long</code> attribute.\n     *\n     * @param  name the name of the attribute.\n     * @param  value the <code>Long</code> value for the specified attribute\n     *         or <code>null</code> in which case the attribute is not set.\n     * @see    #getAttribute(String, Long)\n     */\n",
    "124050": "    /**\n     * Redirects <code>out</code> to <code>System.out</code>.\n     * \n     * @param out\n     *            the string to append\n     */\n",
    "124053": "\t/**\n\t * Gets whether a coefficients matrix is required\n\t * to display this equation term. It might be <code>false</code>\n\t * to just display variable names, for example for the residuals.\n\t * \n\t * @return <code>true</code> if coefficients are required\n\t */\n",
    "124054": "/** \n * <i>Overrides super method.</i>\n *\n * @param  c the component for which this border insets value applies\n * @return the insets\n */\n",
    "124056": "\t/**\n\t * Gets whether the underlying coefficients table is editable.\n\t * \n\t * @return <code>true</code> if editable\n\t */\n",
    "124057": "/** \n * Reinitialize the insets parameter with this border's current insets.\n * <i>Overrides super method.</i>\n *\n * @param  c      the component for which this border insets value applies\n * @param  insets the object to be reinitialized\n * @return the insets\n */\n",
    "124058": "\t/**\n\t * Gets whether the matrix displaying the coefficients\n\t * is centered in the term. This is not true for an EC term,\n\t * for example.\n\t * \n\t * @return <code>true</code> if centered\n\t */\n",
    "124059": "/** \n * This default implementation returns false. \n * <i>Overrides super method.</i>\n *\n * @return false\n */\n",
    "124060": "\t/**\n\t * Gets whether the variable names vector should \n\t * have a time index to indicate the lag, \n\t * for example income(t) or income(t-1). This should be \n\t * <code>false</code> for deterministic variables.\n\t * \n\t * @return <code>true</code> if time index shown\n\t */\n",
    "124062": "\t/**\n\t * Manages visibility of this component with respect to\n\t * the available coefficients and the <code>coeffMatRequired</code>\n\t * property.\n\t * \n\t * @param evt property change event\n\t */\n",
    "124063": "\t/**\n\t * Sets whether a coefficients matrix is required\n\t * to display this equation term. It might be <code>false</code>\n\t * to just display variable names, for example for the residuals.\n\t * \n\t * @param isCoeffMatRequired <code>true</code> if coefficients are required\n\t */\n",
    "124066": "\t/**\n\t * Sets the column width of the underlying coefficients\n\t * table.\n\t * \n\t * @param colWidth column width\n\t */\n",
    "124068": "\t/**\n\t * Sets whether the underlying coefficients table is \n\t * editable.\n\t * \n\t * @param isEditable <code>true</code> if editable\n\t */\n",
    "124069": "\t/**\n\t * Sets the lag index of this equation term. It determines\n\t * how the time index is created for the variables.\n\t * \n\t * @param index lag\n\t */\n",
    "124073": "    /**\n     * Gets title of the currently displayed top-level module frame.\n     * \n     * @return top-level frame title, or <code>\"\"</code> if none is displayed\n     */\n",
    "124074": "\t/**\n\t * Sets the mouse listener for the underlying coefficients table.\n\t * \n\t * @param listener java.awt.event.MouseListener\n\t */\n",
    "124076": "\t/**\n\t * Sets the precision for the underlying coefficients table.\n\t *\n\t * @param precision\n\t */\n",
    "124077": "\t/**\n\t * Sets the cell renderer for the underlying coefficients table.\n\t * \n\t * @param renderer javax.swing.table.TableCellRenderer\n\t */\n",
    "124079": "\t/**\n\t * Sets whether the variable names vector should \n\t * have a time index to indicate the lag, \n\t * for example income(t) or income(t-1). This should be \n\t * <code>false</code> for deterministic variables.\n\t * \n\t * @param isShowingTimeIndex <code>true</code> if time index shown\n\t */\n",
    "124080": "\t/**\n\t * Sets the symbol name for the coefficients.\n\t * \n\t * @param symbolName for coefficients\n\t */\n",
    "124082": "\t/**\n\t * Sets the symbol name for the subset restrictions\n\t * that are set for the coefficients.\n\t * \n\t * @param symbolName for subset restrictions\n\t */\n",
    "124083": "\t/**\n\t * Sets the symbol name ffor the variable names \n\t * corresponding to the coefficients.\n\t * \n\t * @param symbolName for variable names\n\t */\n",
    "124084": "    /**\n     * Removes the specified attribute.\n     * \n     * @param  name the name of the attribute to remove.\n     */\n",
    "124086": "\t/**\n\t * Sets the popup menu for the underlying coefficients\n\t * tables.\n\t * \n\t * @param newTablePopup popup component\n\t */\n",
    "124088": "\t/**\n\t * Sets the symbol scope, which defines which symbol\n\t * table to use (<code>local</code>, <code>global</code>\n\t * or <code>upper</code>). \n\t * \n\t * @param scope the symbol scope\n\t * @throws IllegalArgumentException <code>if (scope == null)</code>\n\t */\n",
    "124092": "    /**\n     * Returns the pull parser used during deserialization.\n     *\n     * @return the pull parser.\n     */\n",
    "124096": "        /**\n         * Gets the constructed object or an instance of <code>Exception</code>\n         * if an error happened. Clients should check this and handle the\n         * exception.\n         * \n         * @return the constructed object or a <code>Exception</code>\n         */\n",
    "124098": "    /**\n     * Indicates if more nested elements can be read.\n     *\n     * @return <code>true</code> if more nested elements can be read; \n     *         <code>false</code> otherwise.\n     */\n",
    "124104": "    /**\n     * Returns the attributes for this xml element (parsing or formatting).\n     *\n     * @return the attributes mapping.\n     */\n",
    "124110": "    /**\n     * Searches for the attribute having the specified name.\n     *\n     * @param  name the qualified name of the attribute (qName).\n     * @return the value for the specified attribute or <code>null</code>\n     *         if the attribute is not found.\n     */\n",
    "124114": "    /**\n     * Indicates if the specified attribute is present.\n     *\n     * @param  name the qualified name of the attribute (qName).\n     * @return <code>true</code> if this xml element contains the specified\n     *         attribute; <code>false</code> otherwise.\n     */\n",
    "124118": "    /**\n     * Returns the specified <code>CharSequence</code> attribute.\n     *\n     * @param  name the name of the attribute.\n     * @param  defaultValue a default value.\n     * @return the value for the specified attribute or\n     *         the <code>defaultValue</code> if the attribute is not found.\n     */\n",
    "124121": "    /**\n     * Invoked when this action is called. Creates the respective component if\n     * it has not been created before and calls <code>showCard</code> of the\n     * parent <code>CardDisplayPanel</code>.\n     * \n     * @param arg1\n     *            argument is ignored and can be <code>null</code>\n     */\n",
    "124122": "    /**\n     * Gets the component defined via <code>className</code> in the\n     * constructor. If this method is called the first time, the component is\n     * first created.\n     * \n     * @return the component that has been defined via its class name in the\n     *         constructor of this action, if the object construction failes, am\n     *         empty <code>JPanel</code> with a message is returned\n     */\n",
    "124123": "    /**\n     * Returns the specified <code>String</code> attribute.\n     *\n     * @param  name the name of the attribute.\n     * @param  defaultValue a default value.\n     * @return the value for the specified attribute or\n     *         the <code>defaultValue</code> if the attribute is not found.\n     */\n",
    "124124": "    /**\n     * Gets the calculator.\n     * \n     * @return TS calculator frame\n     */\n",
    "124131": "    /**\n     * Sets current text.\n     *\n     * @param  start the start index.\n     * @param  end the end index.\n     */\n",
    "124132": "/**\n * Gets a reference to the underlying result field.\n * \n * @return the result field\n */\n",
    "124134": "    /**\n     * Returns the specified <code>boolean</code> attribute.\n     *\n     * @param  name the name of the attribute searched for.\n     * @param  defaultValue the value returned if the attribute is not found.\n     * @return the <code>boolean</code> value for the specified attribute or\n     *         the default value if the attribute is not found.\n     */\n",
    "124135": "/**\n * Returns a string representation of <code>ResultFieldPopup</code>.\n * \n * @return string representation\n */\n",
    "124136": "    /**\n     * Gets the tool bar.\n     * \n     * @return tool bar\n     */\n",
    "124140": "    /**\n     * Action method that is invoked, when an action event is catched.\n     * \n     * @param evt\n     *            the action event\n     * @throws IllegalStateException\n     *             if <code>HelpBroker</code> was not initialized via\n     *             <code>startHelpWorker</code> before\n     */\n",
    "124141": "    /**\n     * Returns the specified <code>int</code> attribute. This method handles\n     * string formats that are used to represent octal and hexadecimal numbers.\n     *\n     * @param  name the name of the attribute searched for.\n     * @param  defaultValue the value returned if the attribute is not found.\n     * @return the <code>int</code> value for the specified attribute or\n     *         the default value if the attribute is not found.\n     */\n",
    "124146": "    /**\n     * Returns the specified <code>long</code> attribute. This method handles\n     * string formats that are used to represent octal and hexadecimal numbers.\n     *\n     * @param  name the name of the attribute searched for.\n     * @param  defaultValue the value returned if the attribute is not found.\n     * @return the <code>long</code> value for the specified attribute or\n     *         the default value if the attribute is not found.\n     */\n",
    "124161": "\t/**\n\t * Component gained focus, set editing <code>true</code> and add \n\t * <code>AWTEventListener</code>.\n\t */\n",
    "124164": "\t/**\n\t * Lazily initialize the listener.\n\t * \n\t * @return AWTEventListener\n\t */\n",
    "124165": "\t/**\n\t * Called by the validation mechanism if an event possibly moves input focus\n\t * away from this component but input validation fails (<code>validateInput() != null</code>).\n\t * The default implementation displays the error message <code>msg</code>, but this can\n\t * be overwritten by subclasses.\n\t *\n\t * @param msg error message returned from  <code>validateInput</code>\n\t */\n",
    "124167": "\t/**\n\t * Calls supermethod and finds window to set as parent\n\t * for potential error messages.\n\t */\n",
    "124168": "    /**\n     * Searches for the specified <code>Boolean</code> attribute.\n     *\n     * @param  name the name of the attribute.\n     * @param  defaultValue the value returned if the attribute is not found.\n     * @return the <code>Boolean</code> value for the specified attribute or\n     *         the default value if the attribute is not found.\n     */\n",
    "124171": "    /**\n     * Gets the split pane.\n     * \n     * @return tool bar\n     */\n",
    "124172": "\t/**\n\t * Sets the text but preserves selection and caret position\n\t * if possible. The text should be valid, because it also updates\n\t * the <code>lastValidText</code> field. Input validation is only\n\t * done, when the new text differs from this to avoid afluent\n\t * calls to the validation routine.\n\t * \n\t * @param text the string to set\n\t */\n",
    "124173": "\t/**\n\t * Triggers input validation if the underlying text has changed.\n\t * \n\t * @return should return <code>null</code> if ok, error message otherwise\n\t */\n",
    "124174": "    /**\n     * Searches for the specified <code>Byte</code> attribute.\n     *\n     * @param  name the name of the attribute.\n     * @param  defaultValue the value returned if the attribute is not found.\n     * @return the <code>Byte</code> value for the specified attribute or\n     *         the default value if the attribute is not found.\n     */\n",
    "124180": "    /**\n     * Gets the ID according to the component name.\n     * \n     * @param key\n     *            the name of a component\n     * @return the mapped helpID\n     */\n",
    "124181": "    /**\n     * Gets the output control frame.\n     * \n     * @return output control frame\n     */\n",
    "124184": "\t/**\n\t * Gets the currently selected name.\n\t * \n\t * @return the validated name\n\t */\n",
    "124185": "\t/**\n\t * Error handling routine if validation failed. Displays error message\n\t * and sets back string value to the last valid one..\n\t * \n\t * @param msg an error message\n\t */\n",
    "124186": "\t/**\n\t * Sets the selected name to <code>newVarName</code>,\n\t * validates it and automatically sets it to lower case. \n\t * \n\t * @param  newVarName the new selected name\n\t * @throws IllegalArgumentException if <code>newVarName</code> is not valid\n\t */\n",
    "124187": "    /**\n     * Searches for the specified <code>Short</code> attribute.\n     *\n     * @param  name the name of the attribute.\n     * @param  defaultValue the value returned if the attribute is not found.\n     * @return the <code>Short</code> value for the specified attribute or\n     *         the default value if the attribute is not found.\n     */\n",
    "124191": "    /**\n     * Gets the symbol control frame.\n     * \n     * @return symbol control frame\n     */\n",
    "124195": "    /**\n     * Searches for the specified <code>Integer</code> attribute.\n     *\n     * @param  name the name of the attribute.\n     * @param  defaultValue the value returned if the attribute is not found.\n     * @return the <code>Integer</code> value for the specified attribute or\n     *         the default value if the attribute is not found.\n     */\n",
    "124196": "    /**\n     * This method initializes this\n     * \n     * @return void\n     */\n",
    "124198": "    /**\n     * This method initializes jPanel\n     * \n     * @return javax.swing.JPanel\n     */\n",
    "124199": "    /**\n     * This method initializes jScrollPane\n     * \n     * @return javax.swing.JScrollPane\n     */\n",
    "124201": "    /**\n     * This method initializes jTable\n     * \n     * @return javax.swing.JTable\n     */\n",
    "124202": "    /**\n     * This method initializes jPanel1\n     * \n     * @return javax.swing.JPanel\n     */\n",
    "124203": "    /**\n     * Updates list if symbol changed.\n     */\n",
    "124204": "    /**\n     * Gets the dialog that is used as about box.\n     * \n     * @return initialized <code>JDialog</code>\n     */\n",
    "124205": "    /**\n     * This method initializes okButton\n     * \n     * @return javax.swing.JButton\n     */\n",
    "124206": "    /**\n     * Searches for the specified <code>Long</code> attribute.\n     *\n     * @param  name the name of the attribute.\n     * @param  defaultValue the value returned if the attribute is not found.\n     * @return the <code>Long</code> value for the specified attribute or\n     *         the default value if the attribute is not found.\n     */\n",
    "124209": "    /**\n     * This method initializes cancelButton\n     * \n     * @return javax.swing.JButton\n     */\n",
    "124212": "    /**\n     * Sets the application settings to be displayed.\n     * \n     * @param appSettings\n     * @throws IllegalArgumentException\n     *             <code>if (appSettings == null)</code>\n     */\n",
    "124213": "    /**\n     * Gets the application settings that are currently set.\n     * \n     * @return application settings\n     */\n",
    "124217": "    /**\n     * Gets the logging component that implements\n     * <code>com.jstatcom.io.Logger</code>.\n     * \n     * @return logger instance\n     */\n",
    "124218": "    /**\n     * Overrides <code>addNotify</code> to retrieve data objects as soon as\n     * the component hierarchy is established.\n     * \n     */\n",
    "124223": "    /**\n     * Removes all data from the list model and wipes out all selection\n     * information.\n     * \n     */\n",
    "124226": "    /**\n     * Gets an instance of <code>AbstractImportPanel</code>. If another\n     * import panel should be used, then this method must be overriden to return\n     * a different handler component. The default panel is\n     * <code>TSImportPanel</code>.\n     * \n     * @return initialized <code>AbstractImportPanel</code>\n     */\n",
    "124227": "    /**\n     * Deselects all checkboxes in this list and fires a property change event.\n     */\n",
    "124228": "\t/**\n\t * Gets the current number format type.\n\t * \n\t * @return the format type in use\n\t */\n",
    "124229": "\t/**\n\t * Gets the currently displayed number range. This range is always\n\t * of type <code>CLOSED</code> an can never have +/- Infinity bounds.\n\t * \n\t * @return the (closed) selected number range\n\t */\n",
    "124231": "\t/**\n\t * Gets the overall range that the range input is checked against.\n\t * \n\t * @return current overall number range\n\t */\n",
    "124232": "\t/**\n\t * Gets the current overall number range displayed as a string, for\n\t * example <code>[1,100] or (\"lowerBound_p\", 20]</code>.\n\t * \n\t * @return string representation of overall number range\n\t */\n",
    "124233": "    /**\n     * Flushes the current start element.\n     */\n",
    "124234": "    /**\n     * Gets the title of the border displayed arround this list.\n     * \n     * @return the title string\n     * @see #setBorderTitle\n     */\n",
    "124235": "\t/**\n\t * Gets the precision for the displayed numbers.\n\t * \n\t * @return number count right to the decimal point\n\t */\n",
    "124236": "    /**\n     * Gets the import data frame. It uses the panel from\n     * <code>getImportPanel</code>.\n     * \n     * @return panel to be used as status bar\n     */\n",
    "124237": "\t/**\n\t * Error handling routine if validation failed. Displays error message\n\t * and sets back number value to the last valid one..\n\t * \n\t * @param msg an error message\n\t */\n",
    "124238": "    /**\n     * Gets the symbol identifier for the data object of the data displayed.\n     * \n     * @return the symbol name\n     */\n",
    "124241": "    /**\n     * Gets the symbol identifier for the current selection state. The state is\n     * stored as an <code>int</code> array, where 1 indicates a selection.\n     * \n     * @return the symbol name for the selection state\n     */\n",
    "124242": "    /**\n     * Moves the parser to the next valid token.\n     * \n     * @return the current event.\n     */\n",
    "124243": "\t/**\n\t * Sets the overall range that the range input is checked against.\n\t * The currently displayed range is automatically validated\n\t * against the new overall range. If the current range is not valid,\n\t * it automatically set to a legal value within \n\t * <code>newNumberRange</code>.\n\t * \n\t * @param newNumberRange the overall number range for validation,\n\t *        if <code>null</code> then a range of (-Infinity,+Infinity)\n\t *        is set.\n\t */\n",
    "124244": "    /**\n     * Called whenever the part throws an exception.\n     * \n     * @param exception\n     *            Exception\n     */\n",
    "124245": "\t/**\n\t * Sets the range to be checked against by specifying a\n\t * string of the form <code>[\"(\", \"[\"] lowerBound \",\" upperBound + [\"]\", \")\"]</code>,\n\t * where <code>lowerbound/upperBound</code> are either a number or a\n\t * symbolname, for example\n\t * <code>[lowerBound_p, upperBound_p] or (0, upperBound_x] or [1,10]</code>.\n\t * <p>\n\t * If the range is specified without symbol names, it is set\n\t * immediately. If the range depends on symbols to be loaded from\n\t * a symbol table, this is postponed to the next <code>FOCUS_GAINED</code> event.\n\t * In the meantime, the default non-validating <code>(-Infinity,Infinity) </code>\n\t * range is used.\n\t * \n\t * @param  expr the expression to be parsed\n\t * @throws IllegalArgumentException if <code>expr == null</code>\n\t *         or if it cannot be parsed to a valid range\n\t */\n",
    "124247": "\t/**\n\t * Sets number of digits right to decimal point.\n\t *\n\t * @param  newPrecision new number precision\n\t * @throws IllegalArgumentException if <code>newPrecision &lt; 0 </code> \n\t */\n",
    "124249": "\t/**\n\t * Sets the currently selected range by specifying a\n\t * string with lower bound and upper bound seperated by\n\t * a komma, for example <code>1, 100</code>.\n\t * Symbol names are not allowed for the bounds but have to be \n\t * specified separately by the respective accessor methods.  \n\t * \n\t * @param  expr string containing komma separated bounds\n\t * @throws IllegalArgumentException if bounds are not enclosed\n\t *         in overall range or expr could not be parsed to a\n\t *         valid range of type <code>CLOSED</code>\n\t */\n",
    "124250": "    /**\n     * Notifies there is a problem setting the attribute.\n     */\n",
    "124255": "\t/**\n\t * Close the splash screen and free any resources associated with it.\n\t * This method is thread safe and can be called from any thread.\n\t */\n",
    "124256": "\t/**\n\t * Show or hide the splash screen. \n\t * @param show True to display the splash screen\n\t */\n",
    "124257": "\t/**\n\t * Updates the status bar. This method is thread safe and can be called from\n\t * any thread.\n\t * @param message The message to display\n\t * @param percent The percentage towards completion\n\t */\n",
    "124258": "    /**\n     * Sets the border title of this list. If invoked, an\n     * <code>EtchedBorder</code> with the title defined in\n     * <code>borderTitle</code> is wrapped around this list. The title is\n     * displayed <code>top left</code>.\n     * \n     * @param borderTitle\n     *            the title to be displayed,\n     *            <code>if ( borderTitle == null || borderTitle.length() == 0 )</code>\n     *            then a simple <code>EtchedBorder</code> is displayed\n     * \n     * @see #getBorderTitle\n     */\n",
    "124262": "    /**\n     * Notifies that an xml element has not been read fully.\n     * \n     * @throws XmlPullParserException \n     */\n",
    "124267": "    /**\n     * Sets the data that should be displayed in the list. The argument is\n     * specified as a data object that is queried for the number of rows. The\n     * first element in each row is then added. Typically it contains a\n     * representation of a 1-dimensional string array. The <code>toString</code>\n     * method is queried for the label of the repective item to display.\n     * \n     * @param dataKeys\n     *            the data object with the elements to add, it must not be\n     *            <code>null</code>\n     * @throws IllegalArgumentException\n     *             <code>if (dataKeys == null)</code>\n     */\n",
    "124269": "    /**\n     * Updates display when symbol changed. This method does nothing if the\n     * symbol is cleared.\n     * \n     * @param evt\n     *            the symbol event\n     */\n",
    "124272": "    /**\n     * Overrides <code>addNotify</code> to retrieve data objects as soon as\n     * the component hierarchy is established.\n     * \n     */\n",
    "124273": "    /**\n     * Sets the symbol name to retrieve data from. The symbol data is never\n     * overwritten by the data that might have been set before to this list, but\n     * just read from the symbol.\n     * \n     * @param newSymbolName\n     *            the symbol name\n     * @throws IllegalArgumentException\n     *             <code>if (JSCConstants.isValidName(newSymbolName) != null)</code>\n     */\n",
    "124274": "    /**\n     * Calls super method and sets range, if at least one range bound is\n     * specified by a symbol name. This ensures that the correct data for the\n     * upper and lower bounds are retrieved, when this component is edited.\n     * \n     * @throws IllegalArgumentException\n     *             if overall range is not in a legal state according to the\n     *             symbols for the bounds\n     */\n",
    "124277": "    /**\n     * Sets the symbol name to store the selection state to. The selection state\n     * is never retrieved from the symbol object.\n     * \n     * @param newSymbolNameSelected\n     *            the symbol name for the selection state\n     * @throws IllegalArgumentException\n     *             <code>if (JSCConstants.isValidName(newSymbolNameSelected) != null)</code>\n     */\n",
    "124279": "    /**\n     * Stores the current selection state to the selection symbol if one has\n     * been set.\n     */\n",
    "124284": "    /**\n     * Format the specified object to this xml element using the specified \n     * format.\n     * \n     * @param obj the object to format.\n     * @param xmlFormat the xml format to use.\n     */\n",
    "124285": "    /**\n     * Template method that gets the splash image.\n     * \n     * @return string default: \"/images/splashdefault.gif\"\n     */\n",
    "124286": "    /**\n     * Gets the currently displayed number as an <code>int</code>.\n     * \n     * @return current number\n     */\n",
    "124287": "    /**\n     * Updates the display according to the symbol.\n     * \n     */\n",
    "124288": "    /**\n     * Gets the currently displayed number as <code>double</code>.\n     * \n     * @return the selected number as <code>double</code>\n     */\n",
    "124289": "    /**\n     * Sets the symbol scope.\n     * \n     * @param scope\n     * @throws IllegalArgumentException\n     *             <code>if (scope == null)</code>\n     */\n",
    "124292": "    /**\n     * Gets the range that the input is checked against.\n     * \n     * @return current number range\n     */\n",
    "124293": "    /**\n     * Template method that is called by skeleton method to start splash screen.\n     * It calls <code>getVersion</code> and <code>getSplashImage</code>.\n     */\n",
    "124300": "    /**\n     * Gets the current number range displayed as a string, for example\n     * <code>[1,100] or [\"lowerBound_p\", 20]</code>.\n     * \n     * @return string representation of number range\n     */\n",
    "124303": "    /**\n     * Template method that sets the frame size and location to a reasonable\n     * default depending on the screen size. The default size is 820 x 600.\n     */\n",
    "124304": "    /**\n     * Gets the symbol identifier for the data object of the selected number.\n     * \n     * @return the symbol name\n     */\n",
    "124306": "    /**\n     * Appends <code>text</code> to the text area without scrolling to the\n     * end. This happens always within the <code>EventDispatchingThread</code>.\n     * \n     * @param text\n     *            the string to append to the text\n     */\n",
    "124308": "    /**\n     * Error handling routine if validation failed. Displays error message and\n     * sets back number value to the last valid one..\n     * \n     * @param msg\n     *            an error message\n     */\n",
    "124310": "    /**\n     * Clears the text area from text. This happens always within the\n     * <code>EventDispatchingThread</code>.\n     */\n",
    "124313": "    /**\n     * Sets the currently displayed number with checking whether it conforms to\n     * the specified range. This method fires a \"number\" property change with\n     * the old value and the changed value, if a new number was set.\n     * \n     * @param val\n     *            the number to be displayed\n     * @throws IllegalArgumentException\n     *             if <code>val</code> is not contained in range\n     */\n",
    "124314": "    /**\n     * Gets the label with author and version info. Can be overriden by\n     * subclasses to change formatting.\n     * \n     * @return <code>MultiLineLabel</code> with formatted author and version\n     *         info\n     */\n",
    "124317": "    /**\n     * Gets the default display font size.\n     * \n     * @return the default font size\n     */\n",
    "124319": "    /**\n     * Gets the currently displayed font size.\n     * \n     * @return the font size\n     */\n",
    "124323": "    /**\n     * Gets the maximum size for the font displaying the text.\n     * \n     * @return maximum size\n     */\n",
    "124326": "    /**\n     * Gets the minimum size for the font displaying the text.\n     * \n     * @return minimum size\n     */\n",
    "124327": "    /**\n     * Sets the range that the number input is checked against. The currently\n     * displayed number is automatically validated against the new range. If the\n     * current number is not valid, it automatically set to a legal value within\n     * <code>newNumberRange</code>. This also updates the symbol.\n     * \n     * @param newNumberRange\n     *            the number range for validation, if <code>null</code> then a\n     *            range of (-Infinity,+Infinity) is set.\n     */\n",
    "124331": "    /**\n     * Gets the currently used RIGHT mouse <code>JPopupMenu</code>.\n     * \n     * @return the currently used RIGHT mouse popup\n     */\n",
    "124335": "    /**\n     * Gets the text displayed in the text area\n     * \n     * @return the displayed text\n     */\n",
    "124337": "\t/**\n\t * Overwrites superclass method to register itself as\n\t * property change listener to newly added menus.\n\t *\n\t * @param item the item to add to this menu\n\t */\n",
    "124338": "\t/**\n\t * Checks, whether there are any enabled items\n\t * and disables/enables this menu accordingly.\n\t *\n\t * @param e a property change event, responds only to\n\t *          <code>enabled</code> property\n\t */\n",
    "124339": "    /**\n     * Gets the underlying text area.\n     * \n     * @return the text area of this <code>ResultField</code>\n     */\n",
    "124341": "        /**\n         * If this child was visible, then make the first remaining child\n         * visible.\n         */\n",
    "124345": "    /**\n     * Printing support method to enable multi page printing.\n     * \n     * @return the assembled <code>Book</code> object to print\n     */\n",
    "124348": "    /**\n     * Prints the text in the text area in a new printer thread.\n     * \n     */\n",
    "124349": "    /**\n     * Sets the symbol name to retrieve and store data from.\n     * \n     * @param newSymbolName\n     *            the symbol name\n     * @throws IllegalArgumentException\n     *             <code>if (JSCConstants.isValidName(newSymbolName) != null)</code>\n     */\n",
    "124350": "    /**\n     * Return the index of the first (and one would hope - only) visible child.\n     * If a visible child can't be found, perhaps the caller has inexlicably\n     * hidden all of the children, then return -1.\n     */\n",
    "124353": "    /**\n     * Hide the currently visible child \"card\" and show the specified card. If\n     * the specified card isn't a child of the CardPanel then we add it here.\n     */\n",
    "124354": "    /**\n     * Saves the text in this component to a file. First ask to select the file\n     * to write to.\n     */\n",
    "124355": "    /**\n     * Validates input against the specified range whenever necessary. This\n     * method is invoked by the superclass and does not need to be called\n     * manually.\n     * \n     * @return <code>null</code> if ok, an error message otherwise\n     */\n",
    "124356": "    /**\n     * Show the card with the specified name.\n     * \n     * @see java.awt.Component#getName\n     */\n",
    "124357": "    /**\n     * Show the first card that was added to this CardPanel.\n     */\n",
    "124358": "    /**\n     * Sets whether editing is allowed. This happens always within the\n     * <code>EventDispatchingThread</code>.\n     * \n     * @param newEditable\n     *            <code>true</code> if editable\n     */\n",
    "124359": "    /**\n     * Show the last card that was added to this CardPanel.\n     */\n",
    "124361": "    /**\n     * Sets the currently displayed font size. This happens always within the\n     * <code>EventDispatchingThread</code>.\n     * \n     * @param newFontSize\n     *            the font size\n     */\n",
    "124362": "    /**\n     * Show the card that was added to this CardPanel after the currently\n     * visible card. If the currently visible card was added last, then show the\n     * first card.\n     */\n",
    "124364": "    /**\n     * Show the card that was added to this CardPanel before the currently\n     * visible card. If the currently visible card was added first, then show\n     * the last card.\n     */\n",
    "124367": "    /**\n     * Sets the symbol scope.\n     * \n     * @param scope\n     * @throws IllegalArgumentException\n     *             <code>if (scope == null)</code>\n     */\n",
    "124369": "    /**\n     * Sets a new popup whose <code>processMouseEvent</code> method is called,\n     * when a <code>mouseReleased</code> event occured.\n     * \n     * @param newRfPopup\n     *            if <code>null</code> then it is just removed\n     */\n",
    "124371": "    /**\n     * Gets the 4x1 array holding location and size of the frame.\n     * \n     * @return bounds array\n     */\n",
    "124372": "    /**\n     * Sets <code>text</code> to the text area. This happens always within the\n     * <code>EventDispatchingThread</code>.\n     * \n     * @param text\n     *            the string to set as text\n     */\n",
    "124373": "    /**\n     * Sets the 4x1 array holding location and size of the frame.\n     * \n     * @param frameBounds\n     * @throws IllegalArgumentException\n     *             <code>if (frameBounds == null) </code>\n     */\n",
    "124374": "    /**\n     * Gets the position of the splitpane divider.\n     * \n     * @return position of divider\n     */\n",
    "124375": "    /**\n     * Gets whether the underlying symbol is stored as <code>JSCTypes.INT</code>\n     * or as <code>JSCTypes.NUMBER</code>.\n     * \n     * @return <code>true</code> if <code>JSCTypes.INT</code>\n     */\n",
    "124377": "    /**\n     * Sets the position of the splitpane divider.\n     * \n     * @param splitLocation\n     *            as integer\n     * @throws IllegalArgumentException\n     *             <code>if (splitLocation == null) </code>\n     */\n",
    "124378": "    /**\n     * Gets <code>JSCInt</code> indicating whether output is on.\n     * \n     * @return <code>JSCInt</code>\n     */\n",
    "124379": "    /**\n     * Sets whether output is on.\n     * \n     * @param isOutputOn\n     *            as integer\n     * @throws IllegalArgumentException\n     *             <code>if (isOutputOn == null) </code>\n     */\n",
    "124380": "    /**\n     * Whether <code>append</code> scrolls down or not.\n     * \n     * @return\n     */\n",
    "124381": "\t/**\n\t * Updates the displayed text if changes happen.\n\t * \n\t * @param evt the event\n\t */\n",
    "124383": "    /**\n     * Sets whether the underlying symbol is stored as <code>JSCTypes.INT</code>\n     * or as <code>JSCTypes.NUMBER</code>. The default is\n     * <code>JSCTypes.NUMBER</code>. It will only take effect after a new\n     * symbol name or scope has been set.\n     * \n     * @param b\n     *            if <code>true</code> then <code>JSCTypes.INT</code> if\n     *            <code>false</code> then <code>JSCTypes.NUMBER</code>\n     * \n     */\n",
    "124384": "\t/**\n\t * Overrides <code>addNotify</code> to retrieve\n\t * data objects as soon as the component hierarchy is\n\t * established. \n\t * \n\t */\n",
    "124385": "    /**\n     * Set whether <code>append</code> scrolls down or not.\n     * \n     * @param appendWithoutScroll if <code>true</code> do not scroll, default is <code>false</code> (do scroll down)\n     */\n",
    "124386": "\t/**\n\t * Gets the data stored in the respective symboltable\n\t * for the symbol identifier set in <code>symbolName</code>.\n\t * \n\t * @return the data for the symbol name\n\t */\n",
    "124387": "\t/**\n\t * Gets the type definition of the symbol that is currently displayed.\n\t * \n\t * @return the symbol def for the data object\n\t */\n",
    "124389": "\t/**\n\t * Sets the type definition of the symbol to be displayed.\n\t * \n\t * @param newSymbolDef the symbol def for the data object\n\t */\n",
    "124391": "\t/**\n\t * Sets the text for this label.\n\t * \n\t */\n",
    "124396": "    /**\n     * Gets <code>JSCInt</code> indicating whether save last state is on.\n     * \n     * @return <code>JSCInt</code>\n     */\n",
    "124398": "    /**\n     * Gets <code>JSCInt</code> indicating whether the symbol table data table\n     * elements should be editable.\n     * \n     * @return <code>JSCInt</code>\n     */\n",
    "124400": "    /**\n     * Gets <code>JSCInt</code> indicating whether exit Dialog should be\n     * shown.\n     * \n     * @return <code>JSCInt</code>\n     */\n",
    "124401": "    /**\n     * Gets <code>JSCInt</code> indicating whether explorer panel should be\n     * shown.\n     * \n     * @return <code>JSCInt</code>\n     */\n",
    "124402": "    /**\n     * Sets the symbol table node that represents this table in a\n     * <code>SymbolTree</code>.\n     * \n     * @param node\n     *            to representthis table\n     */\n",
    "124408": "    /**\n     * Gets the symbol table node that represents this table in a\n     * <code>SymbolTree</code>.\n     * \n     * @return node representing this table\n     */\n",
    "124410": "    /**\n     * Tests whether a given number is enclosed in this range and returns a\n     * formatted message if not. If the number is either POS_INF, NEG_INF or\n     * NaN, it is never enclosed in the range.\n     * \n     * @param number\n     *            the value to check\n     * @return null if <code>number</code> is contained, message if not\n     */\n",
    "124413": "    /**\n     * Sets the contents of <code>table</code> to this symbol table by\n     * applying the following rules:\n     * <ul>\n     * <li>if a symbol is only part of <code>table</code> but not of\n     * <code>this</code>, then a new symbol with the same name is created in\n     * this table and the reference to the underlying <code>JSCData</code>\n     * instance is copied\n     * <li>if <code>table</code> and <code>this</code> contain symbols with\n     * the same name, then the reference to the underlying <code>JSCData</code>\n     * instance is copied from the symbol of the argument table to this table\n     * <li>all symbols that are part of this table but not of the argument\n     * table are left untouched\n     * </ul>\n     * <p>\n     * This operation does not change the argument symbol table, but by copying\n     * references its symbols might be affected by operations on this table\n     * afterwards.\n     * <p>\n     * This method does not copy any listeners from <code>table</code> to\n     * <code>this</code>. Listeners of this table are not changed by this\n     * operation, except that they are notified via events in case of relevant\n     * changes.\n     * \n     * @param table\n     *            the symbol table from which symbol are copied to this table\n     * @throws IllegalArgumentException\n     *             <code>if (table == null)</code>\n     */\n",
    "124416": "    /**\n     * Calls supermethod and finds parent instance of <code>SymbolScope</code>.\n     * If no parent scope can be found, global and local will return the same\n     * <code>SymbolTable</code>, meaning that this component will hold the\n     * global table.\n     */\n",
    "124420": "    /**\n     * Tests whether a given range is completely enclosed within this range and\n     * returns a formatted message if not. A range cannot be enclosed, if one of\n     * its bounds is POS_INF or NEG_INF.\n     * \n     * @param numberRange\n     *            the range to check\n     * @return null if <code>numberRange</code> is contained, message if not\n     */\n",
    "124424": "\t/**\n\t * Gets a string representation of this.\n\t * \n\t * @return informative string representation\n\t */\n",
    "124426": "    /**\n     * Provides logical equals check.\n     * \n     * @param o\n     *            another range to compare with\n     * @return <code>true</code> if lower bound, upper bound and range type\n     *         are all equal\n     */\n",
    "124430": "    /**\n     * Gets a string representation of this range with a special formatter. If\n     * <code>formatter == null</code>, this is identical to\n     * <code>toString</code>.\n     * \n     * @param formatter\n     *            a number formatter for the bounds, can be <code>null</code>\n     * @return a string in mathematical notation\n     */\n",
    "124431": "    /**\n     * Gets the local symbol table that is only visible to this panel. The name\n     * of this symbol table is equal to <code>getName</code>. If the name is\n     * empty, the classname is used instead. The parent is the upper symbol\n     * table.\n     * \n     * @return the local symbol table\n     */\n",
    "124432": "    /**\n     * Clears <code>this</code> data object. Fires:\n     * <ul>\n     * <li><code>JSCDataEventTypes.EMPTY_STATE</code> event\n     * <li><code>JSCDataEventTypes.VALUE_CHANGED</code> event\n     * </ul>\n     * if it was not empty before. After calling this method\n     * <code>isEmpty</code> returns <code>true</code>.\n     */\n",
    "124433": "    /**\n     * Gets whether <code>date</code> is enclosed by this range.\n     * \n     * @param date\n     *            the <code>JSCDate</code> to be checked\n     * @return <code>true</code> if <code>date</code> ist enclosed by\n     *         <code>this</code>\n     * @throws IllegalArgumentException\n     *             <code>if (date == null)</code> or\n     *             <code>if (date.isEmpty())</code> or\n     *             <code>if (isEmpty())</code>\n     */\n",
    "124434": "    /**\n     * Empty default imlementation for <code>Card</code> interface. This\n     * method is only invoked if this component is shown or hidden by a\n     * <code>CardDisplayPanel</code>.\n     * \n     * @param isShown\n     *            <code>true</code> if shown in <code>CardDisplayPanel</code>,\n     *            <code>false</code> if hidden\n     */\n",
    "124435": "    /**\n     * Gets the lower bound for this range.\n     * \n     * @return lower bound\n     */\n",
    "124437": "    /**\n     * Gets whether <code>dRange</code> is enclosed by this range.\n     * \n     * @param dRange\n     *            the <code>JSCDRange</code> to be checked\n     * @return <code>true</code> if <code>dRange</code> ist enclosed by\n     *         <code>this</code>\n     * @throws IllegalArgumentException\n     *             <code>if (dRange == null)</code> or\n     *             <code>if (dRange.isEmpty())</code> or\n     *             <code>if (isEmpty())</code>\n     */\n",
    "124440": "    /**\n     * Gets the interval type for this range.\n     * \n     * @return range type\n     */\n",
    "124444": "    /**\n     * Gets the upper bound for this range.\n     * \n     * @return upper bound\n     */\n",
    "124447": "    /**\n     * Clears <code>this</code> data object. Fires:\n     * <ul>\n     * <li><code>JSCDataEventTypes.EMPTY_STATE</code> event\n     * <li><code>JSCDataEventTypes.VALUE_CHANGED</code> event\n     * </ul>\n     * if it was not empty before. After calling this method\n     * <code>isEmpty</code> returns <code>true</code>.\n     */\n",
    "124448": "    /**\n     * Gets the type of this <code>JSCData</code> object.\n     * \n     * @return <code>JSCTypes.DRANGE</code>\n     */\n",
    "124449": "    /**\n     * Overrides <code>hashCode</code>, because equals was overwritten. The\n     * algorithm was taken from <cite>(Joshua Bloch, \"Effective Java\", Item 8)</cite>.\n     * \n     * @return the hash code\n     */\n",
    "124452": "    /**\n     * Sets the value of this to <code>newValue</code>. Fires a\n     * <code>JSCDataEvent</code> of type:\n     * <ul>\n     * <li><code>JSCDataEventTypes.VALUE_CHANGED</code> if\n     * <code>!newValue.equals(getString())</code>\n     * <li><code>JSCDataEventTypes.EMPTY_STATE</code> if\n     * <code>newValue != null</code> and this was empty before\n     * <li><code>JSCDataEventTypes.EMPTY_STATE</code> if\n     * <code>newValue == null</code> and this was not empty before\n     * </ul>\n     * \n     * @param newValue\n     *            the new value\n     */\n",
    "124455": "    /**\n     * Gets string representation of this range.\n     * \n     * @return a string in mathematical notation\n     */\n",
    "124456": "    /**\n     * Gets the type of this <code>JSCData</code> object.\n     * \n     * @return <code>JSCTypes.STRING</code>\n     */\n",
    "124457": "    /**\n     * Adds <code>i</code> periods to this date.\n     * \n     * @param i\n     *            number of periods, can also be negative, nothing changes\n     *            <code>if (i == 0)</code>\n     * @throws IllegalStateException\n     *             <code>isEmpty</code>\n     */\n",
    "124458": "    /**\n     * Gets an empty instance of this typedef with the same name.\n     * \n     * @return empty <code>JSCData</code> object of <code>type</code>\n     */\n",
    "124460": "    /**\n     * Clears <code>this</code> data object. Fires:\n     * <ul>\n     * <li><code>JSCDataEventTypes.EMPTY_STATE</code> event\n     * <li><code>JSCDataEventTypes.VALUE_CHANGED</code> event\n     * </ul>\n     * if it was not empty before. After calling this method\n     * <code>isEmpty</code> returns <code>true</code>.\n     */\n",
    "124474": "    /**\n     * Gets the type of this <code>JSCData</code> object.\n     * \n     * @return <code>JSCTypes.DATE</code>\n     */\n",
    "124476": "    /**\n     * Gets the respective icon that visualizes the type.\n     * \n     * @return icon for visualization of this type\n     */\n",
    "124477": "    /**\n     * Lazily initializes <code>eventSupport</code>\n     * \n     * @return <code>SymbolEventSupport</code> instance\n     */\n",
    "124481": "    /**\n     * Gets a list with all registered listeners for <code>evtType</code>.\n     * \n     * @param evtType\n     *            the event type\n     * @return a copy of the respective list or an initialized list instance\n     *         with size == 0 if no listeners are registered for\n     *         <code>evtType</code>\n     */\n",
    "124492": "    /**\n     * Clears <code>this</code> data object. Fires:\n     * <ul>\n     *  <li><code>JSCDataEventTypes.EMPTY_STATE</code> event\n     *  <li><code>JSCDataEventTypes.VALUE_CHANGED</code> event\n     * </ul>\t\n     * if it was not empty before. After calling this\n     * method <code>isEmpty</code> returns <code>true</code>.\n     */\n",
    "124495": "    /**\n     * Sets the value of this to <code>newValue</code> and fires\n     * a <code>JSCDataEvent</code> of type:\n     * <ul>\n     *  <li><code>JSCDataEventTypes.VALUE_CHANGED</code> if <code>!newValue.equals(getNumber())</code>  \n     *  <li><code>JSCDataEventTypes.EMPTY_STATE</code> if <code>newValue != null</code> and this was empty before\n     *  <li><code>JSCDataEventTypes.EMPTY_STATE</code> if <code>newValue == null</code> and this was not empty before\n     * </ul>\n     * \n     * @param newValue the new value\n     */\n",
    "124498": "    /**\n     * Gets the element belonging to <code>key</code> and returns the\n     * underying value or <code>null</code> otherwise.\n     * \n     * @param key\n     *            must be non <code>null</code>, otherwise arbitrary\n     * @return object belonging to <code>key</code>, may be <code>null</code>\n     *         if it was set to <code>null</code> or if <code>key</code>\n     *         does not exist\n     * @throws IllegalArgumentException\n     *             <code>if (key == null)</code>\n     */\n",
    "124499": "    /**\n     * Sets the value of this to <code>newDouble</code>. Fires\n     * a <code>JSCDataEvent</code> of type:\n     * <ul>\n     *  <li><code>JSCDataEventTypes.VALUE_CHANGED</code> if the new value is not equal to the previous \n     *  <li><code>JSCDataEventTypes.EMPTY_STATE</code> if this was empty before\n     * </ul>\n     * \n     * @param newDouble the new <code>double</code>\n     */\n",
    "124501": "    /**\n     * Checks whether <code>key</code> is contained.\n     * \n     * @param key\n     *            to check for\n     * @return <code>true</code> if contained, <code>false</code> otherwise\n     * @throws IllegalArgumentException\n     *             <code>if (key == null)</code>\n     */\n",
    "124502": "    /**\n     * Gets the type of this <code>JSCData</code> object.\n     *\n     * @return <code>JSCTypes.NUMBER</code>\n     */\n",
    "124503": "    /**\n     * Gets string representation of this object.\n     * \n     * @return a string\n     */\n",
    "124504": "    /**\n     * Gets the type of this <code>JSCData</code> object.\n     * \n     * @return <code>JSCTypes.MAP</code>\n     */\n",
    "124505": "    /**\n     * Gets a string representation of this.\n     * \n     * @return informative string representation\n     */\n",
    "124508": "    /**\n     * Dispatches <code>evt</code> by calling <code>valueChanged</code> of\n     * all registered listeners to events of type <code>evt.getType</code>.\n     * \n     * @param evt\n     *            the event to be dispatched\n     * @throws IllegalArgumentException\n     *             <code>if (evt == null)</code>\n     */\n",
    "124510": "    /**\n     * Removes <code>evtListener</code> from all listener lists. Nothing\n     * happens if <code>evtListener</code> is currently not a listener.\n     * \n     * @param evtListener\n     *            the <code>JSCDataListener</code> to be removed\n     * @throws IllegalArgumentException\n     *             <code>if (evtListener == null)</code>\n     */\n",
    "124512": "    /**\n     * Gets a string representation of this.\n     * \n     * @return informative string representation\n     */\n",
    "124513": "    /**\n     * Clears <code>this</code> data object. Fires:\n     * <ul>\n     * <li><code>JSCDataEventTypes.EMPTY_STATE</code> event\n     * <li><code>JSCDataEventTypes.VALUE_CHANGED</code> event\n     * </ul>\n     * if it was not empty before. After calling this method\n     * <code>isEmpty</code> returns <code>true</code>.\n     */\n",
    "124518": "    /**\n     * Gets the type of this <code>JSCData</code> object.\n     * \n     * @return <code>JSCTypes.VOID</code>\n     */\n",
    "124519": "    /**\n     * Checks whether the indices are valid, throws exception if not.\n     * \n     * @param i\n     *            the row index\n     * @param j\n     *            the column index\n     * @throws IllegalArgumentException\n     *             if indices out of range\n     */\n",
    "124523": "    /**\n     * Clears <code>this</code> data object. Fires:\n     * <ul>\n     * <li><code>JSCDataEventTypes.EMPTY_STATE</code> event\n     * <li><code>JSCDataEventTypes.VALUE_CHANGED</code> event\n     * </ul>\n     * if it was not empty before. After calling this method\n     * <code>isEmpty</code> returns <code>true</code>.\n     */\n",
    "124525": "    /**\n     * Clears <code>this</code> data object. Fires:\n     * <ul>\n     * <li><code>JSCDataEventTypes.EMPTY_STATE</code> event\n     * <li><code>JSCDataEventTypes.VALUE_CHANGED</code> event\n     * </ul>\n     * if it was not empty before. After calling this method\n     * <code>isEmpty</code> returns <code>true</code>.\n     */\n",
    "124528": "    /**\n     * Sets the value of this to <code>newValue</code> and fires a\n     * <code>JSCDataEvent</code> of type:\n     * <ul>\n     * <li><code>JSCDataEventTypes.VALUE_CHANGED</code> if\n     * <code>!newValue.equals(getNumber())</code>\n     * <li><code>JSCDataEventTypes.EMPTY_STATE</code> if\n     * <code>newValue != null</code> and this was empty before\n     * <li><code>JSCDataEventTypes.EMPTY_STATE</code> if\n     * <code>newValue == null</code> and this was not empty before\n     * </ul>\n     * \n     * @param newValue\n     *            the new value\n     */\n",
    "124529": "    /**\n     * Gets the status bar. The default returns\n     * <code>DefaultPCallControl.getInstance</code>.\n     * \n     * @return panel to be used as status bar\n     */\n",
    "124530": "    /**\n     * Sets the value of this to <code>newInt</code>. Fires a\n     * <code>JSCDataEvent</code> of type:\n     * <ul>\n     * <li><code>JSCDataEventTypes.VALUE_CHANGED</code> if the new value is\n     * not equal to the previous\n     * <li><code>JSCDataEventTypes.EMPTY_STATE</code> if this was empty\n     * before\n     * </ul>\n     * \n     * @param newInt\n     *            the new <code>int</code>\n     */\n",
    "124532": "    /**\n     * Gets the type of this <code>JSCData</code> object.\n     * \n     * @return <code>JSCTypes.INT</code>\n     */\n",
    "124534": "    /**\n     * Adds <code>evtListener</code> to the list of listeners for events of\n     * type <code>evtType</code>.\n     * \n     * @param evtListener\n     *            the <code>SymbolListener</code> that gets notified whenever\n     *            an event of <code>evtType</code> occurs\n     * @param evtType\n     *            the event type\n     * @throws IllegalArgumentException\n     *             <code>if (evtListener == null || evtType == null)</code>\n     */\n",
    "124538": "    /**\n     * Removes <code>evtListener</code> from all listener lists. Nothing\n     * happens if <code>evtListener</code> is currently not a listener.\n     * \n     * @param evtListener\n     *            the <code>SymbolListener</code> to be removed\n     * @throws IllegalArgumentException\n     *             <code>if (evtListener == null)</code>\n     */\n",
    "124541": "    /**\n     * Gets the global symbol table for this internal frame and all child\n     * <code>ModelPanel</code> instances. The instance is created by this\n     * frame. The name of this symbol table is equal to <code>getTitle</code>.\n     * If the title is empty, the classname is used instead.\n     * \n     * @return a symbol table\n     */\n",
    "124542": "    /**\n     * Template method that sets up and adds the menu bar. It can be overwritten\n     * to set up different menus. The menu bar can be referenced via\n     * <code>getTopFrameMenuBar</code>. There is a separate method for each\n     * menu that can be overwritten. If a menu method returns <code>null</code>,\n     * then this menu will be ignored.\n     */\n",
    "124543": "    /**\n     * Gets the local symbol table, which is identical with the global table for\n     * a <code>ModelFrame</code>.\n     * \n     * @return a symbol table\n     */\n",
    "124545": "    /**\n     * Gets the upper symbol table, which is identical with the global table for\n     * a <code>ModelFrame</code>.\n     * \n     * @return a symbol table\n     */\n",
    "124546": "    /**\n     * Empty default implementation that does nothing. Subclasses that take part\n     * in the project management system should overwrite this class.\n     * \n     * @param state\n     */\n",
    "124547": "    /**\n     * Empty default implementation that returns <code>null</code>.\n     * Subclasses that take part in the project management system should\n     * overwrite this class.\n     * \n     * @return null\n     */\n",
    "124548": "    /**\n     * Gets the classname as the default ID.\n     * \n     * @return classname\n     */\n",
    "124549": "    /**\n     * Clears <code>this</code> data object. Fires:\n     * <ul>\n     * <li><code>JSCDataEventTypes.EMPTY_STATE</code> event\n     * <li><code>JSCDataEventTypes.VALUE_CHANGED</code> event\n     * </ul>\n     * if it was not empty before. After calling this method\n     * <code>isEmpty</code> returns <code>true</code>.\n     */\n",
    "124552": "    /**\n     * Empty default implementation that is called by <code>skeleton</code>\n     * before this frame is shown.\n     * \n     */\n",
    "124556": "    /**\n     * Gets the symbol currently in use.\n     * \n     * @return Symbol\n     */\n",
    "124559": "    /**\n     * Template method that sets up and adds the menu bar. It can be overwritten\n     * to set up different menus. The menu bar can be referenced via\n     * <code>getStatusBar</code>.\n     */\n",
    "124562": "    /**\n     * Sets whether the data table is editable.\n     * \n     * @param editable\n     */\n",
    "124563": "\t/**\n\t * This method initializes this\n\t * \n\t * @return void\n\t */\n",
    "124567": "    /**\n     * Template method that adds the tool bar. The tool bar can be referenced\n     * via <code>getToolBar</code>.\n     */\n",
    "124569": "\t/**\n\t * This method initializes numberSelector\n\t * \n\t * @return com.jstatcom.model.NumberSelector\n\t */\n",
    "124570": "\t/**\n\t * This method initializes numberSelector1\n\t * \n\t * @return com.jstatcom.model.NumberSelector\n\t */\n",
    "124571": "\t/**\n\t * Gets the precision setting.\n\t * \n\t * @return int \n\t */\n",
    "124572": "\t/**\n\t * Gets the field width setting.\n\t * \n\t * @return int \n\t */\n",
    "124574": "\t/**\n\t * Gets whether transposed is selected.\n\t * \n\t * @return <code>true</code> if selected\n\t */\n",
    "124577": "\t/**\n\t * Gets whether save \"as is\" is selected.\n\t * \n\t * @return <code>true</code> if selected\n\t */\n",
    "124578": "\t/**\n\t * Gets whether header info is selected.\n\t * \n\t * @return <code>true</code> if selected\n\t */\n",
    "124582": "\t/**\n\t * Adds the symbol table to this tree. If the parent is\n\t * null, then it is added under the root node, otherwise\n\t * the parent is added first and <code>symbolTable</code>\n\t * is added under the parent node.\n\t * \n\t * @param symbolTable the table to add\n\t * @throws IllegalArgumentException <code>if (symbolTable == null)</code>\n\t */\n",
    "124583": "    /**\n     * Update the symbol display.\n     * \n     * @param evt\n     *            the symbol event\n     */\n",
    "124584": "\t/**\n\t * Invokes repaint on symbol tree.\n\t * \n\t * @param evt symbol event\n\t */\n",
    "124588": "    /**\n     * Sets a new format string. This string is used by the <code>display</code>\n     * method to format the double array. The default format string is\n     * <p>\n     * <code>\"%- 8.4f \"</code>.\n     * <p>\n     * For a complete description of all legal arguments, see the\n     * <code>PrintfFormat</code> documentation. The string must contain\n     * exactly one conversion character.\n     * \n     * @param newFormatString\n     *            the format string to be used for <code>display</code>\n     * @throws IllegalArgumentException\n     *             if <code>newFormatString</code> is not valid\n     * @see com.jstatcom.util.PrintfFormat\n     */\n",
    "124589": "    /**\n     * Sets whether data in the symbol control should be editable. This method\n     * delegates to the <code>setSymbolEditable</code> methods of all\n     * registered <code>SymbolPanel</code> instances. How this property takes\n     * effect is handled by the respective symbol panels.\n     * \n     * @param editable\n     *            <code>true</code> if editable, <code>false</code> is\n     *            default\n     */\n",
    "124590": "    /**\n     * Sets a new format string. This string is used by the <code>display</code>\n     * method to format the string array. The default format string is\n     * <p>\n     * <code>\"%-12s \"</code>.\n     * <p>\n     * For a complete description of all legal arguments, see the\n     * <code>PrintfFormat</code> documentation. The string must contain\n     * exactly one conversion character.\n     * \n     * @param newFormatString\n     *            the format string to be used for <code>display</code>\n     * @throws IllegalArgumentException\n     *             if <code>newFormatString</code> is not valid\n     * @see com.jstatcom.util.PrintfFormat\n     */\n",
    "124591": "    /**\n     * This method initializes this\n     * \n     * @return void\n     */\n",
    "124599": "    /**\n     * Sets the module frame that should be displayed via its title. If there is\n     * no module frame with <code>moduleTitle</code>, nothing happens.\n     * \n     * @param moduleTitle\n     *            the title of the module frame to set\n     * @throws IllegalArgumentException\n     *             <code>if (moduleTitle == null)</code>\n     */\n",
    "124600": "    /**\n     * Removes all children that are <code>SymbolTreeNode</code> instances\n     * from this node. It removes itself from the parent node\n     * <code>if (getChildCount() == 0)</code> afterwards. It might still be\n     * that <code>SymbolTableTreeNode</code> instances are contained in this\n     * node.\n     */\n",
    "124601": "    /**\n     * Adds parent(s) if necessary.\n     * \n     * @return <code>true</code> if model was reloaded from parent of this\n     */\n",
    "124603": "    /**\n     * Removes parent(s) if necessary.\n     * \n     * @return <code>true</code> if model was reloaded from parent of parent\n     */\n",
    "124604": "    /**\n     * Reloads model to inform listeners synched with Swing\n     * EventDispatchingThread.\n     * \n     * @param node\n     *            reload model from this node\n     */\n",
    "124608": "    /**\n     * Sets the appearance of this frame according to the settings argument.\n     * Nothing happens if the argument is <code>null</code>.\n     * \n     * @param settings\n     *            holds the parameters determining the appearance of this frame\n     */\n",
    "124617": "    /**\n     * Sets the <code>String</code> element stored at index i, j. Fires a\n     * <code>JSCDataEvent</code> of type\n     * <code>JSCDataEventTypes.VALUE_CHANGED</code> if the new value is\n     * different from the one currently stored at that position. The event\n     * object contains the following values:\n     * <ul>\n     * <li><code>oldValue</code>-\n     * <code>new Object[] { oldString, new Integer(i), new Integer(j) }</code>\n     * <li><code>newValue</code>-\n     * <code>new Object[] { newString, new Integer(i), new Integer(j) }</code>\n     * </ul>\n     * Thus listeners can exactly pin down, where the change in the array\n     * happened.\n     * \n     * @param val\n     *            the <code>String</code> to store at the given position\n     * @param i\n     *            the row index, zero based\n     * @param j\n     *            the column index, zero based\n     * @throws IllegalArgumentException\n     *             if indices out of range\n     */\n",
    "124620": "    /**\n     * Sets whether the data table is editable.\n     * \n     * @param editable\n     */\n",
    "124622": "    /**\n     * Gets the settings instance according to the current appearance of this\n     * frame.\n     * \n     * @return settings instance\n     */\n",
    "124623": "    /**\n     * Gets the type of this <code>JSCData</code> object.\n     * \n     * @return <code>JSCTypes.SARRAY</code>\n     */\n",
    "124625": "    /**\n     * Gets the value for a property type.\n     * \n     * @param type\n     *            the property type\n     * @return the value or <code>null</code> if the property has not been set\n     * @throws IllegalArgumentException\n     *             <code>if (type == null)</code>\n     */\n",
    "124627": "    /**\n     * Set the value for a property type. Values are not serialized. The\n     * properties can be used to store runtime information associated with a\n     * data object.\n     * \n     * @param type\n     *            the property type\n     * @param val\n     *            the associated property value\n     * @throws IllegalArgumentException\n     *             <code>if (type == null)</code>\n     */\n",
    "124631": "    /**\n     * Adds project data to this project. Nothing happens if the same object was\n     * added before.\n     * \n     * @param pData\n     *            element of the project data store to be serialized\n     * @throws IllegalArgumentException\n     *             <code>if (dataStoreType == null</code>)\n     */\n",
    "124633": "    /**\n     * Adds a new output data element to this project.\n     * \n     * @param outputData\n     *            output data object\n     * @throws IllegalArgumentException\n     *             <code>if (outputData == null</code>)\n     */\n",
    "124636": "    /**\n     * Adds a new project state to this project. Nothing happens if\n     * <code>projectState == null</code>.\n     * \n     * @param projectState\n     *            project state object\n     */\n",
    "124637": "    /**\n     * Gets an iterator over all output data elements.\n     * \n     * @return output iterator\n     */\n",
    "124639": "    /**\n     * Gets an iterator over all added project data object.\n     * \n     * @return project data iterator\n     */\n",
    "124642": "    /**\n     * Gets an iterator over all project states.\n     * \n     * @return project states iterator\n     */\n",
    "124644": "    /**\n     * Gets the creation date of this project.\n     * \n     * @return creation date\n     */\n",
    "124650": "    /**\n     * Gets the name of the module frame that should be displayed when this\n     * project is loaded.\n     * \n     * @return name of the module frame\n     */\n",
    "124653": "    /**\n     * Sets the name of the module frame that should be displayed when this\n     * project is loaded. Does nothing if the current module frame is null.\n     * \n     * @param currentModuleFrame\n     *            frame title of the module\n     */\n",
    "124660": "    /**\n     * Sets the values stored in <code>mat</code> to this\n     * <code>JSCNArray</code>. The underlying array is copied before.\n     * \n     * @param mat\n     *            instance of <code>Jama.Matrix</code>\n     * @see Jama.Matrix\n     */\n",
    "124663": "    /**\n     * Overwritten because <code>equals</code> was overwritten.\n     * \n     * @return the hashcode of the project file\n     */\n",
    "124664": "    /**\n     * Removes all selected elements from this list.\n     */\n",
    "124665": "    /**\n     * Gets a string representation of this node.\n     * \n     * @return descriptive string\n     */\n",
    "124667": "    /**\n     * Removes all elements from this list.\n     */\n",
    "124668": "    /**\n     * Interface method from <code>SettingsElement</code> to restore a\n     * setting. It adds this node to the project tree if the project file still\n     * exists.\n     */\n",
    "124669": "    /**\n     * Sorts elements while keeping the current selection.\n     * \n     * @param comparator\n     *            instance of <code>Comparable</code> to be applied for the\n     *            sort operation\n     */\n",
    "124671": "    /**\n     * Sets the project data to the respective handler.\n     * \n     * @param data\n     *            the project data to set\n     * @throws IllegalArgumentException\n     *             <code>if (data == null)</code>\n     */\n",
    "124672": "    /**\n     * Registers a project data handler with this manager class. Only one\n     * handler is allowed for each instance of <code>ProjectDataTypes</code>.\n     * \n     * @param handler\n     *            data handler object that should take part in the project\n     *            management system\n     * @throws IllegalArgumentException\n     *             <code>if (handler == null)</code>\n     * @throws IllegalStateException\n     *             if another listener has already been registered for the same\n     *             project data type\n     */\n",
    "124673": "    /**\n     * Displays all list elements by their date in ascending order. The\n     * selection is kept.\n     */\n",
    "124676": "    /**\n     * Displays all list elements by their name in ascending order. The\n     * selection is kept.\n     */\n",
    "124681": "    /**\n     * Gets whether the elements are sorted by time.\n     * \n     * @return <code>true</code> if sorted by time, <code>false</code> if\n     *         sorted by name\n     */\n",
    "124682": "    /**\n     * Sets the <code>double</code> element stored at index i, j. Fires a\n     * <code>JSCDataEvent</code> of type\n     * <code>JSCDataEventTypes.VALUE_CHANGED</code> if the new value is\n     * different from the one currently stored at that position. The event\n     * object contains the following values:\n     * <ul>\n     * <li><code>oldValue</code>-\n     * <code>new double[] { oldNumber, i, j }</code>\n     * <li><code>newValue</code>-\n     * <code>new double[] { newNumber, i, j }</code>\n     * </ul>\n     * Thus listeners can exactly pin down, where the change in the array\n     * happened.\n     * \n     * @param val\n     *            the <code>double</code> to store at the given position\n     * @param i\n     *            the row index, zero based\n     * @param j\n     *            the column index, zero based\n     * @throws IllegalArgumentException\n     *             if indices out of range\n     */\n",
    "124685": "    /**\n     * Sets whether the elements are sorted by time. If <code>true</code> then\n     * new elements are always appended to the end of the list. If this property\n     * is <code>false</code>, then the elements are sorted by their name and\n     * new elements are added accordingly.\n     * \n     * @param sortByTime\n     *            <code>true</code> if sorted by time, <code>false</code> if\n     *            sorted by name\n     */\n",
    "124687": "    /**\n     * Sets the parent frame that is used by modal dialogs within a frame.\n     * \n     * @param parent\n     *            <code>JFrame</code> to be used as parent\n     */\n",
    "124689": "    /**\n     * Removes a tree node from the tree. Nothing is done if <code>node</code>\n     * is not a child anymore or if it is <code>null</code>.\n     * \n     * @param node\n     *            reference to the node to be removed\n     */\n",
    "124690": "    /**\n     * Gets whether output history is on. If this property is <code>false</code>,\n     * then <code>addOutput</code> will have no effect. The default is\n     * <code>true</code>.\n     * \n     * @return <code>true</code> if on, <code>false</code> otherwise\n     */\n",
    "124691": "    /**\n     * Adds a node to this tree that represents a module.\n     * \n     * @param node\n     *            a module node\n     * @throws IllegalArgumentException\n     *             <code>if (node == null)</code>\n     */\n",
    "124692": "    /**\n     * Sets whether output history is on. If this property is <code>false</code>,\n     * then <code>addOutput</code> will have no effect.\n     * \n     * @param isOutputHistory\n     *            <code>true</code> to enable output history\n     */\n",
    "124694": "    /**\n     * Overwrites method from superclass to set tooltips.\n     */\n",
    "124697": "    /**\n     * This method initializes this.\n     * \n     * @return void\n     */\n",
    "124699": "    /**\n     * Sets an array of output objects to be handled by this component. The\n     * contents of all <code>dataArray</code> elements will be displayed in a\n     * text area in the given order.\n     * \n     * @param dataArray\n     *            <code>OutputData</code> objects for display\n     * @throws IllegalArgumentException\n     *             <code>if (dataArray == null)</code>\n     */\n",
    "124706": "    /**\n     * Sets the project node that should be referenced by actions invoked from\n     * this component. Should be set by the project tree.\n     * \n     * @param currentNode\n     *            current project tree node\n     */\n",
    "124708": "    /**\n     * Adds a project state handler, typically a modelling module, to the list\n     * of all handlers. The state will be stored as part of the project and it\n     * is restored when the project is deserialized.\n     * <p>\n     * This method should be called at program start when all handlers are being\n     * initialized.\n     * \n     * @param handler\n     *            element of a project that hanldles project states, usually a\n     *            <code>ModelFrame</code>\n     * @throws IllegalArgumentException\n     *             <code>if (handler == null)</code>\n     */\n",
    "124709": "    /**\n     * Gets string representation of this object.\n     * \n     * @return a string\n     */\n",
    "124712": "    /**\n     * Adds a <code>SettingsElement</code> object to this.\n     * \n     * @param el\n     *            an element representing a certain type of runtime information\n     * @throws IllegalArgumentException\n     *             <code>if (el == null)</code>\n     */\n",
    "124713": "    /**\n     * Gets the new project tree node.\n     * \n     * @return project node created from the settings\n     */\n",
    "124714": "    /**\n     * Sets the reference to the <code>TopFrame</code> component that can be\n     * used for (de)serializing projects. It is not strictly required to use\n     * this setting.\n     * \n     * @param topFrame\n     *            reference to the <code>TopFrame</code> instance that is used\n     *            as the main application frame\n     */\n",
    "124715": "\t/**\n\t * Gets the module name. It is retrieved from the underlying action.\n\t * \n\t * @return module name\n\t */\n",
    "124716": "\t/**\n\t * Gets the string representation of this.\n\t * \n\t * @return descriptive string, used by display\n\t */\n",
    "124717": "\t/**\n\t * Invokes the underlying action. Used by project tree on a mouse click over\n\t * this node.\n\t *  \n\t */\n",
    "124718": "    /**\n     * Invokes deserialization from the settings file. All settings elements are\n     * restored and the <code>setElement</code> method of each instance is\n     * called.\n     * <p>\n     * Typically this method is invoked at program start.\n     */\n",
    "124720": "    /**\n     * Gets the reference to the <code>TopFrame</code> component that has been\n     * set earlier.\n     * \n     * @return reference to the currently set <code>TopFrame</code> instance\n     *         or <code>null</code> if none has been set before\n     */\n",
    "124721": "    /**\n     * This method initializes this\n     * \n     * @return void\n     */\n",
    "124722": "    /**\n     * Stores the current state to a special project <i>last state </i>.\n     * \n     */\n",
    "124723": "    /**\n     * The <i>last state </i> is retrieved which is just a project.\n     */\n",
    "124724": "    /**\n     * Adds a classname transformation. This is useful to load serialized XML project files\n     * after a classname was changed. \n     * \n     * @param oldClassName full classname before renaming \n     * @param newClassName full classname after renaming \n     */\n",
    "124725": "    /**\n     * This method initializes jPanel\n     * \n     * @return javax.swing.JPanel\n     */\n",
    "124726": "    /**\n     * Gets the type of this <code>JSCData</code> object.\n     * \n     * @return <code>JSCTypes.NARRAY</code>\n     */\n",
    "124730": "    /**\n     * This method initializes jPanel1\n     * \n     * @return javax.swing.JPanel\n     */\n",
    "124742": "    /**\n     * Returns the default table model object.\n     * \n     * @return the default table model object\n     */\n",
    "124743": "    /**\n     * Gets whether table is editable. Default is <code>false</code>.\n     * \n     * @return <code>true</code> if editable\n     */\n",
    "124747": "    /**\n     * Sets the number range to verify number input when cells are edited with\n     * the default editor set for this table. It has no effect if the data is\n     * set differently.\n     * \n     * @param range\n     *            the bounds to verify numbers against\n     */\n",
    "124748": "    /**\n     * Sets whether table is editable. Default is <code>false</code>.\n     * \n     * @param editable\n     *            <code>true</code> if editable\n     */\n",
    "124749": "    /**\n     * Overloads supermethod and provides additional notification to horizontal\n     * and vertical scrollbars.\n     * \n     * @param sp\n     *            the underlying <code>JScrollPane</code>\n     */\n",
    "124755": "    /**\n     * Sets the precision for the number display. How numbers are rendered is\n     * handled by the cell renderer.\n     * \n     * @param precision\n     */\n",
    "124757": "    /**\n     * The data model is editable. This method sets a value in the underlying\n     * data.\n     * \n     * @param aValue\n     *            must be a <code>Double</code>\n     * @param rowIndex\n     *            the row index, will be treated with taking\n     *            <code>transposed</code> into account\n     * @param columnIndex\n     *            the column index, will be treated with taking\n     *            <code>transposed</code> into account\n     * @throws IllegalArgumentException\n     *             <code>if (!aValue instanceof Double)</code>\n     */\n",
    "124758": "    /**\n     * Gets a reference of the underlying data object with the correct type.\n     * <p>\n     * <b>Usage note: </b> <br>\n     * The returned data is a reference to the underlying <code>JSCData</code>\n     * object only until a new data object has been set. It should be used read\n     * only. Changes that should not affect this table must be made on a copy of\n     * the returned object.\n     * \n     * @return reference to data\n     */\n",
    "124761": "    /**\n     * Sets the name of the symbol to display. The symbol is retrieved from the\n     * symbol table of the given scope.\n     * \n     * @param symbolName\n     *            symbol name\n     * @throws IllegalArgumentException\n     *             if <code>symbolName</code> is invalid\n     */\n",
    "124764": "    /**\n     * This method initializes jButton1\n     * \n     * @return javax.swing.JButton\n     */\n",
    "124765": "    /**\n     * The data model is editable. This method sets a value in the underlying\n     * data.\n     * \n     * @param aValue\n     *            must be non <code>null</code>\n     * @param rowIndex\n     *            the row index, will be treated with taking\n     *            <code>transposed</code> into account\n     * @param columnIndex\n     *            the column index, will be treated with taking\n     *            <code>transposed</code> into account\n     * @throws IllegalArgumentException\n     *             <code>if (aValue == null)</code>\n     */\n",
    "124766": "    /**\n     * Reimplements super method such that it considers the border now.\n     * \n     * @param point\n     *            the point to be checked for the underlying column\n     * @return index of the respective column\n     */\n",
    "124768": "    /**\n     * Reimplements super method. It regards possible individual column width\n     * now.\n     */\n",
    "124770": "    /**\n     * Sets the symbol scope, which defines which symbol table to use (\n     * <code>local</code>,<code>global</code> or <code>upper</code>).\n     * This also sets a previously set symbol table to <code>null</code>.\n     * \n     * @param scope\n     *            the symbol scope\n     * @throws IllegalArgumentException\n     *             <code>if (scope == null)</code>\n     */\n",
    "124772": "    /**\n     * Reimplements super method such that it considers the border now.\n     */\n",
    "124774": "    /**\n     * Returns current column width. The width is <i>not </i> computed when\n     * calling this method.\n     * \n     * @return int Current column width.\n     */\n",
    "124775": "    /**\n     * Notification from the <code>UIManager</code> that the L&F has changed.\n     * Replaces the current UI object with the latest version from the\n     * <code>UIManager</code>.\n     * <p>\n     * Reimplementation of superclass method.\n     * \n     * @see JComponent#updateUI\n     */\n",
    "124776": "    /**\n     * Returns maximum column width property.\n     * \n     * @return int maximum column width\n     */\n",
    "124780": "    /**\n     * Gets the mouse listener. Can be used to change table values by clicking\n     * on it. Default is <code>null</code>.\n     * \n     * @return a mouse listener\n     */\n",
    "124782": "    /**\n     * Returns minimum column width property.\n     * \n     * @return int minimum column width property\n     */\n",
    "124784": "    /**\n     * Sets the mouse listener. Can be used to change table values by clicking\n     * on it. Default is <code>null</code>. An enumeration of mouse listeners\n     * is given in <code>JSCMouseListenerTypes</code>.\n     * \n     * @param listener\n     *            a mouse listener\n     */\n",
    "124785": "    /**\n     * Returns the value of a <code>getPreferredSize()</code> method call.\n     */\n",
    "124787": "    /**\n     * Reimplements super method such that it considers the border now.\n     */\n",
    "124788": "    /**\n     * Gets the renderer for the cells. The default is\n     * <code>JSCCellRendererTypes.DEFAULT</code>.\n     * \n     * @return cell renderer that is used for all cells\n     */\n",
    "124790": "    /**\n     * Return true if the <code>BorderTable</code>'s column width (and the\n     * <code>BorderTable</code>'s width) depends on the data displayed.\n     * \n     * @return <code>true</code> if dynamic adjustment is on\n     */\n",
    "124791": "    /**\n     * This method initializes projectNameField\n     * \n     * @return javax.swing.JTextField\n     */\n",
    "124793": "    /**\n     * Computes the maximum length of all cells. This means that this method\n     * evaluates the whole data model. This can be time consuming.\n     */\n",
    "124794": "    /**\n     * Sets the renderer for all cells. The default is\n     * <code>JSCCellRendererTypes.DEFAULT</code>.\n     * \n     * @param renderer\n     *            a cell renderer\n     */\n",
    "124795": "    /**\n     * Column width method.\n     * \n     * returns the maximum cell length in specified column.\n     * \n     *  \n     */\n",
    "124797": "    /**\n     * This method initializes fileNameField\n     * \n     * @return javax.swing.JTextField\n     */\n",
    "124801": "    /**\n     * Reimplements super method such that it considers the border now.\n     * \n     * @param point\n     *            the point to be checked for the underlying row\n     * @return index of the respective row\n     */\n",
    "124802": "    /**\n     * Sets the <code>RIGHT</code> mouse popup for the table. An enumeration\n     * of popups can be found in <code>JSCPopupTypes</code>.\n     * \n     * @param menu\n     *            a popup menu\n     */\n",
    "124803": "    /**\n     * Returns cancelled property.\n     * \n     * @return <code>true</code> if this dialog was cancelled\n     */\n",
    "124805": "    /**\n     * Reimplements super method such that the <code>borderTableBorder</code>\n     * is always set as the most inner border.\n     */\n",
    "124810": "    /**\n     * Set whether the <code>BorderTable</code>'s column width adjust when\n     * the data displayed. change. The adjustment takes place within the minimum\n     * and maximum width.\n     * \n     * @param newDynamicColumnWidth\n     *            boolean\n     */\n",
    "124813": "    /**\n     * Sets the width and height between cells to <code>newSpacing</code> and\n     * redisplays the receiver. Posts a vetoable property change notification\n     * with the name \"intercellSpacing\".\n     * \n     * @param newSpacing\n     *            the new width and height intercellSpacing\n     * @see #getIntercellSpacing\n     */\n",
    "124814": "    /**\n     * This method initializes dataDesField\n     * \n     * @return com.jstatcom.component.ResultField\n     */\n",
    "124815": "    /**\n     * Sets the data object to be displayed in this table. If this is set, then\n     * the symbol name be set to <code>null</code>. If\n     * <code>data == null</code>, then the table will be cleared and display\n     * zero rows and zero columns.\n     * \n     * @param data\n     *            to display\n     */\n",
    "124817": "    /**\n     * Sets the <code>BorderTable</code>'s maximum column width.\n     * \n     * @param newMaximumColumnWidth\n     *            the new maximum width\n     */\n",
    "124819": "    /**\n     * Sets the <code>BorderTable</code>'s minimum column width.\n     * \n     * @param newMinimumColumnWidth\n     *            the new minimum width\n     */\n",
    "124821": "    /**\n     * This method initializes projectDesArea\n     * \n     * @return com.jstatcom.component.ResultField\n     */\n",
    "124822": "    /**\n     * Calls super method and determines and sets new maximum column width if\n     * <code>isDynamicColumnWidth</code> returns <code>true</code>.\n     * \n     * @param e\n     *            the event\n     */\n",
    "124824": "    /**\n     * Overwrites supermethod to fire a \"model\" property change event.\n     * \n     * @param model\n     *            the new table model\n     */\n",
    "124825": "    /**\n     * Updates the rectangular representing a cell to be used for horizontal and\n     * vertical unit increments to display only full new rows/cols when\n     * scrolling.\n     */\n",
    "124826": "/**\n * Overloads method from superclass.\n * Gets the insets for this border.\n *\n * @param  c ignored, can be <code>null</code>\n * @return insets\n */\n",
    "124828": "    /**\n     * This method initializes browseButton\n     * \n     * @return javax.swing.JButton\n     */\n",
    "124829": "/**\n * Overloads method from superclass.\n * Reinitializes the <code>insets</code> with this Border's current insets.\n *\n * @param  c ignored, can be <code>null</code>\n * @param  insets parameter to be reinitialized with border insets\n * @return the insets parameter after it was reinitialized\n */\n",
    "124830": "    /**\n     * Gets the explicitely set symbol table used by this table to retrieve\n     * symbols by their name. If non has been set before, <code>null</code> is\n     * returned.\n     * \n     * @return symbol table\n     */\n",
    "124835": "    /**\n     * Sets the symbol table used by this table to retrieve symbols by their\n     * name and the corresponding type for the table. If\n     * <code>table == null</code> then the symbol will be retrieved from the\n     * symbol scope hierarchy.\n     * \n     * @param table\n     *            a symbol table\n     */\n",
    "124847": "    /**\n     * <code>DataTablePopupTypes</code> implement <code>ActionListener</code>\n     * and can therefore register themselves as listeners, for example with the\n     * menu items that are added to them. Subclasses can overwrite the empty\n     * default implementation of this method.\n     * \n     * @param evt\n     *            the action event\n     */\n",
    "124851": "    /**\n     * Gets a reference of the underlying data object with the correct type.\n     * Clients should be aware that this table might display the data\n     * transposed, which means that row and column indices are flipped.\n     * <p>\n     * <b>Usage note: </b> <br>\n     * The returned data is a reference to the underlying <code>JSCData</code>\n     * object only until a new data object has been set. It should be used read\n     * only. Changes that should not affect this table must be made on a copy of\n     * the returned object.\n     * \n     * @return reference to data\n     */\n",
    "124853": "    /**\n     * Sets the selection mode for rows.\n     * \n     * @param newRowSelMode\n     *            one of <code>ListSelectionModel.SINGLE_SELECTION</code>,\n     *            <code>ListSelectionModel.SINGLE_INTERVAL</code> or\n     *            <code>ListSelectionModel.MULTIPLE_INTERVAL_SELECTION</code>\n     */\n",
    "124854": "    /**\n     * Gets whether the data in this table should be displayed transposed. This\n     * property has only effect if the underlying model is a\n     * <code>JSCSArrayTableModel</code>.\n     * \n     * @return <code>true</code> if transposed\n     */\n",
    "124856": "    /**\n     * Sets whether the data in this table should be displayed transposed. This\n     * property has only effect if the underlying model is a\n     * <code>JSCSArrayTableModel</code>.\n     * \n     * @param transposed\n     *            <code>true</code> if transposed\n     */\n",
    "124859": "    /**\n     * Gets the selection mode for table rows.\n     * \n     * @return one of <code>ListSelectionModel.SINGLE_SELECTION</code>,\n     *         <code>ListSelectionModel.SINGLE_INTERVAL</code> or\n     *         <code>ListSelectionModel.MULTIPLE_INTERVAL_SELECTION</code>\n     */\n",
    "124865": "\t/**\n\t * Gets a <code>double</code> value from a data table.\n\t * Subclasses can overwrite this method to provide special\n\t * values, for example if a subset restriction is present for the\n\t * respective element. This default implementation just gets\n\t * the value from the position in the table.\n\t *\n\t * @param  table the data table to retrieve the value from\n\t * @param  row   index for row\n\t * @param  col   index for column\n\t * @return the retrieved <code>double</code>\n\t */\n",
    "124869": "    /**\n     * Sets the name of the symbol with the index of selected table rows. The\n     * contents of this data object are the results from the a call to\n     * <code>getIntSelectionIndex</code>. The symbol is updated everytime the\n     * table selection changes. Changes in this symbol do not change the\n     * selection in this table. The selection index will only be stored, if the\n     * symbol name is set and the symbol table has been set as well or can be\n     * retrieved for the symbol scope.\n     * \n     * @param symbolNameSelRows\n     *            symbol name\n     * @throws IllegalArgumentException\n     *             if <code>symbolNameSelRows</code> is invalid\n     */\n",
    "124871": "    /**\n     * Gets the default renderer for the headers.\n     * \n     * @return javax.swing.table.TableCellRenderer\n     */\n",
    "124872": "\t/**\n\t * Gets a <code>String</code> value from a data table.\n\t * Subclasses can overwrite this method to provide special\n\t * values. This default implementation just gets\n\t * the value from the position in the table.\n\t *\n\t * @param table the data table to retrieve the value from\n\t * @param row index for row\n\t * @param col index for column\n\t * @return the retrieved <code>String</code>\n\t */\n",
    "124877": "\t/**\n\t * Checks, whether there is a subset restriction at\n\t * the given position <code>(row, col)</code> in the subset restriction \n\t * matrix. The subset matrix must be referenced from the data table\n\t * implementation, for example \n\t * <code>com.jstatcom.equation.CoeffTable</code>.\n\t *\n\t * @param  table the data table with a possible reference to a subset matrix\n\t * @param  row   index for row\n\t * @param  col   index for column\n\t * @return <code>true</code> if the corresponding subset matrix exists and\n\t *         the element at <code>(row, col)</code> is set to restricted\n\t * @see    com.jstatcom.equation.CoeffTable\n\t */\n",
    "124880": "    /**\n     * Gets the component to be used as default corner.\n     * \n     * @return corner component\n     */\n",
    "124881": "    /**\n     * Overwrites supermethod to configure ecnclosing scrollpane and update\n     * selection data. It fires a \"columnWidth\" property change event. The old\n     * value is always set to -1.\n     * \n     * @param e\n     *            the table model event\n     */\n",
    "124882": "\t/**\n\t * Sets how a <code>double</code> value is printed as text.\n\t *\n\t * @param value the value to print\n\t * @param table an instance of <code>NumberDisplayTable</code>, which\n\t *              allows to set a certain <code>CellRenderer</code> \n\t *              an a precision to render <code>value</code>        \n\t */\n",
    "124884": "    /**\n     * Gets the alignment of the column header.\n     * \n     * @return JLabel.RIGHT, JLabel.LEFT or JLabel.CENTER\n     */\n",
    "124886": "    /**\n     * Invoked when the list selection changes. Updates selection data.\n     * \n     * @param e\n     *            the list selection event\n     */\n",
    "124890": "    /**\n     * Sets the editable properties for each column. This overwrites the overall\n     * editable settings.\n     * \n     * @param colIndexEditableMap\n     */\n",
    "124891": "    /**\n     * Gets the current column header cell renderer. If none is set, the default\n     * renderer is returned.\n     * \n     * @return javax.swing.table.TableCellRenderer\n     */\n",
    "124893": "    /**\n     * Sets the editable properties for each row. This overwrites the overall\n     * editable settings.\n     * \n     * @param rowIndexEditableMap\n     */\n",
    "124894": "    /**\n     * Overwrites default implementation to return <code>isEditable</code> for\n     * all cells. The row index map overwrites all other settings for all\n     * row indices with non-null elements.\n     * \n     * @param rowIndex\n     *            used if <code>(getRowIndexEditableMap() != null)</code>,\n     *            row settings overwrite overall editable property, <code>null</code>\n     *            elements fall back to global editable property\n     * @param columnIndex\n     *            used if <code>(getColIndexEditableMap() != null)</code>,\n     *            column settings overwrite overall editable property, <code>null</code>\n     *            elements fall back to global editable property\n     *            \n     */\n",
    "124896": "\t/**\n\t * Sets how a <code>String</code> value is printed as text.\n\t *\n\t * @param value the value to print\n\t */\n",
    "124897": "    /**\n     * Gets the data object used for the column header.\n     * \n     * @return column data\n     */\n",
    "124899": "\t/**\n\t * Sets how a general <code>Object</code> value is printed as text.\n\t * This does usually depend on the type of the <code>value</code>\n\t * to print.\n\t *\n\t * @param value the value to print\n\t * @param table an instance of <code>JTable</code>, which\n\t *              allows to set a certain <code>CellRenderer</code> \n\t *              an a precision to render <code>value</code>        \n\t */\n",
    "124901": "    /**\n     * Gets the symbol name for the <code>SARRAY</code> column header data.\n     * \n     * @return the symbol identifier\n     */\n",
    "124902": "    /**\n     * Gets the original string.\n     * \n     * @return upper/lowercase string\n     */\n",
    "124903": "    /**\n     * Gets the uppercase string.\n     * \n     * @return uppercase string representation\n     */\n",
    "124904": "    /**\n     * Overwrite equals to compare only uppercase representation.\n     * \n     * @return <code>true</code> if o is <code>PFString</code> with same\n     *         uppercase representation, <code>false</code> otherwise\n     */\n",
    "124906": "    /**\n     * Overwritten because <code>equals</code> was overwritten.\n     * \n     * @return hashcode of uppercase representation\n     */\n",
    "124910": "\t/**\n\t * Adds a new <code>double</code> argument to be formatted.\n\t * \n\t * @param arg\n\t *            the element to be formatted\n\t * @return <code>this</code> after adding <code>arg</code>\n\t */\n",
    "124911": "    /**\n     * Gets the maximum number of cols that are displayed without scrolling. The\n     * component will not grow beyond but display a horizontal scrollbar if\n     * there are more columns to display.\n     * \n     * @return int\n     */\n",
    "124912": "\t/**\n\t * Adds a new <code>int</code> argument to be formatted.\n\t * \n\t * @param arg\n\t *            the element to be formatted\n\t * @return <code>this</code> after adding <code>arg</code>\n\t */\n",
    "124914": "\t/**\n\t * Adds a new <code>Object</code> argument to be formatted.\n\t * \n\t * @param arg\n\t *            the element to be formatted\n\t * @return <code>this</code> after adding <code>arg</code>\n\t */\n",
    "124915": "    /**\n     * Overrides <code>equals</code> to provide logical comparison of two\n     * different <code>Maturity</code> objects.\n     * \n     * @param o\n     *            object to compare with\n     * @return <code>true</code> if <code>COUNT</code> and <code>UNIT</code>\n     *         are the same, <code>false</code> otherwise\n     */\n",
    "124919": "    /**\n     * Gets the maximum number of rows that are displayed without scrolling. The\n     * component will not grow beyond but display a vertical scrollbar if there\n     * are more rows to display.\n     * \n     * @return int\n     */\n",
    "124921": "        /**\n         * An intermediate routine on the way to creating an f format String.\n         * The method decides whether the input double value is an infinity,\n         * not-a-number, or a finite double and formats each type of input\n         * appropriately.\n         * \n         * @param x\n         *            the double value to be formatted.\n         * @return the converted double value.\n         */\n",
    "124924": "    /**\n     * Gets the minimum number of columns that are displayed without scrolling.\n     * \n     * @return int\n     */\n",
    "124926": "    /**\n     * Gets whether <code>type</code> can be handled by this engine.\n     * \n     * @param type\n     *            the type to check\n     * @return <code>true</code> if type is one of\n     *         <code>NARRAY, INT, NUMBER, SARRAY or STRING</code>,\n     *         <code>false</code> otherwise\n     */\n",
    "124927": "    /**\n     * Gets the minimum number of rows that are displayed without scrolling.\n     * \n     * @return int\n     */\n",
    "124929": "    /**\n     * Checks arguments for conformance.\n     * \n     * @param args\n     * @param checkEmpty\n     */\n",
    "124930": "    /**\n     * Gets the alignment of the column header.\n     * \n     * @return JLabel.RIGHT, JLabel.LEFT or JLabel.CENTER\n     */\n",
    "124933": "    /**\n     * Always throws an exception, because Ox engine tasks cannot be stopped.\n     * \n     * @throws UnsupportedOperationException\n     * @see com.jstatcom.engine.Engine#stop()\n     */\n",
    "124934": "    /**\n     * Gets the current row header cell renderer. If none is set, the default\n     * renderer is returned.\n     * \n     * @return javax.swing.table.TableCellRenderer\n     */\n",
    "124935": "    /**\n     * Shuts down Ox workspace.\n     * \n     * @see com.jstatcom.engine.Engine#shutdown()\n     */\n",
    "124938": "    /**\n     * Gets the data object used for the row header.\n     * \n     * @return row data\n     */\n",
    "124940": "    /**\n     * Gets the symbol table used for the row header.\n     * \n     * @return symbol table\n     */\n",
    "124942": "        /**\n         * Start the symbolic carry process. The process is not quite finished\n         * because the symbolic carry may change the length of the string and\n         * change the exponent (in e format).\n         * \n         * @param cLast\n         *            index of the last digit changed by the round\n         * @param cFirst\n         *            index of the first digit allowed to be changed by this\n         *            phase of the round\n         * @return <code>true</code> if the carry forces a round that will\n         *         change the print still more\n         */\n",
    "124944": "    /**\n     * Gets the symbol name for the <code>SARRAY</code> row header data.\n     * \n     * @return the symbol identifier\n     */\n",
    "124948": "        /**\n         * Method added by PHIL. [Thanks, PHIL. -Rob] This pads the buffer\n         * without closing the stream.\n         */\n",
    "124949": "    /**\n     * Sets the column header alignment, the default is\n     * <code>JLabel.RIGHT</code>.\n     * \n     * @param newColumnHeaderAlignment\n     *            JLabel.LEFT, JLabel.RIGHT or JLabel.CENTER\n     * @throws IllegalArgumentException\n     *             if argument is not valid\n     */\n",
    "124954": "        /**\n         * Flushes and closes (I think, in the superclass) the stream.\n         * \n         * @since 1.3\n         */\n",
    "124955": "    /**\n     * Sets the data object used for the column header.\n     * <p>\n     * <b>Please note:</b><br>\n     * The data is presented transposed. This is for convenience, because often\n     * names are stored as column vectors in the symbol table. This behaviour\n     * does not occur if the data is explicitely set.\n     * \n     * @param newColumnHeaderData\n     *            row data\n     */\n",
    "124957": "    /**\n     * Sets whether the column header should be displayed.\n     * \n     * @param isShowing\n     *            <code>true</code> if showing\n     */\n",
    "124961": "        /**\n         * Format method for the f conversion character.\n         * \n         * @param x\n         *            the double to format.\n         * @return the formatted String.\n         */\n",
    "124962": "    /**\n     * Gets whether the column header should be displayed.\n     * \n     * @return <code>true</code> if showing\n     */\n",
    "124964": "    /**\n     * Sets whether the row header should be displayed.\n     * \n     * @param isShowing\n     *            <code>true</code> if showing\n     */\n",
    "124968": "    /**\n     * Gets whether the row header should be displayed.\n     * \n     * @return <code>true</code> if showing\n     */\n",
    "124972": "    /**\n     * Sets the column header data from a string array. This is useful, if the\n     * header is fixed.\n     * \n     * @param colHeaderStringData\n     *            string array with column names\n     */\n",
    "124973": "        /**\n         * Format method for the e or E conversion character.\n         * \n         * @param x\n         *            the double to format.\n         * @return the formatted String.\n         */\n",
    "124976": "    /**\n     * Sets the symbol name for the <code>SARRAY</code> column header data.\n     * <p>\n     * <b>Please note:</b><br>\n     * The data is presented transposed. This is for convenience, because often\n     * names are stored as column vectors in the symbol table. This behaviour\n     * does not occur if the data is explicitely set.\n     * \n     * @param newColumnHeaderSymbolName\n     *            the symbol identifier\n     * @throws IllegalArgumentException\n     *             if name is not valid\n     */\n",
    "124983": "    /**\n     * Sets the scope for the symbols used for row and column header.\n     * \n     * @param newSymbolScope\n     * @throws IllegalArgumentException\n     *             <code>if (newSymbolScope == null)</code>\n     */\n",
    "124986": "    /**\n     * Sets the maximum number of visible cols that this scrollpane shows. If\n     * there are more cols, a horizontal scrollbar will appear and the\n     * scrollpane will not grow further. This sets the maximum horizontal space\n     * for this component.\n     * \n     * @param newMaximumVisibleColumns\n     *            int\n     */\n",
    "124989": "    /**\n     * Sets the maximum number of visible rows that this scrollpane shows. If\n     * there are more rows, a vertical scrollbar will appear and the scrollpane\n     * will not grow further. This sets the maximum vertical space for this\n     * component.\n     * \n     * @param newMaximumVisibleRows\n     *            int\n     */\n",
    "124992": "        /**\n         * Format method for the d conversion specifer and short argument.\n         * \n         * For d format, the flag character '-', means that the output should be\n         * left justified within the field. The default is to pad with blanks on\n         * the left. A '+' character means that the conversion will always begin\n         * with a sign (+ or -). The blank flag character means that a\n         * non-negative input will be preceded with a blank. If both a '+' and a ' '\n         * are specified, the blank flag is ignored. The '0' flag character\n         * implies that padding to the field width will be done with zeros\n         * instead of blanks.\n         * \n         * The field width is treated as the minimum number of characters to be\n         * printed. The default is to add no padding. Padding is with blanks by\n         * default.\n         * \n         * The precision, if set, is the minimum number of digits to appear.\n         * Padding is with leading 0s.\n         * \n         * @param x\n         *            the short to format.\n         * @return the formatted String.\n         */\n",
    "124993": "    /**\n     * Sets the minimum number of visible cols that this scrollpane shows\n     * without scrolling. This property defines, how much horizontal space is\n     * reserved for the component, even if there are fewer cols.\n     * \n     * @param newMinimumVisibleColumns\n     *            int\n     */\n",
    "124996": "    /**\n     * Sets the minimum number of visible rows that this scrollpane shows\n     * without scrolling. This property defines, how much vertical space is\n     * reserved for the component, even if there are fewer rows.\n     * \n     * @param newMinimumVisibleRows\n     *            int\n     */\n",
    "124997": "    /**\n     * Gets the system library that is currently used by this engine. It can be\n     * changed via the <code>load</code> method.\n     * \n     * @return the absolute path of the current system library or null if\n     *         <code>none</code> has been loaded so far\n     */\n",
    "124999": "    /**\n     * Sets the row header alignment, the default is <code>JLabel.RIGHT</code>.\n     * This method has no effect of the row header cell renderer is not of type\n     * <code>JSCCellRendererTypes</code>.\n     * \n     * @param newRowHeaderAlignment\n     *            JLabel.LEFT, JLabel.RIGHT or JLabel.CENTER\n     * @throws IllegalArgumentException\n     *             if argument is not valid\n     */\n",
    "125001": "        /**\n         * Format method for the d conversion character and long argument.\n         * \n         * For d format, the flag character '-', means that the output should be\n         * left justified within the field. The default is to pad with blanks on\n         * the left. A '+' character means that the conversion will always begin\n         * with a sign (+ or -). The blank flag character means that a\n         * non-negative input will be preceded with a blank. If both a '+' and a ' '\n         * are specified, the blank flag is ignored. The '0' flag character\n         * implies that padding to the field width will be done with zeros\n         * instead of blanks.\n         * \n         * The field width is treated as the minimum number of characters to be\n         * printed. The default is to add no padding. Padding is with blanks by\n         * default.\n         * \n         * The precision, if set, is the minimum number of digits to appear.\n         * Padding is with leading 0s.\n         * \n         * @param x\n         *            the long to format.\n         * @return the formatted String.\n         */\n",
    "125007": "    /**\n     * Sets the data for the row header.\n     * \n     * @param newRowHeaderDataFromModel\n     *            int\n     */\n",
    "125011": "    /**\n     * Sets the data object used for the row header.\n     * \n     * @param newRowHeaderData\n     *            row data\n     */\n",
    "125013": "        /**\n         * Format method for the d conversion character and int argument.\n         * \n         * For d format, the flag character '-', means that the output should be\n         * left justified within the field. The default is to pad with blanks on\n         * the left. A '+' character means that the conversion will always begin\n         * with a sign (+ or -). The blank flag character means that a\n         * non-negative input will be preceded with a blank. If both a '+' and a ' '\n         * are specified, the blank flag is ignored. The '0' flag character\n         * implies that padding to the field width will be done with zeros\n         * instead of blanks.\n         * \n         * The field width is treated as the minimum number of characters to be\n         * printed. The default is to add no padding. Padding is with blanks by\n         * default.\n         * \n         * The precision, if set, is the minimum number of digits to appear.\n         * Padding is with leading 0s.\n         * \n         * @param x\n         *            the int to format.\n         * @return the formatted String.\n         */\n",
    "125016": "    /**\n     * Sets the symbol name for the <code>SARRAY</code> row header data.\n     * \n     * @param newRowHeaderSymbolName\n     *            symbol identifier\n     * @throws IllegalArgumentException\n     *             if name is not valid\n     */\n",
    "125018": "    /**\n     * This method is executed before <code>runCode</code>. The default\n     * implementation is emtpy and can be overwritten by subclasses.\n     * <p>\n     * <b>Usage note: </b> <br>\n     * Overwriting this method is only needed if initialization code that can be\n     * shared by various subclasses is put in a superclass without changing the\n     * <code>runCode</code> implementation of subclasses. This could for\n     * example be library load routines.\n     */\n",
    "125019": "    /**\n     * Overwrites supermethod to handle data table components specially.\n     * \n     * @param view\n     *            the viewport component\n     */\n",
    "125020": "    /**\n     * This method is executed when <code>runCode</code> has finished\n     * successfully. The default implementation is emtpy and should be\n     * overwritten by subclasses. Usually it is used to assemble an output\n     * buffer that is then printed to an result area.\n     */\n",
    "125024": "    /**\n     * Gets the symbol table that has been set for row and column header.\n     * \n     * @return symbol table\n     */\n",
    "125025": "    /**\n     * Gets the output holder component. The default is\n     * <code>SystemOutHolder</code>.\n     * \n     * @return a component used to assemble output from this call\n     */\n",
    "125026": "    /**\n     * Gets the underlying instance of <code>Rengine</code>. This can be used\n     * to invoke additional lower-level R interface methods directly on\n     * instances of that class. The status of this engine is not checked when\n     * this method is called, it might be <code>null</code> or exitted.\n     * \n     * @return JRI Rengine instance\n     */\n",
    "125028": "    /**\n     * Gets the system time at thread start.\n     * \n     * @return <code>System.currentTimeMillis()</code> when the call was\n     *         started\n     */\n",
    "125029": "    /**\n     * Sets the symbol table used for row and column header data. Use this\n     * method to set an explicit table instead of using the scope hierarchy.\n     * \n     * @param table\n     *            the symbol table for the header data\n     */\n",
    "125031": "    /**\n     * Hides the Dialog.\n     */\n",
    "125035": "    /**\n     * Unregisters listener <i>l </i> so that it will no longer be notified.\n     * \n     * @param l\n     *            listener to be removed\n     */\n",
    "125036": "    /**\n     * Syncs column width for column header and data.\n     */\n",
    "125041": "    /**\n     * Sets the output component that the results and other output should be\n     * written to. The default is <code>SystemOutHolder</code>.\n     * \n     * @param outputHolder\n     *            write output to\n     */\n",
    "125045": "    /**\n     * This method initializes this\n     * \n     * @return void\n     */\n",
    "125046": "    /**\n     * Sets the symbol table to access data objects. Subclasses must implement\n     * and document themselves which variables should be written or read to and\n     * from the symbol table. It is not used in the abstract implementation.\n     * \n     * @param newSymbolTable\n     *            a new symbol table\n     * @throws IllegalArgumentException\n     *             <code>if (newSymbolTable == null)</code>\n     */\n",
    "125047": "    /**\n     * Checks the user input and hides dialog if ok.\n     */\n",
    "125055": "    /**\n     * Puts this call object in the worker thread queue. The call will be\n     * executed after every other call that has been queued before has finished.\n     * The queuing strategy can be changed by overwriting\n     * <code>getExecutor</code>.\n     * <p>\n     * <b>Implementation </b> <br>\n     * Calls <code>execute(Runnable command)</code> from\n     * <code>util.concurrent.QueuedExecutor</code>.\n     */\n",
    "125057": "    /**\n     * Shows or hides the stop button.\n     * \n     * @param isVisible\n     */\n",
    "125058": "    /**\n     * Checks the validity of the configuration for the <code>GRTEngine</code>.\n     * \n     * @see com.jstatcom.engine.EngineTypes\n     * @throws IllegalArgumentException\n     *             <code>if (configHolder == null)</code>\n     */\n",
    "125061": "    /**\n     * Interrupts this call and calls the <code>stop</code> method of the\n     * engine.\n     */\n",
    "125068": "    /**\n     * Adds another call object that will be executed if this call finished\n     * successfully. All added objects are stored in a list that keeps the\n     * original order. All calls are executed in the same thread as this call.\n     * If one of the added calls produces an error, the remaining calls are\n     * executed nevertheless.\n     * <p>\n     * The event notification is done whenever a call was finished, meaning that\n     * <code>success</code> and <code>finished</code> are called before the\n     * other elements of the list are started.\n     * \n     * @param pCall\n     *            call object that is exectued conditional on this call to\n     *            finish without error\n     */\n",
    "125072": "    /**\n     * Gets the GRTE type from <code>arg</code> with the same values.\n     * \n     * @param arg\n     *            the data object to be transformed in a type understandable by\n     *            the GRTE\n     * @return the data object to be used as argument for the GRTE\n     * @throws IllegalArgumentException\n     *             if type is not recognized\n     */\n",
    "125075": "    /**\n     * Returns the config file location for the respective engine. The filename\n     * is constructed as:\n     * <p>\n     * <code>\"j\" + name.toLowerCase() + \"/\" + CONFIG_FILE;</code>\n     * <p>\n     * If the directory <code>\"j\" + name.toLowerCase() </code> does not exist\n     * yet in the resource path, it will be created by this method.\n     * <p>\n     * Subclasses can overwrite this method if this is not the desired\n     * behaviour.\n     * \n     * @return the relative location of the XML config file to the resource\n     *         directory\n     */\n",
    "125077": "    /**\n     * Gets whether date is printed in output.\n     * \n     * @return <code>true</code> if printed\n     */\n",
    "125078": "    /**\n     * Gets the configuration panel for the respective engine. This default\n     * implementation creates an edit dialog for the XML file. It works for all\n     * settings. This can be overwritten to provide a costumized settings\n     * dialogs for a specific engine.\n     * \n     * @return the user panel containing the user input mask for configuration\n     */\n",
    "125082": "    /**\n     * Sets whether date is printed in output, the default is <code>true</code>.\n     * \n     * @param b\n     *            <code>true</code> if printed\n     */\n",
    "125086": "    /**\n     * Adapter to <code>Engine.call</code> that uses <code>engine()</code>.\n     * \n     * @param procName\n     *            procedure to be executed by this engine\n     * @param args\n     *            the data to be used as input\n     * @param retData\n     *            the return types\n     * @see com.jstatcom.engine.Engine\n     */\n",
    "125087": "    /**\n     * Creates a dialog to change the configuration settings for the respective\n     * engine. It updates the XML configuration file if the changes were\n     * successful.\n     */\n",
    "125089": "    /**\n     * Get a configuration value for a key.\n     * \n     * @param key\n     *            that defines type of setting\n     * @return a string containing the setting associated with <code>key</code>\n     *         or <code>null</code> if the key is not contained\n     * @throws IllegalArgumentException\n     *             <code>if (key == null)</code>\n     */\n",
    "125090": "    /**\n     * Serializes <code>this</code> to an XML file.\n     */\n",
    "125091": "    /**\n     * Adapter to <code>Engine.load</code> that uses <code>engine()</code>.\n     * \n     * @param module\n     *            the name of the module to load\n     * @param loadType\n     *            the type of module to load\n     * @param args\n     *            module load arguments if needed\n     */\n",
    "125093": "    /**\n     * Set a key value pair to be stored by the config holder.\n     * \n     * @param configKey\n     *            the key\n     * @param value\n     *            the value\n     * @throws IllegalArgumentException\n     *             <code>if (configKey == null)</code> or if\n     *             <code>configKey</code> is not valid for the underlying\n     *             engine type\n     */\n",
    "125096": "    /**\n     * Gets a special listener that, for example, can be used to display status\n     * information about a running call. This implementation returns a default\n     * component that is shared among all instances of this class and that\n     * displays the time, name, and engine of a running call. Subclasses can\n     * overwrite this method to provide their own shared listeners.\n     * <p>\n     * <b>Usage Note: </b> <br>\n     * To use a different control, it makes sense to subclass and overwrite this\n     * abstract class with another abstract class providing the new\n     * implementation with a different shared listener. Then all concrete\n     * classes should subclass the newly created class. This is useful if all\n     * calls share a common control component.\n     * \n     * @return <code>PCallListener</code> for special purposes\n     */\n",
    "125100": "    /**\n     * Gets the executor that is used by the <code>execute</code> method. The\n     * default implementation uses <code>util.concurrent.QueuedExecutor</code>.\n     * Subclasses might overwrite this method to define a different execution\n     * policy.\n     * \n     * @return instance of <code>Executor</code> to be used by\n     *         <code>execute</code>\n     */\n",
    "125101": "    /**\n     * Invokes call to a Matlab routine. The number of return parameters must be\n     * set before to initialize the return array.\n     * \n     * @param procName\n     * @param rtnArgs\n     * @throws IllegalArgumentException\n     */\n",
    "125102": "    /**\n     * Deletes graphics directory and shuts down all workspaces by calling\n     * <code>Gauss.shutdown()</code>.\n     */\n",
    "125103": "    /**\n     * Gets whether GUI mode is set.\n     * \n     * @return <code>true</code> if in GUI mode, <code>false</code>\n     *         otherwise\n     */\n",
    "125107": "    /**\n     * Sets GUI mode, if <code>true/false</code> the following features are\n     * enabled/disabled:\n     * \n     * <ul>\n     * <li> event synchronization with Swing\n     * <li> Swing dialogs are used to display error messages\n     * </ul>\n     * \n     * Default is <code>true</code>.\n     * \n     * @param gui\n     */\n",
    "125108": "    /**\n     * Gets the workspace that is encapsulated by this engine.\n     * \n     * @return the current workspace used for this engine\n     */\n",
    "125110": "    /**\n     * This method is called when the call has finished, successful or not. It\n     * should be used to implement cleanup code, like deleting temporary files.\n     * The default implementation is empty.\n     * \n     */\n",
    "125112": "    /**\n     * Gets the gauss workspace that this engine uses.\n     * \n     * @return gauss workspace\n     */\n",
    "125115": "    /**\n     * Deals with an output string.\n     * \n     * @param s\n     */\n",
    "125116": "    /**\n     * Deals with an error string.\n     * \n     * @param s\n     */\n",
    "125125": "    /**\n     * Empty method, no termination code.\n     * \n     * @see com.jstatcom.engine.Engine#shutdown()\n     */\n",
    "125139": "    /**\n     * Sets a new output error handler.\n     * \n     * @param outErrHandler\n     *            new implementation for dealing with output and errors\n     * @throws IllegalArgumentException\n     *             if <code>null</code> argument\n     */\n",
    "125144": "    /**\n     * Gets a pointer from a vector JSCNArray.\n     * \n     * @param nArray\n     * @return pointer\n     */\n",
    "125146": "\t/**\n\t * Compares this <code>CPtr</code> to the specified object.\n\t * \n\t * @param other\n\t *            a <code>CPtr</code>\n\t * @return true if the class of this <code>CPtr</code> object and the\n\t *         class of <code>other</code> are exactly equal, and the C\n\t *         pointers being pointed to by these objects are also equal.\n\t *         Returns false otherwise.\n\t */\n",
    "125147": "\t/**\n\t * Returns a hashcode for the C pointer represented by this\n\t * <code>Cptr</code> object.\n\t * \n\t * @return a hash code value for the represented C pointer.\n\t */\n",
    "125149": "\t/**\n\t * De-allocate space obtained via an earlier call to <code>malloc</code>.\n\t */\n",
    "125150": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.copyIn</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#copyIn(int,byte[],int,int) \n\t */\n",
    "125152": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.copyIn</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#copyIn(int,short[],int,int)\n\t */\n",
    "125154": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.copyIn</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#copyIn(int,char[],int,int)\n\t */\n",
    "125155": "        /**\n         * Format method for the o conversion character and short argument.\n         * \n         * For o format, the flag character '-', means that the output should be\n         * left justified within the field. The default is to pad with blanks on\n         * the left. The '#' flag character means that the output begins with a\n         * leading 0 and the precision is increased by 1.\n         * \n         * The field width is treated as the minimum number of characters to be\n         * printed. The default is to add no padding. Padding is with blanks by\n         * default.\n         * \n         * The precision, if set, is the minimum number of digits to appear.\n         * Padding is with leading 0s.\n         * \n         * @param x\n         *            the short to format.\n         * @return the formatted String.\n         */\n",
    "125156": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.copyIn</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#copyIn(int,int[],int,int) \n\t */\n",
    "125158": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.copyIn</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#copyIn(int,long[],int,int) \n\t */\n",
    "125159": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.copyIn</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#copyIn(int,float[],int,int)\n\t */\n",
    "125161": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.copyIn</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#copyIn(int,double[],int,int) \n\t */\n",
    "125163": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.copyOut</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#copyOut(int,byte[],int,int) \n\t */\n",
    "125164": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.copyOut</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#copyOut(int,short[],int,int)\n\t */\n",
    "125166": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.copyOut</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#copyOut(int,char[],int,int) \n\t */\n",
    "125167": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.copyOut</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#copyOut(int,int[],int,int)\n\t */\n",
    "125169": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.copyOut</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#copyOut(int,long[],int,int) \n\t */\n",
    "125171": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.copyOut</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#copyOut(int,float[],int,int) \n\t */\n",
    "125172": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.copyOut</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#copyOut(int,double[],int,int) \n\t */\n",
    "125175": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.getByte</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#getByte(int)\n\t */\n",
    "125177": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.getShort</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#getShort(int)\n\t */\n",
    "125178": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.getInt</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#getInt(int)\n\t */\n",
    "125179": "    /**\n     * Calls termination code.\n     * \n     * @see com.jstatcom.engine.Engine#shutdown()\n     */\n",
    "125180": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.getLong</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#getLong(int)\n\t */\n",
    "125182": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.getFloat</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#getFloat(int)\n\t */\n",
    "125184": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.getDouble</code>.  But this method performs a bounds checks\n\t * to ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#getDouble(int)\n\t */\n",
    "125187": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.getCPtr</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#getCPtr(int)\n\t */\n",
    "125188": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.getString</code>.  But this method performs a bounds checks\n\t * to ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#getString(int)\n\t */\n",
    "125190": "    /**\n     * Executes a GAUSS command. If this engine is in debug mode, the command is\n     * also printed to <code>System.out</code>.\n     * \n     * @param command\n     *            string with GAUSS code, for example \"y=rndn(100,1)\"\n     * @throws IllegalArgumentException\n     *             <code>if (command == null)</code>\n     * @throws RuntimeException\n     *             if execution of <code>command</code> failed, use\n     *             <code>getMessage</code> to retrieve the error string\n     */\n",
    "125191": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.setByte</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#setByte\n\t */\n",
    "125193": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.setShort</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#setShort\n\t */\n",
    "125195": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.setInt</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#setInt\n\t */\n",
    "125196": "    /**\n     * Calls termination code.\n     * \n     * @see com.jstatcom.engine.Engine#shutdown()\n     */\n",
    "125197": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.setLong</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#setLong\n\t */\n",
    "125200": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.setFloat</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#setFloat\n\t */\n",
    "125202": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.setDouble</code>.  But this method performs a bounds checks\n\t * to ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#setDouble\n\t */\n",
    "125205": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.setCPtr</code>.  But this method performs a bounds checks to\n\t * ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#setCPtr\n\t */\n",
    "125208": "\t/**\n\t * Indirect the C pointer to <code>malloc</code> space, a la\n\t * <code>CPtr.setString</code>.  But this method performs a bounds checks\n\t * to ensure that the indirection does not cause memory outside the\n\t * <code>malloc</code>ed space to be accessed.\n\t *\n\t * @see CPtr#setString\n\t */\n",
    "125212": "    /**\n     * Gets a unique temporary file. The file is created by this method in the\n     * temporary directory specified for the respective engine. The prefix is\n     * <code>\"jsc\"</code>. It will automatically be deleted when the VM exits\n     * normally.\n     * \n     * @return the name of a temporary file\n     * @throws RuntimeException\n     *             if the file could not be created\n     */\n",
    "125213": "    /**\n     * Checks the validity of the configuration for the <code>GaussEngine</code>.\n     * \n     * @see com.jstatcom.engine.EngineTypes\n     * @throws IllegalArgumentException\n     *             <code>if (configHolder == null)</code>\n     */\n",
    "125225": "    /**\n     * Gets a list iterator for all source file names. The order from the XML\n     * representation is preserved.\n     * \n     * @return an iterator\n     */\n",
    "125230": "        /**\n         * Format method for the c conversion character and char argument.\n         * \n         * The only flag character that affects c format is the '-', meaning\n         * that the output should be left justified within the field. The\n         * default is to pad with blanks on the left.\n         * \n         * The field width is treated as the minimum number of characters to be\n         * printed. Padding is with blanks by default. The default width is 1.\n         * \n         * The precision, if set, is ignored.\n         * \n         * @param x\n         *            the char to format.\n         * @return the formatted String.\n         */\n",
    "125245": "    /**\n     * Gets a list iterator for libname - sourcefile pairs. The order from the\n     * XML representation is preserved.\n     * <p>\n     * The pairs are stored as instances of <code>LIBSet.SRCLibPair</code>.\n     * \n     * @return an iterator\n     */\n",
    "125248": "    /**\n     * Initiates parsing of data file.\n     * \n     * @param dataFile\n     *            the file to read in\n     * @return <code>true</code> of import was ok, <code>false</code> if\n     *         canceled or erroneous\n     * @throws IllegalArgumentException\n     *             <code>if (dataFile == null || !dataFile.isFile())</code>\n     */\n",
    "125250": "    /**\n     * Gets the imported data according to an instance of\n     * <code>TSImportTypes</code>.\n     * \n     * @param type\n     *            the elementtype of a time series dataset\n     * @return the data stored as <code>JSCData</code>\n     * @throws IllegalArgumentException\n     *             <code>if (type == null)</code>\n     * @throws IllegalStateException\n     *             if nothing was imported before\n     */\n",
    "125253": "    /**\n     * Gets the dialog to ask for user information.\n     */\n",
    "125262": "    /**\n     * Sets this handler in test mode. No user dialog is shown, default values\n     * are used instead. This is helpful for running automated unit tests.\n     * \n     * @param noDialog\n     */\n",
    "125271": "    /**\n     * Lets the user choose a directory with the JFileChooser.\n     * \n     * @param parent\n     *            the parent component for the FileChooser Dialog\n     * @param titleText\n     *            the title String for the dialog\n     * @return null if it was canceled, otherwise the directory that was chosen\n     */\n",
    "125273": "    /**\n     * Checks whether stop was called and throws exception to notify caller. The\n     * flag is reset.\n     */\n",
    "125274": "    /**\n     * Reads the contents of a text file and returns it as a string.\n     * \n     * @param fileName\n     *            of file ro read from\n     * @return a string with the text of the file\n     * @throws IllegalArgumentException\n     *             <code>if (fileName == null)</code>\n     */\n",
    "125275": "        /**\n         * Check for a conversion character. If it is there, store it.\n         * \n         * @param x\n         *            the String to format.\n         * @return <code>true</code> if the conversion character is there, and\n         *         <code>false</code> otherwise.\n         */\n",
    "125276": "    /**\n     * Initiates parsing of .dat Gauss data set file.\n     * \n     * @param file\n     *            the file to read in\n     * @return <code>true</code> of import was ok, <code>false</code> if\n     *         cancelled or erroneous\n     * @throws IllegalArgumentException\n     *             <code>if (file == null || !file.isFile())</code>\n     * @throws RuntimeException\n     *             when file reading fails\n     */\n",
    "125284": "    /**\n     * Gets the dialog used for raw ASCII files.\n     */\n",
    "125285": "    /**\n     * Stores <code>stringDat</code> to <code>file</code>.\n     * \n     * @param file\n     *            the file to store <code>stringDat</code> to\n     * @param stringDat\n     *            the string to save\n     * @param append\n     *            <code>true</code> if string should be appended to existing\n     *            file,\n     * \n     */\n",
    "125289": "        /**\n         * Check for an h, l, or L in a format. An L is used to control the\n         * minimum number of digits in an exponent when using floating point\n         * formats. An l or h is used to control conversion of the input to a\n         * long or short, respectively, before formatting. If any of these is\n         * present, store them.\n         */\n",
    "125300": "    /**\n     * Sets the directory that will be displayed as default selection when a\n     * file chooser is created. This should be set as program start. At further\n     * invocations of the file choosers, the last selected directory will be\n     * displayed.\n     * \n     * @param newDefaultPath\n     *            the new default path to be selected initially\n     */\n",
    "125302": "        /**\n         * Set the precision.\n         */\n",
    "125304": "    /**\n     * Starts the <code>SwingWorker</code> threads to create\n     * <code>JFileChooser</code> instances in the background.\n     */\n",
    "125307": "    /**\n     * Sets the selected files and directories to the settings argument. Nothing\n     * happens if the argument is <code>null</code> or does not have at least\n     * 6 rows.\n     * \n     * @param settings\n     *            holds the file parameters\n     */\n",
    "125313": "    /**\n     * Gets the settings instance according to the previously made file\n     * selections.\n     * \n     * @return settings instance\n     */\n",
    "125316": "        /**\n         * Set the field width.\n         */\n",
    "125321": "    /**\n     * Gets the handler type chosen for data import.\n     * \n     * @return handler type\n     */\n",
    "125323": "    /**\n     * Gets the selected start date.\n     * \n     * @return start date of sample\n     */\n",
    "125324": "    /**\n     * Gets the selected sheet, because there might be several sheets in an\n     * EXCEL file.\n     * \n     * @return int index for sheet, starts with 0\n     */\n",
    "125325": "    /**\n     * Gets the handler type chosen for data export.\n     * \n     * @return handler type\n     */\n",
    "125326": "    /**\n     * Gets a string with the variable names.\n     * \n     * @return string containing all names\n     */\n",
    "125328": "    /**\n     * PrintStream overwrite.\n     * \n     * @param buf\n     *            byte[]\n     * @param off\n     *            int\n     * @param len\n     *            int\n     */\n",
    "125329": "    /**\n     * PrintStream overwrite.\n     * \n     * @param b\n     *            int\n     */\n",
    "125330": "    /**\n     * Sets the displayed variable names.\n     * \n     * @param names\n     *            array with the names to display\n     * @throws IllegalArgumentException\n     *             <code>if (names == null)</code>\n     */\n",
    "125335": "    /**\n     * Gets the string array with the names of selected files and directories in\n     * the followins order:\n     * <ol>\n     * <li>selected text output directory\n     * <li>selected data directory\n     * <li>selected project filename (without directory)\n     * <li>selected project directory\n     * </ol>\n     * \n     * @return 4x1 <code>JSCSArray</code>\n     */\n",
    "125337": "    /**\n     * Sets the <code>JSCSArray</code> with the names of selected files and\n     * directories.\n     * \n     * @param selectedFiles\n     *            array with names\n     * @throws IllegalArgumentException\n     *             <code>if (selectedFiles == null)</code>\n     */\n",
    "125339": "        /**\n         * Store the digits <code>n</code> in %n$ forms.\n         */\n",
    "125340": "    /**\n     * Gets the parent <code>JInternalFrame</code> of this panel.\n     * \n     * @return the parent frame or <code>null</code> if no parent frame could\n     *         be found\n     */\n",
    "125354": "    /**\n     * Gets whether dialog was canceled.\n     * \n     * @return <code>true</code> if canceled\n     */\n",
    "125360": "    /**\n     * Insert the method's description here. Creation date: (27.03.2002\n     * 16:43:18)\n     * \n     * @param newCanceled\n     *            boolean\n     */\n",
    "125363": "    /**\n     * Insert the method's description here. Creation date: (27.03.2002\n     * 15:23:16)\n     * \n     * @param newSelectedSheet\n     *            int\n     */\n",
    "125366": "        /**\n         * Store the digits <code>n</code> in *n$ forms.\n         */\n",
    "125368": "    /**\n     * Sets the names of the available sheets contained in the selected EXCEL\n     * file.\n     * \n     * @param sheetNames\n     *            sheet name array\n     */\n",
    "125370": "    /**\n     * Insert the method's description here. Creation date: (21.03.01 11:22:51)\n     * \n     * @param newCancelDialog\n     *            boolean\n     */\n",
    "125376": "    /**\n     * Adds a filetype \"dot\" extension to filter against.\n     * \n     * For example: the following code will create a filter that filters out all\n     * files except those that end in \".jpg\" and \".tif\":\n     * \n     * ExampleFileFilter filter = new ExampleFileFilter();\n     * filter.addExtension(\"jpg\"); filter.addExtension(\"tif\");\n     * \n     * Note that the \".\" before the extension is not needed and will be ignored.\n     */\n",
    "125379": "    /**\n     * Returns the human readable description of this filter. For example: \"JPEG\n     * and GIF Image Files (*.jpg, *.gif)\"\n     * \n     * @see #setDescription\n     * @see #setExtensionListInDescription\n     * @see #isExtensionListInDescription\n     * @see FileFilter#getDescription\n     */\n",
    "125381": "    /**\n     * Return the extension portion of the file's name .\n     * \n     * @see #getExtension\n     * @see FileFilter#accept\n     */\n",
    "125383": "\t/**\n\t * Appends text to the log that is made visible in\n\t * a text area, where it can be cleared or saved.\n\t *\n\t * @param text String\n\t */\n",
    "125384": "    /**\n     * Returns whether the extension list (.jpg, .gif, etc) should show up in\n     * the human readable description.\n     * \n     * Only relevent if a description was provided in the constructor or using\n     * setDescription();\n     * \n     * @see #getDescription\n     * @see #setDescription\n     * @see #setExtensionListInDescription\n     */\n",
    "125385": "\t/**\n\t * Shows this component.\n\t * \n\t * @param show if <code>true</code> then show, otherwise hide\n\t */\n",
    "125387": "    /**\n     * Sets the human readable description of this filter. For example:\n     * filter.setDescription(\"Gif and JPG Images\");\n     * \n     * @see #setDescription\n     * @see #setExtensionListInDescription\n     * @see #isExtensionListInDescription\n     */\n",
    "125388": "\t/**\n\t * Called whenever the part throws an exception.\n\t * @param exception Exception\n\t */\n",
    "125389": "    /**\n     * Determines whether the extension list (.jpg, .gif, etc) should show up in\n     * the human readable description.\n     * \n     * Only relevent if a description was provided in the constructor or using\n     * setDescription();\n     * \n     * @see #getDescription\n     * @see #setDescription\n     * @see #isExtensionListInDescription\n     */\n",
    "125392": "    /**\n     * Gets the handler type or <code>null</code> if none has been set.\n     * \n     * @return handler type\n     */\n",
    "125395": "    /**\n     * Initiates importing data. It calls the <code>importData</code> method\n     * of the underlying <code>AbstractImportPanel</code>.\n     * \n     * @return <code>true</code> if import was successful\n     * @throws IllegalStateException\n     *             if no import panel has been set before\n     * \n     */\n",
    "125396": "    /**\n     * Initiates importing data for athe given file. It calls the\n     * <code>importData</code> method of the underlying\n     * <code>AbstractImportPanel</code>.\n     * \n     * @param importFile\n     *            the file to read data from\n     * @return <code>true</code> if import was successful\n     * @throws IllegalStateException\n     *             if no import panel has been set before\n     */\n",
    "125398": "        /**\n         * Store the digits <code>n</code> in *n$ forms.\n         */\n",
    "125402": "    /**\n     * Initiates browsing for a file with data that should be imported.\n     */\n",
    "125403": "    /**\n     * Creates the names either from index, from file or from dialog.\n     */\n",
    "125404": "    /**\n     * Sets the panel implementing the import functionality.\n     * \n     * @param panel\n     *            the concrete import GUI\n     * @throws IllegalArgumentException\n     *             <code>if (panel == null)</code>\n     */\n",
    "125405": "    /**\n     * Initiates data import from <code>importFile</code>.\n     * \n     * @param importFile\n     *            the file to read data from\n     * @throws IllegalArgumentException\n     *             <code>if (importFile == null)</code>\n     * @throws RuntimeException\n     *             <code>if (!importFile.canRead())   </code>\n     */\n",
    "125415": "    /**\n     * Returns the currently displayed date as an index relative to the lower\n     * bound of the defined range, starting from 0.\n     * \n     * @return index that is >= 0 and < than the number of observations within\n     *         the allowed range\n     */\n",
    "125417": "    /**\n     * Gets the range that the selected date must be in with.\n     * \n     * @return the bounding range\n     */\n",
    "125418": "    /**\n     * Gets the currently displayed date.\n     * \n     * @return the selected date\n     */\n",
    "125419": "        /**\n         * Set flag characters, one of '-+#0 or a space.\n         */\n",
    "125421": "    /**\n     * Error handling routine if validation failed. Displays error message and\n     * sets back date value to the last valid one..\n     * \n     * @param msg\n     *            an error message\n     */\n",
    "125423": "    /**\n     * Sets the range that the selected date must be in with. The selected date\n     * is not changed unless it violates the new range setting. In that case it\n     * is set to the start date of the new range.\n     * \n     * @param newOverallRange\n     *            the new bounding range that the date has to be in with\n     * @throws IllegalArgumentException\n     *             <code>if (newOverallRange == null)</code>\n     */\n",
    "125425": "    /**\n     * Sets the currently displayed date if it conforms to the specified range.\n     * This method fires a \"TSDate\" property change with the old value and the\n     * changed value if a new date was set.\n     * \n     * @param newTSDate\n     *            the date to be displayed\n     * @throws IllegalArgumentException\n     *             if <code>newTSDate</code> is not enclosed in range\n     */\n",
    "125427": "    /**\n     * Validates input against the <code>TSDateParser</code> and the specified\n     * <code>TSDateRange</code>.\n     * \n     * @return error message if failure, <code>null</code> if ok\n     */\n",
    "125434": "    /**\n     * Stores changes to <code>TSHolder</code>.\n     */\n",
    "125435": "    /**\n     * This method initializes jScrollPane\n     * \n     * @return javax.swing.JScrollPane\n     */\n",
    "125438": "    /**\n     * Return a substring starting at <code>start</code> and ending at either\n     * the end of the String <code>s</code>, the next unpaired percent sign,\n     * or at the end of the String if the last character is a percent sign.\n     * \n     * @param s\n     *            Control string.\n     * @param start\n     *            Position in the string <code>s</code> to begin looking for\n     *            the start of a control string.\n     * @return the substring from the start position to the beginning of the\n     *         control string.\n     */\n",
    "125439": "    /**\n     * Gets whether parent frame is hidden after clicking load.\n     * \n     * @return <code>true</code> if parent frame is hidden after load\n     */\n",
    "125442": "    /**\n     * Sets whether parent frame is hidden after clicking load.\n     * \n     * @param b\n     *            <code>true</code> if parent frame is hidden after load\n     */\n",
    "125445": "    /**\n     * Gets the overall range that the selected range must be in with.\n     * \n     * @return the enclosing range\n     */\n",
    "125446": "    /**\n     * Gets the minimum number of observations selectable by this component.\n     * \n     * @return minimum number of observations\n     */\n",
    "125447": "    /**\n     * Gets the currently displayed date range.\n     * \n     * @return the currently selected range\n     */\n",
    "125448": "    /**\n     * Error handling routine if validation failed. Displays an error message\n     * and sets back the range value to the last valid one.\n     * \n     * @param msg\n     *            an error message\n     */\n",
    "125450": "    /**\n     * Sets the display to the maximum possible range, which is the enclosing\n     * range.\n     */\n",
    "125453": "    /**\n     * Sets the overall range that the selected range must be in with. The\n     * selected range is not changed unless it violates the new range setting.\n     * \n     * @param newOverallRange\n     *            the new bounding range\n     * @throws IllegalArgumentException\n     *             <code>if (newOverallRange == null)</code>\n     */\n",
    "125455": "    /**\n     * Sets the minimum number of observations selectable by this component. It\n     * also sets back the currently displayed range to the overall range.\n     * \n     * @param newMinNumberOfObs\n     *            any int value. If it is larger than the current range, then\n     *            only the whole range is still valid. Otherwise no selection\n     *            would be possible anymore.\n     */\n",
    "125457": "    /**\n     * Sets the currently displayed date range if it conforms to the specified\n     * overall range. This method fires a \"TSDateRange\" property change with the\n     * old value and the changed value if a new date range was set.\n     * \n     * @param newTSDateRange\n     *            the range to be displayed\n     * @throws IllegalArgumentException\n     *             if newTSDateRange does not fit in overall range or is\n     *             <code>null</code>\n     */\n",
    "125470": "    /**\n     * Returns the text entered as description by the user.\n     * \n     * @return String\n     */\n",
    "125471": "    /**\n     * Gets the currently used RIGHT mouse <code>JPopupMenu</code>.\n     * \n     * @return the currently used RIGHT mouse popup\n     */\n",
    "125478": "    /**\n     * Sets new <code>KeyListener</code>, removes old one.\n     * \n     * @param newTSKeyListener\n     *            if <code>null</code> then it is just removed\n     */\n",
    "125480": "    /**\n     * Sets a new popup whose <code>processMouseEvent</code> method is called,\n     * when a <code>mouseReleased</code> event occured.\n     * \n     * @param newTsListPopup\n     *            if <code>null</code> then it is just removed\n     */\n",
    "125484": "    /**\n     * Adds a time series to this project. Nothing happens, if the series is\n     * already contained.\n     * \n     * @param ts\n     *            time series to be added to this project\n     */\n",
    "125486": "    /**\n     * Gets the description of this project. It should contain a short remark\n     * about every time series in the project.\n     * \n     * @return the project description\n     */\n",
    "125487": "    /**\n     * Add the selected variables to the set of globally available time series.\n     */\n",
    "125488": "    /**\n     * This method is called whenever there is a property change in the\n     * connected property fields. The action depends on the source determined.\n     * \n     * @param evt\n     *            a property change event\n     */\n",
    "125489": "    /**\n     * Sets the descriptive text displayed by this dialog explicitely.\n     * \n     * @param desc\n     *            the description to be displayed\n     */\n",
    "125490": "    /**\n     * Removes a time series from this project. Nothing happens, if series is\n     * not in the project.\n     * \n     * @param name\n     *            the <code>String</code> identifying the time series to\n     *            remove\n     */\n",
    "125491": "    /**\n     * Sets <code>TSList</code> for this dialog. The selected time series are\n     * retrieved from the list and the project information is used for the\n     * initial display.\n     * \n     * @param newTimeSeriesList\n     *            the <code>TSList</code> to be referenced\n     */\n",
    "125492": "    /**\n     * Sets the description for this project. It should contain a short remark\n     * about every time series in the project.\n     * \n     * @param newProjectDescription\n     *            the new description\n     */\n",
    "125494": "    /**\n     * Gets a string representation of this project.\n     * \n     * @return representation contains this name and the names of all contained\n     *         <code>TS</code>\n     */\n",
    "125496": "    /**\n     * Calculator Button is pressed.\n     */\n",
    "125500": "    /**\n     * Format a double.\n     * \n     * @param x\n     *            The double to format.\n     * @return The formatted String.\n     * @exception IllegalArgumentException\n     *                if the conversion character is c, C, s, S, d, d, x, X, or\n     *                o.\n     */\n",
    "125501": "    /**\n     * Enables/disables the menu according to the state of the underlying list.\n     * The default is that this menu is disabled if nothing is selected. This\n     * can be changed by overriding this method. Apart from that, the currently\n     * available <code>TSList</code> is set to be accessed when the action is\n     * invoked.\n     * \n     * @param tsList\n     *            the <code>TSList</code> to be referenced\n     */\n",
    "125509": "    /**\n     * Compares two <code>TSDate</code> objects.\n     * \n     * @return 0 if they are equal, otherwise number of periods between the two\n     *         dates, which is &lt; 0 if <code>(TSDate) o</code> is earlier\n     *         than this\n     * \n     * @throws ClassCastException\n     *             if o is not a <code>TSDate</code>\n     * @throws IllegalArgumentException\n     *             if sub periodicities do not match, because there is no\n     *             meaningful way to compare the dates\n     */\n",
    "125512": "    /**\n     * Returns this date in number form.\n     * \n     * @return double representation of this <code>TSDate</code>\n     */\n",
    "125514": "    /**\n     * Overrides <code>equals</code> to provide logical comparison of two\n     * different <code>TSDate</code> objects.\n     * \n     * @param o\n     *            object to compare with\n     * @return <code>true</code> if mainPeriod, subPeriod and subPeriodicity\n     *         are the same, <code>false</code> otherwise\n     */\n",
    "125517": "    /**\n     * Format an int.\n     * \n     * @param x\n     *            The int to format.\n     * @return The formatted String.\n     * @exception IllegalArgumentException\n     *                if the conversion character is e, E, g, G, s, or S.\n     */\n",
    "125518": "    /**\n     * Returns the main period of this date.\n     * \n     * @return the main period (left of the decimal point):\n     */\n",
    "125520": "    /**\n     * Returns the sub period of this date.\n     * \n     * @return sub period, is always within [1, <code>subPeriodicity</code>]\n     */\n",
    "125525": "    /**\n     * Returns the sub period format for the double representation of this date.\n     * This number acts as a place holder for the digits of the sub period. If\n     * <code>subPeriodicity &lt; 10</code>, this number returns 10, if\n     * <code>10 &lt;= subPeriodicity &lt; 100</code>, this number returns 100\n     * and so on. If one multiplies the double coded date with the sub period\n     * format, one always gets a value that is equal to an integer, because the\n     * decimal digits vanish.\n     * \n     * @return the sub period format\n     */\n",
    "125526": "    /**\n     * Returns the sub periodicity of this date. The <code>subPeriodicity</code>\n     * quantifies the number of sub periods which constitute one main period.\n     * \n     * @return the sub periodicity\n     */\n",
    "125529": "    /**\n     * Overrides <code>hashCode</code>, because equals was overwritten. The\n     * algorithm was taken from <cite>(Joshua Bloch, \"Effective Java\", Item 8)\n     * </cite>.\n     * \n     * @return hash code\n     */\n",
    "125530": "    /**\n     * Format an long.\n     * \n     * @param x\n     *            The long to format.\n     * @return The formatted String.\n     * @exception IllegalArgumentException\n     *                if the conversion character is e, E, g, G, s, or S.\n     */\n",
    "125532": "    /**\n     * This method returns the format number for the sub periods that defines,\n     * how many digits can appear after the decimal point.\n     * \n     * @param subPeriodicity\n     *            the frequency\n     * @return parsed sub period format\n     */\n",
    "125533": "    /**\n     * Gets a nicely formatted string representing this date. Unlike the\n     * <code>toString</code> method, the resulting string is not necessarily a\n     * valid argument for the <code>valueOf</code> method. Especially daily\n     * data is printed differently with the weekday and without \"(5)\" or \"(7)\".\n     * \n     * @return formatted string\n     */\n",
    "125534": "    /**\n     * Sets <code>TSList</code> for this dialog. The selected time series are\n     * retrieved from the list and used for the transformation.\n     * \n     * @param newTimeSeriesList\n     *            a TSList that should not be not null\n     */\n",
    "125537": "    /**\n     * Gets a formatted string representing this date that is very short. Unlike\n     * the <code>toString</code> method, the resulting string is not\n     * necessarily a valid argument for the <code>valueOf</code> method.\n     * Especially daily data is printed differently with the weekday and without\n     * \"(5)\" or \"(7)\".\n     * \n     * @return formatted string\n     */\n",
    "125539": "    /**\n     * Currently only implemented for daily dates, otherwise an Exception is\n     * thrown.\n     * \n     * Assembles a <code>java.util.Date</code> object from this. The returned\n     * date always denotes the start of this date.\n     * \n     * @return date\n     * @throws IllegalStateException\n     *             if this does not represent daily data\n     */\n",
    "125545": "    /**\n     * Returns a string representation of this <code>TSDate</code>. A\n     * <code>TSDate</code> object can be constructed from a string using the\n     * <code>TSDateParser</code> or respective the <code>TSDate.valueOf</code>\n     * initializer. Do not use for comparisons, but use equals instead.\n     * \n     * @return String representation of this object.\n     * @see com.jstatcom.parser.TSDateParser\n     */\n",
    "125546": "    /**\n     * Format a String.\n     * \n     * @param x\n     *            The String to format.\n     * @return The formatted String.\n     * @exception IllegalArgumentException\n     *                if the conversion character is neither s nor S.\n     */\n",
    "125552": "        /**\n         * Transform selected TS.\n         */\n",
    "125554": "        /**\n         * Create Dummy for selected TS.\n         */\n",
    "125555": "        /**\n         * Description of 1st selected TS.\n         */\n",
    "125559": "        /**\n         * Edit selected TS.\n         */\n",
    "125560": "    /**\n     * If ENTER was pressed, execute expression.\n     */\n",
    "125566": "    /**\n     * Overrides <code>equals()</code> to provide logical comparison of two\n     * different TS.\n     * \n     * @param o\n     *            the object to compare\n     * @return <code>true</code> if name, start, all observations and type are\n     *         the same, <code>false</code> otherwise\n     */\n",
    "125567": "    /**\n     * Enables/disables the action according to the state of the underlying\n     * list. The default is that the action is disabled if nothing is selected.\n     * This can be changed by overriding the method. Apart from that, the\n     * currently available TSList is set.\n     * \n     * @param tsList\n     *            the <code>TSList</code> to be referenced by the action\n     */\n",
    "125568": "    /**\n     * Double Click on namesList.\n     */\n",
    "125573": "    /**\n     * Sets the data description. If the string argument is <code>null</code>\n     * then <code>\"\"</code> is used instead.\n     * \n     * @param dataDescription\n     *            a descriptive string\n     */\n",
    "125575": "    /**\n     * Checks whether <code>data</code> matches given <code>type</code>.\n     * The <code>index</code> parameter is only for generating messages.\n     * \n     * @param data\n     * @param type\n     * @param index\n     * @throws RuntimeException\n     *             if type check fails\n     */\n",
    "125578": "    /**\n     * Gets the time series data type.\n     * \n     * @return <code>ProjectDataTypes.TS_DATA</code>\n     */\n",
    "125581": "    /**\n     * Gets a new <code>TSDateRange</code> range object with the start date\n     * shifted by <code>periods</code>.\n     * \n     * @param periods\n     *            the number of periods to shift the start date, can be\n     *            negative, which results in an earlier start, 0 creates a copy\n     *            of this\n     * @return a new range object with the same end date and a new start date\n     * @throws IllegalArgumentException\n     *             if new range would be invalid\n     */\n",
    "125585": "    /**\n     * Gets the array with the selected indices in the correct order.\n     * \n     * @return array with selected indices\n     */\n",
    "125586": "    /**\n     * Sets the array with the selected indices.\n     * \n     * @param selectedIndices\n     *            array with selected indices\n     * @throws IllegalArgumentException\n     *             <code>if (selectedIndices == null)</code>\n     */\n",
    "125587": "    /**\n     * Gets the selected date range object.\n     * \n     * @return the selected range\n     */\n",
    "125589": "    /**\n     * Sets the selected date range.\n     * \n     * @param selectedRange\n     *            date range\n     * @throws IllegalArgumentException\n     *             <code>if (selectedRange == null)</code>\n     */\n",
    "125590": "    /**\n     * Gets the enclosing date range object.\n     * \n     * @return the enclosing range\n     */\n",
    "125591": "    /**\n     * Sets the enclosing date range.\n     * \n     * @param enclosingRange\n     *            date range\n     * @throws IllegalArgumentException\n     *             <code>if (enclosingRange == null)</code>\n     */\n",
    "125593": "    /**\n     * Creates a time series that is a trend shift dummy for this range. A trend\n     * shift dummy has zeros outside the shift range and values [index + 1]\n     * within the shift range.\n     * \n     * @param name\n     *            the name of the new <code>TS</code>\n     * @param shiftRange\n     *            the range within this range to specify the trend shift\n     * \n     * @return the created trend shift dummy\n     * \n     * @throws IllegalArgumentException\n     *             if name is <code>null</code> or empty, or if\n     *             <code>shiftRange</code> is not a valid range for this range\n     */\n",
    "125595": "    /**\n     * Overrides <code>hashCode</code>, because equals was overwritten. The\n     * algorithm was taken from <cite>(Joshua Bloch, \"Effective Java\", Item 8)\n     * </cite>.\n     * \n     * @return hash code\n     */\n",
    "125598": "    /**\n     * Creates a time series that is a shift dummy for this range. A shift dummy\n     * has zeros outside the shift range and values [1] within the shift range.\n     * \n     * @param name\n     *            the name of the new <code>TS</code>\n     * @param shiftRange\n     *            the range within this range to specify the shift\n     * \n     * @return the created shift dummy\n     * \n     * @throws IllegalArgumentException\n     *             if name is <code>null</code> or empty, or if\n     *             <code>shiftRange</code> is not a valid range for this range\n     */\n",
    "125600": "    /**\n     * Gets whether underlying data changed.\n     * \n     * @return true if something changed\n     */\n",
    "125602": "    /**\n     * Override method to set alignment of default editor to\n     * <code>JLabel.RIGHT</code>. The method also takes care that the same\n     * cell renderer is used for editing, that is used for the display.\n     * \n     * @param editor\n     *            the default editor\n     * @param row\n     *            index for row\n     * @param col\n     *            index for column\n     * @return the adjusted cell editor\n     */\n",
    "125603": "    /**\n     * Checks whether a given date is within the range defined by this object.\n     * If not, an error message is returned.\n     * \n     * @param date\n     *            the date to check for\n     * @return null if within range, error string otherwise\n     */\n",
    "125605": "    /**\n     * Prints this object to the argument print stream with the time index and\n     * the respective observation next to it.\n     * \n     * @param p\n     *            the stream to print to\n     */\n",
    "125606": "    /**\n     * Sets number of digits right to decimal point.\n     * \n     * @param newPrecision\n     *            new number precision\n     * @throws IllegalArgumentException\n     *             if <code>newPrecision &lt; 0 </code>\n     */\n",
    "125607": "    /**\n     * Sets the new <code>JPopupMenu</code> that appears, if the RIGHT mouse\n     * is clicked over this table.\n     * \n     * @param newTablePopup\n     *            if set to null, then no popup is shown\n     */\n",
    "125608": "    /**\n     * Checks whether a given date range is included within the range defined by\n     * this object. If not, an error message is returned.\n     * \n     * @param otherRange\n     *            the range to check for\n     * @return null if within range, error string otherwise\n     */\n",
    "125610": "    /**\n     * Sets the <code>TS</code> to be held by the table. The\n     * <code>TSTableModel</code> takes care of merging the series. All series\n     * need to have the same sub periodicities.\n     * \n     * @param tsArray\n     *            an array with the <code>TS</code> objects to display\n     * @throws IllegalArgumentException\n     *             if sub periodicities are not equal for all <code>TS</code>\n     */\n",
    "125612": "    /**\n     * Invoked when the underlying table model changed.\n     * \n     * @param evt\n     *            the model event\n     */\n",
    "125613": "    /**\n     * Overrides <code>equals</code> to provide logical comparison of two\n     * different <code>TSDateRange</code> objects.\n     * \n     * @param o\n     *            object to compare with\n     * @return <code>true</code> if start and end dates are both equal,\n     *         <code>false</code> otherwise\n     */\n",
    "125618": "    /**\n     * Gets a nicely formatted version of this date range with a description and\n     * the number of observations, for example <br>\n     * <code>sample range:             [1960 Q3, 1982 Q4], T = 90</code><br>\n     * with \"sample range:\" as <code>description</code>.\n     * \n     * @param description\n     *            a desriptive string that will be put in front\n     * @param space\n     *            the number of spaces between <code>description</code> and\n     *            the rest, useful for alignment, should be greater than 0,\n     *            otherwise will be set to 0\n     * \n     * @return the formatted string\n     * \n     */\n",
    "125622": "    /**\n     * Sets the name of this time series to a new name. The name must not be\n     * <code>null</code> or empty. The name must begin either with '_' .\n     * \n     * @param newValue\n     *            the new name.\n     * @throws IllegalArgumentException\n     *             if newValue is <code>null</code>, empty or if it does not\n     *             start with a letter or '_'\n     */\n",
    "125623": "    /**\n     * Returns the date corresponding to an index respective to the range.\n     * \n     * @param index\n     *            can also specify value outside the range\n     * @return the date for the index\n     */\n",
    "125626": "    /**\n     * Computes the index that a date has respective to the range specified by\n     * this object, starting with 0.\n     * \n     * @param date\n     *            the <code>TSDate</code> to compute the index for\n     * @return 0 if date is equal to lower bound, difference of periods\n     *         otherwise\n     * @throws IllegalArgumentException\n     *             if subPeriodicities do not match or if date is null\n     */\n",
    "125631": "    /**\n     * Gets reference to start date of range.\n     * \n     * @return the date this range starts from\n     */\n",
    "125634": "    /**\n     * Returns number of observations represented by this range. Every range\n     * object contains at least one observation.\n     * \n     * @return the number of obervations within this range\n     */\n",
    "125637": "    /**\n     * Sets the type of this time series. If the argument is <code>null</code>,\n     * the type is determined internally to be either deterministic or\n     * endogenous.\n     * \n     * @param newTSType\n     *            the new type of the <code>TS</code>\n     * @see #type\n     */\n",
    "125639": "    /**\n     * Gets the sub periodicity of this date range. It quantifies the number of\n     * sub periods which constitute one main period.\n     * \n     * @return the sub periodicity\n     */\n",
    "125641": "    /**\n     * Gets reference the last date of the range.\n     * \n     * @return the date this range ends with\n     */\n",
    "125642": "    /**\n     * String representation of a timeseries. Do not use for comparisons,\n     * implementation might change without notice.\n     * \n     * @return a string representing this series\n     */\n",
    "125645": "    /**\n     * Accepts changes made, store them and quit dialog.\n     */\n",
    "125646": "    /**\n     * Overrides <code>hashCode()</code>, because equals was overwritten. The\n     * algorithm was taken from <cite>(Joshua Bloch, \"Effective Java\", Item 8)\n     * </cite>.\n     * \n     * @return hash code\n     */\n",
    "125648": "    /**\n     * Returns the merged date range that starts at the earliest start date and\n     * ends at the latest enddate. If the sub periodicities do not match, null\n     * is returned.\n     * <p>\n     * The function is symmetric in the sense that\n     * <code>x.mergedRange(y).equals(y.mergedRange(x))</code>.\n     * \n     * @param otherRange\n     *            the range to merge with\n     * @return the merged range\n     * @throws IllegalArgumentException\n     *             if argument is null or if sub periodicities do not match\n     */\n",
    "125652": "    /**\n     * Returns a string representation of the specified range. Do not use for\n     * comparisons, but use equals instead.\n     * \n     * @return string representing this range\n     */\n",
    "125653": "    /**\n     * Sets <code>TSList</code> for this dialog, where the selected\n     * <code>TS</code> are retrieved from.\n     * \n     * @param newTimeSeriesList\n     *            the <code>TSList</code> to be referenced\n     */\n",
    "125656": "        /**\n         * TSListModel takes care of sorting, when a new <code>TS</code> is\n         * inserted.\n         * \n         * @param obj\n         *            to add, should be the name of a <code>TS</code>\n         */\n",
    "125657": "    /**\n     * Gets number of displayed <code>TS</code>.\n     * \n     * @return column count\n     */\n",
    "125658": "    /**\n     * Gets the name of the <code>TS</code> displayed in a certain column.\n     * \n     * @return time series name\n     * @param col\n     *            column index\n     */\n",
    "125659": "        /**\n         * Removes string element regardless for case.\n         * \n         * @param obj\n         *            the object to be removes\n         */\n",
    "125661": "    /**\n     * Gets underlying observation for a given row and column as a\n     * <code>double</code> value.\n     * \n     * @return the observation as double\n     */\n",
    "125662": "    /**\n     * Clears all currently stored time series and adds the series contained in\n     * <code>newTimeSeries</code>.\n     * \n     * @param newTimeSeries\n     *            array of time series to add\n     */\n",
    "125664": "    /**\n     * Gets number of displayed observations in time range of all\n     * <code>TS</code>.\n     * \n     * @return row count\n     */\n",
    "125668": "    /**\n     * Returns whether the <code>TSHolder</code> contains a <code>TS</code>\n     * with the given name. The lookup is case insensitive.\n     * \n     * @return true if series is contained, false otherwise\n     * @param name\n     *            String with the name to be looked up\n     */\n",
    "125675": "    /**\n     * Removes a time series from the map and fires a\n     * <code>TS_REMOVED PropertyChangeEvent</code>. Nothing happens, if no\n     * series with the given name was stored.\n     * \n     * @param name\n     *            of the time series to get\n     */\n",
    "125677": "    /**\n     * Gets the <code>TSDate</code> where the very first observation in the\n     * model occurs.\n     * \n     * @return the starting date for all series in the model\n     */\n",
    "125678": "    /**\n     * Removes all time series from the map and fires an\n     * <code>ALL_TS_REMOVED PropertyChangeEvent</code> if there were any\n     * series removed.\n     */\n",
    "125680": "    /**\n     * Gets underlying observation for a given row and column.\n     * \n     * @param row\n     *            index for row\n     * @param col\n     *            index for column\n     * @return a Double wrapping the observation\n     */\n",
    "125681": "    /**\n     * String representation of this <code>TSHolder</code>.\n     * \n     * @return string containing name and names of all included <code>TS</code>\n     */\n",
    "125682": "    /**\n     * Gets whether given cell can be edited. This is the same for all cells and\n     * set for the whole model via the <code>editable</code> property.\n     * \n     * @return the editable property for the whole table\n     * @param row\n     *            index for row\n     * @param col\n     *            index for column\n     */\n",
    "125695": "    /**\n     * Gets the allDataName property (String) value.\n     * \n     * @return the allDataName property value.\n     * @see #setAllDataName\n     */\n",
    "125702": "    /**\n     * Gets the allStringsName property (String) value.\n     * \n     * @return the allStringsName property value.\n     * @see #setAllStringsName\n     */\n",
    "125722": "    /**\n     * Gets the deterministicDataName property (String) value.\n     * \n     * @return The deterministicDataName property value.\n     * @see #setDeterministicDataName\n     */\n",
    "125725": "    /**\n     * You can also modify the body of this method to customize your error\n     * messages. For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE\n     * are not of end-users concern, so you can return something like :\n     * \n     * \"Internal Error : Please file a bug report .... \"\n     * \n     * from this method for such cases in the release version of your parser.\n     */\n",
    "125731": "    /**\n     * Gets whether deterministic series can be selected.\n     * \n     * @return boolean\n     * @see #setDeterministicEnabled\n     */\n",
    "125741": "    /**\n     * Gets the deterministicStringsName property (String) value.\n     * \n     * @return The deterministicStringsName property value.\n     * @see #setDeterministicStringsName\n     */\n",
    "125749": "    /**\n     * Gets the range label.\n     * \n     * @return label\n     */\n",
    "125762": "    /**\n     * Gets the endogenousDataName property (String) value.\n     * \n     * @return The endogenousDataName property value.\n     * @see #setEndogenousDataName\n     */\n",
    "125763": "    /**\n     * This method initializes jCheckBox\n     * \n     * @return javax.swing.JCheckBox\n     */\n",
    "125774": "    /**\n     * Gets the endogenousStringsName property (String) value.\n     * \n     * @return The endogenousStringsName property value.\n     * @see #setEndogenousStringsName\n     */\n",
    "125775": "    /**\n     * This method initializes trendShiftRange\n     * \n     * @return com.jstatcom.ts.TSDateRangeSelector\n     */\n",
    "125781": "    /**\n     * This method initializes trendShiftName\n     * \n     * @return com.jstatcom.component.VarNameSelector\n     */\n",
    "125785": "    /**\n     * Gets the exogenousDataName property (String) value.\n     * \n     * @return The exogenousDataName property value.\n     * @see #setExogenousDataName\n     */\n",
    "125791": "    /**\n     * Sets <code>TSList</code> for this dialog. The selected time series are\n     * retrieved from the list and the range information is used for the dummy\n     * creation.\n     * \n     * @param newTimeSeriesList\n     *            the <code>TSList</code> to be referenced\n     */\n",
    "125797": "    /**\n     * Gets the dateRangeName property (String) value.\n     * \n     * @return The dateRangeName property value.\n     * @see #setDateRangeName\n     */\n",
    "125810": "    /**\n     * Gets whether exogenous series can be selected.\n     * \n     * @return boolean\n     * @see #setExogenousEnabled\n     */\n",
    "125822": "    /**\n     * Gets the exogenousStringsName property (String) value.\n     * \n     * @return The exogenousStringsName property value.\n     * @see #setExogenousStringsName\n     */\n",
    "125824": "    /**\n     * Half-Yearly 1960 II.\n     */\n",
    "125828": "    /**\n     * Monthly 1960 M11.\n     */\n",
    "125832": "    /**\n     * Gets the current selection mode.\n     * \n     * @return int a valid <code>JList</code> selection mode\n     */\n",
    "125833": "    /**\n     * Quarterly 1960 Q3.\n     */\n",
    "125838": "\t/**\n\t *  Dispatches the SelectionKey\n\t *\n\t *@param  key  SelectionKey to dispatch.\n\t */\n",
    "125844": "\t/**\n\t *  Destroys this Reactor\n\t */\n",
    "125846": "\t/**\n\t *  Gets the selector attribute of the Reactor object\n\t *\n\t *@return    The selector value\n\t */\n",
    "125847": "    /**\n     * Deletes all variables from the variableMap.\n     */\n",
    "125848": "\t/**\n\t *  Gets the threadPoolExecutor attribute of the Reactor object\n\t *\n\t *@return    The threadPoolExecutor value\n\t */\n",
    "125850": "    /**\n     * Define the variables that can be used during the parsing. The dataArray\n     * is copied before it is put into the variableMap.\n     * \n     * @param keyName\n     *            name of the variable\n     * @param dataArray\n     *            is a (T x 1) array with the data\n     * @throws IllegalArgumentException\n     *             if (JSCConstants.isValidName(keyName) != null || dataArray ==\n     *             null)\n     */\n",
    "125851": "\t/**\n\t *  Gets the cipherSpec attribute of the Reactor object\n\t *\n\t *@return    The cipherSpec value\n\t */\n",
    "125853": "\t/**\n\t *  Gets the dHSpec attribute of the Reactor object\n\t *\n\t *@return    The dHSpec value\n\t */\n",
    "125855": "\t/**\n\t *  Sets the cipherSpec attribute of the Reactor object\n\t *\n\t *@param  cipherSpec  The new cipherSpec value\n\t */\n",
    "125856": "    /**\n     * Retrieves the contents of the output buffer of the last parser run.\n     * \n     * @return String the contents of the output buffer\n     */\n",
    "125858": "\t/**\n\t *  Sets the dHSpec attribute of the Reactor object\n\t *\n\t *@param  dhSpec  The new dHSpec value\n\t */\n",
    "125860": "\t/**\n\t *  Sets the port attribute of the Reactor object\n\t *\n\t *@param  port  The new port value\n\t */\n",
    "125861": "\t/**\n\t *  Sets the backlog attribute of the Reactor object\n\t *\n\t *@param  backlog  The new backlog value\n\t */\n",
    "125864": "\t/**\n\t *  Sets the bufferSize attribute of the Reactor object\n\t *\n\t *@param  bufferSize  The new bufferSize value\n\t */\n",
    "125867": "\t/**\n\t *  Sets the threadPoolSpec attribute of the Reactor object\n\t *\n\t *@param  threadPoolSpec  The new threadPoolSpec value\n\t */\n",
    "125870": "\t/**\n\t *  Gets the port attribute of the Reactor object\n\t *\n\t *@return    The port value\n\t */\n",
    "125873": "\t/**\n\t *  Gets the backlog attribute of the Reactor object\n\t *\n\t *@return    The backlog value\n\t */\n",
    "125876": "\t/**\n\t *  Gets the bufferSize attribute of the Reactor object\n\t *\n\t *@return    The bufferSize value\n\t */\n",
    "125880": "\t/**\n\t *  Gets the threadPoolSpec attribute of the Reactor object\n\t *\n\t *@return    The threadPoolSpec value\n\t */\n",
    "125911": "    /**\n     * Returns a Connection from the pool.  If there are none left\n     * it creates and returns a new Connection.  A Connection borrowed should\n     * be returned as quickly as possible, in the same state it was borrowed in\n     * ie. don't close the connection.  It's a good idea to use finally{}\n     * to make sure that a borrowed Connection is put back even if exceptions\n     * occur. Additionally, objects that make use of a borrowed connection\n     * should never reference the connection and use it again after putting it\n     * back in to the pool.\n     *\n     *\n     * @return A connection from the pool of connections.\n     *\n     */\n",
    "125924": "    /**\n     * Currently clean() only removes connections that have timed out if the\n     * current pool size exceeds the core pool size.  clean() does not however\n     * create new Connections if the pool size is smaller than the corePool.\n     * Methods invoking borrow should always putBack the connection, otherwise\n     * defeating the point of maintaining a pool.\n     *\n     */\n",
    "125933": "    /**\n     * Maximizes range of current date selection.\n     */\n",
    "125961": "    /**\n     *  This little method is actually fairly important.  The map returned can \n     * be used to store session information.  Be aware that the map returned\n     * is safe to use concurrently, but the iterator that the map returns is not\n     * safe and should be used with discretion.\n     *\n     * @return Map of session information.\n     */\n",
    "125978": "\t/**\n\t *  Description of the Method\n\t *\n\t *@param  args  Description of the Parameter\n\t *@return       Description of the Return Value\n\t */\n",
    "125979": "\t/**\n\t *  Description of the Method\n\t *\n\t *@param  args  Description of the Parameter\n\t *@return       Description of the Return Value\n\t */\n",
    "125982": "\t/**\n\t *  Description of the Method\n\t *\n\t *@param  args  Description of the Parameter\n\t *@return       Description of the Return Value\n\t */\n",
    "125984": "    /**\n     * Sets the name of the object holding the data array for all series.\n     * \n     * @param allDataName\n     *            The new value for the property.\n     * @see #getAllDataName\n     * @throws IllegalArgumentException\n     *             if argument is not a valid symbolname\n     */\n",
    "125986": "\t/**\n\t *  Description of the Method\n\t *\n\t *@return                  Description of the Return Value\n\t *@exception  DBException  Description of the Exception\n\t */\n",
    "125987": "\t/**\n\t *  Description of the Method\n\t *\n\t *@param  args  Description of the Parameter\n\t *@return       Description of the Return Value\n\t */\n",
    "125988": "\t/**\n\t *  Gets the type attribute of the SQLBasicDAO object\n\t *\n\t *@return    The type value\n\t */\n",
    "125990": "\t/**\n\t *  Description of the Method\n\t *\n\t *@return                  Description of the Return Value\n\t *@exception  DBException  Description of the Exception\n\t */\n",
    "125993": "\t/**\n\t *  Description of the Method\n\t *\n\t *@param  field            Description of the Parameter\n\t *@param  obj              Description of the Parameter\n\t *@return                  Description of the Return Value\n\t *@exception  DBException  Description of the Exception\n\t */\n",
    "125997": "\t/**\n\t *  Gets the iD attribute of the SQLBasicDAO object\n\t *\n\t *@param  a  Description of the Parameter\n\t *@return    The iD value\n\t */\n",
    "125998": "    /**\n     * Sets the name of dataobject that holds the string array of all names.\n     * \n     * @param allStringsName\n     *            The new value for the property.\n     * @see #getAllStringsName\n     * @throws IllegalArgumentException\n     *             if argument is not a valid symbolname\n     */\n",
    "126000": "\t/**\n\t *  Description of the Method\n\t *\n\t *@param  id               Description of the Parameter\n\t *@exception  DBException  Description of the Exception\n\t */\n",
    "126002": "\t/**\n\t *  Gets the set attribute of the SQLBasicDAO object\n\t *\n\t *@param  field            Description of the Parameter\n\t *@param  data             Description of the Parameter\n\t *@return                  The set value\n\t *@exception  DBException  Description of the Exception\n\t */\n",
    "126005": "\t/**\n\t *  Description of the Method\n\t *\n\t *@param  field            Description of the Parameter\n\t *@param  data             Description of the Parameter\n\t *@exception  DBException  Description of the Exception\n\t */\n",
    "126008": "\t/**\n\t *  Description of the Method\n\t *\n\t *@return    Description of the Return Value\n\t */\n",
    "126013": "    /**\n     * Enables/disables editing of date range.\n     * \n     * @param newDatesEditable\n     *            true to enable range editing\n     */\n",
    "126014": "\t/**\n\t *  Description of the Method\n\t *\n\t *@param  args  Description of the Parameter\n\t *@return       Description of the Return Value\n\t */\n",
    "126020": "\t/**\n\t *  Description of the Method\n\t *\n\t *@param  args  Description of the Parameter\n\t *@return       Description of the Return Value\n\t */\n",
    "126021": "   /**\n     * Adds a User to this group.\n     *\n     * @param user The User to add to this group.\n     *\n     */\n",
    "126022": "    /**\n     * Removes a User from this group.\n     *\n     * @param user the User to be removed.\n     */\n",
    "126024": "\t/**\n\t *  Gets the type attribute of the SQLUsersDAO object\n\t *\n\t *@return    The type value\n\t */\n",
    "126025": "    /**\n     * Returns a List of User objects. \n     * So...\n     * list = getUsers();\n     * User user = (User)list.get(0);\n     *\n     * @return A list of User objects.\n     *\n     */\n",
    "126030": "\t/**\n\t *  Description of the Method\n\t *\n\t *@param  field            Description of the Parameter\n\t *@param  obj              Description of the Parameter\n\t *@exception  DBException  Description of the Exception\n\t */\n",
    "126032": "\t/**\n\t *  Description of the Method\n\t *\n\t *@return                  Description of the Return Value\n\t *@exception  DBException  Description of the Exception\n\t */\n",
    "126037": "\t/**\n\t *  Gets the string attribute of the SQLBasicTAO object\n\t *\n\t *@param  field  Description of the Parameter\n\t *@return        The string value\n\t */\n",
    "126038": "    /**\n     * Sets the name of the object holding the deterministic data array.\n     * \n     * @param deterministicDataName\n     *            The new value for the property.\n     * @see #getDeterministicDataName\n     * @throws IllegalArgumentException\n     *             if argument is not a valid symbolname\n     */\n",
    "126042": "\t/**\n\t *  Sets the value attribute of the SQLBasicTAO object\n\t *\n\t *@param  field  The new value value\n\t *@param  value  The new value value\n\t */\n",
    "126046": "\t/**\n\t *  Sets the value attribute of the SQLBasicTAO object\n\t *\n\t *@param  field  The new value value\n\t *@param  bytes  The new value value\n\t */\n",
    "126051": "\t/**\n\t *  Gets the value attribute of the SQLBasicTAO object\n\t *\n\t *@param  field  Description of the Parameter\n\t *@return        The value value\n\t */\n",
    "126066": "\t/**\n\t *  Description of the Method\n\t *\n\t *@param  tao    Description of the Parameter\n\t *@param  field  Description of the Parameter\n\t *@return        Description of the Return Value\n\t */\n",
    "126068": "\t/**\n\t *  Description of the Method\n\t *\n\t *@exception  DBException  Description of the Exception\n\t */\n",
    "126070": "\t/**\n\t *  Description of the Method\n\t *\n\t *@param  field            Description of the Parameter\n\t *@param  obj              Description of the Parameter\n\t *@exception  DBException  Description of the Exception\n\t */\n",
    "126071": "\t/**\n\t *  Description of the Method\n\t *\n\t *@exception  DBException  Description of the Exception\n\t */\n",
    "126072": "\t/**\n\t *  Description of the Method\n\t *\n\t *@return                  Description of the Return Value\n\t *@exception  DBException  Description of the Exception\n\t */\n",
    "126074": "\t/**\n\t *  Description of the Method\n\t *\n\t *@return    Description of the Return Value\n\t */\n",
    "126078": "\t/**\n\t *  Description of the Method\n\t *\n\t *@param  o  Description of the Parameter\n\t *@return    Description of the Return Value\n\t */\n",
    "126087": "    /**\n     * Enables/disables the selection of deterministic variables. This property\n     * merely sets the list displaying the deterministic variables to\n     * <code>enabled</code> or <code>disabled</code>. It has no effect on\n     * the data creation, but it should communicate to the user, that\n     * deterministic variables are ignored in the respective modeling context.\n     * \n     * @param arg1\n     *            true to enable selection of determinisic variables\n     */\n",
    "126089": "\t/**\n\t *  Description of the Method\n\t *\n\t *@param  communicator  Description of the Parameter\n\t *@param  args          Description of the Parameter\n\t */\n",
    "126091": "\t/**\n\t *  Sets the commandPolicy attribute of the BasicTextCommand object\n\t *\n\t *@param  policy  The new commandPolicy value\n\t */\n",
    "126093": "\t/**\n\t *  Gets the commandPolicy attribute of the BasicTextCommand object\n\t *\n\t *@param  policy  Description of the Parameter\n\t */\n",
    "126096": "    /**\n     * When a communicator executes TextListener the object passed will\n     * be the full String of the command the communicator issued. For example if the \n     * communicator is a remote client and they issue the command: \"echo hello\",\n     * the Object passed will be a String that's value is \"echo hello\"\n     *\n     * @param entity The communicator that issued a communication of type \"text\" that is \n     * now being handled by this listener.\n     * @param object The full text of the command issued by a communicator.\n     * \n     */ \n",
    "126099": "    /**\n     * Adds a TextCommand to be mapped by this TextListener object\n     *\n     * @param textCommand to add to this TextListener object\n     */\n",
    "126142": "    /**\n     * Sets the name of dataobject that holds the string array of deterministic\n     * names.\n     * \n     * @param deterministicStringsName\n     *            The new value for the property.\n     * @see #getDeterministicStringsName\n     * @throws IllegalArgumentException\n     *             if argument is not a valid symbolname\n     */\n",
    "126157": "    /**\n     * Gets the transform information.\n     *\n     * @return The transform information.\n     */ \n",
    "126158": "    /**\n     * Sets the transform information.\n     * \n     * @param transform The transform info.\n     */\n",
    "126169": "    /**\n     *  Reconstructs an int from a bitwise byte array;\n     */\n",
    "126208": "    /**\n     * Enables/disables the component. If disabled, time series cannot be\n     * selected anymore.\n     * \n     * @param enabled\n     *            boolean\n     */\n",
    "126215": "\t/**\n\t * Test ivymakclipse with a workspace moduleset containing only the module himself.\n\t * And test ivymakeclipse using a reference workspace moduleset\n\t */\n",
    "126218": "\t/**\n\t * Parse the stream.\n\t * \n\t * @param input Stream to parse.\n\t * @param output Parsed stream.\n\t */\n",
    "126219": "\t/**\n\t * Test ivymakclipse with a workspace moduleset containing himself and an other dependency module.\n\t * And test ivymakeclipse using an embeded workspace moduleset\n\t */\n",
    "126222": "\t/**\n\t * Executes the Ant task.\n\t */\n",
    "126225": "\t/**\n\t * Run ivymakeclipse with an ivy file with dependencies.\n\t * The initial .classpath is correct and must not be updated\n\t */\n",
    "126229": "\t/**\n\t * Push a state onto the stack.\n\t * \n\t * @param state\n\t */\n",
    "126231": "\t/**\n\t * Run ivymakeclipse with an ivy file without any dependencies. \n\t * The initial .classpath is also empty.\n\t */\n",
    "126232": "\t/**\n\t * Pops the last state from the state stack and returns it.\n\t * \n\t * @return ParserState\n\t */\n",
    "126234": "\t/**\n\t * Returns the state machine's current state.\n\t * \n\t * @return Current state\n\t */\n",
    "126238": "\t/**\n\t * Run ivymakeclipse with an ivy file without any dependencies.\n\t * There is no inital .classpath\n\t */\n",
    "126243": "\t/**\n\t * Run ivymakeclipse with an ivy file with dependencies where one.  \n\t * Dependency has been removed compared to the content of the classpath\n\t */\n",
    "126246": "\t/**\n\t * Test the generation of src and output definitions with any initial file.\n\t */\n",
    "126249": "\t/**\n\t * Test the update of src and output definitions.\n\t */\n",
    "126252": "\t/**\n\t * Run ivymakeclipse with an ivy file with dependencies where one. \n\t * Dependency has been updated compared to the content of the classpath\n\t */\n",
    "126262": "\t/**\n\t * If the Cancel button should be shown (default) then set this to true. If\n\t * set to false, then only the OK button will be shown and ESC will not\n\t * cancel the dialog.\n\t * \n\t * @param yes\n\t */\n",
    "126267": "\t/**\n\t * When focus is gained, the text in the component is selected\n\t * \n\t * @see java.awt.event.FocusListener#focusGained(java.awt.event.FocusEvent)\n\t */\n",
    "126269": "\t/**\n\t * Overridden, since JLabel behavior has focus traversable always false\n\t * \n\t * @see java.awt.Component#isFocusable()()\n\t */\n",
    "126275": "    /**\n     * Sets the name of the object holding the endogenous data array.\n     * \n     * @param endogenousDataName\n     *            The new value for the property.\n     * @see #getEndogenousDataName\n     * @throws IllegalArgumentException\n     *             if argument is not a valid symbolname\n     */\n",
    "126298": "\t/**\n\t * Returns <code>javax.swing.ImageIcon</code>\n\t * \n\t * @see com.abstractics.xmlpanel.utils.stringtoobject.ObjectConverter#getClassToConvertTo()\n\t */\n",
    "126308": "\t/**\n\t * Returns <code>javax.swing.Border</code>\n\t * \n\t * @see com.abstractics.xmlpanel.utils.stringtoobject.ObjectConverter#getClassToConvertTo()\n\t */\n",
    "126309": "\t/**\n\t * Implemented here to intercept conversion calls and check for the objects\n\t * in the cache first. The given object has its <code>toString()</code>\n\t * method called to determine the key for the cache Map. If an object with\n\t * that key already exists, then it is returned. Otherwise the\n\t * wrappedConverter specified in the constructor is called to do the\n\t * conversion. The resulting object is then stored in the cache\n\t * \n\t * @see com.abstractics.utils.converter.ObjectConverter#convert(java.lang.Object)\n\t */\n",
    "126312": "\t/**\n\t * Returns the JComponent for the given question index. Might be a\n\t * JTextField, JComboBox, JLabel, or a JCheckBox, depending on how the\n\t * question was added to the panel.\n\t * \n\t * @param questionIndex\n\t * @return The JComponent found at the index\n\t * @throws IndexOutOfBoundsException\n\t *             Thrown if the index exceeds the current number of questions\n\t *             in the panel.\n\t */\n",
    "126316": "    /**\n     * Sets the name of dataobject that holds the string array of endogenous\n     * names.\n     * \n     * @param endogenousStringsName\n     *            The new value for the property.\n     * @see #getEndogenousStringsName\n     * @throws IllegalArgumentException\n     *             if argument is not a valid symbolname\n     */\n",
    "126322": "\t/**\n\t * Given a String, strips typical number characters from the string.<br>\n\t * Currently removes commas, dollar sign, and plus sign\n\t * \n\t * @param obj\n\t * @return\n\t */\n",
    "126323": "\t/**\n\t * Calls makeDecimalString then takes that result and if it contains a\n\t * decimal point, returns a substring up to that decimal point, otherwise\n\t * returns the result as is.\n\t * \n\t * @param obj\n\t * @return\n\t */\n",
    "126335": "\t/**\n\t * Adds a question to the panel, using a checkbox for the answer. This\n\t * option behaves slightly different than the others in that the label text\n\t * will be to the right of the checkbox, with no text on the left.\n\t * \n\t * @param label\n\t *            Question to display to the right of the checkbox\n\t */\n",
    "126353": "    /**\n     * Sets the name of the object holding the exogenous data array.\n     * \n     * @param exogenousDataName\n     *            The new value for the property.\n     * @see #getExogenousDataName\n     * @throws IllegalArgumentException\n     *             if argument is not a valid symbolname\n     */\n",
    "126361": "\t/**\n\t * Given the padding value from the XML, this method determines the correct\n\t * value for padding, pulling from the parent row if necessary<br>\n\t * <br>\n\t * Padding is specified as a single number, meaning the same padding applied\n\t * to all sides of the cell. Or as a sequence of four numbers separated by\n\t * commas, meaning top, right, bottom, and left padding respectively.\n\t * \n\t * @param attributeValue\n\t * @return\n\t */\n",
    "126363": "\t/**\n\t * Given the stretch value from the XML, this method determines the correct\n\t * value for stretch: <code>HORIZONTAL</code>, <code>VERTICAL</code>,\n\t * <code>HORIZONTAL + VERTICAL</code>, or -1 for none.\n\t * \n\t * @param attributeValue\n\t * @return\n\t */\n",
    "126365": "\t/**\n\t * Given the align value from the XML, this method determines the correct\n\t * value for alignment, pulling from the parent row if necessary\n\t * \n\t * @param attributeValue\n\t * @return\n\t */\n",
    "126367": "    /**\n     * Enables/disables selection of exogenous variables. This property merely\n     * sets the list displaying the exogenous variables to <code>enabled</code>\n     * or <code>disabled</code>. It has no effect on the data creation, but\n     * it should communicate to the user, that exogenous variables are ignored\n     * in the respective modeling context.\n     * \n     * @param arg1\n     *            true to enable selection of exogenous variables\n     */\n",
    "126375": "\t/**\n\t * Minimum size relies on the following scenarios:\n\t * <ul>\n\t * <li>If parent row is null (floating cell) then the minimum size is taken\n\t * from {@link #getBounds()}</li>\n\t * <li>Use the component's minimum size</li>\n\t * <li>If the size is fixed (row or height) then use the max of the fixed\n\t * size and the component size</li>\n\t * </ul>\n\t * \n\t * @return\n\t */\n",
    "126378": "\t/**\n\t * Preferred size relies on the following scenarios:\n\t * <ul>\n\t * <li>If parent row is null (floating cell) then the preferred size is\n\t * taken from {@link #getBounds()}</li>\n\t * <li>If the cell is not included in the layout, then the width is 0</li>\n\t * <li>If a cell width is fixed, use that number for width</li>\n\t * <li>If a cell height is fixed, use that number for height</li>\n\t * <li>Otherwise use the components width/height and add padding</li>\n\t * </ul>\n\t * \n\t * @return\n\t */\n",
    "126390": "    /**\n     * Sets the name of dataobject that holds the string array of exogenous\n     * names.\n     * \n     * @param exogenousStringsName\n     *            The new value for the property.\n     * @see #getExogenousStringsName\n     * @throws IllegalArgumentException\n     *             if argument is not a valid symbolname\n     */\n",
    "126391": "\t/**\n\t * For cells, if the component is not visible, and the width is unspecified\n\t * then the cell should not be included\n\t * \n\t * @see com.abstractics.xmlpanel.xmllayout.XmlLayoutSize#includeInLayout()\n\t */\n",
    "126402": "\t/**\n\t * Reloads the current XML from the root XmlPanel that this object is\n\t * holding\n\t */\n",
    "126409": "    /**\n     * Sets the name of dataobject that holds the date range of the selected\n     * series.\n     * \n     * @param dateRangeName\n     *            The new value for the property.\n     * @see #getDateRangeName\n     * @throws IllegalArgumentException\n     *             if argument is not a valid symbolname\n     */\n",
    "126422": "\t/**\n\t * Useless -- once the layout manager is constructed it is set in stone,\n\t * adding components after the fact will do nothing.\n\t * \n\t * @see java.awt.LayoutManager#addLayoutComponent(java.lang.String,\n\t *      java.awt.Component)\n\t */\n",
    "126424": "\t/**\n\t * Useless -- once the layout manager is constructed it is set in stone,\n\t * removing components after the fact will do nothing.\n\t * \n\t * @see java.awt.LayoutManager#removeLayoutComponent(java.awt.Component)\n\t */\n",
    "126429": "    /**\n     * Sets whether only one endogenous variable should be selectable or more.\n     * Useful for univariate models with possibly exogenous variables.\n     * \n     * @param newOneEndogenousOnly\n     *            true if only one endogenous variable should be selectable\n     */\n",
    "126438": "\t/**\n\t * Gets the XmlPanelComponentCreator according to the \"type\" attribute\n\t * specified in the element, then calls the createComponent method on the\n\t * creator to generate the Component.\n\t * \n\t * @see ComponentCreator#createComponent(Element)\n\t * @param element\n\t *            XML element that is to represent the component\n\t * @param panel\n\t *            The XmlPanel that this component is being placed into - for\n\t *            reference only.\n\t * @return\n\t */\n",
    "126439": "\t/**\n\t * Calls the other createComponent method with a null XmlPanel parameter\n\t * \n\t * @see #createComponent(Element, XmlPanel)\n\t * @param element\n\t *            XML element that is to represent the component\n\t * @return\n\t */\n",
    "126444": "\t/**\n\t * This method is called to make adjustments to the total\n\t * \n\t * @param amount\n\t *            Amount to add to the total\n\t */\n",
    "126447": "\t/**\n\t * Called when the \"Clear\" button is pressed\n\t */\n",
    "126448": "    /**\n     * Sets the selection changed property and fires\n     * <code>PropertyChangeEvent</code> if the value changed.\n     */\n",
    "126451": "\t/**\n\t * Sets an image that should be painted one the background of the panel.\n\t * Painting will occur by painting the panel background first (if opaque)\n\t * then painting the image, then painting all of the components.\n\t * \n\t * @param image\n\t *            image to paint in the background\n\t */\n",
    "126453": "\t/**\n\t * Gets the current background image, or null if it has not been specified\n\t * \n\t * @return the current background image\n\t */\n",
    "126456": "\t/**\n\t * If a background image has been specified using\n\t * {@link #setBackgroundImage(ImageIcon)}, then setting this property to\n\t * true will cause the image to be repeatedly painted from left to right,\n\t * and the vertical placement will be determined by\n\t * {@link #getBackgroundImageAlign()} - NORTH, CENTER, or SOUTH.<br>\n\t * If both the X and Y tiling are on, then the image will be tiled\n\t * everywhere, starting at the northwest corner.<br>\n\t * Default setting is false.\n\t * \n\t * @param tiled\n\t *            set to true to tile the background image horizontally\n\t */\n",
    "126458": "    /**\n     * Sets the selection mode to be a valid mode for <code>JList</code>.\n     * \n     * @param selectionMode\n     *            int\n     */\n",
    "126459": "\t/**\n\t * If a background image has been specified using\n\t * {@link #setBackgroundImage(ImageIcon)}, then setting this property to\n\t * true will cause the image to be repeatedly painted from top to bottom,\n\t * and the horizontal placement will be determined by\n\t * {@link #getBackgroundImageAlign()} - WEST, CENTER, or EAST.<br>\n\t * If both the X and Y tiling are on, then the image will be tiled\n\t * everywhere, starting at the northwest corner.<br>\n\t * Default setting is false.\n\t * \n\t * @param tiled\n\t *            set to true to tile the background image vertically\n\t */\n",
    "126462": "\t/**\n\t * If a background image has been specified using\n\t * {@link #setBackgroundImage(ImageIcon)} and\n\t * {@link #isBackgroundImageTileX()} is false, then this setting can be used\n\t * to control the placement of the image on the panel.<br>\n\t * Use {@link SwingConstants} alignment variables (CENTER, NORTHWEST, etc.)\n\t * to specify the alignment.<br>\n\t * Default setting is <code>SwingConstants.NORTHWEST</code>\n\t * \n\t * @param align\n\t *            the alignment to use for the background image\n\t */\n",
    "126464": "\t/**\n\t * Provided so the alignment can be set from XML. The String value is\n\t * converted to a SwingConstants value using\n\t * {@link SwingUtils#convertStringAlign(String, int)} and then is passed to\n\t * the {@link #setBackgroundImageAlign(int)} method.\n\t * \n\t * @param align\n\t *            the alignment to use for the background image\n\t */\n",
    "126467": "\t/**\n\t * Get value from parent panel. If the xmlpanel.allowEditorDialog system\n\t * variable is true, then this method always returns true.\n\t * \n\t * @return\n\t */\n",
    "126481": "\t/**\n\t * ConvertObject should take care of converting into Strings by default. By\n\t * simply calling the toString method.\n\t * \n\t * @throws Exception\n\t */\n",
    "126483": "\t/**\n\t * Returns the first component found in the panel with the given name.\n\t * Recursively searches through all children, grandchildren, etc.\n\t * \n\t * @see SwingUtils#getChildNamed(String, Container)\n\t * @param name\n\t * @return Component found\n\t * @throws IllegalArgumentException\n\t *             Thrown if a component cannot be found with the given name.\n\t */\n",
    "126485": "    /**\n     * Sets whether <code>UPPER</code> or default <code>GLOBAL</code> scope\n     * should be used.\n     * \n     * @param isUpper\n     *            if <code>true Scope.UPPER</code> is used, otherwise\n     *            <code>Scope.GLOBAL</code>\n     */\n",
    "126486": "\t/**\n\t * Convenience method for finding a specific {@link JTextField} in the panel\n\t * with the given name. Recursively searches through all children,\n\t * grandchildren, etc. If not found, an exception is thrown. The exception\n\t * is thrown so that errors are more informative, rather than return a null\n\t * which would result in confusing NullPointerExceptions\n\t * \n\t * @param name\n\t *            Name of the component\n\t * @return\n\t * @throws IllegalArgumentException\n\t *             Thrown if the component could not be found, or if it was\n\t *             found but is not the correct type\n\t */\n",
    "126488": "\t/**\n\t * Convenience method for finding a specific {@link JTextArea} in the panel\n\t * with the given name. Recursively searches through all children,\n\t * grandchildren, etc. If not found, an exception is thrown. The exception\n\t * is thrown so that errors are more informative, rather than return a null\n\t * which would result in confusing NullPointerExceptions\n\t * \n\t * @param name\n\t *            Name of the component\n\t * @return\n\t * @throws IllegalArgumentException\n\t *             Thrown if the component could not be found, or if it was\n\t *             found but is not the correct type\n\t */\n",
    "126490": "\t/**\n\t * Convenience method for finding a specific {@link JLabel} in the panel\n\t * with the given name. Recursively searches through all children,\n\t * grandchildren, etc. If not found, an exception is thrown. The exception\n\t * is thrown so that errors are more informative, rather than return a null\n\t * which would result in confusing NullPointerExceptions\n\t * \n\t * @param name\n\t *            Name of the component\n\t * @return\n\t * @throws IllegalArgumentException\n\t *             Thrown if the component could not be found, or if it was\n\t *             found but is not the correct type\n\t */\n",
    "126493": "    /**\n     * Gets whether <code>Scope.UPPER</code> or <code>Scope.GLOBAL</code> is\n     * used.\n     * \n     * @return <code>true</code> <code>true Scope.UPPER</code> is used,\n     *         otherwise <code>Scope.GLOBAL</code>\n     */\n",
    "126494": "\t/**\n\t * Convenience method for finding a specific {@link JCheckBox} in the panel\n\t * with the given name. Recursively searches through all children,\n\t * grandchildren, etc. If not found, an exception is thrown. The exception\n\t * is thrown so that errors are more informative, rather than return a null\n\t * which would result in confusing NullPointerExceptions\n\t * \n\t * @param name\n\t *            Name of the component\n\t * @return\n\t * @throws IllegalArgumentException\n\t *             Thrown if the component could not be found, or if it was\n\t *             found but is not the correct type\n\t */\n",
    "126496": "\t/**\n\t * Convenience method for finding a specific {@link JButton} in the panel\n\t * with the given name. Recursively searches through all children,\n\t * grandchildren, etc. If not found, an exception is thrown. The exception\n\t * is thrown so that errors are more informative, rather than return a null\n\t * which would result in confusing NullPointerExceptions\n\t * \n\t * @param name\n\t *            Name of the component\n\t * @return\n\t * @throws IllegalArgumentException\n\t *             Thrown if the component could not be found, or if it was\n\t *             found but is not the correct type\n\t */\n",
    "126498": "\t/**\n\t * Convenience method for finding a specific {@link JRadioButton} in the\n\t * panel with the given name. Recursively searches through all children,\n\t * grandchildren, etc. If not found, an exception is thrown. The exception\n\t * is thrown so that errors are more informative, rather than return a null\n\t * which would result in confusing NullPointerExceptions\n\t * \n\t * @param name\n\t *            Name of the component\n\t * @return\n\t * @throws IllegalArgumentException\n\t *             Thrown if the component could not be found, or if it was\n\t *             found but is not the correct type\n\t */\n",
    "126501": "    /**\n     * Gets whether it is checked whether missing values are in the selection.\n     * In this case the selection will not be allowed. The default is\n     * <code>true</code>.\n     * \n     * @return <code>true</code> if NaN's are not allowed\n     */\n",
    "126502": "\t/**\n\t * Convenience method for finding a specific {@link JComboBox} in the panel\n\t * with the given name. Recursively searches through all children,\n\t * grandchildren, etc. If not found, an exception is thrown. The exception\n\t * is thrown so that errors are more informative, rather than return a null\n\t * which would result in confusing NullPointerExceptions\n\t * \n\t * @param name\n\t *            Name of the component\n\t * @return\n\t * @throws IllegalArgumentException\n\t *             Thrown if the component could not be found, or if it was\n\t *             found but is not the correct type\n\t */\n",
    "126508": "    /**\n     * Sets whether it is checked whether missing values are in the selection.\n     * In this case the selection will not be allowed. The default is\n     * <code>true</code>.\n     * \n     * @param checkNaN\n     *            <code>true</code> if NaN's are not allowed,\n     *            <code>false</code> series with missing values can be\n     *            selected\n     */\n",
    "126526": "\t/**\n\t * Controls if the panel allows double-right-click editing on the panel.<br>\n\t * <br>\n\t * A System property for <code>xmlpanel.allowEditorDialog</code> can also\n\t * be set to <code>true</code> which will cause all panels to allow the\n\t * editing, regardless of this setting.\n\t * \n\t * @param allowEditorDialog\n\t *            Set to true to allow the double-right-click editing of the\n\t *            panel.\n\t */\n",
    "126535": "\t/**\n\t * Overridden to draw the cell border lines when in edit mode.\n\t * \n\t * @see java.awt.Component#paint(java.awt.Graphics)\n\t */\n",
    "126539": "    /**\n     * Gets the current selection set by this component.\n     * \n     * @return selection instance\n     */\n",
    "126544": "\t/**\n\t * Passes on the action performed to all of our ActionListeners<br>\n\t * Note: If this method is overridden in a subclass, it is important to call\n\t * the super method, so that anything else that registers to listen will be\n\t * notified.\n\t * \n\t * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)\n\t */\n",
    "126556": "\t/**\n\t * Adds an <code>ActionListener</code> to the panel. This ActionListener\n\t * will receive notification from every AbstractButton in the panel.\n\t * \n\t * @param l\n\t *            the <code>ActionListener</code> to be added\n\t */\n",
    "126565": "\t/**\n\t * Removes an <code>ActionListener</code> from the panel.\n\t * \n\t * @param l\n\t *            the listener to be removed\n\t */\n",
    "126574": "\t/**\n\t * Overriden to handle the painting of the background image, if there is one\n\t * \n\t * @see javax.swing.JComponent#paintComponent(java.awt.Graphics)\n\t */\n",
    "126595": "\t/**\n\t * Returns the current background image alignment Alignment values come from\n\t * {@link SwingConstants} such as CENTER, NORTHWEST, etc.<br>\n\t * Default value is <code>SwingConstants.NORTHWEST</code>\n\t * \n\t * @return the current background image alignment\n\t */\n",
    "126606": "\t/**\n\t * Returns true if the background image is set to be tiled horizontally.\n\t * Tiling will stretch all across the panel, and the vertical placement will\n\t * be determined by {@link #getBackgroundImageAlign()} - NORTH, CENTER, or\n\t * SOUTH.<br>\n\t * If both the X and Y tiling are on, then the image will be tiled\n\t * everywhere, starting at the northwest corner.\n\t * \n\t * @return true if the background image is set to be tiled horizontally\n\t */\n",
    "126616": "\t/**\n\t * Returns true if the background image is set to be tiled vertically.\n\t * Tiling will stretch all down the panel, and the horizontal placement will\n\t * be determined by {@link #getBackgroundImageAlign()} - WEST, CENTER, or\n\t * EAST.<br>\n\t * If both the X and Y tiling are on, then the image will be tiled\n\t * everywhere, starting at the northwest corner.\n\t * \n\t * @return true if the background image is set to be tiled vertically\n\t */\n",
    "126781": "\t/** create new task\n\t * \n\t * @param command the command to run\n\t * @param arguments the arguments for the command\n\t * @param inputFiles the input files for the working directory\n\t * @param inputStream the input file to get standard input from\n\t * @return the task\n\t */\n",
    "126784": "\t/** get a task\n\t * \n\t * @param taskRef the task reference \n\t * @return the task\n\t */\n",
    "126787": "\t/** remove a task\n\t * \n\t * @param taskRef the task reference\n\t */\n",
    "126789": "\t/** get the agent's cookie\n\t * \n\t * @return the cookie\n\t */\n",
    "126792": "\t/** set the agent's cookie\n\t * \n\t * @param agentCookie the cookie\n\t */\n",
    "126796": "\t/** get the agent's name\n\t * \n\t * @return the name\n\t */\n",
    "126797": "\t/** get the agent's status\n\t * \n\t * @return the status\n\t */\n",
    "126801": "\t/** get the current task count\n\t * \n\t * @return the number of tasks\n\t */\n",
    "126802": "\t/** get the maximum tasks that can be handled\n\t * \n\t * @return the number of tasks\n\t */ \n",
    "126806": "\t/** get the current CPU power being used\n\t * \n\t * @return the CPU power\n\t */\n",
    "126807": "\t/** get the maximum CPU power of the agent\n\t * \n\t * @return the CPU power\n\t */\n",
    "126809": "\t/** Get a String containing the full message.\n\t * \n\t * @return the full message\n\t */\n",
    "126811": "\t/** get the agent's task queue\n\t * \n\t * @return HashMap<Long, Task> where the keys are the task references and the values are the tasks\n\t */\n",
    "126817": "\t/** get the hostname of the agent\n\t * \n\t * @return the hostname\n\t */\n",
    "126819": "\t/**\n\t * Converts a Java {@link java.util.Map} into a\n\t * {@link com.barandis.json.JsonObject}.\n\t *\n\t * @param obj the Java object to be converted.\n\t * @return a JSON object equivalent to <em>obj</em>. This will be either\n\t *         {@link com.barandis.json.JsonLiteral#NULL} or a\n\t *         {@link com.barandis.json.JsonObject}, depending on the value of\n\t *         <em>obj</em>.\n\t * @throws ClassCastException if a non-null, non-map object is passed into\n\t *         the method.\n\t */\n",
    "126820": "    /**\n     * Kills whatever process has been spawned by this given Task\n     *\n     *@return  true if the process was able to be terminated, false o.w.\n     */\n",
    "126822": "\t/**\n\t * Generates a Java object representation of the current object.\n\t *\n\t * @return a {@link java.lang.Number} equal to and of the same type as the\n\t *         object used to create the current object.\n\t */\n",
    "126824": "\t/**\n\t * Converts a Java {@link java.lang.Object} into a\n\t * {@link com.barandis.json.JsonObject}.\n\t *\n\t * @param obj the Java object to be converted.\n\t * @return a new, empty {@link com.barandis.json.JsonObject}. This may also\n\t *         be {@link com.barandis.json.JsonLiteral#NULL}, but only if the\n\t *         supplied object is <code>null</code> itself.\n\t */\n",
    "126825": "\t/**\n\t * Generates a JSON source representation of the current object. This\n\t * representation cannot handle <code>NaN</code> or infinite numbers, and\n\t * if it encounters one, it will throw an exception. It also eliminates the\n\t * unnecessary trailing zeros and decimal points that appear in string\n\t * representations of some Java floating-point numbers.\n\t *\n\t * @return the value of the current object as a string.\n\t * @throws ArithmeticException if the value to be converted to JSON source\n\t *             is infinite or <code>NaN</code>.\n\t */\n",
    "126826": "\t/**\n\t * Converts a JSON type into a Java {@link java.lang.Object}.\n\t *\n\t * @param json the JSON type to be converted.\n\t * @return a Java {@link java.lang.Object} equivalent to <em>json</em>.\n\t *         The actual returned type is dependent upon the JSON type; it is\n\t *         simply what is returned by\n\t *         {@link com.barandis.json.JsonType#toObject()}. This is not as\n\t *         rigorous or comprehensive as a full conversion.\n\t */\n",
    "126828": "\t/**\n\t * Converts a Java <code>char</code> or {@link java.lang.Character} into a\n\t * {@link com.barandis.json.JsonNumber}.\n\t *\n\t * @param obj the Java object to be converted.\n\t * @return a JSON object equivalent to <em>obj</em>. This will be either\n\t *         {@link com.barandis.json.JsonLiteral#NULL} or a\n\t *         {@link com.barandis.json.JsonNumber}, depending on the value of\n\t *         <em>obj</em>.\n\t * @throws ClassCastException if a non-null, non-character object is passed\n\t *         into the method.\n\t */\n",
    "126829": "\t/**\n\t * Returns the Java class most closely associated with the JSON type. This\n\t * guarantees that conversions will be made to the correct objects.\n\t *\n\t * @return the Java {@link java.lang.Number} class object.\n\t */\n",
    "126830": "\t/**\n\t * Invalidates the layout, indicating that if the layout manager\n\t * has cached information it should be discarded.\n\t */\n",
    "126832": "\t/**\n\t * Converts a Java {@link java.util.Collection} into a\n\t * {@link com.barandis.json.JsonArray}.\n\t *\n\t * @param obj the Java object to be converted.\n\t * @return a JSON object equivalent to <em>obj</em>. This will be either\n\t *         {@link com.barandis.json.JsonLiteral#NULL} or a\n\t *         {@link com.barandis.json.JsonArray}, depending on the value of\n\t *         <em>obj</em>.\n\t * @throws ClassCastException if a non-null, non-array, non-collection\n\t *         object is passed into the method.\n\t */\n",
    "126833": "\t/**\n\t * Converts a Java numberical primitive or {@link java.lang.Number} into a\n\t * {@link com.barandis.json.JsonNumber}.\n\t *\n\t * @param obj the Java object to be converted.\n\t * @return a JSON object equivalent to <em>obj</em>. This will be either\n\t *         {@link com.barandis.json.JsonLiteral#NULL} or a\n\t *         {@link com.barandis.json.JsonNumber}, depending on the value of\n\t *         <em>obj</em>.\n\t * @throws ClassCastException if a non-null, non-numerical object is passed\n\t *         into the method.\n\t */\n",
    "126837": "\t/**\n\t * Converts a Java <code>boolean</code> or {@link java.lang.Boolean} into\n\t * a {@link com.barandis.json.JsonLiteral}.\n\t *\n\t * @param obj the Java object to be converted.\n\t * @return a JSON object equivalent to <em>obj</em>. This will be a\n\t *         {@link com.barandis.json.JsonLiteral}.\n\t * @throws ClassCastException if a non-null, non-boolean object is passed\n\t *         into the method.\n\t */\n",
    "126838": "\t/**\n\t * Converts a Java {@link java.lang.String} into a\n\t * {@link com.barandis.json.JsonString}.\n\t *\n\t * @param obj the Java object to be converted.\n\t * @return a JSON object equivalent to <em>obj</em>. This will be either\n\t *         {@link com.barandis.json.JsonLiteral#NULL} or a\n\t *         {@link com.barandis.json.JsonString}, depending on the value of\n\t *         <em>obj</em>. The returned object will hold a value equivalent\n\t *         to the {@link java.lang.Object#toString()} value of the supplied\n\t *         object.\n\t */\n",
    "126841": "\t/**\n\t * Converts a JSON type into a Java {@link java.lang.String}.\n\t *\n\t * @param json the JSON object to be converted.\n\t * @return a Java {@link java.lang.String} equivalent to <em>json</em>.\n\t *         If the supplied object is not itself a\n\t *         {@link com.barandis.json.JsonString}, the object's\n\t *         {@link java.lang.Object#toString()} value will be used to\n\t *         construct the return value.\n\t */\n",
    "126847": "\t/**\n\t * Generates a Java object representation of the object. In this instance,\n\t * the returned object is a {@link java.util.HashMap} with string keys and\n\t * values that are objects converted by the values' own\n\t * {@link JsonType#toObject()} method.\n\t *\n\t * @return a map of converted objects from all of the JSON object's\n\t *         properties.\n\t */\n",
    "126848": "\t/**\n\t * Determines whether there is more of the JSON string to be parsed.\n\t *\n\t * @return either <code>true</code> if there is more JSON left to parse in\n\t *         the string or <code>false</code> if there isn't.\n\t */\n",
    "126850": "\t/**\n\t * Generates a JSON source representation of the object. This method\n\t * automatically handles the source representations of each contained value\n\t * as well.\n\t *\n\t * @return a JSON-formatted source string representing the object.\n\t */\n",
    "126852": "\t/**\n\t * Returns the Java class most closely associated with the JSON type. This\n\t * guarantees that conversions will be made to the correct objects.\n\t *\n\t * @return the Java {@link java.util.Map} class object.\n\t */\n",
    "126854": "\t/**\n\t * Returns the next character in the JSON string without moving the pointer\n\t * ahead. Thus, the next read call reads the same character.\n\t *\n\t * @return the next character in the JSON string. If there are no more\n\t *         characters, <code>'\\0'</code> is returned.\n\t */\n",
    "126861": "\t/**\n\t * Moves the pointer back one character. If the pointer is already at the\n\t * beginning of the string, it is not moved.\n\t */\n",
    "126865": "\t/**\n\t * Generates a Java object representation of the array. In this instance,\n\t * the returned object is an {@link java.util.ArrayList} with elements that\n\t * are converted by the array elements' own {@link JsonType#toObject()}\n\t * method.\n\t *\n\t * @return a list of converted elements matching the array's own elements.\n\t */\n",
    "126868": "\t/**\n\t * Retrieves the next single character from the JSON string. This also moves\n\t * the pointer up to the next position in the string so that the next read\n\t * call reads the next character.\n\t *\n\t * @return the next character in the JSON string. If there are no more\n\t *         characters, <code>'\\0'</code> is returned.\n\t */\n",
    "126869": "\t/**\n\t * Generates a JSON source representation of the array. This method\n\t * automatically handles the source representations of each contained value\n\t * as well.\n\t *\n\t * @return a JSON-formatted source string representing the array.\n\t */\n",
    "126871": "\t/**\n\t * Returns the Java class most closely associated with the JSON type. This\n\t * guarantees that conversions will be made to the correct objects.\n\t *\n\t * @return the Java {@link java.util.Collection} class object.\n\t */\n",
    "126876": "\t/**\n\t * Retrieves the next single character from the JSON string <em>if</em> it\n\t * matches the supplied character. Otherwise, an exception is thrown. Either\n\t * way, the parser's pointer is moved ahead to the next character.\n\t *\n\t * @param next the expected character in the next position of the JSON\n\t *        string.\n\t * @return the next character of the JSON string. This will be the same as\n\t *         the supplied character.\n\t * @throws MalformedJsonSourceException if the next character of the\n\t *         parser's JSON string does not match the supplied character.\n\t */\n",
    "126879": "\t/**\n\t * Generates a Java object representation of the current object.\n\t *\n\t * @return a {@link java.lang.Boolean} equal to the current object. For\n\t *         {@link #NULL}, this will return <code>null</code>.\n\t */\n",
    "126880": "\t/**\n\t * Generates a JSON source representation of the object.\n\t *\n\t * @return one of the strings <code>\"null\"</code>, <code>\"true\"</code>,\n\t *         or <code>\"false\"</code>.\n\t */\n",
    "126882": "\t/**\n\t * Returns the Java class most closely associated with the JSON type. This\n\t * guarantees that conversions will be made to the correct objects.\n\t *\n\t * @return the Java {@link java.lang.Boolean} class object.\n\t */\n",
    "126886": "\t/**\n\t * Translates a Java {@link java.util.Map} into a JavaScript\n\t * <code>Object</code>.\n\t *\n\t * @param obj the Java {@link java.util.Map} to convert.\n\t * @return a string that evaluates to an <code>Object</code> in\n\t *         JavaScript.\n\t * @throws ClassCastException if a non-null object that is not a\n\t *             {@link java.util.Map} is passed to this method.\n\t */\n",
    "126887": "\t/**\n\t * Translates a JavaScript <code>Object</code> into a Java\n\t * {@link java.util.Map}.\n\t *\n\t * @param ajax the string representation of the JavaScript\n\t *            <code>Object</code> to convert.\n\t * @return the equivalent Java {@link java.util.Map}.\n\t * @throws MalformedAjaxException if <em>ajax</em> does not evaluate to an\n\t *             <code>Object</code> value or to <code>null</code>.\n\t */\n",
    "126888": "\t/**\n\t * Generates a Java object representation of the current object.\n\t *\n\t * @return the string value of this object.\n\t */\n",
    "126889": "\t/**\n\t * Returns the preferred content type for this converter.\n\t *\n\t * @return a <code>text/plain</code> content type.\n\t */\n",
    "126891": "\t/**\n\t * Retrieves an arbitrary number of characters from the parser's JSON\n\t * string. The pointer is moved ahead by the same number of characters. If\n\t * there aren't as many characters remaining in the string as are requested,\n\t * an exception is thrown and the pointer remains stationary.\n\t *\n\t * @param count the number of characters to be read from the JSON string.\n\t * @return a string consisting of the next <em>count</em> characters in\n\t *         the JSON string.\n\t * @throws MalformedJsonSourceException if there are fewer characters left\n\t *         in the string than are requested.\n\t */\n",
    "126893": "\t/**\n\t * Returns the Java class most closely associated with the JSON type. This\n\t * guarantees that conversions will be made to the correct objects.\n\t *\n\t * @return the Java {@link java.lang.String} class object.\n\t */\n",
    "126894": "\t/**\n\t * Translates a JavaScript object into a Java {@link java.lang.Object}.\n\t * This conversion is simply the default conversion for the particular\n\t * JavaScript string, with no regard for custom objects.\n\t *\n\t * @param ajax the string representation of the JavaScript object to\n\t *            convert.\n\t * @return a new, empty {@link java.lang.Object}.\n\t * @throws MalformedAjaxException never.\n\t */\n",
    "126898": "\t/**\n\t * Translates a JavaScript <code>Number</code> or <code>String</code>\n\t * into a Java <code>char</code>.\n\t *\n\t * @param ajax the string representation of the JavaScript\n\t *            <code>Number</code> or <code>String</code> to convert.\n\t * @return the equivalent Java <code>char</code>. This is either the\n\t *         character that corresponds to a JavaScript <code>Number</code>'s\n\t *         value or the first character of a JavaScript <code>String</code>,\n\t *         as appropriate.\n\t * @throws MalformedAjaxException if <em>ajax</em> does not evaluate to a\n\t *             character value or to <code>null</code>.\n\t */\n",
    "126899": "\t/**\n\t * Translates a Java {@link java.util.regex.Pattern} into a JavaScript\n\t * <code>RegExp</code>.\n\t *\n\t * @param obj the Java {@link java.util.regex.Pattern} to convert.\n\t * @return a string that evaluates to a <code>RegExp</code> in JavaScript.\n\t * @throws ClassCastException if a non-null object that is not a\n\t *         {@link java.util.regex.Pattern} is passed to this method.\n\t */\n",
    "126901": "\t/**\n\t * Translates a JavaScript <code>RegExp</code> into a Java\n\t * {@link java.util.regex.Pattern}.\n\t *\n\t * @param ajax the string representation of the JavaScript\n\t *        <code>RegExp</code> to convert.\n\t * @return the equivalent Java {@link java.util.regex.Pattern}.\n\t * @throws MalformedAjaxException if <em>ajax</em> does not evaluate to an\n\t *         <code>RegExp</code> value or to <code>null</code>.\n\t */\n",
    "126904": "\t/**\n\t * Translates a JavaScript <code>Array</code> into a Java\n\t * {@link java.util.Collection}.\n\t *\n\t * @param ajax the string representation of the JavaScript\n\t *            <code>Array</code> to convert.\n\t * @return the equivalent Java {@link java.util.Collection}.\n\t * @throws MalformedAjaxException if <em>ajax</em> does not evaluate to an\n\t *             <code>Array</code> value or to <code>null</code>.\n\t */\n",
    "126909": "\t/**\n\t * Translates a JavaScript <code>Number</code> into a Java numerical\n\t * primitive. The type of number returned is dependent upon the nature of\n\t * the JavaScript value. If it has a decimal point, a <code>double</code>\n\t * will be returned. Otherwise, if the number is small enough to be\n\t * represented by one, an <code>int</code> will be returned; larger\n\t * numbers will be returned as <code>long</code>s.\n\t *\n\t * @param ajax the string representation of the JavaScript\n\t *            <code>Number</code> to convert.\n\t * @return the equivalent Java number.\n\t * @throws MalformedAjaxException if <em>ajax</em> does not evaluate to a\n\t *             numerical value or to <code>null</code>.\n\t */\n",
    "126912": "\t/**\n\t * Translates a JavaScript <code>Boolean</code> into a Java\n\t * <code>boolean</code>.\n\t *\n\t * @param ajax the string representation of the JavaScript\n\t *            <code>Boolean</code> to convert.\n\t * @return the equivalent Java <code>boolean</code>.\n\t * @throws MalformedAjaxException if <em>ajax</em> does not evaluate to a\n\t *             boolean value or to <code>null</code> (i.e., <em>ajax</em>\n\t *             is not <code>\"true\"</code>, <code>\"false\"</code>, or\n\t *             <code>\"null\"</code>).\n\t */\n",
    "126915": "\t/**\n\t * Translates a JavaScript <code>String</code> into a Java\n\t * {@link java.lang.String}.\n\t *\n\t * @param ajax the string representation of the JavaScript\n\t *            <code>String</code> to convert.\n\t * @return the equivalent Java {@link java.lang.String}.\n\t * @throws MalformedAjaxException if <em>ajax</em> does not evaluate to an\n\t *             <code>String</code> value or to <code>null</code>.\n\t */\n",
    "126916": "\t/**\n\t * Translates a Java {@link java.util.Date} into a JavaScript\n\t * <code>Date</code>.\n\t *\n\t * @param obj the Java {@link java.util.Date} to convert.\n\t * @return a string that evaluates to an <code>Date</code> in JavaScript.\n\t * @throws ClassCastException if a non-null object that is not a\n\t *             {@link java.util.Date} is passed to this method.\n\t */\n",
    "126918": "\t/**\n\t * Translates a JavaScript <code>Date</code> into a Java\n\t * {@link java.util.Date}.\n\t *\n\t * @param ajax the string representation of the JavaScript <code>Date</code>\n\t *            to convert.\n\t * @return the equivalent Java {@link java.util.Date}.\n\t * @throws MalformedAjaxException if <em>ajax</em> does not evaluate to an\n\t *             <code>Date</code> value or to <code>null</code>.\n\t */\n",
    "126922": "\t/**\n\t * Performs initialization on the filter. This method is called\n\t * automatically by the servlet container.\n\t *\n\t * @param filterConfig the configuration object for the filter.\n\t * @throws ServletException if an error occurs while initializing the\n\t *             filter.\n\t */\n",
    "126923": "\t/**\n\t * Retrieves the text of the parser's JSON string up to and including a\n\t * target character or the end of the line, whichever comes first. The\n\t * pointer is moved after the last read character (i.e., it is moved to the\n\t * beginning of the next line if the target character is not found on the\n\t * current line).\n\t *\n\t * @param target the target character to read until.\n\t * @return a substring of the parser's JSON string starting at the initial\n\t *         pointer position and ending at the target character or the end of\n\t *         the line.\n\t */\n",
    "126926": "\t/**\n\t * Performs the cleanup necessary before the filter is destroyed. This\n\t * method is called automatically by the container when appropriate.\n\t */\n",
    "126935": "\t/**\n\t * Writes the response to the remote client and closes the output stream and\n\t * writer. This method must be called at the end of processing, as it is the\n\t * only time that the stream will be written.\n\t */\n",
    "126953": "\t/**\n\t * Skips ahead in the JSON string until the target character is the next\n\t * character to be read. If the target character doesn't exist in the rest\n\t * of the string, the pointer is not moved at all.\n\t *\n\t * @param target the character in the string to skip until.\n\t */\n",
    "126961": "    /**\n     * Returns the identifier for the UKETD namespace.\n     *\n     * @return uketdNs\n     */\n",
    "126962": "\t/**\n\t * Skips ahead in the JSON string until after the target string. If the\n\t * target string is not found, the pointer is placed at the end of the\n\t * string.\n\t *\n\t * @param target the string to skip until.\n\t */\n",
    "126965": "    /**\n     * Returns the URI of the UKETD namespace.\n     *\n     * @return uketdUri\n     */\n",
    "126969": "    /**\n     * Returns the identifier for the Dublin Core namespace.\n     *\n     * @return dcNs\n     */\n",
    "126972": "    /**\n     * Returns the URI of the Dublin Core namespace.\n     *\n     * @return dcUri\n     */\n",
    "126975": "    /**\n     * Returns the identifier for the DC terms (qualifiers) namespace.\n     *\n     * @return cdTermsNs\n     */\n",
    "126980": "    /**\n     * Returns the URI of the DC terms namespace.\n     *\n     * @return dcTermsUri\n     */\n",
    "126983": "    /**\n     * Returns the identifier for the UKETD terms namespace.\n     *\n     * @return uketdTermsNs\n     */\n",
    "126987": "    /**\n     * Returns the URI of the UKETD terms namespace.\n     *\n     * @return uketdTermsUri\n     */\n",
    "126990": "    /**\n     * Returns the identifier for the UKETD schema location.\n     *\n     * @return uketdSchemaLocNs\n     */\n",
    "126997": "    /**\n     * Returns the URI of the UKETD schema location.\n     *\n     * @return uketdSchemaLocUri\n     */\n",
    "127118": "\t/**\n\t * Return the opposite direction of this one\n\t * @return\n\t */\n",
    "127176": "\t/**\n\t * Just move a point directly; this doesn't perform any safety checking\n\t * so it should be called after its been checked that it is safe to perform\n\t * this move.  This wont move any attached parts or do anything specific\n\t * to the object being moved.\n\t *  \n\t * @param oldPoint\n\t * @param newPoint\n\t */\n",
    "127409": "\t/**\n\t * Calculate the ability modifier based on the value of\n\t * score.\n\t */\n",
    "127501": "\t/**\n\t * Add the modifier info to a list of modifiers already\n\t * in place.  If an existing modifier is in place that\n\t * supercedes this one, then this modifier will not be\n\t * added and the method returns zero.\n\t * If this modifier supercedes an existing one, then it \n\t * will return the difference between the two adjustments,\n\t * and replace the existing one.\n\t * Otherwise, it adds itself to the end of the list and\n\t * returns its full amount. \n\t * @param list\n\t * @return\n\t */\n",
    "127688": "\t/** \n\t * return the hit dice of the character/monster for purposes\n\t * of determining the save DC for special abilities, or the\n\t * effects of spells, etc.\n\t * @return characterLevel\n\t */\n",
    "127941": "\t/** This is needed by the velocity template; it can't determine this itself */\n",
    "128235": "\t/** Return a map of class to Set */\n",
    "128237": "\t/**\n\t * Default implementataion of getMySetInBook() uses\n\t * b.getSetForClass().\n\t */\n",
    "128238": "\t/**\n\t * Used by subclasses to implement addToBook(); this\n\t * can be called with the set in the book to add the\n\t * entity to, and the book.  This will do:\n\t * \n\t * s.add(this)\n\t * setBook(b)\n\t */\n",
    "128240": "\t/**\n\t * Used by subclasses to implement removeFromBook();\n\t * this can be aclled with the set in the book to\n\t * remove the entity from, and the book.  It will do:\n\t * \n\t * s.remove(this);\n\t * if(getBook() == b) setBook(null);\n\t */\n",
    "128241": "\t/**\n\t * Called when creating a fresh instance, or just to setup\n\t * defaults before reading from an XML import.   Subclasses\n\t * should override this to fill values with defaults; especially,\n\t * any collections or maps should be initialized with any\n\t * appropriate comparator etc.\n\t */\n",
    "128271": "\t/**\n\t * Export all an entity's properties as xml properties.  Also\n\t * export non-inverse relationships.\n\t */ \n",
    "128272": "\t/**\n\t * Export the properties of an entity into the current tag. \n\t */\n",
    "128281": "\t/**\n\t * Write a book to a file.\n\t */\n",
    "128390": "\t/**\n\t * Return the largest size this creature qualifies for\n\t * based on the given hit dice total.\n\t */\n",
    "128392": "\t/**\n\t * Get the size for the base creature (using the base hit dice)\n\t */\n",
    "128415": "    /**\n     * Stop the Tomcat server.\n     */\n",
    "128416": "    /**\n     * Register a WAR with the container.\n     * \n     * @param contextPath the context path to register the application with\n     * @param warFile the URL of the WAR to be registered\n     * @throws IOException Thrown by the deployer\n     */\n",
    "128418": "    /**\n     * Unregister a WAR from tomcat.\n     * \n     * @param contextPath the context path to be removed\n     */\n",
    "128447": "\t/**\n\t * Given an attack bonus, damage, and damage bonus, return\n\t * a standard-format string for display.\n\t */\n",
    "128458": "\t/**\n\t * Return the number of ability scores used by this game system.\n\t */\n",
    "128472": "\t/**\n\t * Bind the parameters of the given request to this binder's target.\n\t * <p>This call can create field errors, representing basic binding\n\t * errors like a required field (code \"required\"), or type mismatch\n\t * between value and bean property (code \"typeMismatch\").\n\t * @param request request with parameters to bind (can be multipart)\n\t * @throws ParseException\n\t * @see org.springframework.web.multipart.MultipartHttpServletRequest\n\t * @see org.springframework.web.multipart.MultipartFile\n\t */\n",
    "128473": "\t/**\n\t * Bind the parameters of the given request to this binder's target.\n\t * <p>This call can create field errors, representing basic binding\n\t * errors like a required field (code \"required\"), or type mismatch\n\t * between value and bean property (code \"typeMismatch\").\n\t * @param request request with parameters to bind (can be multipart)\n\t * @throws ParseException\n\t * @throws IOException\n\t * @see org.springframework.web.multipart.MultipartHttpServletRequest\n\t * @see org.springframework.web.multipart.MultipartFile\n\t */\n",
    "128475": "\t/**\n\t * Treats errors as fatal. Use this method only if\n\t * it's an error if the input isn't valid.\n\t * This might be appropriate if all input is from dropdowns, for example.\n\t * @throws ServletRequestBindingException subclass of ServletException on any binding problem\n\t */\n",
    "128492": "\t/** Good saves are 2 + 1/2 the class level (round down)*/\n",
    "128498": "\t/** Poor saves are 1/3 the class level (round down) */\n",
    "128551": "   /**\n    * Write a stag/pcdata/etag all at once\n    * @param tag\n    * @param pcdata\n    * @throws IOException\n    */\n",
    "128554": "\t/**\n\t * Masterwork items do not add to the damage of a weapon.\n\t * +1 and above enhancements add their value to both damage and attack.\n\t */\n",
    "128557": "\t/**\n\t * Masterwork items add a +1 attack bonus.\n\t * +1 and above enhancements add their value to both damage and attack.\n\t */\n",
    "128558": "\t/**\n\t * Masterwork items don't add any shield bonus; only magical\n\t * enhancement does.\n\t */\n",
    "128559": "\t/**\n\t * Masterwork items don't add any armor bonus; only magical\n\t * enhancement does.\n\t */\n",
    "128562": "\t/** Need to mock up the random numbers or this wont be repeatable */\n",
    "128597": "\t/**\n\t * Adjust the weapon grip (light, one-handed, or two-handed) based on\n\t * the difference between the size of the creature and the size of\n\t * creature the weapon was made for.\n\t * \n\t * Although it is illegal to use a weapon that would be larger than\n\t * two-handed or smaller than light, this method will simply stop\n\t * increasing beyond two-handed or decreasing below light.  The code\n\t * to prevent wielding of totally inappropriate size weapons should\n\t * already have been applied elsewhere.\n\t */\n",
    "128612": "\t/**\n\t * Calculate bonus spells per day for a given modifier\n\t */\n",
    "128774": "\t/**\n\t * Return true if we are proficient with the given item when\n\t * used as a melee weapon.\n\t */\n",
    "128807": "\t/**\n\t * Return true if we are proficient with the given item when\n\t * used as a ranged weapon.\n\t */\n",
    "128824": "    /** Unknown properties are <string>always</strong> returned as false */\n",
    "128849": "    /**\n     * Change the input of this stream to be the given reader; this\n     * resets the internal state of the parser, so you can call it at\n     * any time to re-use the parser on a new document.\n     */\n",
    "128864": "    /**\n     * Retrieve the current input encoding\n     */\n",
    "128879": "    /**\n     * Return the number of namespaces we are nested in\n     */\n",
    "128910": "    /**\n     * Return the number of nested tags we are in\n     */\n",
    "128918": "    /**\n     * Return string describing current position of parsers as\n     * text 'STATE [seen %s...] @line:column'.\n     */\n",
    "128925": "    /** Get the current line number */\n",
    "128932": "    /** Get the current column */\n",
    "128938": "    /** Return true if the current TEXT contains only whitespace */\n",
    "128945": "    /** Get the current TEXT item as a String */\n",
    "129064": "    /**\n     * nextTag() always returns either START_TAG or END_TAG.  It will automatically\n     * skip a whitespace token, if there is one.\n     */\n",
    "129069": "    /**\n     * Find the matching END_TAG for the current START_TAG; this\n     * will skip all tags enclosed inside this tag.\n     * \n     * @return END_TAG\n     */\n",
    "129074": "    /**\n     * Return the next token and advance past it in the stream.\n     * This skips over \"minor\" tokens like whitespace, returning only the major items:\n     * START_DOCUMENT, END_DOCUMENT, START_TAG, TEXT, END_TAG\n     * If you want greater control over the XML parsing (e.g. handling your own\n     * entities etc.) then use nextToken().\n     */\n",
    "129079": "    /**\n     * Return any of the full set of tokens, advancing in the stream.\n     */\n",
    "129187": "\t/**\n     * Returns an input stream that is only valid for this tag.... This sub-input stream will affect this input stream.\n     * Calling close on the sub-input stream will advance this input stream to the next tag.\n     * @return\n     */\n",
    "129862": "    /**\n     * Returns the <CODE>Paint</CODE> used by this <CODE>Brush</CODE>.\n     * \n     * @return the <CODE>Paint</CODE> used by this <CODE>Brush</CODE>\n     */\n",
    "129863": "    /**\n     * Adds the supplied <CODE>VisualObject</CODE> for rendering in the vector\n     * world.\n     * \n     * @param vo the new <CODE>VisualObject</CODE> to be rendered\n     */\n",
    "129864": "    /**\n     * Returns the <CODE>Stroke</CODE> used by this <CODE>Brush</CODE>.\n     * \n     * @return the <CODE>Stroke</CODE> used by this <CODE>Brush</CODE>\n     */\n",
    "129865": "    /**\n     * Removes the supplied <CODE>VisualObject</CODE> from rendering in the\n     * vector world.\n     * \n     * @param vo the <CODE>VisualObject</CODE> to be removed\n     */\n",
    "129866": "    /**\n     * Returns the <CODE>Composite</CODE> used by this <CODE>Brush</CODE>.\n     * \n     * @return the <CODE>Composite</CODE> used by this <CODE>Brush</CODE>\n     */\n",
    "129868": "    /**\n     * Sets the <CODE>Paint</CODE> used by this <CODE>Brush</CODE>. If the\n     * supplied parameter is null, a suitable default value will be assigned.\n     * \n     * @param paint the <CODE>Paint</CODE> to be used by this <CODE>Brush</CODE>\n     */\n",
    "129869": "    /**\n     * Tells the manager to render all known <CODE>VisualObject</CODE>s that\n     * exist on non-negative layers. There are some guarantees about the\n     * rendering of objects:\n     * <OL>\n     * <LI>They will be rendered in ascending order by layer.</LI>\n     * <LI>An embedded object will be rendered following its parent's <CODE>renderObject</CODE>\n     * method being invoked.</LI>\n     * <LI>An embedded object with a negative layer will be rendered prior to\n     * the invocation of its parent's <CODE>renderOutline</CODE> method.</LI>\n     * <LI>An embedded object with a non-negative layer will be rendered after\n     * the invocation of its parent's <CODE>renderOutline</CODE> method.</LI>\n     * </OL>\n     * \n     * @param g the <CODE>Graphics2D</CODE> context onto which to render the\n     *        objects\n     */\n",
    "129870": "    /**\n     * Sets the <CODE>Stroke</CODE> used by this <CODE>Brush</CODE>. If the\n     * supplied parameter is null, a suitable default value will be assigned.\n     * \n     * @param stroke the <CODE>Stroke</CODE> to be used by this <CODE>Brush</CODE>\n     */\n",
    "129872": "    /**\n     * Sets the <CODE>Composite</CODE> used by this <CODE>Brush</CODE>. If\n     * the supplied parameter is null, a suitable default value will be\n     * assigned.\n     * \n     * @param composite the <CODE>Composite</CODE> to be used by this <CODE>Brush</CODE>\n     */\n",
    "129873": "        /**\n         * Compares its two arguments for order. Returns a negative integer,\n         * zero, or a positive integer as the first argument is less than, equal\n         * to, or greater than the second.\n         * \n         * @param obj1 the first <CODE>VisualObject</CODE> to be compared\n         * @param obj2 the second <CODE>VisualObject</CODE> to be compared\n         * @return a negative integer, zero, or a positive integer as the first\n         *         argument is less than, equal to, or greater than the second\n         */\n",
    "129874": "    /**\n     * Configures the supplied <CODE>Graphics2D</CODE> instance to use this\n     * <CODE>Brush</CODE>.\n     * \n     * @param g the <CODE>Graphics2D</CODE> to be configured\n     */\n",
    "129875": "    /**\n     * Returns the shared instance of <CODE>ImageManager</CODE>, which is\n     * useful if a unified <CODE>Image</CODE> cache is desired.\n     * \n     * @return the <CODE>ImageManager</CODE> singleton\n     */\n",
    "129879": "    /**\n     * Returns a reference to the <CODE>VVViewPane</CODE> used to render the\n     * vector world. The datatype view of the returned object is <CODE>Component</CODE>\n     * for convenience, as often this method is used to add the panel into a\n     * <CODE>Component</CODE> hierarchy.\n     * \n     * @return a reference to the <CODE>VVViewPane</CODE> used to render the\n     *         vector world\n     */\n",
    "129880": "    /**\n     * Adds a new level of detail to this manager.\n     * \n     * @param scale the scale at and below which the specified level should come\n     *        into effect\n     * @param detail the level of detail that should be active below the\n     *        specified scale\n     */\n",
    "129881": "    /**\n     * Given a scale value, returns the level of detail that should be active.\n     * \n     * @param scale the scale value being asked about\n     * @return the level of detail that should be active\n     */\n",
    "129884": "    /**\n     * Returns a reference to the <CODE>VisualObject</CODE> used to contain\n     * all of the contents of this panel.\n     * \n     * @return a reference to the <CODE>VisualObject</CODE> used to contain\n     *         all of the contents of this panel\n     */\n",
    "129885": "    /**\n     * Returns the shared instance of <CODE>FontManager</CODE>, which is\n     * useful if a unified <CODE>Font</CODE> cache is desired.\n     * \n     * @return the <CODE>FontManager</CODE> singleton\n     */\n",
    "129889": "    /**\n     * Returns the <CODE>TaskManager</CODE> that handles all of the tasks for\n     * this display instance.\n     * \n     * @return the <CODE>TaskManager</CODE> that handles all of the tasks for\n     *         this display instance\n     */\n",
    "129890": "    /**\n     * Returns a reference to the <CODE>VVDisplay</CODE> that this listener is\n     * associated with.\n     * \n     * @return a reference to the <CODE>VVDisplay</CODE> that this listener is\n     *         associated with\n     */\n",
    "129892": "    /**\n     * Returns whether or not the viewport itself can be zoomed using the mouse\n     * wheel.\n     * \n     * @return whether or not the viewport itself can be zoomed using the mouse\n     *         wheel\n     */\n",
    "129893": "    /**\n     * Sets whether or not the viewport itself can be zoomed using the mouse\n     * wheel.\n     * \n     * @param viewportZoomable whether or not the viewport itself can be zoomed\n     *        using the mouse wheel\n     */\n",
    "129895": "    /**\n     * Adds a <CODE>VVMouseListener</CODE> that will respond to events on this\n     * <CODE>VVPanel</CODE> instance. The listener will be analyzed to see\n     * what interfaces it implements, and will be attached to all of the\n     * appropriate event sources automatically.\n     * \n     * @param listener a <CODE>VVMouseListener</CODE> that will respond to\n     *        events on this <CODE>VVPanel</CODE> instance\n     */\n",
    "129897": "    /**\n     * Invoked when the mouse wheel is rotated.\n     * \n     * @param e the event to be processed\n     * @see MouseWheelEvent\n     */\n",
    "129898": "    /**\n     * Removes a <CODE>VVMouseListener</CODE> from responding to events on\n     * this <CODE>VVPanel</CODE> instance. The listener will be analyzed to\n     * see what interfaces it implements, and will be removed from all of the\n     * appropriate event sources automatically.\n     * \n     * @param listener the <CODE>VVMouseListener</CODE> to remove\n     */\n",
    "129899": "    /**\n     * Returns whether or not the viewport itself can be moved by dragging.\n     * \n     * @return whether or not the viewport itself can be moved by dragging\n     */\n",
    "129900": "    /**\n     * Sets whether or not the viewport itself can be moved by dragging.\n     * \n     * @param viewportDraggable whether or not the viewport itself can be moved\n     *        by dragging\n     */\n",
    "129901": "    /**\n     * Adds the supplied <CODE>VisualObject</CODE> for rendering in the vector\n     * world.\n     * \n     * @param vo the new <CODE>VisualObject</CODE> to be rendered\n     */\n",
    "129903": "    /**\n     * Returns whether or not the supplied object can be moved by dragging.\n     * \n     * @param obj the <CODE>VisualObject</CODE> to investigate\n     * @return whether or not the supplied object can be moved by dragging\n     */\n",
    "129904": "    /**\n     * Sets whether or not the supplied object is movable by dragging.\n     * \n     * @param obj the <CODE>VisualObject</CODE> to modify\n     * @param draggable whether or not the object can be moved by dragging\n     */\n",
    "129905": "    /**\n     * Removes the supplied <CODE>VisualObject</CODE> from rendering in the\n     * vector world.\n     * \n     * @param vo the <CODE>VisualObject</CODE> to be removed\n     */\n",
    "129907": "    /**\n     * Returns the shared instance of <CODE>SelectionManager</CODE>, which is\n     * useful if a unified selection management approach is desired.\n     * \n     * @return the <CODE>SelectionManager</CODE> singleton\n     */\n",
    "129908": "    /**\n     * Translates the supplied <CODE>VisualObject</CODE> by the given amounts\n     * of X and Y in response to being dragged. Subclasses can override this\n     * method to create custom drag activities.\n     * \n     * @param obj the <CODE>VisualObject</CODE> being dragged\n     * @param dx the change in the object's X position\n     * @param dy the change in the object's Y position\n     */\n",
    "129909": "    /**\n     * Adds a <CODE>SelectionListener</CODE> to receive notification when\n     * <CODE>VisualObject</CODE>s are selected and deselected.\n     * \n     * @param listener the new listener to add\n     */\n",
    "129910": "    /**\n     * Removes a <CODE>SelectionListener</CODE> from receiving notification\n     * when <CODE>VisualObject</CODE>s are selected and deselected.\n     * \n     * @param listener the listener to remove\n     */\n",
    "129911": "    /**\n     * Invoked when the mouse cursor has been moved onto a component but no\n     * buttons have been pressed.\n     * \n     * @param e the event to be processed\n     */\n",
    "129913": "    /**\n     * Notifies the <CODE>SelectionManager</CODE> that a <CODE>VisualObject</CODE>\n     * has been selected, so the appropriate listeners should be notified. If\n     * the selection is simply being cleared (no new object is being selected)\n     * the parameter will be null.\n     * \n     * @param obj the <CODE>VisualObject</CODE> that has been selected, or\n     *        null if selection is being cleared\n     */\n",
    "129914": "    /**\n     * Returns the <CODE>VisualObject</CODE> that is currently selected.\n     * \n     * @return the <CODE>VisualObject</CODE> that is currently selected\n     */\n",
    "129918": "    /**\n     * Returns the appropriate <CODE>Graphics</CODE> context to paint on,\n     * taking into consideration the <CODE>Component</CODE>'s buffering\n     * strategy.\n     * \n     * @return the appropriate <CODE>Graphics</CODE> context to paint on\n     */\n",
    "129924": "    /**\n     * Given a <CODE>MouseEvent</CODE>, determines the object that would be\n     * dragged based on the location and sets the <CODE>objectBeingDragged</CODE>\n     * field to the appropriate value.\n     * \n     * @param e the <CODE>MouseEvent</CODE> that generated the analysis\n     */\n",
    "129941": "    /**\n     * Uses the supplied <CODE>OutputStream</CODE> to encode the specified\n     * <CODE>Object</CODE> tree into XML.\n     * \n     * @param out the <CODE>OutputStream</CODE> to write the output to\n     * @param object the <CODE>Object</CODE> that is the root of the tree to\n     *        encode\n     */\n",
    "129944": "    /**\n     * Adds a new <CODE>VisualObject</CODE> to the arrangement.\n     * \n     * @param obj the <CODE>VisualObject</CODE> to add to the arrangment\n     */\n",
    "129947": "    /**\n     * Removes the supplied <CODE>VisualObject</CODE> removed from the\n     * arrangement.\n     * \n     * @param obj the <CODE>VisualObject</CODE> to remove from the arrangement\n     */\n",
    "129948": "    /**\n     * Returns the number of <CODE>VisualObject</CODE>s that will be arranged\n     * on a single row before the next row is started.\n     * \n     * @return the number of <CODE>VisualObject</CODE>s that will be arranged\n     *         on a single row before the next row is started\n     */\n",
    "129949": "    /**\n     * Enables or disables animated arrangement transitions, depending upon the\n     * value provided.\n     * \n     * @param enabled true to enable animated transitions, false to disable them\n     */\n",
    "129952": "    /**\n     * Returns true if animated arrangement transitions are enabled, false\n     * otherwise. The default is false.\n     * \n     * @return true if animated arrangement transitions are enabled, false\n     *         otherwise\n     */\n",
    "129953": "    /**\n     * Causes this <CODE>Arranger</CODE> to transform all of its arranged\n     * <CODE>VisualObject</CODE>s so that they are organized in a way\n     * appropriate to the purpose of this implementation. If animations are\n     * enabled, the transformation will be a smooth \"morph\" effect.\n     */\n",
    "129954": "    /**\n     * Causes this <CODE>Arranger</CODE> to transform all of its arranged\n     * <CODE>VisualObject</CODE>s so that they are positioned the way they\n     * were when they were added to the arrangement.\n     */\n",
    "129956": "    /**\n     * Vends a basic triangular arrow tip that is suitable for use as an\n     * endpoint <CODE>Shape</CODE>.\n     * \n     * @return a basic triangular arrow tip <CODE>Shape</CODE>\n     */\n",
    "129957": "    /**\n     * Vends a triangular arrow tip with sharp angles that is suitable for use\n     * as an endpoint <CODE>Shape</CODE>.\n     * \n     * @return a triangular arrow tip <CODE>Shape</CODE> with sharp angles\n     */\n",
    "129958": "    /**\n     * Vends a triangular arrow tip with a closed bottom that is suitable for\n     * use as an endpoint <CODE>Shape</CODE>.\n     * \n     * @return a triangular arrow tip <CODE>Shape</CODE> with a closed bottom\n     */\n",
    "129959": "    /**\n     * Returns the <CODE>String</CODE> that will be displayed as a label on\n     * this connector.\n     * \n     * @return the <CODE>String</CODE> that will be displayed as a label on\n     *         this connector\n     */\n",
    "129960": "    /**\n     * Returns the <CODE>Shape</CODE> that is rendered at the endpoint.\n     * \n     * @return the <CODE>Shape</CODE> that is rendered at the endpoint\n     */\n",
    "129961": "    /**\n     * Sets the <CODE>Shape</CODE> that is rendered at the endpoint.\n     * \n     * @param shape the <CODE>Shape</CODE> that is rendered at the endpoint\n     */\n",
    "129963": "    /**\n     * Returns the <CODE>VisualObject</CODE> in which the endpoint is located.\n     * \n     * @return the <CODE>VisualObject</CODE> in which the endpoint is located\n     */\n",
    "129965": "    /**\n     * Sets the <CODE>VisualObject</CODE> in which the endpoint is located.\n     * \n     * @param object <CODE>VisualObject</CODE> in which the endpoint is\n     *        located\n     */\n",
    "129966": "    /**\n     * Returns the approximate system millisecond during which this event was\n     * generated.\n     * \n     * @return the approximate system millisecond during which this event was\n     *         generated\n     */\n",
    "129967": "    /**\n     * Returns the <CODE>ExecutionState</CODE> type that the task is now in.\n     * \n     * @return the <CODE>ExecutionState</CODE> type that the task is now in\n     */\n",
    "129968": "    /**\n     * Returns whether or not this endpoint should lie along the outer edge of\n     * the associated <CODE>VisualObject</CODE>.\n     * \n     * @return true if this endpoint should lie along the outer edge of the\n     *         associated <CODE>VisualObject</CODE>, false otherwise\n     */\n",
    "129973": "    /**\n     * Sets the desired rate of rotation, expressed in Theta Per Second. The\n     * change will take effect immediately.\n     * \n     * @param rate the desired rate of rotation, expressed in Theta Per Second\n     */\n",
    "129984": "    /**\n     * Returns the amount of time in milliseconds that will be allocated for a\n     * single task cycle. The default value is 10 milliseconds.\n     * \n     * @return the amount of time in milliseconds that will be allocated for a\n     *         single task cycle\n     */\n",
    "129985": "    /**\n     * Removes the supplied task from the chain of tasks to be executed in\n     * sequence.\n     * \n     * @param task the task to remove\n     */\n",
    "129988": "    /**\n     * Sets the amount of time in milliseconds that will be allocated for a\n     * single task cycle. Any given cycle of task execution (meaning an update\n     * call on every running <CODE>AnimationTask</CODE>) will take no less\n     * than this amount of time, but could take more. The default value is 10\n     * milliseconds.\n     * \n     * @param cycleLength the amount of time in milliseconds that will be\n     *        allocated for a single task cycle\n     */\n",
    "129990": "    /**\n     * Adds a new <CODE>AnimationTask</CODE> to the list of currently\n     * executing tasks. The task will be added to the end of the list, and will\n     * immediately begin receiving update calls.\n     * \n     * @param task the new task to be added for execution\n     */\n",
    "129991": "    /**\n     * Sets the <CODE>TaskManager</CODE> that is handling the execution of\n     * this task.\n     * \n     * @param manager the <CODE>TaskManager</CODE> that is handling the\n     *        execution of this task\n     */\n",
    "129994": "    /**\n     * Gets the <CODE>TaskManager</CODE> that is handling the execution of\n     * this task.\n     * \n     * @return the <CODE>TaskManager</CODE> that is handling the execution of\n     *         this task\n     */\n",
    "129995": "    /**\n     * Removes a <CODE>TaskListener</CODE> from receiving notification when\n     * <CODE>AnimationTask</CODE>s change execution state.\n     * \n     * @param listener the listener to remove\n     */\n",
    "129997": "    /**\n     * Informs the task handling thread (if any) to exit at its next opportunity\n     * to do so smoothly. This is achieved by clearning the list of tasks.\n     */\n",
    "129998": "    /**\n     * Returns whether or not the label is locked in a horizontal position. If\n     * the label is not locked, it will be rotated to align with the connection\n     * line itself.\n     * \n     * @return true if the label is to be locked in a horizontal position, false\n     *         otherwise\n     */\n",
    "129999": "    /**\n     * Immediately sets the duration of this task to 0, effectively causing it\n     * to stop running. This will work for both indefinite and normal tasks.\n     */\n",
    "130000": "    /**\n     * Returns the current <CODE>ExecutionState</CODE> of this manager.\n     * \n     * @return the current <CODE>ExecutionState</CODE> of this manager\n     */\n",
    "130004": "    /**\n     * Sets whether or not the label will be locked in a horizontal position. If\n     * the label is not locked, it will be rotated to align with the connection\n     * line itself.\n     * \n     * @param horizontal true if the label is to be locked in a horizontal\n     *        position, false otherwise\n     */\n",
    "130006": "    /**\n     * Returns the total amount of progress that has been recorded by this task.\n     * \n     * @return the total amount of progress that has been recorded by this task\n     */\n",
    "130007": "    /**\n     * Sets the <CODE>Image</CODE> that this object displays.\n     * \n     * @param image the new <CODE>Image</CODE> for this object to display\n     */\n",
    "130008": "    /**\n     * Returns the <CODE>Image</CODE> that this object displays.\n     * \n     * @return the <CODE>Image</CODE> that this object displays\n     */\n",
    "130012": "    /**\n     * Sets the text that will be rendered. If the value provided is null, a\n     * suitable default will be applied instead.\n     * \n     * @param text the text string to render\n     */\n",
    "130013": "    /**\n     * Returns the <CODE>VVDisplay</CODE> upon which this object is being\n     * shown.\n     * \n     * @return the <CODE>VVDisplay</CODE> upon which this object is being\n     *         shown\n     */\n",
    "130015": "    /**\n     * Returns the text that is being rendered.\n     * \n     * @return the text that is being rendered\n     */\n",
    "130016": "    /**\n     * Sets the <CODE>Font</CODE> that will be used to render the text. If the\n     * value provided is null, a suitable default will be applied instead.\n     * \n     * @param font the <CODE>Font</CODE> to render the text with\n     */\n",
    "130017": "        /**\n         * Calculates and returns the coordinates of the center of this segment.\n         * \n         * @return the <CODE>Point2D</CODE> representing the center of this\n         *         segment\n         */\n",
    "130019": "    /**\n     * Returns the <CODE>Shape</CODE> of the object.\n     * \n     * @return the <CODE>Shape</CODE> of the object\n     */\n",
    "130025": "    /**\n     * Returns a reference to the <CODE>VisualObject</CODE> that displays the\n     * turret portion of the tank. This is useful for manually manipulating the\n     * turret in various ways.\n     * \n     * @return a reference to the <CODE>VisualObject</CODE> that displays the\n     *         turret portion of the tank\n     */\n",
    "130026": "    /**\n     * Sets the <CODE>Shape</CODE> of the object.\n     * \n     * @param shape the <CODE>Shape</CODE> of the object\n     */\n",
    "130028": "    /**\n     * Rotates the tank's turret by the supplied amount of Theta.\n     * \n     * @param theta the amount of Theta to rotate the tank's turret\n     */\n",
    "130034": "    /**\n     * Returns the <CODE>Brush</CODE> used to draw the outline of the object.\n     * \n     * @return the <CODE>Brush</CODE> used to draw the outline of the object\n     */\n",
    "130041": "    /**\n     * Sets the <CODE>Brush</CODE> used to draw the outline of the object.\n     * \n     * @param lineBrush the <CODE>Brush</CODE> used to draw the outline of the\n     *        object\n     */\n",
    "130048": "    /**\n     * Returns the <CODE>Brush</CODE> used to fill in the object.\n     * \n     * @return the <CODE>Brush</CODE> used to fill in the object\n     */\n",
    "130055": "    /**\n     * Sets the <CODE>Brush</CODE> used to fill in the object.\n     * \n     * @param fillBrush the <CODE>Brush</CODE> used to fill in the object\n     */\n",
    "130057": "\t/**\n\t * Returns the <CODE>DocumentController</CODE> that was the source of\n\t * this event.\n\t * \n\t * @return the <CODE>DocumentController</CODE> that was the source of\n\t * this event\n\t */\n",
    "130059": "\t/**\n\t * Sets the index into the <CODE>Document</CODE> at which any insertions\n\t * will occur, and from which any single-character deletions will occur.\n\t * \n\t * @param location the index into the <CODE>Document</CODE> at which any\n\t * single-character edits will occur\n\t * \n\t * @throws BadLocationException if the specified character index is outside\n\t * the range of the <CODE>Document</CODE>\n\t */\n",
    "130060": "\t/**\n\t * Updates the current <CODE>Shape</CODE> of this object based on\n\t * the <CODE>Font</CODE> it is using, and the text being represented.\n\t */\n",
    "130061": "\t/**\n\t * Gets the index into the <CODE>Document</CODE> at which any insertions\n\t * will occur, and from which any single-character deletions will occur.\n\t * \n\t * @return the index into the <CODE>Document</CODE> at which any\n\t * single-character edits will occur\n\t */\n",
    "130062": "    /**\n     * Adds a new \"level of detail\" (LOD) setting to this object. LOD is used to\n     * help make large, complicated scenes render faster by not rendering things\n     * that are too small to see, or by reducing their rendering quality. Each\n     * <CODE>VisualObject</CODE> can interpret its detail values differently\n     * in the <CODE>render</CODE> methods, but the default behavior for the\n     * base <CODE>VisualObject</CODE> is as follows:\n     * <UL>\n     * <LI>Detail level 2 or above means render at full quality.\n     * <LI>Detail level 1 means render as a simple rectangle.\n     * <LI>Detail level 0 or below means do not render.\n     * </UL>\n     * Subclasses are free to change these values and interpretations in any way\n     * desired.\n     * \n     * @param scale the scale at and below which the specified level should come\n     *        into effect\n     * @param detail the level of detail that should be active below the\n     *        specified scale\n     */\n",
    "130065": "\t/**\n\t * Sets the length of the selected text.  The selection is always ended\n\t * at the current caret location, and repositioning the caret will clear\n\t * the selection.\n\t * \n\t * @param length the number of characters leading up to the caret location\n\t * that are to be selected\n\t * \n\t * @throws BadLocationException if the specified selection length would require\n\t * that the selection start in a location that isn't part of the <CODE>Document</CODE>\n\t */\n",
    "130067": "\t/**\n\t * Gets the length of the selected text.  The selection is always ended\n\t * at the current caret location, and repositioning the caret will clear\n\t * the selection.\n\t * \n\t * @return the number of characters leading up to the caret location\n\t * that are selected\n\t */\n",
    "130069": "    /**\n     * Returns the current \"level of detail\" (LOD) being used when rendering\n     * this object, due to its current scale and the scale of the <CODE>Graphics2D</CODE>\n     * context.\n     * \n     * @param g2d the <CODE>Graphics2D</CODE> context being rendered on\n     * @return the current \"level of detail\" (LOD) being used when rendering\n     *         this object\n     * @see #addLevelOfDetail(double, int)\n     */\n",
    "130070": "\t/**\n\t * Inserts the specified text at the caret location.\n\t * \n\t * @param text the text to insert\n\t */\n",
    "130072": "\t/**\n\t * Deletes the specified number of characters, starting\n\t * at the caret location.\n\t * \n\t * @param length the number of characters to delete\n\t */\n",
    "130074": "\t/**\n\t * Replaces the current selection with the supplied text.  The\n\t * new text will become the selected region.\n\t * \n\t * @param text the text to replace the selection with\n\t */\n",
    "130076": "    /**\n     * Embeds the supplied <CODE>VisualObject</CODE> in this one. The embedded\n     * object will now inherit the transformations of this object, and will\n     * always be rendered after this object is. If an <CODE>Arranger</CODE>\n     * has been set on this object, the embedded object will be added to it, but\n     * the arrangement will be updated until <CODE>arrange()</CODE> is called\n     * on it.\n     * \n     * @param obj the <CODE>VisualObject</CODE> to embed in this one\n     */\n",
    "130077": "\t/**\n\t * Deletes the text that falls within the selection.  The caret will\n\t * be positioned where the selection used to be.\n\t */\n",
    "130078": "\t/**\n\t * Returns the <CODE>DocumentController</CODE> that makes edits to this\n\t * object's backing <CODE>Document</CODE>.\n\t *\n\t * @return the <CODE>DocumentController</CODE> that makes edits to this\n\t * object's backing <CODE>Document</CODE>\n\t */\n",
    "130079": "\t/**\n\t * Returns the <CODE>String</CODE> representing the text that falls within\n\t * the selected region of the <CODE>Document</CODE>.\n\t * \n\t * @return the <CODE>String</CODE> representing the text that falls within\n\t * the selected region of the <CODE>Document</CODE>\n\t */\n",
    "130080": "\t/**\n\t * Returns the <CODE>Document</CODE> that this object represents.\n\t *\n\t * @return the <CODE>Document</CODE> that this object represents\n\t */\n",
    "130081": "    /**\n     * Removes the supplied <CODE>VisualObject</CODE> from this one, so that\n     * it will no longer be embedded. The object will no longer inherit the\n     * transformations of this object, and will no longer be rendered by this\n     * object.\n     * \n     * @param obj the <CODE>VisualObject</CODE> to remove from this one\n     */\n",
    "130083": "\t/**\n\t * Registers a new listener to receive notification of changes to the selection.\n\t * \n\t * @param listener \n\t */\n",
    "130088": "    /**\n     * Returns the depth layer of this <CODE>VisualObject</CODE>. Objects are\n     * rendered in order of layer depth. If an object is given a negative layer\n     * depth, then it is \"down inside\" its containing parent, and will be\n     * clipped to the <CODE>Shape</CODE> of the parent when rendered.\n     * \n     * @return the depth layer of this <CODE>VisualObject</CODE>\n     */\n",
    "130093": "    /**\n     * Sets the depth layer of this <CODE>VisualObject</CODE>. Objects are\n     * rendered in order of layer depth. If an object is given a negative layer\n     * depth, then it is \"down inside\" its containing parent, and will be\n     * clipped to the <CODE>Shape</CODE> of the parent when rendered.\n     * \n     * @param layer the new depth layer of this <CODE>VisualObject</CODE>\n     */\n",
    "130099": "    /**\n     * Returns a reference to the <CODE>VisualObject</CODE> in which this one\n     * is embedded, or null if this instance is not embedded.\n     * \n     * @return a reference to the <CODE>VisualObject</CODE> in which this one\n     *         is embedded, or null if this instance is not embedded\n     */\n",
    "130104": "    /**\n     * Returns a copy of the <CODE>AffineTransform</CODE> that is currently\n     * applied to this object and its embedded objects during renders.\n     * \n     * @return a copy of the <CODE>AffineTransform</CODE> that is currently\n     *         applied to this object and its embedded objects during renders\n     */\n",
    "130108": "    /**\n     * Sets the <CODE>AffineTransform</CODE> that will be applied to this\n     * object and its embedded objects during renders.\n     * \n     * @param transform the <CODE>AffineTransform</CODE> that will be applied\n     *        to this object and its embedded objects during renders\n     */\n",
    "130112": "    /**\n     * Returns the <CODE>AffineTransform</CODE> representing this object's\n     * position relative to the supplied parent <CODE>VisualObject</CODE>.\n     * The object must be embedded either in the supplied parent or in some\n     * other <CODE>VisualObject</CODE> that is ultimately embedded in the\n     * parent. Supplying \"null\" will return the object's transform relative to\n     * the top level parent, meaning it will typically be an absolute transform\n     * for the <CODE>VisualObject</CODE>.\n     * \n     * @param parent the <CODE>VisualObject</CODE> relative to which the\n     *        transform should be determined\n     * @return the <CODE>AffineTransform</CODE> representing this object's\n     *         position relative to the supplied parent <CODE>VisualObject</CODE>\n     */\n",
    "130115": "    /**\n     * Returns the point about which this object should rotate in the event that\n     * rotation should need to occur. This can be overridden to return any valid\n     * value desired, but left unchanged it will return the point at the center\n     * of the object's <CODE>Shape</CODE>'s bounding box.\n     * \n     * @return the point about which this object should rotate\n     */\n",
    "130118": "    /**\n     * Returns whether or not this object's <CODE>Shape</CODE> contains the\n     * provided absolute vector world point. This does <I>not</I> consider the\n     * bounds of any embedded or attached objects.\n     * \n     * @param point the <CODE>Point2D</CODE> to check for containment in this\n     *        object's <CODE>Shape</CODE>\n     * @return true if the point is contained, false otherwise\n     */\n",
    "130121": "    /**\n     * Returns the <CODE>VisualObject</CODE>, if any, that is currently being\n     * displayed at the provided absolute vector world point.\n     * \n     * @param point the point of interest\n     * @return the <CODE>VisualObject</CODE>, if any, that is currently being\n     *         displayed at the provided location, or null if there is no object\n     *         at that location\n     */\n",
    "130126": "    /**\n     * This method is called by the <CODE>VisualObjectManager</CODE>\n     * immediately prior to rendering. It gives the object an opportunity to do\n     * any special calculation or preparation that should be completed before\n     * the rendering stage can reliably execute. Notably, if a parent object\n     * never becomes available for rendering, then none of the <CODE>prepare</CODE>\n     * methods of its children will ever be called.\n     */\n",
    "130130": "    /**\n     * This method is called by the <CODE>VisualObjectManager</CODE> when this\n     * object and its embedded objects need to be rendered. If an implementation\n     * desires to prevent the rendering of child objects, this method can be\n     * overridden. Otherwise, it first calls the <CODE>renderObject</CODE>\n     * method on this object, then causes the <CODE>render</CODE> method on\n     * all embedded objects to be called. Finally, it calls the <CODE>renderOutline</CODE>\n     * method on this object.\n     * \n     * @param g the graphics context on which to render\n     */\n",
    "130135": "    /**\n     * Renders this object onto the supplied graphics context. Embedded objects\n     * will be rendered later, followed by the object's outline.\n     * \n     * @param g the graphics context on which to render\n     */\n",
    "130137": "    /**\n     * Abstract constructor for each AbstractPositionDevice.\n     * @param plc a reference to the PlayerClient object\n     */\n",
    "130140": "    /**\n     * Renders this object's outline onto the supplied graphics context.\n     * \n     * @param g the graphics context on which to render\n     */\n",
    "130141": "    /**\n     * Constructor for Position3DInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130142": "    /**\n     * Constructor for BlinkenlightInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130143": "    /**\n     * Set the blinkenlight state and period. \n     * @param ena zero: disabled, non-zero: enabled\n     * @param period flash period (one whole on-off cycle) in milliseconds\n     */\n",
    "130144": "    /**\n     * Constructor for MapInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130146": "    /**\n     * Configuration request: Get map information.\n     * <br><br>\n     * Retrieve the size and scale information of a current map. This request is used to \n     * get the size information before you request the actual map data. Set the subtype to \n     * PLAYER_MAP_GET_INFO_REQ; the server will reply with the size information filled in.\n     * <br><br>\n     * See the player_map_info structure from player.h\n     */\n",
    "130148": "    /**\n     * Configuration request: Get map data.\n     * <br><br>\n     * Retrieve the map data. Beacause of the limited size of a request-reply messages, the \n     * map data is tranfered in tiles. In the request packet, set the column and row index \n     * of a specific tile; the server will reply with the requested map data filled in.\n     * <br><br>\n     * See the player_map_data structure from player.h\n     * @param col the tile origin (X - pixels)\n     * @param row the tile origin (Y - pixels)\n     * @param width the width of the tile in the map (pixels)\n     * @param height the height of the tile in the map (pixels)\n     */\n",
    "130150": "    /** Send position commands.\n     * @param xP X position in mm\n     * @param yP Y position in mm\n     * @param zP Z position in mm\n     */\n",
    "130151": "    /**\n     * Handle negative acknowledgement response messages.\n     */\n",
    "130152": "    /**\n     * Constructor for PtzInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130153": "    /** Send position commands.\n     * @param xP X position in mm\n     * @param yP Y position in mm\n     * @param zP Z position in mm\n     * @param pitchP angular velocity (pitch) in mrad\n     * @param rollP angular velocity (roll) in mrad\n     * @param yawP angular velocity (yaw) in mrad\n     */\n",
    "130154": "    /**\n     * The ptz interface accepts commands that set change the state of the unit. Note that the \n     * commands are absolute, not relative.\n     * @param pan pan (degrees): -100..100\n     * @param tilt tilt (degrees): -25..25\n     * @param zoom field of view (degrees): 0..1023\n     * @param panspeed current pan velocity (deg/sec)\n     * @param tiltspeed current tilt velocity (deg/sec)\n     */\n",
    "130157": "    /**\n     * Configuration request: Generic request.\n     * This ioctl allows the client to send a unit-specific command to the unit. Whether data \n     * is returned depends on the command that was sent.\n     * @param length length of data in config buffer\n     * @param buf buffer for command/reply\n     */\n",
    "130158": "    /**\n     * Configuration request: Control mode.\n     * This ioctl allows the client to switch between position and velocity control, for those \n     * drivers that support it. Note that this request changes how the driver interprets \n     * forthcoming commands from all clients.\n     * @param mode mode to use: must be either PLAYER_PTZ_VELOCITY_CONTROL (0) or \n     * PLAYER_PTZ_POSITION_CONTROL (1)\n     */\n",
    "130159": "    /**\n     * Set speed and turnrate.\n     * @param xS X translational velocity in mm/sec\n     * @param yS Y translational velocity in mm/sec\n     */\n",
    "130161": "    /**\n     * Configuration request: Set AutoServo mode.\n     * Enable/Disable AutoServo mode on cameras such as the CMUcam2.\n     * @param mode 0=disabled, 1=enabled\n     */\n",
    "130162": "    /**\n     * Handle acknowledgement response messages (threaded mode).\n     * @param size size of the payload\n     */\n",
    "130164": "    /**\n     * Set speed and turnrate.\n     * @param xS X translational velocity in mm/sec\n     * @param yS Y translational velocity in mm/sec\n     * @param zS Z translational velocity in mm/sec\n     */\n",
    "130165": "    /**\n     * Constructor for LogInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130166": "    /**\n     * Configuration request: Set logging state.\n     * <br><br>\n     * Start/stop data logging.<br /><br />\n     * See the player_log_set_write_state structure from player.h\n     * @param state 0=disabled, 1=enabled \n     */\n",
    "130167": "    /**\n     * Configuration request: Set playback state.\n     * <br><br>\n     * Start/stop data playback.<br /><br />\n     * See the player_log_set_read_state structure from player.h\n     * @param state 0=disabled, 1=enabled \n     */\n",
    "130168": "    /**\n     * Set speed, turnrate and sideSpeed.\n     * @param xS X translational velocity in mm/sec\n     * @param yS Y translational velocity in mm/sec\n     * @param zS Z translational velocity in mm/sec\n     * @param pitchS angular velocity (pitch) in mrad/sec\n     * @param rollS angular velocity (roll) in mrad/sec\n     * @param yawS angular velocity (yaw) in mrad/sec\n     */\n",
    "130169": "    /**\n     * Configuration request: Rewind playback.\n     * <br><br>\n     * Rewind log playback to beginning of logfile; does not affect playback \n     * state (i.e., whether it is started or stopped).<br /><br />\n     * See the player_log_set_read_rewind structure from player.h\n     */\n",
    "130170": "    /**\n     * Configuration request: Get state.\n     * <br><br>\n     * Find out whether logging/playback is enabled or disabled.<br /><br />\n     * See the player_log_get_state structure from player.h\n     */\n",
    "130172": "    /**\n     * Configuration request: Set filename.\n     * <br><br>\n     * Set the name of the file to write to when logging.<br /><br />\n     * See the player_log_set_filename structure from player.h\n     * @param fileName the name of the file (max 255 chars + terminating NULL) \n     */\n",
    "130173": "    /**\n     * Configuration request: Query geometry.\n     *\n     */\n",
    "130177": "    /**\n     * Check if geometry data is available.\n     * @return true if ready, false if not ready \n     */\n",
    "130180": "    /**\n     * Check if state data is available.\n     * @return true if ready, false if not ready \n     */\n",
    "130181": "    /**\n     * Constructor for HeadingControl.\n     * @param pd a reference to a PlayerDevice interface (Position, Position2D\n     * or Position3D).\n     */\n",
    "130184": "    /**\n     * Constructor for HeadingControl.\n     * @param pd a reference to a PlayerDevice interface (Position, Position2D\n     * or Position3D).\n     * @param minC minimum admissible command for the robot's motors\n     * @param maxC maximum admissible command for the robot's motors\n     */\n",
    "130187": "    /**\n     * Configuration request: Motor power.\n     * <br><br>\n     * On some robots, the motor power can be turned on and off from software.\n     * <br><br>\n     * Be VERY careful with this command! You are very likely to start the robot \n     * running across the room at high speed with the battery charger still attached.\n     * @param state 0 for off, 1 for on \n     */\n",
    "130188": "    /**\n     * Set the minimum admissible command for the robot's motors.\n     * @param minC minimum admissible command as an integer\n     */\n",
    "130189": "    /**\n     * Set the maximum admissible command for the robot's motors.\n     * @param maxC maximum admissible command as an integer\n     */\n",
    "130190": "    /**\n     * Stop the robot from moving. \n     */\n",
    "130191": "    /**\n     * Configuration request: Change position control.\n     * <br><br>\n     * @param state 0 for velocity mode, 1 for position mode\n     */\n",
    "130192": "    /**\n     * Set the maximum allowed error between the final goal and \n     * the current position. (default error is 0)\n     * @param err maximum allowed error as an integer\n     */\n",
    "130193": "    /**\n     * Calculate and return the controller's command for the controlled system.\n     * @param currentOutput the current output of the system\n     * @return the new calculated command for the system\n     */\n",
    "130196": "    /**\n     * Bound the output command to the minimum and maximum admissible commands.\n     * @param command command to bound \n     * @return new bounded command\n     */\n",
    "130197": "    /**\n     * Configuration request: Change velocity control.\n     * <br><br>\n     * Some robots offer different velocity control modes. It can be changed by sending \n     * a request with the format given below, including the appropriate mode. No matter \n     * which mode is used, the external client interface to the position3d device \n     * remains the same.\n     * <br><br>\n     * @param value driver-specific\n     */\n",
    "130198": "    /**\n     * Angle transformations, used internally.\n     * @param angle angle to transform\n     * @return new transformed angle\n     */\n",
    "130200": "    /**\n     * Rotate the robot on spot (absolute heading) to the desired heading.\n     * @param angle goal angle\n     * @return false in case the rotation was interrupted, true otherwise\n     */\n",
    "130202": "    /**\n     * Constructor for PIController.\n     * @param Kp the proportional constant\n     * @param Ki the integral constant\n     */\n",
    "130204": "    /**\n     * Calculate and return the controller's command for the controlled system.\n     * @param currentOutput the current output of the system\n     * @return the new calculated command for the system\n     */\n",
    "130205": "    /**\n     * Get the current value of the proportional constant.\n     * @return Kp as a double\n     */\n",
    "130206": "    /**\n     * Set a new value for the proportional constant.\n     * @param newKp the new value for Kp\n     */\n",
    "130207": "    /**\n     * Get the current value of the integral constant.\n     * @return Ki as a double\n     */\n",
    "130208": "    /**\n     * Set a new value for the integral constant.\n     * @param newKi the new value for Ki\n     */\n",
    "130209": "    /**\n     * Set a new goal for the controller.\n     * @param newGoal the new goal for the controller\n     */\n",
    "130210": "    /**\n     * Get the difference between the current error and the last error.\n     * @return the difference between the current error and the last error\n     */\n",
    "130211": "    /**\n     * Configuration request: Reset odometry.\n     * <br><br>\n     * Resets the robot's odometry to (x,y,theta) = (0,0,0).\n     */\n",
    "130212": "    /**\n     * Constructor for PDController.\n     * @param Kp the proportional constant\n     * @param Kd the derivative constant\n     */\n",
    "130213": "    /**\n     * Calculate and return the controller's command for the controlled system.\n     * @param currentOutput the current output of the system\n     * @return the new calculated command for the system\n     */\n",
    "130216": "    /**\n     * Get the current value of the derivative constant.\n     * @return Kd as a double\n     */\n",
    "130218": "    /**\n     * Set a new value for the derivative constant.\n     * @param newKd the new value for Kd\n     */\n",
    "130219": "    /**\n     * Constructor for PIDController.\n     * @param Kp the proportional constant\n     * @param Ki the integral constant\n     * @param Kd the derivative constant\n     */\n",
    "130220": "    /**\n     * Configuration request: Set velocity PID parameters.\n     * @param kp P parameter\n     * @param ki I parameter\n     * @param kd D parameter\n     */\n",
    "130221": "    /**\n     * Calculate and return the controller's command for the controlled system.\n     * @param currentOutput the current output of the system\n     * @return the new calculated command for the system\n     */\n",
    "130231": "    /**\n      * Constructor for PositionControl.\n      * @param pd a reference to a PlayerDevice interface (Position, Position2D\n      * or Position3D).\n      */\n",
    "130233": "    /**\n     * Constructor for PositionControl.\n     * @param pd a reference to a PlayerDevice interface (Position, Position2D\n     * or Position3D).\n     * @param minC minimum admissible command for the robot's motors\n     * @param maxC maximum admissible command for the robot's motors\n     */\n",
    "130234": "    /**\n     * Configuration request: Set speed profile parameters.\n     * @param sp max speed (in mrad/s)\n     * @param acc max acceleration (in mrad/s/s)\n     */\n",
    "130240": "    /**\n     * Handle Negative Acknowledgement Response messages.\n     */\n",
    "130242": "    /**\n     * Get the current robot position as a Point (AWT).\n     * @return the current robot position\n     */\n",
    "130246": "    /**\n     * Handle Error Acknowledgement Response messages.\n     */\n",
    "130248": "    /**\n     * Constructor for PController.\n     * @param Kp the proportional constant\n     */\n",
    "130249": "    /**\n     * Constructor for AIOInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130250": "    /**\n     * Calculate and return the controller's command for the controlled system.\n     * @param currentOutput the current output of the system\n     * @return the new calculated command for the system\n     */\n",
    "130253": "    /**\n     * Constructor for TruthInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130254": "    /**\n     * Constructor for WiFiInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130255": "    /**\n     * Set the pose of the current entity.\n     * @param x X position in mm\n     * @param y Y position in mm\n     */\n",
    "130256": "    /**\n     * Set the pose of the current entity.\n     * @param x X position in mm\n     * @param y Y position in mm\n     * @param z Z position in mm\n     */\n",
    "130257": "    /**\n     * Constructor for EnergyInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130259": "    /**\n     * Configuration request: Controll recharging.\n     * <br><br>\n     * See the player_energy_command structure from player.h\n     * @param enable_input boolean controlling recharging. If FALSE, recharging is \n     * disabled. Defaults to TRUE \n     * @param enable_output boolean controlling whether others can recharge from this \n     * device. If FALSE, charging others is disabled. Defaults to TRUE.\n     */\n",
    "130260": "    /**\n     * Set the pose of the current entity.\n     * @param xp X position in mm\n     * @param yp Y position in mm\n     * @param zp Z position in mm\n     * @param ro R orientation in millirad\n     * @param po P orientation in millirad\n     * @param yo Y orientation in millirad\n     */\n",
    "130261": "    /**\n     * Constructor for SpeechInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130264": "    /**\n     * Constructor for SonarInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130265": "    /**\n     * Handle acknowledgement response messages (threaded mode).\n     * @param size size of the payload\n     */\n",
    "130266": "    /**\n     * Constructor for JoystickInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130267": "    /**\n     * Configuration request: Query geometry.\n     * <br><br>\n     * See the player_sonar_geom structure from player.h\n     */\n",
    "130268": "    /**\n     * Constructor for DIOInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130269": "    /**\n     * Configuration request: Sonar power. (\"available only on real robots\" (TM))\n     * <br><br>\n     * See the player_sonar_power_config structure from player.h\n     * @param value turn power off (0) or on (>0)\n     */\n",
    "130270": "    /**\n     * The dio interface accepts 4-byte commands which consist of the ouput bitfield.\n     * @param count the command\n     * @param digout the output bitfield\n     */\n",
    "130273": "    /**\n     * Constructor for BlobfinderInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130274": "    /**\n     * Check if geometry data is available.\n     * @return true if ready, false if not ready \n     */\n",
    "130279": "    /**\n     * Constructor for PowerInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130280": "    /**\n     * Request a battery voltage charge value from the Player server.\n     */\n",
    "130281": "    /**\n     * Handle acknowledgement response messages (threaded mode).\n     * @param size size of the payload\n     */\n",
    "130283": "    /**\n     * Constructor for SoundInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130284": "    /**\n     * Constructor for AudioDSPInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130285": "    /**\n     * Send a play command to the Sound device. \n     * @param index index of sound to be played\n     */\n",
    "130287": "    /**\n     * Configuration request : Get audio properties.\n     * <br><br>\n     * The audiodsp configuration can be queried using the PLAYER_AUDIODSP_GET_CONFIG \n     * request and modified using the PLAYER_AUDIODSP_SET_CONFIG request.<br /><br />\n     * The sample format is defined in sys/soundcard.h, and defines the byte size and \n     * endian format for each sample.<br /><br />\n     * The sample rate defines the Hertz at which to sample.<br /><br />\n     * Mono or stereo sampling is defined in the channels parameter where 1==mono and \n     * 2==stereo.<br /><br />\n     * See the player_audiodsp_config structure from player.h\n     */\n",
    "130288": "    /**\n     * Configuration request : Set audio properties.\n     * <br><br>\n     * The audiodsp configuration can be queried using the PLAYER_AUDIODSP_GET_CONFIG \n     * request and modified using the PLAYER_AUDIODSP_SET_CONFIG request.<br /><br />\n     * The sample format is defined in sys/soundcard.h, and defines the byte size and \n     * endian format for each sample.<br /><br />\n     * The sample rate defines the Hertz at which to sample.<br /><br />\n     * Mono or stereo sampling is defined in the channels parameter where 1==mono and \n     * 2==stereo.<br /><br />\n     * See the player_audiodsp_config structure from player.h\n     * @param sampleFormat Format with which to sample\n     * @param sampleRate Sample rate in Hertz\n     * @param channels Number of channels to use. 1=mono, 2=stereo\n     */\n",
    "130292": "    /**\n     * Constructor for FiducialInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130293": "    /**\n     * Configuration request: Get geometry.\n     * <br><br>\n     * See the player_fiducial_geom structure from player.h\n     */\n",
    "130297": "    /**\n     * Check if geometry data is available.\n     * @return true if ready, false if not ready \n     */\n",
    "130298": "    /**\n     * The PlayerClient \"destructor\". Once called, it will close all the open streams/sockets \n     * with the Player server.\n     */\n",
    "130300": "    /**\n     * Configuration request: Get sensor field of view.\n     * <br><br>\n     * The field of view of the fiducial device can be set using the \n     * PLAYER_FIDUCIAL_SET_FOV request, and queried using the \n     * PLAYER_FIDUCIAL_GET_FOV request. The device replies to a SET request \n     * with the actual FOV achieved. In both cases the request and reply \n     * packets have the same format.\n     * <br><br>\n     * See the player_fiducial_fov structure from player.h\n     */\n",
    "130301": "    /**\n     * Check if FOV data is available.\n     * @return true if ready, false if not ready \n     */\n",
    "130302": "    /**\n     * Change the mode Javaclient runs to non-threaded.\n     */\n",
    "130304": "    /**\n     * Configuration request: Set sensor field of view.\n     * <br><br>\n     * The field of view of the fiducial device can be set using the \n     * PLAYER_FIDUCIAL_SET_FOV request, and queried using the \n     * PLAYER_FIDUCIAL_GET_FOV request. The device replies to a SET request \n     * with the actual FOV achieved. In both cases the request and reply \n     * packets have the same format.\n     * <br><br>\n     * See the player_fiducial_fov structure from player.h\n     */\n",
    "130306": "    /**\n     * Configuration request: Get fiducial value.\n     * <br><br>\n     * Some fiducial finder devices display their own fiducial. They can use the \n     * PLAYER_FIDUCIAL_GET_ID config to report the identifier displayed by the \n     * fiducial. Make the request using the player_fiducial_id_t structure. The \n     * device replies with the same structure with the id field set. \n     * <br><br>\n     * Some devices can dynamically change the identifier they display. They can \n     * use the PLAYER_FIDUCIAL_SET_ID config to allow a client to set the currently \n     * displayed value. Make the request with the player_fiducial_id_t structure. \n     * The device replies with the same structure with the id field set to the value \n     * it actually used. You should check this value, as the device may not be able \n     * to display the value you requested.\n     * <br><br>\n     * Currently supported by the stg_fiducial driver.\n     * <br><br>\n     * See the player_fiducial_id structure from player.h\n     */\n",
    "130308": "    /**\n     * Check if fiducial value data is available.\n     * @return true if ready, false if not ready \n     */\n",
    "130309": "    /**\n     * Start a threaded copy of Javaclient.\n     * @param millis number of miliseconds to sleep between calls \n     * @param nanos number of nanoseconds to sleep between calls\n     */\n",
    "130310": "    /**\n     * Configuration request: Get fiducial value.\n     * <br><br>\n     * Some fiducial finder devices display their own fiducial. They can use the \n     * PLAYER_FIDUCIAL_GET_ID config to report the identifier displayed by the \n     * fiducial. Make the request using the player_fiducial_id_t structure. The \n     * device replies with the same structure with the id field set. \n     * <br><br>\n     * Some devices can dynamically change the identifier they display. They can \n     * use the PLAYER_FIDUCIAL_SET_ID config to allow a client to set the currently \n     * displayed value. Make the request with the player_fiducial_id_t structure. \n     * The device replies with the same structure with the id field set to the value \n     * it actually used. You should check this value, as the device may not be able \n     * to display the value you requested.\n     * <br><br>\n     * Currently supported by the stg_fiducial driver.\n     * <br><br>\n     * See the player_fiducial_id structure from player.h\n     */\n",
    "130312": "    /**\n     * Get the number of fiducials.\n     * @return the number of fiducials as an integer.\n     */\n",
    "130313": "    /**\n     * Constructor for MotorInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130314": "    /**\n     * Start the Javaclient thread. Ran automatically from runThreaded ().\n     */\n",
    "130320": "    /**\n     * Configuration request: Change velocity control mode.\n     * <br><br>\n     * Some motors offer different velocity control modes. It can be changed by sending \n     * a request with the format given below, including the appropriate mode. No matter \n     * which mode is used, the external client interface to the motor device remains \n     * the same. \n     * @param mode driver-specific\n     */\n",
    "130321": "    /**\n     * Configuration request: Reset odometry.\n     * <br><br>\n     * Resets the motor's odometry to theta = 0.\n     */\n",
    "130322": "    /**\n     * Configuration request: Set odometry.\n     * @param theta theta in mrad \n     */\n",
    "130323": "    /**\n     * Request a Power device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Power device if successful, null otherwise\n     */\n",
    "130324": "    /**\n     * Configuration request: Set velocity PID parameters.\n     * @param kp P parameter\n     * @param ki I parameter\n     * @param kd D parameter\n     */\n",
    "130327": "    /**\n     * Configuration request: Set speed profile parameters.<br /><br />\n     * This is usefull in position control mode when you want to ramp your \n     * acceleration and deacceleration.\n     * @param sp max speed \n     * @param acc max acceleration \n     */\n",
    "130328": "    /**\n     * Configuration request: Motor power.\n     * <br><br>\n     * On some robots, the motor power can be turned on and off from software.\n     * <br><br>\n     * Be VERY careful with this command! You are very likely to start the robot \n     * running across the room at high speed with the battery charger still attached.\n     * @param state 0 for off, 1 for on \n     */\n",
    "130329": "    /**\n     * Request a Gripper device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Gripper device if successful, null otherwise\n     */\n",
    "130330": "    /**\n     * Handle Negative Acknowledgement Response messages.\n     */\n",
    "130333": "    /**\n     * Handle Error Acknowledgement Response messages.\n     */\n",
    "130334": "    /**\n     * Constructor for NomadInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130335": "    /**\n     * The Nomad command packet lets you set independent velocities for translation, \n     * steering and turret rotation. These are specified in native Nomad units.<br /><br />\n     * Todo:<br />\n     * This should change in future to match normal Player style (mm/sec), once someone \n     * figures out exactly what the Nomad units are.\n     * @param newveltrans translation velocity (in native Nomad units)\n     * @param newvelsteer steering velocity (in native Nomad units)\n     * @param newvelturret turret rotation velocity (in native Nomad units)\n     */\n",
    "130336": "    /**\n     * Constructor for AudioMixerInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130338": "    /**\n     * The audiomixer interface accepts commands to set the left and right volume \n     * levels of various channels. The channel may be PLAYER_AUDIOMIXER_MASTER for \n     * the master volume, PLAYER_AUDIOMIXER_PCM for the PCM volume, \n     * PLAYER_AUDIOMIXER_LINE for the line in volume, PLAYER_AUDIOMIXER_MIC for the \n     * microphone volume, PLAYER_AUDIOMIXER_IGAIN for the input gain, and \n     * PLAYER_AUDIOMIXER_OGAIN for the output gain.<br /><br />\n     * See the player_audiomixer_cmd structure from player.h\n     * @param subtype one of the types above\n     * @param left value for the left channel\n     * @param right value for the right channel\n     */\n",
    "130339": "    /**\n     * Configuration request: Get levels.\n     * <br><br>\n     * The audiomixer interface provides accepts a configuration request which \n     * returns the current state of the mixer levels<br /><br />\n     * See the player_audiomixer_config structure from player.h\n     */\n",
    "130340": "    /**\n     * Request a Position device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Position device if successful, null otherwise\n     */\n",
    "130342": "    /**\n     * Abstract constructor for each PlayerDevice.\n     * @param plc a reference to the PlayerClient object\n     */\n",
    "130344": "    /**\n     * Abstract handleNARMessage method.\n     */\n",
    "130346": "    /**\n     * Abstract handleEARMessage method.\n     */\n",
    "130347": "    /**\n     * Abstract handleResponse method (threaded mode). \n     * @param size size of the payload\n     */\n",
    "130348": "    /**\n     * Constructor for BumperInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130349": "    /**\n     * Configuration request: Query geometry.\n     *<br><br>\n     * See the player_bumper_geom structure from player.h\n     */\n",
    "130351": "    /**\n     * Request a Sonar device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Sonar device if successful, null otherwise\n     */\n",
    "130353": "    /**\n     * Check if geometry data is available.\n     * @return true if ready, false if not ready \n     */\n",
    "130356": "    /**\n     * Constructor for Position2DInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130358": "    /**\n     * Request a Laser device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Laser device if successful, null otherwise\n     */\n",
    "130360": "    /** Send position commands.\n     * @param xP X position in mm\n     * @param yP Y position in mm\n     * @param yawT Yaw in mrad \n     */\n",
    "130361": "    /**\n     * Set speed and turnrate.\n     * @param speed X translational velocity in mm/sec\n     * @param turnrate angular velocity in mrad/sec\n     */\n",
    "130364": "    /**\n     * Set speed, turnrate and sideSpeed.\n     * @param speed X translational velocity in mm/sec\n     * @param turnrate angular velocity in mrad/sec\n     * @param sideSpeed Y translational velocity in mm/sec\n     */\n",
    "130365": "    /**\n     * Request a Blobfinder device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Blobfinder device if successful, null otherwise\n     */\n",
    "130366": "    /**\n     * Configuration request: Query geometry.\n     *\n     */\n",
    "130370": "    /**\n     * Request a Ptz device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Ptz device if successful, null otherwise\n     */\n",
    "130371": "    /**\n     * Configuration request: Motor power.\n     * <br><br>\n     * On some robots, the motor power can be turned on and off from software.\n     * <br><br>\n     * Be VERY careful with this command! You are very likely to start the robot \n     * running across the room at high speed with the battery charger still attached.\n     * @param state 0 for off, 1 for on \n     */\n",
    "130374": "    /**\n     * Configuration request: Change velocity control.\n     * <br><br>\n     * Some robots offer different velocity control modes.\n     * <br><br>\n     * The p2os driver offers two modes of velocity control: separate translational and rotational \n     * control and direct wheel control. When in the separate mode, the robot's microcontroller \n     * internally computes left and right wheel velocities based on the currently commanded \n     * translational and rotational velocities and then attenuates these values to match a nice \n     * predefined acceleration profile. When in the direct mode, the microcontroller simply passes \n     * on the current left and right wheel velocities. Essentially, the separate mode offers \n     * smoother but slower (lower acceleration) control, and the direct mode offers faster but \n     * jerkier (higher acceleration) control. Player's default is to use the direct mode. Set mode \n     * to zero for direct control and non-zero for separate control.\n     * <br><br>\n     * For the reb driver, 0 is direct velocity control, 1 is for velocity-based heading PD \n     * controller. \n     * @param mode driver-specific mode\n     */\n",
    "130375": "    /**\n     * Request an Audio device. \n     * @param index the device index\n     * @param r access mode\n     * @return an Audio device if successful, null otherwise\n     */\n",
    "130376": "    /**\n     * Configuration request: Reset odometry.\n     * <br><br>\n     * Resets the robot's odometry to (x,y,theta) = (0,0,0).\n     */\n",
    "130379": "    /**\n     * Request a Fiducial device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Fiducial device if successful, null otherwise\n     */\n",
    "130380": "    /**\n     * Configuration request: Set odometry.\n     * @param xT X in mm \n     * @param yT Y in mm\n     * @param theta Heading in mrad \n     */\n",
    "130382": "    /**\n     * Configuration request: Set velocity PID parameters.\n     * @param kp P parameter\n     * @param ki I parameter\n     * @param kd D parameter\n     */\n",
    "130385": "    /**\n     * Request a Speech device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Speech device if successful, null otherwise\n     */\n",
    "130387": "    /**\n     * Configuration request: Set speed profile parameters.\n     * @param sp max speed \n     * @param acc max acceleration \n     */\n",
    "130388": "    /**\n     * Handle Negative Acknowledgement Response messages.\n     */\n",
    "130390": "    /**\n     * Request a GPS device. \n     * @param index the device index\n     * @param r access mode\n     * @return a GPS device if successful, null otherwise\n     */\n",
    "130394": "    /**\n     * Constructor for LaserInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130395": "    /**\n     * Request a Bumper device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Bumper device if successful, null otherwise\n     */\n",
    "130396": "    /**\n     * Configuration request: Get geometry.\n     * <br><br>\n     * See the player_laser_geom structure from player.h\n     */\n",
    "130397": "    /**\n     * Configuration request: Set scan properties.\n     * @param minA start angle for the laser scan\n     * @param maxA end angle for the laser scan\n     * @param res scan resolution\n     * @param range range resolution\n     * @param intent enable reflection intensity data\n     */\n",
    "130400": "    /**\n     * Configuration request: Turn power on/off.\n     * @param value 0 to turn laser off, 1 to turn laser on \n     */\n",
    "130402": "    /**\n     * Request a Truth device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Truth device if successful, null otherwise\n     */\n",
    "130407": "    /**\n     * Check if the geometry data is available.\n     * @return true if ready, false if not ready\n     * @see #getPlayerLaserGeom()\n     */\n",
    "130408": "    /**\n     * Request a DIO device. \n     * @param index the device index\n     * @param r access mode\n     * @return a DIO device if successful, null otherwise\n     */\n",
    "130410": "    /**\n     * Check if the configuration data is available.\n     * @return true if ready, false if not ready\n     * @see #getPlayerLaserConfig()\n     */\n",
    "130411": "    /**\n     * Constructor for CameraInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130413": "    /**\n     * Handle acknowledgement response messages (threaded mode).\n     * @param size size of the payload\n     */\n",
    "130414": "    /**\n     * Constructor for GripperInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130416": "    /**\n     * Constructor for PlannerInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130418": "    /**\n     * Sends a new goal to the planner interface.\n     * @param newgx goal location (X - mm)\n     * @param newgy goal location (Y - mm)\n     * @param newga goal location (A - deg)\n     */\n",
    "130419": "    /**\n     * Request an AIO device. \n     * @param index the device index\n     * @param r access mode\n     * @return an AIO device if successful, null otherwise\n     */\n",
    "130420": "    /**\n     * Configuration request: Get waypoints.\n     * <br><br>\n     * See the player_planner_waypoints_req structure from player.h\n     */\n",
    "130422": "    /**\n     * Configuration request: Enable/disable robot motion.\n     * <br><br>\n     * See the player_planner_enable_req structure from player.h\n     * @param state 1 to enable, 0 to disable\n     */\n",
    "130427": "    /**\n     * Request an IR device. \n     * @param index the device index\n     * @param r access mode\n     * @return an IR device if successful, null otherwise\n     */\n",
    "130433": "    /**\n     * Constructor for WaveformInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130435": "    /**\n     * Constructor for GPSInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130436": "    /**\n     * Constructor for AudioInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130438": "    /**\n     * Request a WiFi device. \n     * @param index the device index\n     * @param r access mode\n     * @return a WiFi device if successful, null otherwise\n     */\n",
    "130439": "    /**\n     * The audio interface accepts commands to produce fixed-frequency tones through \n     * /dev/dsp (which is assumed to be associated with a sound card to which a speaker is \n     * attached).\n     * @param freq frequency to play (Hz?) \n     * @param amp amplitude to play (dB?)\n     * @param duration duration to play (sec?)\n     */\n",
    "130440": "    /**\n     * Constructor for IRInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130441": "    /**\n     * Configuration request: Query pose.\n     * <br><br>\n     * See the player_ir_pose structure from player.h\n     */\n",
    "130442": "    /**\n     * Configuration request: IR power.\n     * @param value 0 for power off, 1 for power on\n     */\n",
    "130444": "    /**\n     * Check if geometry data is available.\n     * @return true if ready, false if not ready \n     */\n",
    "130447": "    /**\n     * Request a Waveform device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Waveform device if successful, null otherwise\n     */\n",
    "130448": "    /**\n     * Constructor for PositionInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130453": "    /** Send the heading of the robot.\n     * @param yawT Yaw in degrees \n     */\n",
    "130454": "    /**\n     * Request a Localize device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Localize device if successful, null otherwise\n     */\n",
    "130455": "    /**\n     * Set speed and turnrate.\n     * @param speed X translational velocity in mm/sec\n     * @param turnrate angular velocity in degrees/sec\n     */\n",
    "130456": "    /**\n     * Set speed, turnrate and sideSpeed.\n     * @param speed X translational velocity in mm/sec\n     * @param turnrate angular velocity in degrees/sec\n     * @param sideSpeed Y translational velocity in mm/sec\n     */\n",
    "130457": "    /**\n     * Configuration request: Query geometry.\n     *\n     */\n",
    "130461": "    /**\n     * Configuration request: Motor power.\n     * <br><br>\n     * On some robots, the motor power can be turned on and off from software.\n     * <br><br>\n     * Be VERY careful with this command! You are very likely to start the robot \n     * running across the room at high speed with the battery charger still attached.\n     * @param state 0 for off, 1 for on \n     */\n",
    "130462": "    /**\n     * Request a MComm device. \n     * @param index the device index\n     * @param r access mode\n     * @return a MComm device if successful, null otherwise\n     */\n",
    "130463": "    /**\n     * Configuration request: Change velocity control.\n     * <br><br>\n     * Some robots offer different velocity control modes.\n     * <br><br>\n     * The p2os driver offers two modes of velocity control: separate translational and rotational \n     * control and direct wheel control. When in the separate mode, the robot's microcontroller \n     * internally computes left and right wheel velocities based on the currently commanded \n     * translational and rotational velocities and then attenuates these values to match a nice \n     * predefined acceleration profile. When in the direct mode, the microcontroller simply passes \n     * on the current left and right wheel velocities. Essentially, the separate mode offers \n     * smoother but slower (lower acceleration) control, and the direct mode offers faster but \n     * jerkier (higher acceleration) control. Player's default is to use the direct mode. Set mode \n     * to zero for direct control and non-zero for separate control.\n     * <br><br>\n     * For the reb driver, 0 is direct velocity control, 1 is for velocity-based heading PD \n     * controller. \n     * @param mode driver-specific mode\n     */\n",
    "130464": "    /**\n     * Configuration request: Reset odometry.\n     * <br><br>\n     * Resets the robot's odometry to (x,y,theta) = (0,0,0).\n     */\n",
    "130468": "    /**\n     * Configuration request: Set odometry.\n     * @param xT X in mm \n     * @param yT Y in m\n     * @param theta Heading in degrees \n     */\n",
    "130469": "    /**\n     * Request a Sound device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Sound device if successful, null otherwise\n     */\n",
    "130473": "    /**\n     * Configuration request: Set speed profile parameters.\n     * @param sp max speed \n     * @param acc max acceleration \n     */\n",
    "130474": "    /**\n     * Configuration request: Segway RMP-specific configuration.\n     * <br><br>\n     * These are possible Segway RMP config commands; see the status command in the RMP manual:\n     * <ul>\n     * \t\t\t<li>PLAYER_POSITION_RMP_VELOCITY_SCALE  = 51  \n     * \t\t\t<li>PLAYER_POSITION_RMP_ACCEL_SCALE     = 52\n     * \t\t\t<li>PLAYER_POSITION_RMP_TURN_SCALE      = 53\n     * \t\t\t<li>PLAYER_POSITION_RMP_GAIN_SCHEDULE   = 54\n     * \t\t\t<li>PLAYER_POSITION_RMP_CURRENT_LIMIT   = 55\n     * \t\t\t<li>PLAYER_POSITION_RMP_RST_INTEGRATORS = 56\n     * \t\t\t<li>PLAYER_POSITION_RMP_SHUTDOWN        = 57\n     *          <li>PLAYER_POSITION_RMP_RST_INT_RIGHT   = 1\n     *          <li>PLAYER_POSITION_RMP_RST_INT_LEFT    = 2\n     *          <li>PLAYER_POSITION_RMP_RST_INT_YAW     = 3\n     *          <li>PLAYER_POSITION_RMP_RST_INT_FOREAFT = 4\n     * </ul>\n     * @param subtype must be of PLAYER_POSITION_RMP_*\n     * @param value holds various values depending on the type of config. See the \"Status\" \n     * command in the Segway manual.\n     */\n",
    "130476": "    /**\n     * Request an AudioDSP device. \n     * @param index the device index\n     * @param r access mode\n     * @return an AudioDSP device if successful, null otherwise\n     */\n",
    "130479": "    /**\n     * Handle Negative Acknowledgement Response messages.\n     */\n",
    "130480": "    /**\n     * Handle Error Acknowledgement Response messages.\n     */\n",
    "130481": "    /**\n     * Request an AudioMixer device. \n     * @param index the device index\n     * @param r access mode\n     * @return an AudioMixer device if successful, null otherwise\n     */\n",
    "130482": "    /**\n     * Constructor for MComInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130486": "    /**\n     * Configuration request: Push (PLAYER_MCOM_PUSH_REQ)\n     */\n",
    "130488": "    /**\n     * Configuration request: Read (PLAYER_MCOM_READ_REQ)\n     */\n",
    "130490": "    /**\n     * Request a Position3D device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Position3D device if successful, null otherwise\n     */\n",
    "130491": "    /**\n     * Configuration request: Set capacity (PLAYER_MCOM_SET_CAPACITY_REQ)\n     */\n",
    "130492": "    /**\n     * Check if data is available.\n     * @return true if ready, false if not ready \n     */\n",
    "130495": "    /**\n     * Constructor for LocalizeInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130497": "    /**\n     * Constructor for SpeechRecognitionInterface.\n     * @param pc a reference to the PlayerClient object\n     * @param indexOfDevice the index of the device\n     */\n",
    "130498": "    /**\n     * Returns the number of hypotheses.\n     */\n",
    "130499": "    /**\n     * Returns the value of this <code>XdrChar</code> object as a char\n     * primitive.\n     *\n     * @return  The primitive <code>char</code> value of this object.\n     */\n",
    "130502": "    /**\n     * Configuration request: Set the robot pose estimate.\n     * @param mean the mean value of the pose estimate (mm, mm, arc-seconds)\n     * @param cov the covariance matrix pose estimate (mm$^2$, arc-seconds$^2$)\n     */\n",
    "130503": "    /**\n     * Request a Simulation device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Simulation device if successful, null otherwise\n     */\n",
    "130507": "    /**\n     * Configuration request: Set configuration.\n     * @param numParticles maximum number of particles (for drivers using particle filters)\n     */\n",
    "130511": "    /**\n     * Check if configuration data is available.\n     * @return true if ready, false if not ready \n     */\n",
    "130512": "    /**\n     * Returns the error reason of this ONC/RPC exception object.\n     *\n     * @return  The error reason of this <code>OncRpcException</code> object if\n     *   it was #OncRpcException(int) created with an error reason; or\n     *   <code>RPC_FAILED</code> if it was #OncRpcException() created\n     *   with no error reason.\n     */\n",
    "130514": "    /**\n     * Returns the value of this <code>XdrLong</code> object as a long\n     * primitive.\n     *\n     * @return  The primitive <code>long</code> value of this object.\n     */\n",
    "130516": "    /**\n     * Returns the amount of encoded data in the buffer.\n     *\n     * @return length of data encoded in buffer.\n     */\n",
    "130518": "    /**\n     * Request a Blinkenlight device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Blinkenlight device if successful, null otherwise\n     */\n",
    "130520": "    /**\n     * Returns the value of this <code>XdrInt</code> object as a int\n     * primitive.\n     *\n     * @return  The primitive <code>int</code> value of this object.\n     */\n",
    "130524": "    /**\n     * Returns the value of this <code>XdrByte</code> object as a byte\n     * primitive.\n     *\n     * @return  The primitive <code>byte</code> value of this object.\n     */\n",
    "130533": "    /**\n     * Returns the value of this <code>XdrShort</code> object as a short\n     * primitive.\n     *\n     * @return  The primitive <code>short</code> value of this object.\n     */\n",
    "130535": "    /**\n     * Sets the buffer containing encoded XDR data as well as the length of\n     * the encoded data.\n     *\n     * @param buffer Buffer containing encoded XDR data.\n     * @param encodedLength Length of encoded XDR data within the buffer.\n     *\n     * @throws IllegalArgumentException if <code>encodedLength</code> is not\n     *   a multiple of four.\n     */\n",
    "130538": "    /**\n     * Returns the Internet address of the sender of the current XDR data.\n     * This method should only be called after {@link #beginDecoding},\n     * otherwise it might return stale information.\n     *\n     * @return InetAddress of the sender of the current XDR data.\n     */\n",
    "130539": "    /**\n     * Request a Nomad device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Nomad device if successful, null otherwise\n     */\n",
    "130541": "    /**\n     * Returns the value of this <code>XdrFloat</code> object as a float\n     * primitive.\n     *\n     * @return  The primitive <code>float</code> value of this object.\n     */\n",
    "130542": "    /**\n     * Returns the port number of the sender of the current XDR data.\n     * This method should only be called after {@link #beginDecoding},\n     * otherwise it might return stale information.\n     *\n     * @return Port number of the sender of the current XDR data.\n     */\n",
    "130546": "    /**\n     * Returns the value of this <code>XdrDouble</code> object as a double\n     * primitive.\n     *\n     * @return  The primitive <code>double</code> value of this object.\n     */\n",
    "130550": "    /**\n     * Returns the value of this <code>XdrBoolean</code> object as a boolean\n     * primitive.\n     *\n     * @return  The primitive <code>boolean</code> value of this object.\n     */\n",
    "130555": "    /**\n     * Request a Camera device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Camera device if successful, null otherwise\n     */\n",
    "130565": "    /**\n     * Request a Map device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Map device if successful, null otherwise\n     */\n",
    "130566": "    /**\n     * Set the character encoding for serializing strings.\n     *\n     * @param characterEncoding the encoding to use for serializing strings.\n     *   If <code>null</code>, the system's default encoding is to be used.\n     */\n",
    "130568": "    /**\n     * Get the character encoding for serializing strings.\n     *\n     * @return the encoding currently used for serializing strings.\n     *   If <code>null</code>, then the system's default encoding is used.\n     */\n",
    "130570": "    /**\n     * Returns the value of this <code>XdrString</code> object as a string\n     * primitive.\n     *\n     * @return  The primitive <code>String</code> value of this object.\n     */\n",
    "130574": "    /**\n     * Request a Planner device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Planner device if successful, null otherwise\n     */\n",
    "130578": "    /**\n     * Constructor for PointCloud3DInterface.\n     * @param pc  a reference to the PlayerClient object\n     */\n",
    "130579": "    /**\n     * Get the state data.\n     *\n     * @return an object of type PlayerPointCloud3DData containing the required\n     *         state data\n     */\n",
    "130580": "    /**\n     * Check if data is available.\n     *\n     * @return true if ready, false if not ready\n     */\n",
    "130584": "    /**\n     * Check if data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130586": "    /**\n     * Request a Log device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Log device if successful, null otherwise\n     */\n",
    "130590": "    /**\n     * Command: position (PLAYER_POSITION3D_CMD_SET_POS).\n     * <br><br>\n     * It accepts new positions and/or velocities for the robot's motors\n     * (drivers may support position control, speed control or both).\n     * <br><br>\n     * See the player_position3d_cmd_pos structure from player.h.\n     * @param pp3dcp A PlayerPosition3dCmdPos structure holding the required data.\n     */\n",
    "130596": "    /**\n     * Request a Energy device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Energy device if successful, null otherwise\n     */\n",
    "130597": "    /**\n     * Data and Request/reply: Get map information.\n     * <br><br>\n     * To retrieve the size and scale information of a map, send a null\n     * PLAYER_MAP_REQ_GET_INFO request. This message can also be sent as data,\n     * with the subtype PLAYER_MAP_DATA_INFO, depending on the underlying\n     * driver.\n     * <br><br>\n     * See the player_map_info structure from player.h\n     */\n",
    "130598": "    /**\n     * Command: velocity (PLAYER_POSITION3D_CMD_SET_VEL).\n     * <br><br>\n     * It accepts new velocities for the robot's motors (drivers may support speed\n     * control).\n     * <br><br>\n     * See the player_position3d_cmd_vel structure from player.h.\n     * @param pp3dcv A PlayerPosition3dCmdVel structure holding the required data.\n     */\n",
    "130600": "    /**\n     * Request/reply: Query geometry.\n     * <br><br>\n     * To request robot geometry, send a null PLAYER_POSITION3D_GET_GEOM\n     * request.\n     */\n",
    "130601": "    /**\n     * Request/reply: Get vector map.\n     * <br><br>\n     * A vector map is represented as line segments. To retrieve the vector\n     * map, send a null PLAYER_MAP_REQ_GET_VECTOR request.\n     * <br><br>\n     * See the player_map_data_vector structure from player.h\n     */\n",
    "130605": "    /**\n     * Request a Motor device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Motor device if successful, null otherwise\n     */\n",
    "130607": "    /**\n     * Check if data is available. (map information)\n     * @return true if ready, false if not ready\n     */\n",
    "130611": "    /**\n     * Check if grid map tile data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130613": "    /**\n     * Request a Position2D device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Position2D device if successful, null otherwise\n     */\n",
    "130615": "    /**\n     * Configuration request: Reset odometry.\n     * <br><br>\n     * To reset the robot's odometry to (x,y,theta) = (0,0,0), send a\n     * PLAYER_POSITION3D_RESET_ODOM request. Null response.\n     */\n",
    "130616": "    /**\n     * Check if map data vector is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130619": "    /**\n     * Check if data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130621": "    /**\n     * Handle acknowledgement response messages\n     * @param header Player header\n     */\n",
    "130623": "    /**\n     * Request a Joystick device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Joystick device if successful, null otherwise\n     */\n",
    "130630": "    /**\n     * Check if data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130631": "    /**\n     * Request a Speech Recognition device. \n     * @param index the device index\n     * @param r access mode\n     * @return a Speech Recognition device if successful, null otherwise\n     */\n",
    "130632": "    /**\n     * Check if geometry data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130635": "    /**\n     * Request/reply: Query geometry.\n     */\n",
    "130639": "    /**\n     * Request/reply: Control mode.\n     * To switch between position position and velocity control (for those\n     * drivers that support it), send a PLAYER_PTZ_REQ_CONTROL_MODE request.\n     * Note that this request changes how the driver interprets forthcoming\n     * commands from all clients.\n     * @param mode mode to use: must be either PLAYER_PTZ_VELOCITY_CONTROL (0) or\n     * PLAYER_PTZ_POSITION_CONTROL (1)\n     */\n",
    "130646": "    /**\n     * Check if data is available.\n     * @return True if ready, false if not ready.\n     */\n",
    "130649": "    /**\n     * Request/reply: Rewind playback.\n     * <br><br>\n     * TO rewind log playback to beginning of logfile, send a\n     * PLAYER_LOG_REQ_SET_READ_REWIND request. Does not affect playback state\n     * (i.e., whether it is started or stopped). Null response.\n     * <br><br>\n     */\n",
    "130650": "    /**\n     * Configuration request: Get the list of available devices.\n     * <br><br>\n     * It's useful for applications such as viewer programs and test suites that tailor behave \n     * differently depending on which devices are available.\n     */\n",
    "130651": "    /**\n     * Check if geometry data is available.\n     * @return True if ready, false if not ready.\n     */\n",
    "130652": "    /**\n     * Request/reply: Get state.\n     * <br><br>\n     * To find out whether logging/playback is enabled or disabled, send a\n     * null PLAYER_LOG_REQ_GET_STATE request.\n     * <br><br>\n     * See the player_log_get_state structure from player.h\n     */\n",
    "130658": "    /**\n     * Check if data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130661": "    /**\n     * Configuration request: Get the driver name for a particular device.\n     * @param device the device identifier\n     */\n",
    "130666": "    /**\n     * Set the minimum admissible command for the robot's motors.\n     * @param minC minimum admissible command as an integer\n     */\n",
    "130667": "    /**\n     * Set the maximum admissible command for the robot's motors.\n     * @param maxC maximum admissible command as an integer\n     */\n",
    "130670": "    /**\n     * Set the maximum allowed error between the final goal and\n     * the current position. (default error is 0)\n     * @param err maximum allowed error as an integer\n     */\n",
    "130674": "    /**\n     * Bound the output command to the minimum and maximum admissible commands.\n     * @param command command to bound\n     * @return new bounded command\n     */\n",
    "130676": "    /**\n     * Angle transformations, used internally.\n     * @param angle angle to transform\n     * @return new transformed angle\n     */\n",
    "130678": "    /**\n     * Rotate the robot on spot (absolute heading) to the desired heading.\n     * @param angle goal angle\n     * @return false in case the rotation was interrupted, true otherwise\n     */\n",
    "130715": "    /**\n     * Check if data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130720": "    /**\n     * Configuration request: Get data.\n     * <br><br>\n     * When the server is in a PLAYER_DATAMODE_PULL_* data delivery mode, the client can request a \n     * single round of data by sending a zero-argument request with type code 0x0003. The response \n     * will be a zero-length acknowledgement. The client only needs to make this request when a \n     * PLAYER_DATAMODE_PULL_* mode is in use.\n     */\n",
    "130723": "    /**\n     * Get the current robot position as a Point (AWT).\n     * @return the current robot position\n     */\n",
    "130724": "    /**\n     * Check if data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130726": "    /**\n     * Configuration request: PLAYER_WIFI_REQ_MAC\n     *<br><br>\n     * See the player_wifi_mac_req structure from player.h\n     */\n",
    "130727": "    /**\n     * Configuration request: PLAYER_WIFI_REQ_IWSPY_ADD\n     *<br><br>\n     * See the player_wifi_iwspy_addr_req structure from player.h\n     */\n",
    "130729": "    /**\n     * Handle acknowledgement response messages.\n     * @param header Player header\n     */\n",
    "130730": "    /**\n     * return  A string representation of the GPS data.\n     */\n",
    "130737": "    /**\n     * Configuration request: Change data delivery mode.\n     * <br><br>\n     * The Player server supports four data modes, described above. By default, the server operates \n     * in PLAYER_DATAMODE_PUSH_NEW mode at a frequency of 10Hz. To switch to a different mode send a \n     * request with the format given below. The server's reply will be a zero-length \n     * acknowledgement.\n     * @param mode the requested mode\n     */\n",
    "130746": "    /**\n     * return  A string representation of the position 2d data.\n     */\n",
    "130762": "    /**\n     * Check if data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130764": "    /**\n     * Configuration request: Change data delivery frequency.\n     * <br><br>\n     * By default, the fixed frequency for the PUSH data delivery modes is 10Hz; thus a client \n     * which makes no configuration changes will receive sensor data approximately every 100ms. \n     * The server can send data faster or slower; to change the frequency, send a request with \n     * this format. The server's reply will be a zero-length acknowledgement.\n     * @param frequency requested frequency in Hz \n     */\n",
    "130766": "    /**\n     * Check if geometry data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130769": "    /**\n     * Request/reply: Query geometry.\n     * <br><br>\n     * See the player_sonar_geom structure from player.h\n     */\n",
    "130771": "    /**\n     * Request/reply: Sonar power.\n     * <br><br>\n     * On some robots, the sonars can be turned on and off from software.\n     * <br>\n     * To do so, send a PLAYER_SONAR_REQ_POWER request.\n     * <br><br>\n     * See the player_sonar_power_config structure from player.h\n     * @param state turn power off (0) or on (>0)\n     */\n",
    "130775": "    /**\n     * Command: Clear screen (PLAYER_GRAPHICS3D_CMD_CLEAR).\n     * <br><br>\n     */\n",
    "130779": "    /**\n     * Check if data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130781": "    /**\n     * Check if data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130788": "    /**\n     * Configuration request: Authentication.\n     * <br><br>\n     * If server authentication has been enabled (by providing '-key <key>' on the command-line; \n     * see Command line options); then each client must authenticate itself before otherwise \n     * interacting with the server. To authenticate, send a request with this format.\n     * <br><br>\n     * If the key matches the server's key then the client is authenticated, the server will reply \n     * with a zero-length acknowledgement, and the client can continue with other operations. If \n     * the key does not match, or if the client attempts any other server interactions before \n     * authenticating, then the connection will be closed immediately. It is only necessary to \n     * authenticate each client once.\n     * <br><br>\n     * Note that this support for authentication is NOT a security mechanism. The keys are always \n     * in plain text, both in memory and when transmitted over the network; further, since the key \n     * is given on the command-line, there is a very good chance that you can find it in plain text \n     * in the process table (in Linux try 'ps -ax | grep player'). Thus you should not use an \n     * important password as your key, nor should you rely on Player authentication to prevent bad \n     * guys from driving your robots (use a firewall instead). Rather, authentication was introduced \n     * into Player to prevent accidentally connecting one's client program to someone else's robot. \n     * This kind of accident occurs primarily when Stage is running in a multi-user environment. In \n     * this case it is very likely that there is a Player server listening on port 6665, and clients \n     * will generally connect to that port by default, unless a specific option is given.\n     * <br><br>\n     * This mechanism was never really used, and may be removed. \n     * @param key the authentication key\n     */\n",
    "130790": "    /**\n     * Handle acknowledgement response messages.\n     * @param header Player header\n     */\n",
    "130791": "    /**\n     * Handle acknowledgement response messages.\n     * @param header Player header\n     */\n",
    "130804": "    /**\n     * Check if configuration data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130806": "    /**\n     * The sound interface accepts an index of a pre-recorded sound file to\n     * play.\n     * @param index index of sound to be played\n     */\n",
    "130812": "    /**\n     * Configuration request : Get audio properties.\n     * <br><br>\n     * The audiodsp configuration can be queried using the PLAYER_AUDIODSP_GET_CONFIG\n     * request and modified using the PLAYER_AUDIODSP_SET_CONFIG request.\n     * <br><br>\n     * The sample format is defined in sys/soundcard.h, and defines the byte size and\n     * endian format for each sample.\n     * <br><br>\n     * The sample rate defines the Hertz at which to sample.\n     * <br><br>\n     * Mono or stereo sampling is defined in the channels parameter where 1==mono and\n     * 2==stereo.<br /><br />\n     * See the player_audiodsp_config structure from player.h\n     */\n",
    "130818": "    /**\n     * Request/reply: Get geometry.\n     * <br><br>\n     * The geometry (pose and size) of the fiducial device can be queried\n     * by sending a null PLAYER_FIDUCIAL_REQ_GET_GEOM request.\n     * <br><br>\n     * See the player_fiducial_geom structure from player.h\n     */\n",
    "130820": "    /**\n     * Request/reply: Get/set sensor field of view.\n     * <br><br>\n     * The field of view of the fiducial device can be set using the\n     * PLAYER_FIDUCIAL_REQ_GET_FOV request (response will be null), and\n     * queried using a null PLAYER_FIDUCIAL_REQ_GET_FOV request.\n     * <br><br>\n     * See the player_fiducial_fov structure from player.h\n     */\n",
    "130821": "    /**\n     * The PlayerClient \"destructor\". Once called, it will close all the open\n     * streams/sockets with the Player server.\n     */\n",
    "130823": "    /**\n     * Read the Player server replies in non-threaded mode.\n     */\n",
    "130824": "    /**\n     * Request/reply: Get/set fiducial ID.\n     * <br><br>\n     * Some fiducial finder devices display their own fiducial. Send a null\n     * PLAYER_FIDUCIAL_REQ_GET_ID request to get the identifier displayed by\n     * the fiducial.\n     * <br><br>\n     * Some devices can dynamically change the identifier they display. They\n     * can use the PLAYER_FIDUCIAL_REQ_SET_ID request to allow a client to set\n     * the  currently displayed value. Make the request with the\n     * player_fiducial_id_t structure. The device replies with the same\n     * structure with the id field set to the value it actually used. You\n     * should check this value, as the device may not be able to display the\n     * value you requested.\n     * <br><br>\n     * Currently supported by the stg_fiducial driver.\n     * <br><br>\n     * See the player_fiducial_id structure from player.h\n     */\n",
    "130826": "    /**\n     * Request/reply: Get/set fiducial ID.\n     * <br><br>\n     * Some fiducial finder devices display their own fiducial. Send a null\n     * PLAYER_FIDUCIAL_REQ_GET_ID request to get the identifier displayed by\n     * the fiducial.\n     * <br><br>\n     * Some devices can dynamically change the identifier they display. They\n     * can use the PLAYER_FIDUCIAL_REQ_SET_ID request to allow a client to set\n     * the  currently displayed value. Make the request with the\n     * player_fiducial_id_t structure. The device replies with the same\n     * structure with the id field set to the value it actually used. You\n     * should check this value, as the device may not be able to display the\n     * value you requested.\n     * <br><br>\n     * Currently supported by the stg_fiducial driver.\n     * <br><br>\n     * See the player_fiducial_id structure from player.h\n     * @param id the fiducial ID to be displayed\n     */\n",
    "130828": "    /**\n     * Change the mode Javaclient runs to non-threaded.\n     * NOTE: waits for thread to stop\n     */\n",
    "130833": "    /**\n     * Start a threaded copy of Javaclient.\n     * @param millis number of miliseconds to sleep between calls\n     * @param nanos number of nanoseconds to sleep between calls\n     */\n",
    "130837": "    /**\n     * Check if data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130838": "    /**\n     * Start the Javaclient thread. Ran automatically from runThreaded ().\n     */\n",
    "130840": "    /**\n     * Check if geometry data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130842": "    /**\n     * Check if FOV data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130843": "    /**\n     * Command: home (PLAYER_LIMB_HOME_CMD)\n     * <br><br>\n     * Tells the end effector to return to its home position.\n     */\n",
    "130844": "    /**\n     * Check if ID data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130845": "    /**\n     * Command: stop (PLAYER_LIMB_STOP_CMD)\n     * <br><br>\n     * Tells the limb to stop moving immediatly.\n     */\n",
    "130847": "    /**\n     * Return the Javaclient2 logger.\n     * @return the Javaclient2 logger as a Logger object\n     */\n",
    "130851": "    /**\n     * Configuration request: Get levels.\n     * <br><br>\n     * Send a null PLAYER_AUDIOMIXER_GET_LEVELS request to receive the current\n     * state of the mixer levels.\n     * <br><br>\n     * See the player_audiomixer_config structure from player.h\n     */\n",
    "130859": "    /**\n     * Request/reply: Power.\n     * <br><br>\n     * Turn the power to the limb by sending a PLAYER_LIMB_POWER_REQ request.\n     * Be careful when turning power on that the limb is not obstructed from\n     * its home position in case it moves to it (common behaviour). Null\n     * response.\n     * @param value Power setting; 0 for off, 1 for on.\n     */\n",
    "130861": "    /**\n     * Check if health data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130864": "    /**\n     * Request/reply: Brakes.\n     * <br><br>\n     * Turn the brakes of the limb on or off by sending a\n     * PLAYER_LIMB_BRAKES_REQ request. Null response.\n     * @param value Brakes setting; 0 for off, 1 for on.\n     */\n",
    "130866": "    /**\n     * Command: Clear screen (PLAYER_GRAPHICS2D_CMD_CLEAR).\n     * <br><br>\n     */\n",
    "130867": "    /**\n     * Request/reply: Query geometry.\n     * <br><br>\n     * Send a null PLAYER_LIMB_GEOM_REQ request to receive the\n     * geometry in this form.\n     */\n",
    "130870": "    /**\n     * Request/reply: Speed.\n     * <br><br>\n     * Set the speed of the end effector for all subsequent movements by sending\n     * a PLAYER_LIMB_SPEED_REQ request. Null response.\n     * @param speed speed setting in m/s\n     */\n",
    "130875": "    /**\n     * Check if data is available.\n     * @return True if ready, false if not ready.\n     */\n",
    "130876": "    /**\n     * Command subtype: generic command.\n     * @param data  The data to send.\n     */\n",
    "130877": "    /**\n     * Request/reply: generic request.\n     * @param data  The data to send.\n     */\n",
    "130880": "    /**\n     * Handle acknowledgement response messages.\n     * @param header Player message header.\n     */\n",
    "130885": "    /**\n     * Check if data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130888": "    /**\n     * Check if geometry data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130893": "    /**\n     * Abstract handleNARMessage method.\n     */\n",
    "130895": "    /**\n     * Abstract handleResponse method.\n     * @param header a PlayerMsgHdr structure containing the Player header\n     */\n",
    "130896": "    /**\n     * Set a new device address\n     * @param newDevAddr new device address (player_devaddr)\n     */\n",
    "130898": "    /**\n     * Return the current device address\n     * @return the current device address (player_devaddr)\n     */\n",
    "130900": "    /**\n     * Set a new device access\n     * @param newDeviceAccess new device access\n     */\n",
    "130902": "    /**\n     * Return the current device access code\n     * @return the current device access code\n     */\n",
    "130903": "    /**\n     * Set a new driver name for the device\n     * @param newDeviceDriverName new driver name\n     */\n",
    "130904": "    /**\n     * Check if intensity data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130905": "    /**\n     * Return the current driver name for the device\n     * @return the current driver name for the device\n     */\n",
    "130906": "    /**\n     * Return the current data timestamp\n     * @return the current data timestamp\n     */\n",
    "130907": "    /**\n     * Check if geometry data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130909": "    /**\n     * Check to see if the client has authenticated successfully.\n     * @return true if client has authenticated, false otherwise\n     */\n",
    "130911": "    /**\n     * Check if configuration data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130914": "    /**\n     * Request/reply: Query geometry.\n     * <br><br>\n     * See the player_ranger_geom structure from player.h\n     */\n",
    "130916": "    /**\n     * Check if geometry data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130917": "    /**\n     * Request/reply: Query configuration.\n     * <br><br>\n     * See the player_ranger_config structure from player.h\n     */\n",
    "130919": "    /**\n     * Configuration request: Query geometry.\n     *<br><br>\n     * See the player_bumper_geom structure from player.h\n     */\n",
    "130920": "    /**\n     * Request/reply: Ranger power.\n     * <br><br>\n     * On some robots, the rangers can be turned on and off from software.\n     * <br>\n     * To do so, send a PLAYER_RANGER_REQ_POWER request.\n     * <br><br>\n     * See the player_ranger_power_config structure from player.h\n     * @param state turn power off (0) or on (>0)\n     */\n",
    "130921": "    /**\n     * Handle acknowledgement response messages\n     * @param header Player header\n     */\n",
    "130923": "    /**\n     * Check to see if the port number has been identified. \n     * @return true if the port is ready to be read, false otherwise\n     * @see #getPortNumber()\n     */\n",
    "130925": "    /**\n     * Configuration request: Get data.\n     * <br><br>\n     * When the server is in a PLAYER_DATAMODE_PULL data delivery mode,\n     * the client can request a single round of data by sending a\n     * PLAYER_PLAYER_REQ_DATA request.\n     */\n",
    "130929": "    /**\n     * Request/reply: Get current image frame.\n     * <br><br>\n     * The current image frame can be \"manually\" queried by\n     * sending a null PLAYER_CAMERA_REQ_GET_IMAGE request.\n     * <br><br>\n     * See the player_camera_data structure from player.h\n     */\n",
    "130935": "    /**\n     * Check if data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130942": "   /**\n    * Check if Scanpose data is available.\n    * @return true if ready, false if not ready\n    */\n",
    "130946": "    /**\n     * Configuration request: Get geometry.\n     * <br><br>\n     * The laser geometry (position and size) can be queried.\n     * <br><br>\n     * See the player_laser_geom structure from player.h\n     */\n",
    "130949": "    /**\n     * The gripper interface accepts 5 different commands with codes:\n     * <br>\n     * <ul>\n     *      <li>GRIPopen     - 1\n     *      <li>GRIPclose    - 2\n     *      <li>GRIPstop     - 3\n     *      <li>GRIPstore    - 4\n     *      <li>GRIPretrieve - 5\n     * </ul>\n     * @param cmd the command\n     */\n",
    "130950": "    /**\n     * Request/reply: Get geometry.\n     * <br><br>\n     * The geometry (pose and size, beams number and store capacity) of the gripper\n     * device can be queried by sending a null PLAYER_GRIPPER_REQ_GET_GEOM request.\n     * <br><br>\n     * See the player_gripper_geom structure from player.h\n     */\n",
    "130955": "    /**\n     * Configuration request: Get scan properties.\n     * <br><br>\n     * The scan configuration (resolution, aperture, etc) can be queried\n     * by sending a null PLAYER_LASER_REQ_GET_CONFIG request and modified\n     * by sending a PLAYER_LASER_REQ_SET_CONFIG request. In either case,\n     * the current configuration (after attempting any requested modification)\n     * will be returned in the response.\n     */\n",
    "130958": "    /**\n     * Configuration request: Turn power on/off.\n     * @param value 0 to turn laser off, 1 to turn laser on\n     */\n",
    "130961": "    /**\n     * Check if data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130962": "    /**\n     * Check if geometry data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "130965": "    /**\n     * Request/reply: Query geometry.\n     */\n",
    "130969": "    /**\n     * Configuration request: Get waypoints.\n     * <br><br>\n     * See the player_planner_waypoints_req structure from player.h\n     */\n",
    "130971": "    /**\n     * Configuration request: Enable/disable robot motion.\n     * <br><br>\n     * To enable or disable the planner, send a PLAYER_PLANNER_REQ_ENABLE\n     * request. When disabled, the planner will stop the robot. When\n     * enabled, the planner should resume plan execution. Null response.\n     * <br><br>\n     * See the player_planner_enable_req structure from player.h\n     * @param state 1 to enable, 0 to disable\n     */\n",
    "130976": "    /**\n     * Check if the geometry data is available.\n     * @return true if ready, false if not ready\n     * @see #getPlayerLaserGeom()\n     */\n",
    "130980": "    /**\n     * Check if the configuration data is available.\n     * @return true if ready, false if not ready\n     * @see #getPlayerLaserConfig()\n     */\n",
    "130981": "    /**\n     * Configuration request: Reset odometry.\n     * <br><br>\n     * Resets the robot's odometry to (x,y,theta) = (0,0,0).\n     */\n",
    "130983": "    /**\n     * Configuration request: Change the data type to one of the predefined data\n     * structures. We send a PLAYER_IMU_REQ_SET_DATATYPE request to switch between\n     * calibrated data, 3D pose and orientation, Euler orientation or Quaternions\n     * orientation in the data packet. Null response.\n     * @param type Data type setting: 1 for pose/orientation, 2 for calibrated\n     * (raw) data, 3 for quaternions, 4 for Euler angles.\n     */\n",
    "130985": "    /**\n     * Configuration request: Reset orientation.\n     * To reset the IMU's orientation, send a PLAYER_IMU_REQ_RESET_ORIENTATION\n     * request. Null response.\n     * @param value  Driver-specific.\n     */\n",
    "130988": "    /**\n     * Handle acknowledgement response messages.\n     * @param header Player header.\n     */\n",
    "130995": "    /**\n     * Check if state data is available.\n     * @return True if ready, false if not ready\n     */\n",
    "131002": "    /**\n     * Check if calibration data is available.\n     * @return True if ready, false if not ready\n     */\n",
    "131003": "    /**\n     * Returns an object of type PlayerDevice containing the requested device.\n     * @param interf requested interface\n     * @param index requested index\n     * @return a PlayerDevice object containing the requested device\n     */\n",
    "131009": "    /**\n     * Check if quaternions orientation data is available.\n     * @return True if ready, false if not ready\n     */\n",
    "131014": "    /**\n     * Read the Player server replies.\n     * <br><br>\n     * @return the message type code\n     */\n",
    "131015": "    /**\n     * Check if Euler orientation data is available.\n     * @return True if ready, false if not ready\n     */\n",
    "131024": "    /**\n     * Check if full state data is available.\n     * @return True if ready, false if not ready\n     */\n",
    "131033": "    /**\n     * Check if data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "131039": "    /**\n     * Check if geometry data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "131041": "    /**\n     * Command: Joint home (PLAYER_ACTARRAY_HOME_CMD)\n     * <br><br>\n     * Tells a join (or the whole array) to go to home position.\n     * @param joint the joint to command (set -1 to comand all)\n     */\n",
    "131043": "    /**\n     * Request/reply: Query geometry.\n     * <br><br>\n     * Send a null PLAYER_ACTARRAY_GET_GEOM_REQ request to receive the\n     * geometry in this form.\n     */\n",
    "131046": "    /**\n     * Request/reply: Power.\n     * <br><br>\n     * Send a PLAYER_ACTARRAY_POWER_REQ request to turn the power to all\n     * actuators in the array on or off. Be careful when turning power on\n     * that the array is not obstructed from its home position in case it\n     * moves to it (common behaviour). Null response.\n     * @param state 0 for off, 1 for on\n     */\n",
    "131047": "    /**\n     * Request/reply: Query geometry.\n     * <br><br>\n     * To request robot geometry, send a null PLAYER_POSITION1D_GET_GEOM.\n     */\n",
    "131048": "    /**\n     * Request/reply: Brakes.\n     * <br><br>\n     * Send a PLAYER_ACTARRAY_BRAKES_REQ request to turn the brakes of all\n     * actuators in the array that have them on or off. Null response.\n     * @param state 0 for off, 1 for on\n     */\n",
    "131051": "    /**\n     * Request/reply: Motor power.\n     * <br><br>\n     * On some robots, the motor power can be turned on and off from software.\n     * To do so, send a PLAYER_POSITION1D_MOTOR_POWER request with the format\n     * given below, and with the appropriate state (zero for motors off and\n     * non-zero for motors on). Null response.\n     * <br><br>\n     * Be VERY careful with this command! You are very likely to start the\n     * robot running across the room at high speed with the battery charger\n     * still attached.\n     * @param state 0 for off, 1 for on\n     */\n",
    "131053": "    /**\n     * Read the Player server replies in non-threaded mode.\n     */\n",
    "131055": "    /**\n     * Request/reply: Change velocity control.\n     * <br><br>\n     * Some robots offer different velocity control modes. It can be changed\n     * by sending a PLAYER_POSITION1D_VELOCITY_MODE request with the format\n     * given below, including the appropriate mode. No matter which mode is\n     * used, the external client interface to the position1d device remains\n     * the same. Null response.\n     * @param mode driver-specific mode\n     */\n",
    "131057": "    /**\n     * Request/reply: Reset odometry.\n     * <br><br>\n     * To reset the robot's odometry to x = 0, send a\n     * PLAYER_POSITION1D_RESET_ODOM request. Null response.\n     */\n",
    "131061": "    /**\n     * Request/reply: Change control mode.\n     * <br><br>\n     * To change the control mode, send a PLAYER_POSITION1D_POSITION_MODE\n     * request. Null response.\n     * @param state 0 for velocity mode, 1 for position mode\n     */\n",
    "131063": "    /**\n     * Calls the device's readData () method.\n     * @param header Player header\n     */\n",
    "131064": "    /**\n     * Check if geometry data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "131067": "    /**\n     * Request/reply: Set odometry.\n     * <br><br>\n     * To set a robot's odometry to a particular state, send a\n     * PLAYER_POSITION1D_SET_ODOM request. Null response.\n     * @param pos position (X) in [m]\n     */\n",
    "131070": "    /**\n     * Check if waveform data is available.\n     * @return True if ready, false if not ready\n     */\n",
    "131073": "    /**\n     * Request/reply: Reset odometry.\n     * <br><br>\n     * To set a robot's odometry to x = 0, send a\n     * PLAYER_POSITION1D_REQ_RESET_ODOM request. Null response.\n     * @param value driver-specific\n     */\n",
    "131074": "    /**\n     * Request/reply: change the data type to RAW or converted engineering\n     * units.\n     * <br><br>\n     * Send a PLAYER_WSN_REQ_DATATYPE request to switch between RAW or converted\n     * engineering units values in the data packet. Null response.\n     * @param value Data type setting: 0 for RAW values, 1 for converted units.\n     */\n",
    "131076": "    /**\n     * Calls the device's handleResponse () method in case of a REQ/REP.\n     * @param header Player header\n     */\n",
    "131079": "    /**\n     * Handle acknowledgement response messages.\n     * @param header Player message header.\n     */\n",
    "131080": "    /**\n     * Check if audio sample data is available.\n     * @return True if ready, false if not ready\n     */\n",
    "131086": "    /**\n     * Check if data is available.\n     * @return True if ready, false if not ready.\n     */\n",
    "131087": "    /**\n     * Check if pose data is available.\n     * @return True if ready, false if not ready.\n     */\n",
    "131088": "    /**\n     * Configuration request: Query pose.\n     * <br><br>\n     * See the player_ir_pose structure from player.h.\n     */\n",
    "131089": "    /**\n     * Check if sequence data is available.\n     * @return True if ready, false if not ready.\n     */\n",
    "131092": "    /**\n     * Configuration request: IR power.\n     * @param state 0 for power off, 1 for power on.\n     */\n",
    "131099": "    /**\n     * Configuration request: Push (PLAYER_MCOM_PUSH_REQ)\n     */\n",
    "131100": "    /**\n     * Check if channel levels data is available.\n     * @return True if ready, false if not ready.\n     */\n",
    "131103": "    /**\n     * Configuration request: Read (PLAYER_MCOM_READ_REQ)\n     */\n",
    "131104": "    /**\n     * Configuration request: Clear (PLAYER_MCOM_CLEAR_REQ)\n     */\n",
    "131107": "    /**\n     * Configuration request: Set capacity (PLAYER_MCOM_SET_CAPACITY_REQ)\n     */\n",
    "131110": "    /**\n     * Check if mixer channels details data is available.\n     * @return True if ready, false if not ready\n     */\n",
    "131112": "    /**\n     * Check if data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "131117": "    /**\n     * Request/reply: Get particles.\n     * <br><br>\n     * To get (usually a subset of) the current particle set (assuming\n     * that the underlying driver uses a particle filter), send a null\n     * PLAYER_LOCALIZE_REQ_GET_PARTICLES request.\n     */\n",
    "131118": "    /**\n     * Check if data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "131119": "    /**\n     * Check if device state data is available.\n     * @return True if ready, false if not ready\n     */\n",
    "131124": "    /**\n     * Check if geometry data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "131129": "    /**\n     * Check if data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "131130": "    /**\n     * Command subtype: wav_stream_rec_cmd, start/stop recording, data will be\n     * returned as data blocks.\n     * @param state  PLAYER_AUDIO_STATE_STOPPED or PLAYER_AUDIO_STATE_RECORDING.\n     */\n",
    "131132": "    /**\n     * Check if particle data is available.\n     * @return true if ready, false if not ready\n     */\n",
    "131139": "    /**\n     * Command subtype: sample_play_cmd, play a pre-stored audio sample.\n     * @param index  Index of the pre-stored audio sample to play.\n     */\n",
    "131140": "    /**\n     * Check to see if the Player server replied with a\n     * PLAYER_PLAYER_REQ_DEVLIST successfully.\n     * @return true if the PLAYER_PLAYER_REQ_DEVLIST occured, false otherwise\n     * @see #getPDDList()\n     */\n",
    "131182": "    /**\n     * Check to see if the Player server replied with a\n     * PLAYER_PLAYER_DRIVERINFO_REQ successfully.\n     * @return true if the PLAYER_PLAYER_DRIVERINFO_REQ occured, false\n     * otherwise\n     * @see #getPDDI()\n     */\n",
    "131190": "    /**\n     * Request subtype: wav_rec_req, record a fixed size data block, in structure\n     * player_audio_wav_t.\n     */\n",
    "131208": "    /**\n     * Request subtype: sample_retrieve_req, retrieve a stored sample.\n     * @param index  Index of the sample to retrieve.\n     */\n",
    "131225": "    /**\n     * Request subtype: mixer_channel_list_req, request the list of channels.\n     */\n",
    "131273": "    /**\n     * Request/reply: Set AutoServo mode.\n     * Enable/Disable AutoServo mode on cameras such as the CMUcam2.\n     * @param mode 0=disabled, 1=enabled\n     */\n",
    "131277": "    /**\n     * Check to see if the Player server replied with a\n     * PLAYER_PLAYER_REQ_DEV successfully.\n     * @return true if the PLAYER_PLAYER_REQ_DEV occured, false\n     * otherwise\n     */\n",
    "131283": "    /**\n     * Constructor for PIController.\n     * @param Kp the proportional constant\n     * @param Ki the integral constant\n     */\n",
    "131285": "    /**\n     * Calculate and return the controller's command for the controlled system.\n     * @param currentOutput the current output of the system\n     * @return the new calculated command for the system\n     */\n",
    "131286": "    /**\n     * Get the current value of the proportional constant.\n     * @return Kp as a double\n     */\n",
    "131287": "    /**\n     * Set a new value for the proportional constant.\n     * @param newKp the new value for Kp\n     */\n",
    "131289": "    /**\n     * Get the current value of the integral constant.\n     * @return Ki as a double\n     */\n",
    "131291": "    /**\n     * Set a new value for the integral constant.\n     * @param newKi the new value for Ki\n     */\n",
    "131292": "    /**\n     * Set a new goal for the controller.\n     * @param newGoal the new goal for the controller\n     */\n",
    "131293": "    /**\n     * Get the difference between the current error and the last error.\n     * @return the difference between the current error and the last error\n     */\n",
    "131294": "    /**\n     * Constructor for PDController.\n     * @param Kp the proportional constant\n     * @param Kd the derivative constant\n     */\n",
    "131295": "    /**\n     * Calculate and return the controller's command for the controlled system.\n     * @param currentOutput the current output of the system\n     * @return the new calculated command for the system\n     */\n",
    "131300": "    /**\n     * Get the current value of the derivative constant.\n     * @return Kd as a double\n     */\n",
    "131301": "    /**\n     * Request a Power device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Power device if successful, null otherwise\n     */\n",
    "131302": "    /**\n     * Set a new value for the derivative constant.\n     * @param newKd the new value for Kd\n     */\n",
    "131303": "    /**\n     * Constructor for PIDController.\n     * @param Kp the proportional constant\n     * @param Ki the integral constant\n     * @param Kd the derivative constant\n     */\n",
    "131304": "\t/**\n\t * Set the minimum admissible command for the robot's motors.\n\t * @param minC minimum admissible command as an integer\n\t */\n",
    "131305": "    /**\n     * Calculate and return the controller's command for the controlled system.\n     * @param currentOutput the current output of the system\n     * @return the new calculated command for the system\n     */\n",
    "131307": "\t/**\n\t * Set the maximum admissible command for the robot's motors.\n\t * @param maxC maximum admissible command as an integer\n\t */\n",
    "131314": "\t/**\n\t * Set the maximum allowed error between the final goal and \n\t * the current position. (default error is 0)\n\t * @param err maximum allowed error as an integer\n\t */\n",
    "131316": "\t/**\n\t * Calculate and return the controller's command for the controlled system.\n\t * @param currentOutput the current output of the system\n\t * @return the new calculated command for the system\n\t */\n",
    "131320": "\t/**\n\t * Bound the output command to the minimum and maximum admissible commands.\n\t * @param command command to bound \n\t * @return new bounded command\n\t */\n",
    "131321": "    /**\n     * Constructor for PController.\n     * @param Kp the proportional constant\n     */\n",
    "131322": "    /**\n     * Calculate and return the controller's command for the controlled system.\n     * @param currentOutput the current output of the system\n     * @return the new calculated command for the system\n     */\n",
    "131325": "\t/**\n\t * Angle transformations, used internally.\n\t * @param angle angle to transform\n\t * @return new transformed angle\n\t */\n",
    "131333": "\t/**\n\t * Rotate the robot on spot (absolute heading) to the desired heading.\n\t * @param angle goal angle\n\t * @return false in case the rotation was interrupted, true otherwise\n\t */\n",
    "131334": "    /**\n     * Request a Gripper device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Gripper device if successful, null otherwise\n     */\n",
    "131342": "    /**\n     * Configuration request: PLAYER_WIFI_MAC\n     *<br><br>\n     * See the player_wifi_mac_req structure from player.h\n     */\n",
    "131344": "    /**\n     * Configuration request: PLAYER_WIFI_IWSPY_ADD\n     *<br><br>\n     * See the player_wifi_iwspy_addr_req structure from player.h\n     */\n",
    "131346": "    /**\n     * Handle acknowledgement response messages.\n     * @param header Player header\n     */\n",
    "131360": "    /**\n     * Request a Position2D device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Position2D device if successful, null otherwise\n     */\n",
    "131390": "    /**\n     * Request a Sonar device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Sonar device if successful, null otherwise\n     */\n",
    "131401": "    /**\n     * Request a Laser device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Laser device if successful, null otherwise\n     */\n",
    "131402": "    /**\n     * Command: home (PLAYER_LIMB_HOME_CMD)\n     * <br><br>\n     * Tells the end effector to return to its home position. \n     */\n",
    "131404": "    /**\n     * Command: stop (PLAYER_LIMB_STOP_CMD)\n     * <br><br>\n     * Tells the limb to stop moving immediatly. \n     */\n",
    "131411": "    /**\n     * Request/reply: Power.\n     * <br><br>\n     * Turn the power to the limb by sending a PLAYER_LIMB_POWER_REQ request. \n     * Be careful when turning power on that the limb is not obstructed from \n     * its home position in case it moves to it (common behaviour). Null \n     * response. \n     * @param value Power setting; 0 for off, 1 for on. \n     */\n",
    "131412": "    /**\n     * Request a Blobfinder device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Blobfinder device if successful, null otherwise\n     */\n",
    "131413": "    /**\n     * Request/reply: Brakes.\n     * <br><br>\n     * Turn the brakes of the limb on or off by sending a \n     * PLAYER_LIMB_BRAKES_REQ request. Null response. \n     * @param value Brakes setting; 0 for off, 1 for on. \n     */\n",
    "131416": "    /**\n     * Request/reply: Query geometry.\n     * <br><br>\n     * Send a null PLAYER_LIMB_GEOM_REQ request to receive the \n     * geometry in this form.\n     */\n",
    "131417": "    /**\n     * Request/reply: Speed.\n     * <br><br>\n     * Set the speed of the end effector for all subsequent movements by sending\n     * a PLAYER_LIMB_SPEED_REQ request. Null response.\n     * @param speed speed setting in m/s \n     */\n",
    "131423": "    /**\n     * Request a Ptz device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Ptz device if successful, null otherwise\n     */\n",
    "131435": "    /**\n     * Request an audio device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Audio device if successful, null otherwise\n     */\n",
    "131454": "    /**\n     * Request a Fiducial device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Fiducial device if successful, null otherwise\n     */\n",
    "131471": "    /**\n     * Request a Speech device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Speech device if successful, null otherwise\n     */\n",
    "131474": "    /**\n     * Configuration request: Query geometry.\n     *<br><br>\n     * See the player_bumper_geom structure from player.h\n     */\n",
    "131476": "    /**\n     * Handle acknowledgement response messages\n     * @param header Player header\n     */\n",
    "131485": "    /**\n     * Request a GPS device.\n     * @param index the device index\n     * @param access access mode\n     * @return a GPS device if successful, null otherwise\n     */\n",
    "131496": "    /**\n     * Request a Bumper device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Bumper device if successful, null otherwise\n     */\n",
    "131506": "    /**\n     * Request a DIO device.\n     * @param index the device index\n     * @param access access mode\n     * @return a DIO device if successful, null otherwise\n     */\n",
    "131521": "    /**\n     * Request an AIO device.\n     * @param index the device index\n     * @param access access mode\n     * @return an AIO device if successful, null otherwise\n     */\n",
    "131534": "    /**\n     * Request an IR device.\n     * @param index the device index\n     * @param access access mode\n     * @return an IR device if successful, null otherwise\n     */\n",
    "131548": "    /**\n     * Request a WiFi device.\n     * @param index the device index\n     * @param access access mode\n     * @return a WiFi device if successful, null otherwise\n     */\n",
    "131564": "    /**\n     * Request a Waveform device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Waveform device if successful, null otherwise\n     */\n",
    "131573": "    /**\n     * Command: Joint home (PLAYER_ACTARRAY_HOME_CMD)\n     * <br><br>\n     * Tells a join (or the whole array) to go to home position. \n     * @param joint the joint to command (set -1 to comand all)\n     */\n",
    "131575": "    /**\n     * Request a Localize device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Localize device if successful, null otherwise\n     */\n",
    "131576": "    /**\n     * Request/reply: Query geometry.\n     * <br><br>\n     * Send a null PLAYER_ACTARRAY_GET_GEOM_REQ request to receive the \n     * geometry in this form.\n     */\n",
    "131578": "    /**\n     * Request/reply: Power.\n     * <br><br>\n     * Send a PLAYER_ACTARRAY_POWER_REQ request to turn the power to all \n     * actuators in the array on or off. Be careful when turning power on \n     * that the array is not obstructed from its home position in case it \n     * moves to it (common behaviour). Null response. \n     * @param state 0 for off, 1 for on \n     */\n",
    "131580": "    /**\n     * Request/reply: Brakes.\n     * <br><br>\n     * Send a PLAYER_ACTARRAY_BRAKES_REQ request to turn the brakes of all \n     * actuators in the array that have them on or off. Null response. \n     * @param state 0 for off, 1 for on \n     */\n",
    "131588": "    /**\n     * Request a MComm device.\n     * @param index the device index\n     * @param access access mode\n     * @return a MComm device if successful, null otherwise\n     */\n",
    "131601": "    /**\n     * Request a Sound device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Sound device if successful, null otherwise\n     */\n",
    "131615": "    /**\n     * Configuration request: Query pose.\n     * <br><br>\n     * See the player_ir_pose structure from player.h\n     */\n",
    "131616": "    /**\n     * Request an AudioDSP device.\n     * @param index the device index\n     * @param access access mode\n     * @return an AudioDSP device if successful, null otherwise\n     */\n",
    "131618": "    /**\n     * Configuration request: IR power.\n     * @param state 0 for power off, 1 for power on\n     */\n",
    "131631": "    /**\n     * Request an AudioMixer device.\n     * @param index the device index\n     * @param access access mode\n     * @return an AudioMixer device if successful, null otherwise\n     */\n",
    "131659": "    /**\n     * Request a Position3D device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Position3D device if successful, null otherwise\n     */\n",
    "131688": "  /**\n   * Returns whether this aggregator has a parent.\n   * \n   * @return {@code true} if this aggregator has a parent, {@code false}\n   *         otherwise\n   */\n",
    "131692": "  /**\n   * Detaches this aggregator from its parent.\n   * \n   * @return {@code true} if this aggregator had a parent, {@code false}\n   *         otherwise\n   */\n",
    "131710": "    /**\n     * Request a Simulation device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Simulation device if successful, null otherwise\n     */\n",
    "131731": "  /**\n   * Begins establishing a new ASyncTCP connection to a remote host at the\n   * specified IP address and port.\n   * \n   * @param app the IP address and port number of the remote host\n   * @param timeout the maximum amount of time, in milliseconds, before it is\n   *        assumed that the connection attempt has failed\n   * @return a handle to the connection\n   */\n",
    "131733": "  /**\n   * Returns the listener for this ASyncTCP instance, or {@code null} if there\n   * is no listener.\n   */\n",
    "131734": "  /**\n   * Sets the listener on this ASyncTCP instance. The listener can later be\n   * retrieved via the {@link #getListener()} method. Only one listener may be\n   * set at a time; invoking this method causes any previous listener to be\n   * discarded. The current listener may be discarded by passing in {@code null}.\n   * \n   * @param tcpListener the new listener for this ASyncTCP instance\n   * @return the previous listener\n   */\n",
    "131736": "  /**\n   * Returns the port number on which this ASyncTCP instance is listening for\n   * new incoming connections. If this method returns {@code -1}, then this\n   * instance is not listening on any port, and manages only outgoing\n   * connections.\n   */\n",
    "131739": "  /**\n   * Returns the ASyncTCP instance that these parameters configure.\n   */\n",
    "131741": "  /**\n   * Sets all parameter values to those contained in argument\n   * {@code otherParams}. Note that this method may fail if the associated\n   * ASyncTCP instance is already in use.\n   * \n   * @param otherParams the parameters to be copied\n   * @return {@code true} if the parameters are copied successfully,\n   *         {@code false} otherwise\n   */\n",
    "131744": "  /**\n   * Returns the size, in bytes, of the application-level send buffer of an\n   * outgoing connection.\n   */\n",
    "131746": "  /**\n   * Sets the size, in bytes, of the application-level send buffer of an\n   * outgoing connection. Note that this method may fail if the associated\n   * ASyncTCP instance is already in use.\n   * \n   * @param sendBufferSize the send buffer size, in bytes\n   * @return {@code true} if the new send buffer size is set successfully,\n   *         {@code false} otherwise\n   */\n",
    "131748": "    /**\n     * Request a Blinkenlight device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Blinkenlight device if successful, null otherwise\n     */\n",
    "131749": "  /**\n   * Returns the size, in bytes, of the application-level receive buffer of an\n   * incoming connection.\n   */\n",
    "131751": "  /**\n   * Sets the size, in bytes, of the application-level receive buffer of an\n   * incoming connection. Note that this method may fail if the associated\n   * ASyncTCP instance is already in use.\n   * \n   * @param receiveBufferSize the receive buffer size, in bytes\n   * @return {@code true} if the new receive buffer size is set successfully,\n   *         {@code false} otherwise\n   */\n",
    "131756": "  /**\n   * Returns the capacity of the queue; attempting to enqueue a message in a\n   * queue whose length meets or exceeds its capacity will fail. If the returned\n   * value equals {@code -1}, no capacity is enforced.\n   */\n",
    "131758": "  /**\n   * Sets the capacity of this queue. If the new capacity argument is negative,\n   * no capacity will be enforced. If this method is invoked with a new capacity\n   * less than the current queue length, then no messages are evicted from the\n   * queue. Instead, no messages can be enqueued until the the queue length\n   * drops below the current capacity, from reasons such as the messages being\n   * cancelled or sent.\n   * \n   * @param new_capacity the new capacity of the queue\n   */\n",
    "131760": "  /**\n   * Returns whether the queue is already at its capacity. If so, this method\n   * returns {@code true} and any attempts to enqueue new messages will fail\n   * until this is not the case. Otherwise, this method returns {@code false}.\n   */\n",
    "131768": "  /**\n   * Returns the IP address and port number at which this connection terminates.\n   * If this connection is not established, <code>null</code> is returned.\n   * \n   * @return the destination IP address and port number\n   */\n",
    "131771": "  /**\n   * Attaches the given object to this connection. An attached object may later\n   * be retrieved via the <code>attachment</code> method. Only one object may\n   * be attached at a time; invoking this method causes any previous attachment\n   * to be discarded. The current attachment may be discarded by attaching\n   * <code>null</code>.\n   * \n   * @param obj the object to be attached; may be <code>null</code>\n   * @return the previous attachment, if any; otherwise <code>null</code>\n   */\n",
    "131774": "  /**\n   * Retrieves the attachment for this connection.\n   * \n   * @return the object currently attached to this connection, or\n   *         <code>null</code> if there is no attachment\n   */\n",
    "131776": "  /**\n   * Returns the parameters for this ASyncTCP instance. Note that these\n   * parameters can only be changed if this instance is not running.\n   */\n",
    "131777": "  /**\n   * Returns the current state of this connection.\n   * \n   * @return the current connection state\n   */\n",
    "131778": "    /**\n     * Request a Camera device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Camera device if successful, null otherwise\n     */\n",
    "131781": "  /**\n   * Attempts to close this connection if it is not closing or closed already.\n   * Note that this ASyncTCP instance will deliver all enqueued messages before\n   * finally closing. If the current state is either <code>DISCONNECTING</code>\n   * or <code>DISCONNECTED</code>, then invoking this method has no effect.\n   * If the current state is <code>CONNECTING</code>, then the connection\n   * attempt is cancelled immdiately. If the current state is\n   * <code>CONNECTED</code>, then this connection enters the\n   * <code>DISCONNECTING</code> state until all enqueued messages are sent.\n   * \n   * @return the new state of the connection\n   */\n",
    "131783": "  /**\n   * Returns the <code>MessageQueue</code> object associated with this\n   * connection.\n   * \n   * @return the associated message queue\n   */\n",
    "131786": "  /**\n   * Retrieves the listener for this connection.\n   * \n   * @return the current listener for this connection, or <code>null</code> if\n   *         there is no listener\n   */\n",
    "131788": "  /**\n   * Sets <code>cl</code> as the listener on this connection. The listener can\n   * later be retrieved via the <code>getListener</code> method. Only one\n   * listener may be set at a time; invoking this method causes any previous\n   * listener to be discarded. The current listener may be discarded by passing\n   * in <code>null</code>.\n   * \n   * @param _cl the new listener for this connection\n   * @return the previous listener, if any; otherwise <code>null</code>\n   */\n",
    "131795": "    /**\n     * Request a Map device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Map device if successful, null otherwise\n     */\n",
    "131814": "  /**\n   * Returns the IP address in the pairing.\n   * \n   * @return the IP address\n   */\n",
    "131818": "    /**\n     * Request a Planner device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Planner device if successful, null otherwise\n     */\n",
    "131834": "  /**\n   * Returns the ASyncUDP instance that these parameters configure.\n   */\n",
    "131836": "  /**\n   * Sets all parameter values to those contained in argument\n   * {@code otherParams}. Note that this method may fail if the associated\n   * ASyncUDP instance is already in use.\n   * \n   * @param otherParams the parmaeters to be copied\n   * @return {@code true} if the parameters are copied successfully,\n   *         {@code false} otherwise\n   */\n",
    "131837": "  /**\n   * Returns the address and port to which this message will be delivered.\n   */\n",
    "131845": "  /**\n   * Sets the size, in bytes, of the application-level receive buffer for the\n   * ASyncUDP instance. Note that this method may fail if the associated\n   * ASyncUDP instance is already in use.\n   * \n   * @param receiveBufferSize the receive buffer size, in bytes\n   * @return {@code true} if the new receive buffer size is set successfully,\n   *         {@code false} otherwise\n   */\n",
    "131849": "  /**\n   * Returns the <code>ASyncService</code> required to register with a\n   * <code>ASyncProvider</code> instance\n   * \n   * @return the <code>ASyncService</code> for this ASyncUDP instance\n   */\n",
    "131851": "  /**\n   * Returns the <code>QueueManager</code> through which message queues can be\n   * managed.\n   * \n   * @return the <code>QueueManager</code> for this ASyncUDP instance\n   */\n",
    "131854": "  /**\n   * Returns the parameters for this ASyncUDP instance. Note that these\n   * parameters can only be changed if this instance is not running.\n   * \n   * @return the parameters for this ASyncUDP instance\n   */\n",
    "131855": "    /**\n     * Request a Log device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Log device if successful, null otherwise\n     */\n",
    "131870": "  /**\n   * Enqueues the given message argument for delivery to the given address and\n   * port.\n   * \n   * @param message the message to enqueue for delivery\n   * @param app the address to which the message should be delivered\n   * @return a handle to the enqueued message\n   */\n",
    "131872": "  /**\n   * Returns the message queue associated with the given destination.\n   * \n   * @param app the destination address to retrieve the message queue for\n   * @return the associated message queue\n   */\n",
    "131873": "  /**\n   * Retrieves the listener for this ASyncUDP instance, or {@code null} if there\n   * is no listener.\n   */\n",
    "131874": "  /**\n   * Sets the listener on this ASyncUDP instance. The listener can later be\n   * retrieved via the {@link #getListener()} method. Only one listener may be\n   * set at a time; invoking this method causes any previous listener to be\n   * discarded. The current listener may be discarded by passing in {@code null}.\n   * \n   * @param udpListener the new listener for this ASyncUDP instance\n   * @return the previous listener\n   */\n",
    "131875": "  /**\n   * Returns the port number on which this ASyncUDP instance sends datagrams and\n   * listens for new incoming datagrams.\n   */\n",
    "131880": "    /**\n     * Request a Joystick device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Joystick device if successful, null otherwise\n     */\n",
    "131916": "    /**\n     * Request an Opaque device.\n     * @param index the device index\n     * @param access access mode\n     * @return an Opaque device if successful, null otherwise\n     */\n",
    "131928": "    /**\n     * Request a Position1D device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Position1D device if successful, null otherwise\n     */\n",
    "131943": "    /**\n     * Request an Actarray device.\n     * @param index the device index\n     * @param access access mode\n     * @return an Actarray device if successful, null otherwise\n     */\n",
    "131954": "    /**\n     * Request a Limb device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Limb device if successful, null otherwise\n     */\n",
    "131964": "    /**\n     * Request a Graphics2D device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Graphics2D device if successful, null otherwise\n     */\n",
    "131979": "    /**\n     * Request a Graphics3D device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Graphics3D device if successful, null otherwise\n     */\n",
    "131992": "    /**\n     * Request a RFID device.\n     * @param index the device index\n     * @param access access mode\n     * @return a RFID device if successful, null otherwise\n     */\n",
    "132008": "    /**\n     * Request a WSN device.\n     * @param index the device index\n     * @param access access mode\n     * @return a WSN device if successful, null otherwise\n     */\n",
    "132039": "    /**\n     * Request a Health device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Health device if successful, null otherwise\n     */\n",
    "132091": "\t/**\n\t * once the IGBService is available, we can create the page, and\n\t * register it with OSGi, so that the tab can be added.\n\t * @param igbServiceReference the ServiceReference for the IGBService\n\t */\n",
    "132097": "    /**\n     * Request a IMU device.\n     * @param index the device index\n     * @param access access mode\n     * @return a IMU device if successful, null otherwise\n     */\n",
    "132115": "\t/**\n\t * importContent parses an xml formated stream and creates\n\t * and returns a NeoMap object that contains the objects\n\t * specified by the stream.\n\t */\n",
    "132119": "\t/**\n\t * converts an <code>InputStream</code> to a <code>Reader</code>\n\t * and then parses.\n\t *\n\t * @throws IOException\n\t */\n",
    "132127": "\t/**\n\t * sets the widget (in our case a NeoMap).\n\t *\n\t * @param theWidget \n\t */\n",
    "132131": "\t/**\n\t * Adds an alias for the \"map\" tag.\n\t * You can call this multiple times\n\t * thereby directing glyphs to multiple maps.\n\t * \n\t * @param theName a unique name.\n\t * @param theMap on which glyphs are to be placed.\n\t */\n",
    "132142": "    /**\n     * Request a PointCloud3D device.\n     * @param index the device index\n     * @param access access mode\n     * @return a PointCloud3D device if successful, null otherwise\n     */\n",
    "132160": "    /**\n     * Request a Ranger device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Ranger device if successful, null otherwise\n     */\n",
    "132168": "\t/**\n\t * parses data from a file.\n\t *\n\t * @param theFile\n\t * @see #parseInputStream\n\t */\n",
    "132180": "    /**\n     * Request a Stereo device.\n     * @param index the device index\n     * @param access access mode\n     * @return a Stereo device if successful, null otherwise\n     */\n",
    "132199": "    /**\n     * Request a generic device. Don't forget to cast the result to the\n     * appropriate interface type.\n     * @param type the interface type\n     * @param index the device index\n     * @param access access mode\n     * @return a generic device if successful, null otherwise\n     */\n",
    "132322": "\t/**\n\t * Testing external zoom controls\n\t */\n",
    "132336": "  /** MouseListener interface implementation */\n",
    "132356": "\t/**\n\t * need to maintain setScene for backward compatibility with\n\t * NeoDataAdapterI interface\n\t */\n",
    "132505": "\t/**\n\t * Constructs a sequence with the given identifier.\n\t *\n\t * @param id the identifier.\n\t */\n",
    "132515": "\t/**\n\t * sets the numbering for the first residue in sequence.\n\t * Defaults to 0.\n\t */\n",
    "132520": "\t/**\n\t *  Set the sequence residues to the characters in the residues String\n\t */\n",
    "132521": "\t/**\n\t * sets the residues to those encoded in a StringBuffer.\n\t *\n\t * @param resBuf contains the encoded residues.\n\t */\n",
    "132523": "\t/**\n\t * Append a new residue to the end of this sequence.\n\t *\n\t * @param new_residue residue to append.\n\t */\n",
    "132524": "\t/**\n\t * Append new residues to the end of this sequence.\n\t *\n\t * @param new_residues to append.\n\t */\n",
    "132527": "\t/**\n\t * Inserts residues before the residue at a given position.\n\t *\n\t * @param start points to the residue that will follow the insertion.\n\t * @param new_residues the residues to insert.\n\t */\n",
    "132530": "\t/**\n\t * loads a sequence from over the network.\n\t *\n\t * @param theRef is a URL pointing to a FASTA file containing the sequence.\n\t */\n",
    "132532": "\t/**\n\t * Gets a residue at a given position.\n\t *\n\t * @param n index of the residue to retrieve.\n\t * @return the character code for the residue\n\t * or 0 is if n is out of bounds.\n\t */\n",
    "132551": "\t/**\n\t * broadcasts a sequence event.\n\t *\n\t * @param theEvent to broadcast.\n\t */\n",
    "132552": "\t/**\n\t * adds a listener to the list of those listening to this sequence.\n\t *\n\t * @param l the listener to add.\n\t */\n",
    "132555": "\t/**\n\t * removes a listener from the list of those listening to this sequence.\n\t *\n\t * @param l the listener who is no longer listening.\n\t */\n",
    "132566": "\t/**\n\t * sets the position.\n\t *\n\t * @param theValue the number of characters before the position.\n\t */\n",
    "132578": "\t/**\n\t *  sets the orientation.\n\t *\n\t *  @param forward true iff FORWARD\n\t *  @see TraceI#FORWARD\n\t *  @see TraceI#REVERSE\n\t */\n",
    "132591": "\t/**\n\t * sets an array of peak points in the trace.\n\t * The array is used to find base indices\n\t * when given a point in the trace.\n\t *\n\t * <p><em>Note that\n\t * this should be done when setting the model.\n\t * i.e. at the same time that the baseVector is populated.\n\t * However, it would appear that parsers are using\n\t * getBaseVector to get a pointer to the vector\n\t * and adding items to it directly.\n\t * This practice may not be ideal.\n\t * They should also call this function\n\t * after populating baseVector.\n\t * </em>\n\t */\n",
    "132592": "\t/**\n\t * gets a single peak.\n\t * The peaks correspond to called bases.\n\t * So the parameter passed should correspond\n\t * to a particular called base.\n\t *\n\t * @param theIndex into an array of peaks.\n\t * @return the magnitude of the trace at the given peak.\n\t */\n",
    "132593": "\t/**\n\t * gets the index of the residue nearest the given point\n\t * in the trace.\n\t */\n",
    "132594": "\t/**\n\t * gets the n'th base called.\n\t *\n\t * @param index into all the bases called.\n\t */\n",
    "132605": "\t/**\n\t * adds the trace values at a single sample point.\n\t *\n\t * @param sample_A the value of the Adenine trace at this point\n\t * @param sample_C the value of the Cytosine trace at this point\n\t * @param sample_G the value of the Guanine trace at this point\n\t * @param sample_T the value of the Thymine trace at this point\n\t */\n",
    "132607": "\t/**\n\t * adds a single called base.\n\t * Bases should be added in order from 5 prime to 3 prime.\n\t *\n\t * @param base the one to add.\n\t */\n",
    "132612": "\t/**\n\t * constructs a Span.\n\t *\n\t * @param a index of the first residue in the subject sequence.\n\t * @param b index of the last residue in the subject sequence.\n\t * @param c index of the first residue in the reference sequence.\n\t * @param d index of the last residue in the reference sequence.\n\t */\n",
    "132617": "\t/**\n\t * Given a base position in the Sequence, returns\n\t *       a base position in the trace.\n\t */\n",
    "132618": "\t/**\n\t * Given a base position in the trace, returns\n\t *       a base position in the Sequence.\n\t */\n",
    "132623": "\t/**\n\t * gets the data model for the trace.\n\t * If the trace data has not yet been loaded,\n\t * it will be loaded first.\n\t *\n\t * @see #loadTrace\n\t */\n",
    "132625": "\t/**\n\t * reads and parses an SCF file from this AlignTrace's URL.\n\t */\n",
    "132628": "\t/**\n\t * adds a BaseConfidence to this ReadConfidence.\n\t */\n",
    "132634": "\t/**\n\t * constructs a base confidence with the given base and confidence.\n\t */\n",
    "132640": "\t/**\n\t * Returns the complement of this called base.\n\t * Requires the number of sample points in the trace,\n\t *    since the complement's peak index will be num_samples - this.peak\n\t */\n",
    "132649": "\t/**\n\t * Construct an identified mapping.\n\t * @param id\n\t */\n",
    "132651": "\t/**\n\t * sets this mapping's sequence.\n\t */\n",
    "132652": "\t/**\n\t * gets this mapping's sequence.\n\t */\n",
    "132657": "\t/**\n\t *  Set sequence orientation relative to reference.\n\t *  true = same direction (forward), false = different direction (reverse)\n\t */\n",
    "132658": "\t/**\n\t *  Return sequence orientation relative to reference.\n\t *  true = same direction (forward), false = different direction (reverse)\n\t */\n",
    "132659": "\t/**\n\t *  Return whether sequence orientation is same as reference\n\t *  true = same direction (forward), false = different direction (reverse)\n\t */\n",
    "132660": "\t/**\n\t * Add an aligned Span to the mapping\n\t *\n\t * @see Span\n\t */\n",
    "132663": "\t/**\n\t *  return start of mapping (relative to reference).\n\t */\n",
    "132664": "\t/**\n\t * Returns a new Range Object with the same\n\t * properties as this one.\n\t *\n\t * @return  new Range Object\n\t */\n",
    "132665": "\t/**\n\t * return end of mapping (relative to reference).\n\t */\n",
    "132666": "\t/**\n\t * indicates whether or not two ranges overlap (intersect).\n\t *\n\t * @param that is another range that might overlap this one.\n\t * @return whether or not that overlaps this.\n\t */\n",
    "132668": "\t/**\n\t * indicates whether or not another range is contained in\n\t * (is a subset of) this one.\n\t *\n\t * @param that is another range that might contain this one.\n\t * @return whether or not that contains this.\n\t */\n",
    "132670": "\t/**\n\t * unites two ranges.\n\t * Note that this is not the set theoretic union of the ranges\n\t * unless they overlap or abutt.\n\t * Such a union would not be a range.\n\t * This returns the smallest range\n\t * that contains the set theoretic union.\n\t *\n\t * @param that is another range to unite with this one.\n\t * @return the smallest range that contains both this and that.\n\t */\n",
    "132671": "\t/**\n\t * creates a new range representing the intersection of two ranges.\n\t * <em>Bug:</em> If the two ranges do not overlap,\n\t * this will return an invalid range,\n\t * whose end is less than its beginning.\n\t *\n\t * @param that is another range to intersect with this one.\n\t * @return the intersection of the this and that.\n\t * @see #overlaps\n\t */\n",
    "132675": "\t/**\n\t * maps a reference position to a mapped position.\n\t *\n\t * @param ref_pos the reference position\n\t * @return the sequence position that maps to the given reference position,\n\t *         or {@link Integer#MIN_VALUE} if there is none.\n\t */\n",
    "132678": "\t/**\n\t * maps a sequence position to a reference position.\n\t *\n\t * @param map_pos the sequence position\n\t * @return the reference position that maps to the given sequence position,\n\t *         or {@link Integer#MIN_VALUE} if there is none.\n\t */\n",
    "132688": "\t/**\n\t * produces a complement of this called base.\n\t * This includes the probabilities being complemented\n\t * and the trace point being complemented (reversed).\n\t *\n\t * @param trace_length the number of sample points in the trace.\n\t * The complement's peak index will be trace_length - this.peak.\n\t * @return a new base call which is the complement of this called base.\n\t */\n",
    "132698": "\t/**\n\t * cancels a listeners registration.\n\t */\n",
    "132706": "\t/**\n\t * notifies all listeners of a value change.\n\t * <p><strong>BUG</strong>: This always creates a TRACK type change\n\t * even when min, max, or extent are actually what changed.\n\t */\n",
    "132707": "\t/**\n\t * constructs the reverse complement of this set of base calls.\n\t *\n\t * @return a new set of base calls.\n\t */\n",
    "132709": "\t/**\n\t * adds a single called base.\n\t * Bases should be added in order from 5 prime to 3 prime.\n\t *\n\t * @param base the one to add.\n\t */\n",
    "132712": "  /**\n   * Lets all the listeners know that this has been painted.\n   *\n   * @param e an event to pass to them all.\n   */\n",
    "132714": "  /**\n   * Adds the specified listener to those receiving notification\n   * of painting this NeoCanvas.\n   *\n   * @param pl the listener\n   */\n",
    "132715": "  /**\n   * Removes the specified event listener\n   * so it no longer receives notification of events\n   * from this NeoCanvas.\n   *\n   * @param pl the listener\n   */\n",
    "132716": "\t/**\n\t * updates without clearing.\n\t */\n",
    "132718": "\t/**\n\t * same as super.paint, but with background repainted if requested.\n\t * Note that the forced clearing of the Panel will happen only once\n\t * for each call to forceBackgroundFill.\n\t * After the Panel has been cleared the forced clearing is turned off.\n\t *\n\t * @see #forceBackgroundFill\n\t */\n",
    "132721": "\t/**\n\t * Force a background fill when next paint of NeoPanel occurs.\n\t * This is currently needed for cases when internal widgets are \n\t * moved around within a NeoPanel (for instance when calling \n\t * NeoAssembler.configureLayout().  Tried to do this with \n\t * Component events and ComponentListener, but they didn't give\n\t * enough control over combining multiple component events into \n\t * single background fills (multiple paints appear to be getting \n\t * forced within the peers (without calls to paint()!)\n\t */\n",
    "132730": "\t/**\n\t * Make a new tier event for the given parameters.\n\t * @param full_repack In the event of a REPACK event type, intended to indicate the type of repack.  Should be meaningless otherwise.\n\t * @param stretch_map In the event of a REPACK event type, intended to indicate the type of repack.  Should be meaningless otherwise.\n\t */\n",
    "132734": "\t/**\n\t *  An arbitrary object passed in when NeoTimerEvent was constructed.\n\t */\n",
    "132735": "\t/**\n\t * Get the MapTierGlyph which this event represents\n\t */\n",
    "132740": "\t/**\n\t * When the event is of type REORDER, set this property with an\n\t * array of size 2 -- [start location, end location].\n\t * Locations are top-down, zero-based.\n\t */\n",
    "132744": "\t/**\n\t * Since type REPACK calls can be made by calls to AbstractTieredMap.packTiers ( boolean full_repack, boolean stretch_map ),\n\t * the state of those two booleans should be passed on to TierMap listeners so that they can pack the same way.  Previous to\n\t * 10/3/00, this information was not here, and AbstractTieredMap was doing a packTiers ( true, true ) in reponse to all\n\t * TierEvents of type REPACK.  Defaults to true if the specific constructor is not used.\n\t */\n",
    "132747": "\t/**\n\t * Experimenting with recycling events to improve efficiency.\n\t */\n",
    "132750": "\t/**\n\t * Get the state for which this event exists.\n\t */\n",
    "132752": "\t/**\n\t * Gets the start of the change.\n\t *\n\t * @return the number of characters before the change.\n\t */\n",
    "132756": "\t/**\n\t * Gets the length of the change.\n\t *\n\t * @return the length\n\t */\n",
    "132757": "\t/**\n\t * Gets the Sequence that changed.\n\t *\n\t * @return the sequence\n\t */\n",
    "132758": "\t/**\n\t * Gets the type of event.\n\t *\n\t * @return INSERT, REMOVE, or CHANGE\n\t */\n",
    "132759": "\t/**\n\t * points to in which part of a NeoContainerWidget the event occurred.\n\t * @return the internal widget location of the event or UNKNOWN\n\t * if the widget has no internal structure.\n\t */\n",
    "132772": "\t/**\n\t * Sets the coordinate bounds for the Scene.\n\t * Glyphs outside of these bounds will not be visible.\n\t * @param x X coordinate for top left\n\t * @param y Y coordinate for top right\n\t * @param w Width of coordinate box\n\t * @param h Height of coordinate box\n\t */\n",
    "132773": "\t/**\n\t * Sets the root glyph of this scene.\n\t * Use addGlyph() to add another glyph to the scene.\n\t * @param glyph the new RootGlyph\n\t */\n",
    "132776": "\t/**\n\t * Returns the root glyph of this scene.\n\t */\n",
    "132778": "\t/**\n\t * Adds another glyph to the scene.\n\t */\n",
    "132784": "\t/**\n\t * Adds a view representing this scene.\n\t */\n",
    "132788": "\t/**\n\t * Removes a view that had been representing the scene.\n\t */\n",
    "132790": "\t/**\n\t * Draws all views on all canvases.\n\t */\n",
    "132793": "\t/**\n\t * Draws all the glyphs in one view.\n\t */\n",
    "132796": "\t/**\n\t * Draw one canvas.\n\t */\n",
    "132809": "\t/**\n\t * Sets visibility for a particular glyph in the scene.\n\t * @param glyph the glyph to set.\n\t * @param isVisible whether or not the glyph is visible.\n\t */\n",
    "132813": "\t/**\n\t * Selects a glyph.\n\t * @param gl The glyph to select\n\t */\n",
    "132819": "\t/**\n\t * Deselects a glyph.\n\t * @param gl the glyph to be deselected.\n\t */\n",
    "132821": "\t/**\n\t *  Add a glyph drag listener.\n\t *  Note: may want to change this to distinguish between listeners that\n\t *  want to know about DRAG_IN_PROGRESS events,\n\t *  versus listeners that just want to know about DRAG_STARTED and\n\t *  DRAG_ENDED events\n\t *  (since posting lots of DRAG_IN_PROGRESS events may be inefficient\n\t *     on the other hand, another way to deal with this is to recycle the same\n\t *     NeoGlyphDragEvent...).\n\t */\n",
    "132822": "\t/**\n\t * Removes a glyph from the scene.\n\t * @param gl the glyph to be removed.\n\t */\n",
    "132829": "\t/**\n\t * Sets the selection appearance.\n\t * @param id the appearance state.\n\t * Choose from SELECT_NONE, SELECT_OUTLINE,\n\t * SELECT_FILL, BACKGROUND_FILL, SELECT_REVERSE, HIGHLIGHT.\n\t */\n",
    "132834": "\t/**\n\t * Configure this factory by setting glyph options.\n\t *\n\t * @param options\n\t *    An option String of the form \"-option1 value1 -option2 value2...\"\n\t * @see #configure(Hashtable)\n\t */\n",
    "132837": "\t/**\n\t * Transforms the coordinate on the axis indicated.\n\t * If transform is being used in between a scene and a view,\n\t * this would convert from scene coordinates to view/pixel coordinates.\n\t * @param orientation\n\t * @param in the coordinate\n\t * @return transformed coord.\n\t */\n",
    "132838": "\t/**\n\t * Configure this factory by setting glyph options.\n\t * The glyphs produced will have properties with the given values.\n\t *\n\t * @param options   A Hashtable of the form<BR>\n\t * <table>\n\t * <tr><td>option1</td><td>value1</td></tr>\n\t * <tr><td>option2</td><td>value2</td></tr>\n\t * </table>\n\t * <p> Valid options are\n\t * <table>\n\t * <tr><td><code>-background_color</td><td><var>String</var></td>\n\t * <td>a background_color name like \"red\" or \"nicePaleBlue\"</td></tr>\n\t * <tr><td><code>-background</td><td><var>String</var></td>\n\t * <td>same as \"background_color\"</td></tr>\n\t * <tr><td><code>-foreground</td><td><var>String</var></td>\n\t * <td>a background_color name like \"red\" or \"nicePaleBlue\"</td></tr>\n\t * <tr><td><code>-glyphtype </td><td><var>String</var></td>\n\t * <td>the name of a class implementing GlyphI</td></tr>\n\t * <tr><td><code>-mirror</td><td><var>boolean</var></td>\n\t * <td>When true the glyph will negate the offset if end &lt; beginning.</td></tr>\n\t * <tr><td><code>-offset</td><td><var>int</var></td>\n\t * <td>the distance from the primary axis</td></tr>\n\t * <tr><td><code>-width</td><td><var>int</var></td>\n\t * <td>the \"thickness\" of the glyph\n\t * (orthogonal to the primary axis)</td></tr>\n\t * </table>\n\t */\n",
    "132848": "\t/**\n\t * Expands damaged area to include glyph's coordbox.\n\t * Should this be protected???\n\t */\n",
    "132853": "\t/**\n\t * Selecting a region of a glyph.\n\t * This base class defaults to selecting the whole glyph.\n\t * Subclasses can override this for a more appropriate implementation.\n\t *\n\t * @param x ignored\n\t * @param y ignored\n\t * @param width ignored\n\t * @param height ignored\n\t */\n",
    "132859": "\t/**\n\t *  Default is that glyph does not support subselection.\n\t *  Override this to indicate support for subselection.\n\t */\n",
    "132875": "\t/**\n\t * Clears out the list of transient glyphs.\n\t * This allows for a more complete clearing of a NeoMap.\n\t * @see com.affymetrix.genoviz.widget.NeoMap#clearWidget()\n\t */\n",
    "132890": "\t/**\n\t * Hack needed to make Hairline label glyph visible after removing bioviews.Rectangle2D.intersects.\n\t * Specifically, this handles the case where a 0-width/0-height rectangle intersects another rectangle.\n\t * Is this an intersection or not?  Genoviz says yes, Java SDK says no.\n\t */\n",
    "132900": "\t/**\n\t * sets the direction this packer should move glyphs.\n\t *\n\t * @param movetype indicates which direction the glyph_to_move should move.\n\t *                 It must be one of UP, DOWN, LEFT, RIGHT,\n\t *                 MIRROR_VERTICAL, or MIRROR_HORIZONTAL.\n\t *                 The last two mean \"away from the orthoganal axis\".\n\t */\n",
    "132904": "\t/**\n\t *     Sets the fuzziness of hit detection in layout.\n\t *     This is the minimal distance glyph coordboxes need to be separated by\n\t *     in order to be considered not overlapping.\n\t * <p> <em>WARNING: better not make this greater than spacing.</em>\n\t * <p> Note that since Rectangle2D.Double does not consider two rects\n\t *     that only share an edge to be intersecting,\n\t *     will need to have a coord_fuzziness &gt; 0\n\t *     in order to consider these to be overlapping.\n\t */\n",
    "132908": "\t/**\n\t * Sets the spacing desired between glyphs.\n\t * If glyphB is found to hit glyphA,\n\t * this is the distance away from glyphA's coordbox\n\t * that glyphB's coord box will be moved.\n\t */\n",
    "132914": "\t/**\n\t * assignes a component to this rubber band.\n\t *\n\t * @param c the component where the rubber band is active.\n\t */\n",
    "132915": "\t/**\n\t * makes a new glyph with a different configuration.\n\t * The options are in effect only for the production of one glyph.\n\t * The factory's settings are unchanged.\n\t *\n\t * @param beg where the glyph should begin\n\t * @param end where the glyph should end\n\t * @param options\n\t *    An option String of the form \"-option1 value1 -option2 value2...\"\n\t * @return the new glyph or null if it could not be manufactured.\n\t * @see #makeGlyph(double, double)\n\t * @see #configure(String)\n\t */\n",
    "132919": "\t/**\n\t * makes a new glyph with a different configuration.\n\t * The options are in effect only for the production of one glyph.\n\t * The factory's settings are unchanged.\n\t *\n\t * @param beg where the glyph should begin\n\t * @param end where the glyph should end\n\t * @param options\n\t *    A Hashtable of the options\n\t * @return the new glyph or null if it could not be manufactured.\n\t * @see #makeGlyph(double, double)\n\t * @see #configure(Hashtable)\n\t */\n",
    "132924": "\t/**\n\t * makes a glyph and adds it to this factory's scene.\n\t * Otherwise, this is just like makeGlyph().\n\t * @see #makeGlyph(double, double)\n\t */\n",
    "132971": "\t/**\n\t * adds a named color to the map.\n\t * This is a type safe way to <code>put( theName, theColor )</code>.\n\t * Prefer this to the Hashtable method.\n\t *\n\t * @param theName\n\t * @param theColor\n\t */\n",
    "132972": "\t/**\n\t * Gets a named color from the map.\n\t * This is a type safe way to <code>get( theName )</code>.\n\t * Prefer this to the Hashtable method.\n\t *\n\t * @param theName\n\t * @return the color\n\t */\n",
    "132973": "\t/**\n\t * sets this range's emptiness.\n\t * Unlike <code>clear()</code>,\n\t * <code>setEmpty( true )</code> will reinstate the previous selection.\n\t */\n",
    "132974": "\t/**\n\t * gets the name of a color in the map.\n\t *\n\t * @param theColor\n\t * @return the name in the map for that color.\n\t */\n",
    "132975": "\t/**\n\t * gets all the names.\n\t * This is equivalent to Hashtable's <code>keys()</code> method.\n\t *\n\t * @return an Enumeration of the names.\n\t * Each name is a <code>java.lang.String</code>.\n\t */\n",
    "132982": "\t/**\n\t * clears the selection.\n\t *\n\t * <em>Note:\n\t * getStart() and getEnd() will return 0 after a call here.\n\t * That is like having zero selected.\n\t * Of course, that is the current situation before\n\t * update() or setRange() are called.\n\t * So you must call isEmpty()\n\t * to be sure that zero is really selected.</em>\n\t */\n",
    "132984": "\t/**\n\t * Notes a start time.\n\t */\n",
    "132985": "\t/**\n\t * selectes a single integer.\n\t * It is equivalent to setRange(point, point).\n\t *\n\t * @param point the integer to select.\n\t */\n",
    "132987": "\t/**\n\t * Prints the time since the start method was called.\n\t */\n",
    "132989": "\t/**\n\t * sets the selection range from start to end inclusive.\n\t *\n\t * @param start the first selected integer.\n\t * @param end the last selected integer.\n\t * @see #update\n\t */\n",
    "132991": "\t/**\n\t * Color schemes with more foreground colors than this are screened out.\n\t * @param theLimit cannot be negative.\n\t */\n",
    "132993": "\t/**\n\t * Detects whether or not this glyph is \"hit\"\n\t * by a rectangle of pixel space within a view.\n\t *\n\t *<p> Note that this base implementation always returns false.\n\t *    This is because container glyphs must return false.\n\t *    They can intersect other rectangles.\n\t *    But, they cannot be \"hit\".\n\t *    Glyphs that extend this class and are not container glyphs\n\t *    should override this method.\n\t *\n\t * @param pixel_hitbox ignored\n\t * @param view ignored\n\t * @return false\n\t */\n",
    "132994": "\t/**\n\t * updates the selection\n\t * moving whichever end was not the origin\n\t * to the given value.\n\t *\n\t * <p> Note that if the update value is less than the origin\n\t * the origin will no longer be included in the selection.\n\t * c.f. <code>setRange</code>.\n\t * If <code>end</code> &lt; <code>start</code> then\n\t * the origin will be set to <code>start</code> and included.\n\t *\n\t * @param value the new end (or start) point.\n\t * @see #setRange\n\t */\n",
    "132997": "\t/**\n\t * Detects whether or not this glyph is \"hit\"\n\t * by a rectangle of coordinate space within a view.\n\t *\n\t *<p> Note that this base implementation always returns false.\n\t *    This is because container glyphs must return false.\n\t *    They can intersect other rectangles.\n\t *    But, they cannot be \"hit\".\n\t *    Glyphs that extend this class and are not container glyphs\n\t *    should override this method.\n\t *\n\t * @param coord_hitbox ignored\n\t * @param view ignored\n\t * @return false\n\t */\n",
    "133015": "\t/**\n\t * Get the location of the given legend glyph in the map.\n\t * @return 0..n, the location counting top-down,\n\t * or -1 if the given tier is not on the map.\n\t */\n",
    "133018": "\t/**\n\t *  Adds a child glyph.\n\t *  Because the pickTraversal() method calls itself\n\t *  recursively on its children, a glyph cannot be a\n\t *  child of itself.\n\t *  @throws IllegalArgumentException if you try to add a glyph as a child\n\t *    of itself.\n\t */\n",
    "133019": "\t/** Adds the child to this object's list of children.\n\t *  Note:  there is nothing preventing you from\n\t *  adding the same child multiple times, although\n\t *  that would probably be a bad thing to do.\n\t */\n",
    "133021": "\t/** Removes the child from this object's list of children,\n\t *  and sets its parent to null (for improved garbage collection).\n\t *  Note:  if the same child was added multiple times,\n\t *  this will only remove one of the references to it and\n\t *  will not set the parent to null.\n\t *  Probably {@link #addChild(GlyphI)} should be re-written\n\t *  to disallow that in the first place.\n\t */\n",
    "133023": "\t/**\n\t *  Returns true if any datamodels are represented by multiple glyphs.\n\t *  WARNING: once one model is represented by multiple glyphs, this flag might only\n\t *     be reset to false when clearWidget() is called\n\t */\n",
    "133030": "\t/**\n\t * Retrieve the datamodel associated with the glyph.  This facilitates\n\t * efficient event handling by associating application-specific data to\n\t * the visual glyphs.\n\t *\n\t * @param glyph a GlyphI on the widget\n\t * @return the datamodel associated with <code>GlyphI</code>.\n\t *\n\t */\n",
    "133033": "\t/**\n\t * modifies the position of <code>glyph</code> to be the\n\t * new absolute position (<code>x,y</code>) specified in\n\t * coordinate space (not pixels).\n\t *\n\t * @param glyph the GlyphI to move\n\t * @param x the absolute double position along the X axis.\n\t * @param y the absolute double position along the Y axis.\n\t * @see #moveRelative\n\t * @see NeoMap#addItem\n\t */\n",
    "133037": "\t/**\n\t * Modifies the position of all <code>glyphs</code>  in List to be the\n\t * new absolute position (<code>x,y</code>) specified in\n\t * coordinate space (not pixels).\n\t * @param glyphs the List of GlyphIs to move\n\t * @param x the absolute double position along the X axis.\n\t * @param y the absolute double position along the Y axis.\n\t * @see #moveRelative\n\t * @see NeoMap#addItem\n\t */\n",
    "133041": "\t/**\n\t * update the position of <code>glyph</code> by <code>diffx</code>\n\t * and <code>diffy</code> in the X and Y axes respectively,\n\t * relative to the current position of <code>glyph</code>, where\n\t * the current position of <code>glyph</code> is the coordinate of the\n\t * top left coordinate of <code>glyph</code>'s bounding box.\n\t * Offsets are specified in coordinate space (not pixels).\n\t *\n\t * @param glyph the GlyphI to move\n\t * @param diffx the double relative offset along the X axis\n\t * @param diffy the double relative offset along the Y axis\n\t * @see #moveAbsolute\n\t * @see NeoMap#addItem\n\t */\n",
    "133044": "\t/**\n\t * update the position of all <code>glyphs</code> in List by\n\t * <code>diffx</code> and <code>diffy</code> in the X and Y axes respectively,\n\t * relative to the current position of <code>glyphs</code>, where\n\t * the current position of a <code>glyph</code> is the coordinate of the\n\t * top left corner of the <code>glyph</code>'s bounding box.\n\t * Offsets are specified in coordinate space (not pixels).\n\t *\n\t * @param glyphs the List of GlyphIs to move\n\t * @param x the double relative offset along the X axis\n\t * @param y the double relative offset along the Y axis\n\t * \n\t *\n\t */\n",
    "133048": "\t/**\n\t * Modifies the way that scrolling is performed for an axis.\n\t *\n\t * @param id       identifies which axis (X or Y) is being queried.\n\t * @param behavior AUTO_SCROLL_INCREMENT or NO_AUTO_SCROLL_INCREMENT\n\t *\n\t * @see #getScrollIncrementBehavior\n\t */\n",
    "133051": "\t/**\n\t * Use this to decide whether or not the scrolling increment\n\t * is being automatically readjusted.\n\t *\n\t * @param id identifies which axis (X or Y) is being queried.\n\t *\n\t * @return a constant indicating the scroll behavior.  Valid values\n\t *  are NeoAbstractWidget.AUTO_SCROLL_INCREMENT and\n\t *  NeoAbstractWidget.NO_AUTO_SCROLL_INCREMENT\n\t *\n\t * @see #setScrollIncrementBehavior\n\t */\n",
    "133054": "\t/** Sets the minimum size in pixels. If d.width or d.height is negative,\n\t  this uses their absolute value instead. */\n",
    "133055": "  /**\n   * Indicates whether a given glyph is selected.\n   * @param g The glyph to check for selected status.\n   * @return <code>true</code> if the glyph is selected, else <code>false</code>.\n   */\n",
    "133056": "\t/**\n\t * Sets the coordinates of the Glyph.\n\t * Follow AWT args convention: x, y, width, height.\n\t * This will convert rectangles of a negative width and/or height\n\t * to an equivalent rectangle with positive width and height.\n\t */\n",
    "133058": "\t/**\n\t * Replaces the coord box.\n\t * Note that this does not make the assurances of setCoords().\n\t * @see #setCoords\n\t */\n",
    "133059": "\t/**\n\t * adds all glyphs in List <code>glyphs</code> to the list of\n\t * selected glyphs for this widget.  Selected glyphs will be displayed\n\t * differently than unselected glyphs, based on selection style\n\t *\n\t * @param glyphs a List of <code>GlyphIs</code> to select\n\t * @see #deselect\n\t * @see #getSelected\n\t */\n",
    "133062": "\t/**\n\t *  Clears all selections by actually calling {@link #deselect(GlyphI)}\n\t *  on each one as well as removing them from the list of selections.\n\t */\n",
    "133066": "\t/**\n\t * Removes all glyphs in List <code>glyphs</code> from the list of selected\n\t * glyphs for this widget.  Visually unselects glyph.\n\t *\n\t * @see #select\n\t * @see #getSelected\n\t */\n",
    "133070": "\t/** Clears all graphs from the widget.\n\t *  This default implementation simply removes all elements from the\n\t *  list of selections.  (It does this without calling clearSelected(),\n\t *  because it is faster to skip an explicit call to deselect(GlyphI)\n\t *  for each Glyph.)\n\t *  Subclasses should call this method during their own implementation.\n\t *  Subclasses may choose to call clearSelected() before calling this\n\t *  method if they require an explicit call to deselect(GlyphI) for\n\t *  each Glyph.\n\t */\n",
    "133077": "\t/**\n\t * gets the size of the component.\n\t *\n\t * @return a Rectangle the same size as the bounds of the component\n\t *         with an origin of (0, 0).\n\t */\n",
    "133082": "\t/** implementing MouseListener interface and collecting mouse events */\n",
    "133102": "\t/** implementing MouseMotionListener interface and collecting mouse events */\n",
    "133108": "\t/** implementing KeyListener interface and collecting key events */\n",
    "133117": "\t/**\n\t * Makes sure the caret is visible.\n\t */\n",
    "133120": "\t/** implementing NeoPaintListener interface and triggering draw */\n",
    "133125": "\t/** processing key events on view's component */\n",
    "133131": "\t/**\n\t * To be called when the object is no longer needed. Eliminate some references, as is necessary\n\t * for garbage collection to occur.\n\t */\n",
    "133132": "\t/**\n\t * If View is managing its own offscreen double buffering, will\n\t * return this image, otherwise will return null.\n\t */\n",
    "133133": "\t/**\n\t * Sets the selectability of the glyph.\n\t *\n\t * @param selectability\n\t */\n",
    "133134": "\t/**\n\t * Indicates whether or not the glyph can be selected.\n\t */\n",
    "133137": "\t/**\n\t *  add an outline as an annotation along the sequence.\n\t */\n",
    "133138": "\t/**\n\t * Allows the component to be set.\n\t * This is similar to the rubberband's setComponent method.\n\t */\n",
    "133139": "\t/**\n\t * Allows other maps to be notified of tier movement.\n\t * So they can act accordingly.\n\t */\n",
    "133142": "\t/**\n\t * Selects the glyph if it is selectable.\n\t * If it is not then this does nothing.\n\t *\n\t * @param selected true if the glyph is to be selected,\n\t * false otherwise.\n\t */\n",
    "133151": "\t/**\n\t * add an annotation of a particular color on a specified sub-region.\n\t *\n\t * @param start  the integer starting coordinate of the annotation.\n\t * @param end  the integer ending coordinate of the annotation.\n\t * @param color the color of the annotation.\n\t * @return       a tag to associate with the annotation for later reference\n\t *\n\t * @see NeoAbstractWidget#getColor\n\t */\n",
    "133157": "\t/**\n\t *  Set trans to global transform for this glyph.\n\t *  (Based on getChildTransform() of parent.)\n\t */\n",
    "133159": "\t/** Default implementation does nothing. */\n",
    "133160": "\t/**\n\t * gets the range of an annotation.\n\t *\n\t * @param annotation an item added with the addAnnotation method.\n\t * @return the Range (start to end) of the annotation.\n\t */\n",
    "133165": "\t/**\n\t * gets the start of an annotation.\n\t *\n\t * @param annotation an item added with the addAnnotation method.\n\t * @return the start of the annotation.\n\t */\n",
    "133170": "\t/**\n\t * gets the end of an annotation.\n\t *\n\t * @param annotation an item added with the addAnnotation method.\n\t * @return the end of the annotation.\n\t */\n",
    "133176": "\t/**\n\t * remove an annotation from the sequence.\n\t *\n\t * @param gl  the tag associated with the annotation\n\t */\n",
    "133199": "\t/**\n\t * Removes highlighting of selected range of sequence.\n\t */\n",
    "133202": "\t/** Set whether or not numbering should be displayed descending */\n",
    "133203": "\t/** Get whether or not the numbering will be displayed descending */\n",
    "133204": "\t/** Set from where the numbering begins */\n",
    "133205": "\t/** Get from where the numbering begins */\n",
    "133215": "\t/**\n\t * Adds residues to the current sequence.\n\t * @param residues a String of residues that are to be\n\t *                    added to the sequence.\n\t */\n",
    "133226": "\t/**\n\t * Makes sure that the range of the map takes into account orientation.\n\t */\n",
    "133228": "\t/**\n\t * gets the height of a \"line\".\n\t *\n\t * @return the height of a line of residues in pixels.\n\t */\n",
    "133236": "\t/**\n\t * Sets the residues of the NeoSeq.\n\t *\n\t * @param residues   a String of residues\n\t * @return the glyph representing the residues.\n\t */\n",
    "133247": "\t/**\n\t * Not implemented yet.\n\t */\n",
    "133248": "\t/**\n\t * Draws the sequence, wrapping into multiple lines.\n\t */\n",
    "133249": "\t/**\n\t * gets the number of residues we can show with the current size.\n\t *\n\t * @return number of residues.\n\t */\n",
    "133254": "\t/**\n\t * Sets a character used to mask residues in aligned sequences\n\t * that match the consensus.  Makes parts of the alignment that\n\t * don't match stand out more.  Set to null to disable this feature.\n\t */\n",
    "133268": "\t/**\n\t * sets the sequence\n\t * with the first residue having the supplied ordinal number.\n\t *\n\t * @param first ordinal of the first residue.\n\t */\n",
    "133283": "\t/**\n\t * Scrolls so that a particular residue is visible.\n\t * If it is already within range, then no scrolling occurs.\n\t * The widget is scrolled just enough to make the residue visible,\n\t * and no more.\n\t *\n\t * @param theResidueIndex points to the residue that must become visible.\n\t */\n",
    "133290": "\t/**\n\t * Scrolls so that the given residue is on the first visible line.\n\t *\n\t * @param value points to a residue that must be in the top visible line.\n\t */\n",
    "133301": "\t/**\n\t *  Draw relies on WrapSequence.drawResidues() to do the work.\n\t *  Tried doing the calculations within this class similar to WrapColors,\n\t *  but font y-positions ended up occasionally being off by a pixel.\n\t *  Relying on WrapSequence (parent of parent) to do the work may be a\n\t *  little twisted, but it has the advantage that any changes to how\n\t *  string positions are calculated for drawing are localized to the same\n\t *  piece of code.\n\t */\n",
    "133308": "\t/**\n\t * The fill property determines how this caret is drawn.\n\t *\n\t * @param f one of {@link #SOLID}, {@link #UNDERLINE}, or {@link #OUTLINE}.\n\t */\n",
    "133321": "\t/**\n\t * Sets the transform's scales and offsets such that the coord_box's space is\n\t * mapped to the pixel_box's space.  For example, to map a whole Scene to a\n\t * view, with no zooming, the coord_box would be the coordinate bounds of\n\t * the Scene, and the pixel_box the size of the NeoCanvas holding the View.\n\t * @return new_trans\n\t */\n",
    "133322": "\t/**\n\t * adds to method in NeoWidget, destroying references to assorted stuff to\n\t * facilitate gc'ing.\n\t */\n",
    "133335": "\t/**\n\t * overriding NeoMap.repack() to pack tiers -- generates a TierEvent.\n\t */\n",
    "133337": "\t/**\n\t * Get the location of the given tier in the map.\n\t * @return 0..n, the location counting top-down,\n\t * or -1 if the given tier is not on the map.\n\t */\n",
    "133338": "\t/**\n\t * Get the tier at the given location, or null.\n\t * @param i the index, counting top-down, beginning with 0.\n\t */\n",
    "133341": "\t/**\n\t * Get all the tiers for the TieredNeoMap.\n\t * @return vector of tiers.\n\t */\n",
    "133342": "\t/**\n\t * gets the label of an aligned sequence.\n\t * @param seq_tag the alignment labeled.\n\t * @return a String containing the label.\n\t */\n",
    "133345": "\t/**\n\t * making sure the tiers always stretch the full length of the map.\n\t */\n",
    "133348": "\t/**\n\t * Given a MapTierGlyph, remove it from ourself.\n\t */\n",
    "133349": "\t/**\n\t * moves a tier to a new position.\n\t *\n\t * @param from index of the tier's current position.\n\t * @param to index of the tier's desired position.\n\t */\n",
    "133351": "\t/**\n\t * moves a tier to a new position,\n\t * both in this map and another.\n\t *\n\t * @param otherMap map with corresponding tiers.\n\t * @param tierLocs an array of two index values.\n\t * tierLocs[0] is the old location.\n\t * tierLocs[1] is the new location.\n\t */\n",
    "133352": "\t/**\n\t * Given another AbstractTieredMap and a tier it contains,\n\t * remove our corresponding tier.\n\t */\n",
    "133356": "\t/**\n\t * returns the index of the residue in the sequence\n\t * at the position <code>(xcoord, ycoord)</code> in the display.\n\t *\n\t * @param xcoord the horizontal offset (column) of the residue\n\t * @param ycoord the vertical offset (row) of the residue\n\t * @return  the integer index of the residue in the sequence\n\t */\n",
    "133363": "\t/**\n\t * Clears the sequence range highlighting.\n\t *\n\t * <p> Note that this is different from clearSelected(),\n\t * which is inherited from NeoContainerWidget\n\t * and deselects all selected annotation glyphs.\n\t *\n\t * @see com.affymetrix.genoviz.widget.NeoContainerWidget#clearSelected\n\t */\n",
    "133366": "\t/**\n\t * positions the given component of this Widget.\n\t * Axis can be top or bottom.\n\t * Consensus can be top or bottom.\n\t * Label and offset scroller can be left or right.\n\t *\n\t * @param component one of AXIS_SCROLLER, OFFSET_SCROLLER,\n\t *                         CONSENSUS, or LABELS.\n\t * @param placement one of PLACEMENT_TOP, PLACEMENT_BOTTOM,\n\t *                         PLACEMENT_LEFT, or PLACEMENT_RIGHT.\n\t */\n",
    "133381": "\t/**\n\t * Add a factory made glyph to the map.\n\t * Note that this assumes adding based on sequence!\n\t * So that it will <em>include</em> the end.\n\t * Thus if start = 0 and end = 1,\n\t * we are really creating an annotation\n\t * that starts at 0 and is 2 map units long.\n\t */\n",
    "133382": "\t/**\n\t * get the name of the display font of the sequence residues.\n\t *\n\t * @return the String name of the font to use\n\t */\n",
    "133384": "\t/**\n\t * Assuming an already sorted vector of Comparable objects,\n\t * can add another Comparable by finding the vector position\n\t * where it sorts to, and inserting it\n\t *\n\t * Should move this method and QuickSorter, InsertionSort classes\n\t *  to a Sorter util class\n\t */\n",
    "133387": "\t/**\n\t * set the display font of the sequence residues.  Proportionate or\n\t * variable width fonts can both be specified.\n\t *\n\t * @param name the String name of the font to use\n\t */\n",
    "133388": "\t/**\n\t * Ignores requests to configure the layout.\n\t * This method should be overridden\n\t * by subclasses supporting layout configuration.\n\t *\n\t * @see com.affymetrix.genoviz.widget.NeoAbstractWidget#configureLayout\n\t */\n",
    "133390": "\t/**\n\t * placement is not supported.\n\t * This method should be overridden\n\t * by subclasses supporting placement options.\n\t *\n\t * @return PLACEMENT_NONE\n\t * @see com.affymetrix.genoviz.widget.NeoAbstractWidget#getPlacement\n\t */\n",
    "133392": "\t/**\n\t * get the size (in points) of the font used to display sequence residues.\n\t *\n\t * @return the integer point size of the font\n\t */\n",
    "133393": "\t/**\n\t *  Sets the bounds.\n\t *  Unlike {@link #setBounds(int, int, int)}, this does NOT add\n\t *  1 to the width.\n\t *\n\t */\n",
    "133396": "\t/**\n\t *  Adds 1 to width when calculating coord box.\n\t *  For example setting X bounds to 0, 74, actually sets coord box to\n\t *  cbox.x = 0, cbox.width = 75\n\t */\n",
    "133397": "\t/**\n\t * set the font size of the characters used to display the sequence residues.\n\t *\n\t * @param size the integer point size of the font\n\t */\n",
    "133398": "\t/**\n\t * gets all the items in the widget that are visible.\n\t * <p><em><strong>We will change this name soon.</strong></em>\n\t * We should make this <code>getDisplayedItems()</code> instead,\n\t * and reserve \"visible\" for <code>getVisibleItem(x, y)</code>\n\t * which makes sure the item is not only drawn/displayed,\n\t * but also visible (unobscured by other items).\n\t *\n\t * @return a list of the items.\n\t */\n",
    "133399": "\t/**\n\t * Simply calls parent.addChild(child), so we don't really need this method.\n\t * @return null\n\t */\n",
    "133400": "\t/**\n\t * This implements the selection method portion of NeoMap.\n\t * That portion of NeoMap might move to NeoAbstractWidget\n\t * or to a new interface of its own.\n\t * @see NeoMap\n\t */\n",
    "133402": "\t/**\n\t * indicate the minimum grouping size with respect to line breaking.\n\t * Lines will be wrapped such that the number of residues on a line\n\t * is a multiple of <code>groupWidth</code>.\n\t *\n\t * @param i the integer minimum grouping size\n\t */\n",
    "133406": "\t/**\n\t * retrieves the minimum grouping size with respect to line breaking.\n\t *\n\t * @see #setResidueMultipleConstraint\n\t * @return the integer grouping size\n\t */\n",
    "133408": "\t/**\n\t * Updates the visual appearance of the widget.  It is important to call\n\t * this method to view any externally introduced changes in widget\n\t * appearance since last call to updateWidget()\n\t */\n",
    "133409": "\t/**\n\t * setRangeScroller() and setOffsetScroller() should probably be combined\n\t * with setZoomer() to have a more general\n\t * setAdjustable(int id, Adjustable adj) method.\n\t */\n",
    "133410": "\t/**\n\t * set the width of the striping.\n\t *\n\t * @param i the integer width in pixels of the stripe\n\t */\n",
    "133411": "\t/**\n\t * Updates the visual appearance of the widget\n\t *    if (full_update) then force redrawing of entire widget\n\t *  Once optimizations are working smoothly, this should never be needed.\n\t *    For most visual updates, updateWidget() with no arguments should\n\t *  have the same effect but will be more efficient\n\t */\n",
    "133415": "\t/**\n\t * returns the current width of striping.\n\t *\n\t * @return the integer width of striping.\n\t */\n",
    "133422": "\t/**\n\t * returns the current orientation of the striping.\n\t *\n\t * @return the constant orientation identifier,\n\t * either NO_STRIPES, VERTICAL_STRIPES, or HORIZONTAL_STRIPES.\n\t */\n",
    "133426": "\t/** This is the only place <code>pixel_*</code> should change. */\n",
    "133431": "\t/** Creates a new RootGlyph. Called from ClearWidget. */\n",
    "133439": "\t/**\n\t * selects a label.\n\t *\n\t * @param offset the label is at.\n\t */\n",
    "133442": "\t/**\n\t * sets the number of pixels between each letter displayed.\n\t *\n\t * @param size the integer number of pixels between residues\n\t */\n",
    "133449": "\t/**\n\t *  not allowing mixing of optimizations yet\n\t */\n",
    "133450": "\t/**\n\t * sets the colors to use for striping.\n\t * Two or more colors can be specified to alternate among.\n\t *\n\t * @param colors an array of Colors.  default is\n\t *  { Color.white, Color.lightGray }\n\t */\n",
    "133456": "\t/**\n\t * Sets the Color of the numbers and residues in the NeoSeq.\n\t * @param color the Color to be used for the residues\n\t *                 and the numbers.\n\t */\n",
    "133460": "\t/**\n\t * Gets the color of the residues and the numbers.\n\t * @return   the Color of the residues and the numbers.\n\t */\n",
    "133471": "\t/**\n\t * Indicates whether or not this map is optimized for drawing transient glyphs.\n\t *\n\t * @see com.affymetrix.genoviz.glyph.TransientGlyph\n\t */\n",
    "133475": "\t/**\n\t * adds an object to the selection.\n\t * @see com.affymetrix.genoviz.widget.NeoAbstractWidget#select\n\t */\n",
    "133490": "\t/**\n\t * Scale constraints are currently only considered during\n\t *    zooming with zoomer[] adjustables\n\t */\n",
    "133518": "\t/**\n\t * returns a <code>boolean</code> indicating whether or not alignments\n\t * are automatically sorted.\n\t *\n\t * @return <code>true</code> if alignments are automatically sorted.\n\t */\n",
    "133519": "\t/**\n\t *  returns true if a range of residues is currently selected.\n\t */\n",
    "133522": "\t/**\n\t * Sets whether or not alignments are to be sorted automatically.\n\t *\n\t * @param sort <code>true</code> indicates that alignments\n\t *   should be automatically sorted.\n\t */\n",
    "133527": "\t/**\n\t *  Pack (or repack) the aligned sequences\n\t */\n",
    "133529": "\t/**\n\t * Add a glyph to the map.\n\t * @param gl to add.\n\t *\n\t * <p> <strong>Warning</strong>\n\t * -- Before adding a glyph to a map with this method\n\t * you <em>must</em> remove it from the map it previously belonged to.\n\t * If this is not what you want, you should duplicate the glyph\n\t * and add the duplicate to the new map, rather than the original.\n\t *\n\t * <p> This restriction exists because glyphs can only exist on one map,\n\t *     except where additional maps are derived from a root map via\n\t *     setRoot() or constructor(root_map) (in which case putting a glyph\n\t *     on one map automatically propogates to other maps derived from the\n\t *     same root, so addItem(tag) is not needed for such cases.)\n\t */\n",
    "133530": "\t/**\n\t * this stub should be overridden by subclasses\n\t * that allow sub selection.\n\t */\n",
    "133531": "\t/**\n\t * this stub should be overridden by subclasses\n\t * that allow sub selection.\n\t */\n",
    "133545": "\t/**\n\t *  using isFullyWithinView() and isOnTop() to find out if\n\t *  a glyph is unobscured on the screen\n\t */\n",
    "133550": "\t/**\n\t * Configure map by setting given options.\n\t * @param options   An option String of the form \"-option1 value1\n\t *    -option2 value2...\"\n\t */\n",
    "133555": "\t/**\n\t * Configure map by setting given options.\n\t * @param options   An option Hashtable of the form<BR>\n\t * {\"option1\" ==&gt; \"value1\",<BR>\n\t *  \"option2\" ==&gt; \"value2\", ...}<BR>\n\t */\n",
    "133557": "\t/**\n\t * Setting boolean for whether to restrict value\n\t * in zoom(id, value) calls to be within range\n\t * defined by calls to setMinZoom(id, min) and setMaxZoom(id, max).\n\t * This is meant as temporary workaround for bugs in\n\t * NeoSeq(), where these checks cause apps to hang\n\t */\n",
    "133559": "\t/**\n\t * returns the currently set font used for display residue letters.\n\t *\n\t * @return the <code>Font</code> currently set.\n\t * @see #setResidueFont\n\t */\n",
    "133560": "\t/**\n\t * Getting boolean for whether to restrict value\n\t * in zoom(id, value) calls to be within range\n\t * defined by calls to setMinZoom(id, min) and setMaxZoom(id, max).\n\t */\n",
    "133562": "\t/**\n\t * Setting boolean for whether to restrict value in scroll(id, value)\n\t * calls to stay within bounds of the map.\n\t * This is meant as temporary workaround for bugs in\n\t * NeoSeq(), where these checks cause problems\n\t */\n",
    "133563": "\t/**\n\t * Set max zoom to exact width of font.\n\t */\n",
    "133564": "\t/**\n\t *  Zoom affects alignments in both dimensions\n\t *  labels are only affected by zoom along Y\n\t *  consensus (and axis) are only affected by zoom along X\n\t */\n",
    "133565": "\t/**\n\t * Setting boolean for whether to restrict value in scroll(id, value)\n\t * calls to stay within bounds of the map.\n\t */\n",
    "133567": "\t/**\n\t * Listens for NeoDragEvents generated by a {@link DragMonitor}.\n\t * The DragMonitor, in turn, is listening to the canvas for mouse events\n\t * and generating appropriately timed NeoDragEvents.\n\t * This is used to implement drag scrolling.\n\t * @see #enableDragScrolling(boolean)\n\t */\n",
    "133588": "\t/**\n\t * Turns display options on or off.\n\t *\n\t * @param type is one of\n\t *      NUCLEOTIDES, COMPLEMENT, FRAME_ONE, FRAME_TWO, FRAME_THREE,\n\t *      FRAME_NEG_ONE, FRAME_NEG_TWO, FRAME_NEG_THREE.\n\t * @param show true turns the option on. false turns it off.\n\t */\n",
    "133592": "\t/**\n\t * lets the shadow know that the range being monitored is an integer range,\n\t * as opposed to a real range.\n\t * This is helpful for some ranges that operate on the borders of respectability\n\t * like the NeoSeq.\n\t */\n",
    "133595": "\t/**\n\t * Adjusts the shadow to match the range in the given event.\n\t *\n\t * @param evt the range change\n\t */\n",
    "133597": "\t/**\n\t * Setting the shadow appropriately to display the coordinates for reverse strand\n\t *\n\t * @param residueCount the size of the sequence displayed\n\t */\n",
    "133603": "\t/**\n\t * notifies all the listeners that a widget has been cleared.\n\t */\n",
    "133610": "\t/**\n\t * creates a copy of a VisibleRange.\n\t * @return a copy of this object,\n\t * but with a new (empty) set of listeners.\n\t */\n",
    "133612": "\t/**\n\t * sets the visible range to include the integral interval around a point.\n\t * This can be useful for selecting the part of a map around a single residue in a sequence.\n\t * It also automatically notifies all listeners (if changed).\n\t *\n\t * @param thePlace a number in the interval.\n\t * i.e. the interval <code>(n, n+1)</code> is selected where <code>n &gt;= thePlace &lt;= n+1</code>.\n\t */\n",
    "133614": "\t/**\n\t * gets the state of a display option.\n\t *\n\t * @param type is one of\n\t *      NUCLEOTIDES, COMPLEMENT, FRAME_ONE, FRAME_TWO, FRAME_THREE,\n\t *      FRAME_NEG_ONE, FRAME_NEG_TWO, FRAME_NEG_THREE.\n\t * @return true if the option is turned on. false if it is off.\n\t */\n",
    "133615": "\t/**\n\t * Notify all the listeners if this has changed since the last notice,\n\t * or if the boolean argument is true.\n\t * Make sure that no listeners call this method,\n\t * or else you'll end up with an infinite loop, and that would suck.\n\t * @param checkIfChanged if this is false, there is no check\n\t * to see if there has been a notification since the last change to the value.\n\t */\n",
    "133639": "\t/** Set whether or not the numbering should be displayed descending. */\n",
    "133645": "\t/**\n\t * Free-up memory by removing references to Glyphs.\n\t * Also calls this method on its own left- and\n\t * right-hand neighbors, leading to a cascade of\n\t * child-removal.  This clears-up a lot of the\n\t * loitering objects in AnnotationStation. Although\n\t * there may be possible instances when one wouldn't\n\t * want to call removeChildren on the left- and right-hand\n\t * neighbors, I can't think of any.\n\t */\n",
    "133663": "\t/** Get whether or not the numbering will be displayed descending. */\n",
    "133678": "\t/**\n\t * Alignments are affected by setRect behavior along both X and Y dimensions.\n\t * Labels are only affected along Y dimension.\n\t * Consensus and axis are only affected along X dimension.\n\t * @param id should be {@link #X} or {@link #Y}.\n\t * @param behavior {@link #FITWIDGET} or {@link #FITWIDGET};\n\t * @see NeoWidget\n\t */\n",
    "133687": "\t/**\n\t * Restore a hidden glyph to its previous state.\n\t * If the <code>state=={@link #HIDDEN}</code>,\n\t * restore the glyph to the state it was in before it was hidden.\n\t * Otherwise, do nothing.\n\t */\n",
    "133696": "\t/** Sets the color used to draw the outline.\n\t *  @param color   A color, or null if no outline is desired.\n\t */\n",
    "133697": "\t/**\n\t * Returns the color used to draw the outline,\n\t * or null if there is no outline.\n\t */\n",
    "133707": "\t/**\n\t * notify all the listeners that an event has occurred.\n\t */\n",
    "133712": "\t/**\n\t * Set the color used to draw the label.\n\t * @see #setLabel(String)\n\t */\n",
    "133714": "\t/**\n\t * Returns the color used to draw the label.\n\t *\n\t * @see #setLabel(String)\n\t */\n",
    "133715": "\t/** Set whether or not the tier should be hit by the mouse. */\n",
    "133719": "\t/**\n\t * Set whether or not the tier wants to allow itself to be hidden.\n\t * The state of this flag has no effect\n\t * on whether or not setState(HIDDEN) will work.\n\t */\n",
    "133721": "\t/**\n\t * adjusts the bounds of the quality and sequence displayed.\n\t * allows clipping of the displayed sequence.\n\t * range parameters are in the coordinate system of the sequence,\n\t * i.e. (10,20) is the range between position 10 and 20 in the sequence,\n\t * inclusive.\n\t *\n\t * @param start the integer indicating the starting base position\n\t * @param end the integer indicating the final base position.\n\t */\n",
    "133722": "\t/**\n\t * Get whether or not the tier wants to allow itself to be hidden.\n\t * The state of this flag has no effect on whether setState(HIDDEN)\n\t * will work or not.\n\t */\n",
    "133725": "\t/** Set whether or not the tier's label should be displayed. */\n",
    "133727": "\t/** Get whether or not the tier's label should be displayed. */\n",
    "133729": "\t/**\n\t * for use in cleaning up references to facilitate gc'ing.\n\t */\n",
    "133731": "\t/** Add a TierStateChangeListener to the audience. */\n",
    "133733": "\t/**\n\t *  Method for determining if a Glyph is fully visible.\n\t *\n\t *  @param gl The glyph that is either fully visible or not.\n\t *  @return whether or not the glyph is fully visible.\n\t */\n",
    "133734": "\t/** Remove a TierStateChangeListener from the audience. */\n",
    "133736": "\t/** Tell all listeners of a TierStateChangeEvent. */\n",
    "133738": "\t/**\n\t * Returns a string representing the state of this object.\n\t * @see #setState\n\t */\n",
    "133742": "\t/** Add the given tier to the map, building top-down. */\n",
    "133743": "\t/**\n\t * adjusts the display\n\t * so that the base at <code>baseNum</code> is centered.\n\t *\n\t * @param baseNum the integer index into the sequence of the base\n\t *                to center the display.\n\t */\n",
    "133744": "\t/**\n\t * Repacks the tiers relative to each other.\n\t * @param full_repack determines if a complete repack of all tiers is forced\n\t */\n",
    "133745": "\t/**\n\t *  Method for determining if a Glyph is at least\n\t *  partially visible.\n\t *\n\t *  @param gl The glyph that is either partially visible or not.\n\t *  @return whether or not the glyph is at least partially visible.\n\t */\n",
    "133746": "\t/**\n\t * Add the given tier to the map.\n\t * @param mtg the MapTierGlyph being added.\n\t * @param ontop determines whether tier goes above or below existing tiers\n\t */\n",
    "133763": "\t/**\n\t *  Method that gets called when the NeoSeq is added as an\n\t *  Obsorver to an Observable.\n\t *\n\t *  @see java.util.Observable\n\t *  @see java.util.Observer\n\t */\n",
    "133764": "\t/**\n\t * set the color to use to highlight selected areas of the trace.\n\t */\n",
    "133769": "\t/**\n\t * selects a region of bases.\n\t *\n\t * @param start the integer index of the starting base of the sequence\n\t * @param end   the integer index of the final base of the sequence\n\t */\n",
    "133773": "\t/**\n\t * highlights a region of the quality display.\n\t *\n\t * @param start the integer starting base position\n\t * @param end   the integer ending base position\n\t *\n\t */\n",
    "133779": "\t/**\n\t * highlights a region of bases.\n\t *\n\t * @param start the integer index of the starting base of the sequence\n\t * @param end   the integer index of the final base of the sequence\n\t */\n",
    "133791": "\t/**\n\t * Return the JScrollBar responsible for scrolling in the NeoSeqI.\n\t */\n",
    "133797": "\t/**\n\t * Clears the bases selected in calls to selectBases.\n\t *\n\t * @see #selectBases\n\t */\n",
    "133802": "\t/**\n\t * highlights a portion of this glyph.\n\t */\n",
    "133803": "\t/**\n\t * highlights all the bases between start and end, inclusive.\n\t * @param start index of first base to highlight.\n\t * @param end index of last base to highlight.\n\t */\n",
    "133804": "\t/**\n\t * Set the adjustable responsible for scrolling in the NeoSeqI.  If\n\t * the given Adjustable isn't an instance of Component, the call\n\t * will be ignored.\n\t */\n",
    "133824": "\t/**\n\t * enables/disbles scrolling of the NeoSeq when\n\t * the user drags off the top or bottom of the NeoSeq.\n\t *\n\t * @param enable  whether drag scrolling should be on or off.\n\t */\n",
    "133845": "\t/**\n\t * Set an <em>INTERNAL</em> horizontal zoomer.\n\t * If the given Adjustable is not an instance of Component,\n\t * the call will be ignored.\n\t */\n",
    "133847": "\t/**\n\t * highlights the first n bases called.\n\t * This can be used to show that some base calls should be trimmed\n\t * from the 5' end due to low quality.\n\t *\n\t * @param theBasesTrimmed how many\n\t */\n",
    "133852": "\t/**\n\t * highlights last n bases called.\n\t * This can be used to show that some base calls should be trimmed\n\t * from the 3' end due to low quality.\n\t *\n\t * @param theBasesTrimmed how many\n\t */\n",
    "133854": "\t/**\n\t * Get the <em>internal</em> horizontal zoomer.\n\t */\n",
    "133858": "\t/**\n\t * trying to refresh the widget when the sequence has changed.\n\t */\n",
    "133862": "\t/**\n\t * Determines whether or not the labels also have arrows\n\t * attached to show direction of sequences they label.\n\t * This will ONLY affect sequences added after this call.\n\t */\n",
    "133865": "\t/**\n\t * reacts to the sequence changing.\n\t */\n",
    "133887": "\t/**\n\t * Determines whether or not the labels also have arrows\n\t * attached to show direction of sequences they label.\n\t */\n",
    "133892": "\t/**\n\t * sets the expansion policy for the widgets in this container.\n\t * It just passes the news on to each contained widget.\n\t *\n\t * @see NeoAbstractWidget#setExpansionBehavior\n\t */\n",
    "133898": "\t/**\n\t * Gets the expansion policy for the first widget in this container.\n\t *\n\t * @see NeoAbstractWidget#getExpansionBehavior\n\t */\n",
    "133909": "\t/** Returns true if slection of individual tiers is allowed */\n",
    "133910": "\t/**\n\t * Set the pixel width allocated to labels.\n\t * If not called, default is 100 pixels\n\t * It is recommended that you set this\n\t * prior to adding any aligned sequences to the NeoAssembler\n\t */\n",
    "133911": "\t/** Sets whether slection of individual tiers is allowed */\n",
    "133947": "\t/**\n\t * Returns the border of the titled border.\n\t */\n",
    "133949": "\t/**\n\t * Returns the title-position of the titled border.\n\t */\n",
    "133952": "\t/**\n\t * Returns the title-justification of the titled border.\n\t */\n",
    "133955": "\t/**\n\t * Returns the title-font of the titled border.\n\t */\n",
    "133957": "\t/**\n\t * Returns the title-color of the titled border.\n\t */\n",
    "133962": "\t/**\n\t * Sets the border of the titled border.\n\t *\n\t * @param border the border\n\t */\n",
    "133963": "\t/**\n\t * Sets the title-position of the titled border.\n\t *\n\t * @param titlePosition the position for the border\n\t */\n",
    "133965": "\t/**\n\t * Sets the title-justification of the titled border.\n\t *\n\t * @param titleJustification the justification for the border\n\t */\n",
    "133968": "\t/**\n\t * Sets the title-font of the titled border.\n\t *\n\t * @param titleFont the font for the border title\n\t */\n",
    "133971": "\t/**\n\t * Sets the title-color of the titled border.\n\t *\n\t * @param titleColor the color for the border title\n\t */\n",
    "133973": "\t/**\n\t * Returns the minimum dimensions this border requires in order to fully\n\t * display the border and title.\n\t *\n\t * @param c the component where this border will be drawn\n\t */\n",
    "133976": "    /**\n     * Handles events from the editor button and from\n     * the dialog's OK button.\n     */\n",
    "133996": "\t/**\n\t * Initializes the slider by setting default properties.\n\t */\n",
    "133997": "\t/**\n\t * Overrides the superclass method to install the UI delegate to draw two\n\t * thumbs.\n\t */\n",
    "134001": "\t/**\n\t * Returns the upper value in the range.\n\t */\n",
    "134002": "\t/**\n\t * Sets the upper value in the range.\n\t */\n",
    "134056": "\t/**\n\t * Run text lines in the specified scripting language.\n\t */\n",
    "134091": "\t/**\n\t * Adjusts the bounds of the trace and sequence displayed.\n\t * Allows clipping of the displayed sequence.\n\t *\n\t * @param start the integer indicating the starting sample position\n\t * @param end  the integer indicating the final sample position.\n\t */\n",
    "134154": "  /** internal utility: either get the value or throw the exception **/\n",
    "134225": "\t/**\n\t * Paints the thumb for the lower value using the specified graphics object.\n\t */\n",
    "134230": "\t/**\n\t * indicates whether to draw arrows.\n\t * even if higher resolution features are also being drawn.\n\t */\n",
    "134233": "\t/**\n\t * Moves the selected thumb in the specified direction by a block increment.\n\t * This method is called when the user presses the Page Up or Down keys.\n\t */\n",
    "134235": "\t/**\n\t * Moves the selected thumb in the specified direction by a unit increment.\n\t * This method is called when the user presses one of the arrow keys.\n\t */\n",
    "134236": "\t/**\n\t *  toggle for whether to always draw unaligned spans.\n\t * (presumably as edges of alignment),\n\t * regardless of whether higher resolution features are also being drawn.\n\t */\n",
    "134256": "\t/**\n\t * Sets the trace, starting at position 0.\n\t *\n\t * @see #setTrace(TraceI, int)\n\t */\n",
    "134264": "\t/**\n\t * Allows for setting the trace starting at a particular coord point,\n\t * which is useful for displaying several NeoTracers together in the\n\t * same widget.\n\t * <p>\n\t * For backward compatibility,\n\t * the trace may include a set of base calls.\n\t * If so, those calls are removed from the trace\n\t * and added directly to this object.\n\t *\n\t */\n",
    "134282": "\t/**\n\t * sets the text that appears in this glyph.\n\t *\n\t * @param str the text\n\t */\n",
    "134283": "\t/**\n\t * replace the base calls below the axis.\n\t * Before Tao tried to allow multiple sets of base calls,\n\t * There was exactly one set of base calls.\n\t * This method was used to replace those.\n\t * For example, one could replace ABI calls with Phred calls.\n\t *\n\t * @param theCalls an array of new calls.\n\t */\n",
    "134299": "\t/**\n\t * places this label\n\t * relative to the labeled glyph.\n\t *\n\t * @param placement LEFT, RIGHT, ABOVE, BELOW, or CENTER\n\t */\n",
    "134302": "\t/**\n\t * gets this label's placement\n\t * relative to the labeled glyph.\n\t *\n\t * @return LEFT, RIGHT, ABOVE, BELOW, or CENTER\n\t */\n",
    "134303": "\t/**\n\t * replace the base calls below the axis.\n\t * Before Tao tried to allow multiple sets of base calls,\n\t * there was no second parameter to this method.\n\t * There was exactly one set of base calls.\n\t * This method was used to replace those.\n\t * For example, one could replace ABI calls with Phred calls.\n\t *\n\t * @param theCalls an array of new calls.\n\t * @param bases_index an index into all the sets of base calls.\n\t */\n",
    "134309": "\t/**\n\t * associates this label with a labeled glyph.\n\t * Only one glyph can be labeled at a time.\n\t * Multiple labels can label the same glyph.\n\t *\n\t * @param lg the labeled glyph\n\t */\n",
    "134332": "\t/**\n\t * clears all the BaseCalls's added with addBaseCalls.\n\t */\n",
    "134340": "  /** Sets the fill color. Use null if you do not want the rectangle filled. \n   *  Default is null.\n   */\n",
    "134341": "  /** Gets the fill color. Default is null. \n   *  @return a color or null.\n   */\n",
    "134342": "\t/**\n\t * expands the AlignmentGlyph if child extends the alignment.\n\t */\n",
    "134345": "\t/** Redo colors with a default map. */\n",
    "134347": "\t/**\n\t * selects which set of base calls is the active one.\n\t */\n",
    "134361": "\t/**\n\t *  overriding removeChild so that LineStretchContainer shrinks to fit\n\t *  remaining children\n\t */\n",
    "134371": "\t/**\n\t * Set whether the rectangle should be filled as well as outlined.\n\t * Default is false.  Fill color is set with {@link #setBackgroundColor(Color)}.\n\t */\n",
    "134396": "    /**\n     * Draw character of the nucleotide.\n     * @param   g               Graphic object for drawing.\n     * @param   pixelsPerBase   Perpixel size based upon zooming level.\n     * @param   str             Visible nucleotides string.\n     * @param   pixelStart      Horizontal starting position from where string should be drawn.\n     * @param   baseline        Vertical starting position where string should be drawn.\n     * @see     com.affymetrix.genoviz.util.GeneralUtils\n     */\n",
    "134404": "\t/**\n\t *  overriding addChild to force children to center on line\n\t */\n",
    "134435": "\t/** Redo colors with a default map. */\n",
    "134445": "\t/**\n\t * overriding moveRelative to make sure full_rect glyph also gets moved.\n\t * (We shouldn't need to do this for moveAbsolute,\n\t *  since it calls moveRelative.)\n\t */\n",
    "134473": "\t/**\n\t * Sets the stem width of the arrow.\n\t * This also sets arrow head's height & width.\n\t * Stem width is forced to be odd.\n\t * @param theWidth of the arrow's stem in pixelspace\n\t */\n",
    "134478": "\t/**\n\t * Need to override setScene()\n\t * to make sure arrowglyph gets its scene set properly.\n\t */\n",
    "134485": "\t/**\n\t * Sets if the glyph is hitable.\n\t * Most glyphs will probably be hitable,\n\t * and the default value is true.\n\t * Making a glyph not hitable keeps it from being selectable, and from being\n\t * in the NeoMouseEvent.getItems() vector.\n\t */\n",
    "134486": "\t/** Set whether or not the background will be filled-in\n\t *  with solid color.  If false, background is transparent,\n\t *  except if the selection mode is FILL and the glyph is selected.\n\t *  Default is true.\n\t */\n",
    "134491": "\t/**\n\t * sets the fill technique for the glyph\n\t * along the primary axis.\n\t *\n\t * @param theTechnique one of NONE, STRETCHED, or TILED.\n\t */\n",
    "134494": "\t/**\n\t * selects a region in both the trace area and the bases.\n\t *\n\t * @param start the first border, in trace space\n\t * @param end   the second border, in trace space\n\t */\n",
    "134495": "\t/**\n\t * gets the fill technique for the glyph\n\t * along the primary axis.\n\t *\n\t * @return NONE, STRETCHED, or TILED.\n\t */\n",
    "134496": "\t/**\n\t * produces a style.\n\t * If a style already exists with these parameters,\n\t * return a shared reference.\n\t * Otherwise create a new object,\n\t * store it internally,\n\t * and return a reference to it.\n\t */\n",
    "134498": "\t/**\n\t * sets the fill technique for the glyph\n\t * along the secondary axis.\n\t *\n\t * @param theTechnique one of NONE, STRETCHED, or TILED.\n\t */\n",
    "134500": "\t/**\n\t * gets the fill technique for the glyph\n\t * along the secondary axis.\n\t *\n\t * @return NONE, STRETCHED, or TILED.\n\t */\n",
    "134504": "\t/**\n\t * sets the Image to display in the glyph.\n\t *\n\t * @param img the image to display in the glyph.\n\t * @param observer an ImageObserver to oversee image methods.\n\t */\n",
    "134513": "\t/**\n\t * highlights a region in the trace area.\n\t *\n\t * @param start the first border, in trace space\n\t * @param end   the second border, in trace space\n\t */\n",
    "134521": "\t/**\n\t * Sets a width at which glyphs change from drawing as\n\t * RoundRectGlyphs and switch to FillRectGlyphs.  If you\n\t * have many RoundRectGlyphs in your NeoMap, allows for\n\t * reduced computation involved in computing all of those\n\t * rounded corners.\n\t * Default value is 0.\n\t */\n",
    "134526": "\t/**\n\t *  Note that this assumes adding based on <em>sequence</em>\n\t *  so that it will <em>include</em> the end \"--\".\n\t *  Thus, if x = 0, width = 2,\n\t *  really creating a sequence annotation\n\t *  with beg = 0, end = 1\n\t */\n",
    "134536": "\t/**\n\t * highlights a contiguous set of bases.\n\t *\n\t * @param start the first border, in trace coords\n\t * @param end   the second border, in trace coords\n\t */\n",
    "134541": "\t/**\n\t * calculates the pixel box\n\t * and delegates the rest to the super class.\n\t *\n\t * @param view into the scene of which this is the root glyph\n\t */\n",
    "134547": "\t/** redo both background and foreground color arrays. */\n",
    "134548": "\t/**\n\t * Defines a set of points to graph.\n\t * The parameters are two parallel arrays of x and y coordinates.\n\t * So there are <var>n</var> points,\n\t * each of which has coordinates (xcoords[<var>n</var>], ycoords[<var>n</var>]).\n\t * @param xcoords the x coordinates in scene space.\n\t * @param ycoords the y coordinates in scene space.\n\t */\n",
    "134555": "\t/**\n\t * redo colors with a default map.\n\t * This base class just returns!\n\t * Subclasses should call {@link #redoColors(int[])}.\n\t */\n",
    "134582": "\t/**\n\t * sets the font for displaying residues\n\t * and notes the height &amp; width\n\t * of a \"typical\" (upper case) character.\n\t *\n\t * @param f the font to use for residues.\n\t */\n",
    "134587": "\t/**\n\t * Sets the label format.\n\t * Format {@link #ABBREV} will replace trailing \"000\" with a \"k\"\n\t * and trailing \"000000\" with an \"M\", etc. for \"G\", \"T\".\n\t * Format {@link #COMMA} will put commas in the numbers,\n\t * like \"1,234,250\".\n\t *\n\t * @param theFormat {@link #FULL} or {@link #ABBREV} or {@link #COMMA}.\n\t */\n",
    "134593": "\t/**\n\t * gets a base call from the active set of base calls.\n\t * For backward compatibility,\n\t * if there are no active base calls,\n\t * get it from the trace.\n\t *\n\t * @param theBaseIndex indicates which one.\n\t * @return the indicated base call.\n\t */\n",
    "134616": "\t/**\n\t * Centers the center_line within this axis' coordbox.\n\t */\n",
    "134620": "\t/**\n\t * Selects a region in the widget.\n\t *\n\t * @param basenum_start the first base selected\n\t * @param basenum_end   the last base selected\n\t */\n",
    "134644": "\t/**\n\t * This turns around and calls setCoords.\n\t */\n",
    "134655": "\t/**\n\t * Exports a Sequence to fasta format.\n\t *\n\t * @param pw where the fasta format data are written.\n\t * @param theSequence to be exported.\n\t */\n",
    "134657": "\t/**\n\t * loads the first sequence in the PHD file into a ReadConfidence.\n\t *\n\t * @param theInput from whence the data come.\n\t * @return a {@link ReadConfidence}.\n\t */\n",
    "134658": "\t/**\n\t * parses a single line\n\t * building a BaseConfidence.\n\t */\n",
    "134677": "\t/**\n\t * read an int from a specified stream.\n\t *\n\t * @param in stream to read from.\n\t * @param msg unused.\n\t */\n",
    "134678": "\t/**\n\t * read an int from a specified stream at a specified offset.\n\t *\n\t * @param in stream from which to read.\n\t * @param theOffset in the stream.\n\t */\n",
    "134681": "\t/**\n\t * Gets the color used for the background\n\t * in the trimmed regions of the trace.\n\t */\n",
    "134682": "\t/**\n\t * verifies that the file is an ABI format file.\n\t * Such a file starts with a signature of the characters \"ABIF\".\n\t * On a Macintosh there may be a 128 byte header before the signature.\n\t * This checks for the signature at byte 0 and (if needed) at byte 128.\n\t * @return true iff the correct signature is found.\n\t */\n",
    "134690": "\t/**\n\t * Specify the background color for the trimmed portion of the trace.\n\t *\n\t * @param  col the Color to be used for the background in the trimmed\n\t *  portion of the trace.\n\t */\n",
    "134698": "\t/**\n\t * imports the data from a stream of bytes.\n\t * This is defined as returning an Object\n\t * to conform to the ContentParser interface.\n\t * However, it actually returns a {@link Trace}.\n\t * To use it as such\n\t * you will need to cast the returned Object back to a Trace.\n\t *\n\t * @param theInput from whence the data come.\n\t * @return a representation of the trace.\n\t */\n",
    "134701": "\t/**\n\t * Highlights the left (5') end of the trace.\n\t *\n\t * @param left_trim_end the integer (in trace coordinates, not bases)\n\t * specifying where to stop trimming the left end of the trace\n\t */\n",
    "134705": "\t\t/**\n\t\t * this state is a tab (left, right or botton)\n\t\t * @return true if this state is a tab, false for hidden or\n\t\t * windowed\n\t\t */\n",
    "134708": "\t/**\n\t * get the name to display to the user\n\t * @return the name to display to the user (on the tab)\n\t */\n",
    "134712": "\t/**\n\t * if this tab should be the tab selected when IGB starts\n\t * @return true if this tab panel should get initial\n\t * selection/focus, false otherwise\n\t */\n",
    "134713": "\t/**\n\t * get the position of the tab in the tray\n\t * @return the tab position\n\t */\n",
    "134714": "\t/**\n\t * get the default / initial state of this tab panel\n\t * @return the default state of this tab\n\t */\n",
    "134715": "\t/**\n\t * Highlights the right (3') end of the trace.\n\t *\n\t * @param right_trim_start the integer (in trace coordinates, not bases)\n\t * specifying where to start trimming the right end of the trace\n\t */\n",
    "134716": "\t/**\n\t * get the main Frame for this panel (only applies when\n\t * a separate window - tab state WINDOW)\n\t * @return the JFrame of this tab panel\n\t */\n",
    "134717": "\t/**\n\t * Set the main Frame for this panel.\n\t * (only applies when a separate window - tab state WINDOW).\n\t * @param frame the JFrame of this tab panel.\n\t */\n",
    "134721": "\t/** Returns the icon stored in the jar file.\n\t *  It is expected to be at com.affymetrix.igb.igb.gif.\n\t *  @return null if the image file is not found or can't be opened.\n\t */\n",
    "134722": "\t/**\n\t * specify if this is an embedded tab (included in the IGB distribution).\n\t * DO NOT override this value, unless you are creating a tab that\n\t * will be included in the real IGB distribution. If you are not\n\t * sure, then leave as is (false).\n\t * @return true if this is an embedded tab panel, false otherwise\n\t */\n",
    "134723": "\t/**\n\t * there are some tabs that, when they are moved to a separate popup\n\t * window, they are too small. For those tabs, we handle them specially,\n\t * so that the size is OK.\n\t * @return if this tab needs to have the minimum size checked\n\t */\n",
    "134736": "\t/**\n\t * sets the color for displaying the label for each aligned sequence.\n\t *\n\t * @param col  the label <code>Color</code>\n\t * @see #getLabelColor\n\t */\n",
    "134743": "\t/**\n\t * get the OSGi cache directory\n\t * @return the OSGi cache directory\n\t */\n",
    "134749": "\t/**\n\t * clear the OSGi cache\n\t */\n",
    "134752": "\t/**\n\t * delete the specified directory, and all its contents\n\t * @param path the path of the directory to delete\n\t * @return true if and only if the file or directory is successfully deleted; false otherwise\n\t */\n",
    "134777": "\t/**\n\t * Setting residue font color sets font color strategy\n\t * @param col\n\t */\n",
    "134797": "\t/**\n\t * Returns the orientation of the trace\n\t * relative to how it was originally loaded into NeoTracer.\n\t *\n\t * @see #setDirection\n\t */\n",
    "134821": "    /**\n     * Close this index and release any associated resources.\n     */\n",
    "134824": "    /**\n     * Gets the number of bins in the given level.\n     * @param levelNumber Level number.  0-based.\n     * @return The size (number of possible bins) of the given level.\n     */\n",
    "134827": "    /**\n     * Gets the level associated with the given bin number.\n     * @param bin The bin  for which to determine the level.\n     * @return the level associated with the given bin number.\n     */\n",
    "134836": "    /**\n     * Gets the first locus that this bin can index into.\n     * @param bin The bin to test.\n     * @return The last position that the given bin can represent.\n     */\n",
    "134838": "    /**\n     * Gets the last locus that this bin can index into.\n     * @param bin The bin to test.\n     * @return The last position that the given bin can represent.\n     */\n",
    "134840": "\t/**\n\t * allows another object to listen for NeoRangeEvents\n\t * generated by implementers.\n\t *\n\t * @param l the listener.\n\t */\n",
    "134849": "    /**\n     * Returns count of records unassociated with any reference. Call before the index file is closed\n     *\n     * @return meta data at the end of the bam index that indicates count of records holding no coordinates\n     * or null if no meta data (old index format)\n     */\n",
    "134851": "\t/**\n\t * allows another object to stop listening for NeoRangeEvents\n\t * generated by implementers.\n\t *\n\t * @param l the listener.\n\t */\n",
    "134853": "\t/**\n\t * Whether or not changes to the trackOptionsTable should automatically be\n\t * applied to the view.\n\t */\n",
    "134856": "    /**\n     * The maximum possible bin number for this reference sequence.\n     * This is based on the maximum coordinate position of the reference\n     * which is based on the size of the reference\n     */\n",
    "134858": "    /**\n     * Gets the possible number of bins for a given reference sequence.\n     * @return How many bins could possibly be used according to this indexing scheme to index a single contig.\n     */\n",
    "134883": "\t/** Get the Adjustable responsible for horizontal scrolling. */\n",
    "134893": "\t/**\n\t * Set the scroller responsible for horizontal scrolling.\n\t * If the given Adjustable is not an instance of Component,\n\t * the call will be ignored.\n\t */\n",
    "134903": "\t/** Get the Adjustable responsible for vertical scrolling. */\n",
    "134913": "\t/**\n\t * Set the scroller responsible for vertical scrolling.\n\t * If the given Adjustable is not an instance of Component,\n\t * the call will be ignored.\n\t */\n",
    "134934": "\t/**\n\t * Add the URL/Directory and server name to the preferences.\n\t *\n\t * @param url\n\t * @param type\n\t * @param name\n\t */\n",
    "134949": "\t/**\n\t * Re-populates the table with the shortcut data.\n\t */\n",
    "134951": "\t/**\n\t * Should fix the problems associated with updating entire table\n\t * at every preference change.\n\t */\n",
    "135035": "\t/** Used to compute the hashCode and in the equals() method. */\n",
    "135040": "\t/**\n\t * Make the maps big enough to allow scrolling off the side.\n\t */\n",
    "135061": "\t/** Sets the regular expression that must be matched.\n\t *  The special value <b>null</b> is also allowed, and matches every String.\n\t *  If the Regex does not begin with \"(?i)\", then this will be pre-pended\n\t *  automatically to generate a case-insensitive pattern.  If you want a\n\t *  case-sensitive pattern, start your regex with \"(?-i)\" and this will\n\t *  cancel-out the effect of the \"(?i)\" flag.\n\t */\n",
    "135062": "\t/** Return the compiled form of the regular expression. */\n",
    "135064": "\t/** Returns the URL (or URL pattern) associated with this WebLink.\n\t *  If the URL pattern contains any \"$$\" characters, those should be\n\t *  replaced with URL-Encoded annotation IDs to get the final URL.\n\t *  Better to use {@link #getURLForSym(SeqSymmetry)}.\n\t */\n",
    "135070": "\t/**\n\t * Get the <em>internal</em> Adjustable responsible for scrolling.\n\t */\n",
    "135080": "\t/**\n\t * Make an <em>internal</em>\n\t * adjustable responsible for horizontal scrolling.\n\t * The given Adjustable will be added to this NeoTracer.\n\t * The caller should not add it elsewhere in the user interface.\n\t * If the given Adjustable isn't an instance of Component,\n\t * the call will be ignored.\n\t * @param scroller\n\t */\n",
    "135089": "\t/**\n\t * Set the tab pane to the given index.\n\t */\n",
    "135090": "\t/**\n\t * Adds the given component as a panel to the tab pane of preference\n\t * editors.\n\t *\n\t * @param pec An implementation of PrefEditorComponent that must also be an\n\t * instance of java.awt.Component.\n\t * @return the index of the added tab in the tab pane.\n\t */\n",
    "135093": "\t/**\n\t * Get the <em>internal</em> Adjustable responsible for horizontal zooming.\n\t */\n",
    "135110": "\t/**\n\t * Make an <em>internal</em>\n\t * Adjustable responsible for horizontal zooming.\n\t * The given Adjustable will be added to this NeoTracer.\n\t * The caller should not add it elsewhere in the user interface.\n\t * If the given Adjustable is not an instance of Component,\n\t * the call will be ignored.\n\t * @see #setZoomer(int,Adjustable)\n\t */\n",
    "135120": "\t/**\n\t * Get the <em>internal</em> Adjustable responsible for vertical zooming.\n\t */\n",
    "135133": "\t/**\n\t * Make an <em>internal</em>\n\t * Adjustable responsible for vertical zooming.\n\t * The Adjustable will be added to this NeoTracer.\n\t * The caller should not add it elsewhere in the user interface.\n\t * If the given Adjustable is not an instance of Component,\n\t * the call will be ignored.\n\t * @see #setZoomer(int,Adjustable)\n\t */\n",
    "135433": "\t/**\n\t * Changes the maximum depth of the expanded packer.\n\t * This does not call pack() afterwards.\n\t */\n",
    "135454": "\t/** Allows you to set the parameter CHECK_SAME_SEQ_OPTION. */\n",
    "135538": "\t/**\n\t * Returns the reference tier from the main map in AffyLabelledTierMap.\n\t * Equivalent to value returned by getInfo(). Will not be null.\n\t */\n",
    "135541": "\t/**\n\t * Returns the label of the reference tier, or some default string if there\n\t * isn't one.\n\t *\n\t * @return string\n\t */\n",
    "135610": "\t/**\n\t * Establish some context and boundaries for the drag.\n\t * @param theRegion is a list of contiguous tiers affected by the resize.\n\t * @param nevt is the event starting the drag.\n\t */\n",
    "135618": "\t/**\n\t *  Determines whether selecting a tier label of a tier that contains only\n\t *  GraphGlyphs should cause the graphs in that tier to become selected.\n\t */\n",
    "135634": "\t/** Restores multiple hidden tiers and then repacks.\n\t *  @param tier_labels  a List of GlyphI objects for each of which getInfo() returns a TierGlyph.\n\t *  @param full_repack  Whether to do a full repack\n\t *  @param fit_y  Whether to change the zoom to fit all the tiers in the view\n\t *  @see #repackTheTiers(boolean, boolean)\n\t */\n",
    "135639": "\t/** Hides multiple tiers and then repacks.\n\t *  @param tier_labels  a List of GlyphI objects for each of which getInfo() returns a TierGlyph.\n\t *  @param fit_y  Whether to change the zoom to fit all the tiers in the view\n\t */\n",
    "135648": "\t/**\n\t * Collapse or expand tiers.\n\t * @param tier_labels\n\t * @param collapsed - boolean indicating whether to collapse or expand tiers.\n\t */\n",
    "135654": "\t/**\n\t * Pack tiers in order.\n\t *\n\t * If a tier has no children, it won't be considered in packing.\n\t * \n\t * @param full_repack if true, packs the contents of the tiers\n\t *        as well as the tiers with respect to each other.\n\t *        Tiers will always be packed with respect to each other\n\t *        no matter what.\n\t * @param stretch_map reshapes the map to fit all of the tiers.\n\t * @param stretch_includes_nontiers ignored\n\t */\n",
    "135680": "\t/**\n\t *  Sorts all tiers and then calls packTiers() and updateWidget().\n\t */\n",
    "135686": "  /** Creates a TierLabelGlyph for the given TierGlyph.  \n   *  Called by addTier() methods.  Override this to \n   *  add additional settings to the glyph.\n   */\n",
    "135695": "\t/**\n\t * Given a TierGlyph, remove it from ourself.\n\t */\n",
    "135714": "  /** Prints this component.\n   *  @param print_labels whether or not to print the label map along with the map\n   */\n",
    "135716": "  /** Returns the JSplitPane that contains the label map and the tier map.\n   *  This is mostly useful for printing.\n   */\n",
    "135723": "\t/**\n\t * Establish some context and boundaries for the drag.\n\t * @param theRegion is a list of contiguous tiers affected by the resize.\n\t * @param nevt is the event starting the drag.\n\t */\n",
    "135729": "\t/** Removes all elements from the popup, then notifies all {@link TierLabelManager.PopupListener}\n\t *  objects (which may add items to the menu), then displays the popup\n\t *  (if it isn't empty).\n\t */\n",
    "135732": "\t/** Prints this component with dialogue box. */\n",
    "135737": "\t/**\n\t * Sets title for popup.\n\t * Sets feature name as title if available else shows number of selection.\n\t */\n",
    "135739": "\t/**\n\t * Prints this component with choice of dialogue box.\n\t * This is used when called from command prompt\n\t * Date: 5/19/2010\n\t * Author: vikram\n\t */\n",
    "135746": "\t/**\n\t * Sets the data model to the appropriate SeqSymmetry.\n\t * If it is a DerivedSeqSymmetry the original SeqSymmetry is used.\n\t * Otherwise, the given symmetry is used.\n\t */\n",
    "135778": "  /** Not yet implemented. Needs to do a deep copy. */\n",
    "135791": "  /** Checks whether this item's parent, or grandparent, etc. is\n   *  identical to the possible_ancestor. This helps prevent infinite loops\n   *  that could arise during processing recursive <STYLE> invocations.\n   */\n",
    "135813": "  \t/** An efficient method to transform a single span. */\n",
    "136111": "\t/**\n\t * make the glyph a regular (nonfloating) glyph\n\t * @param floater the PixelFloaterGlyph\n\t * @param floatingGlyph the glyph\n\t */\n",
    "136113": "\t/**\n\t *  Sets the maximum depth of glyphs to pack in the tier.\n\t *  @param slotnum  a positive integer or zero; zero implies there is no\n\t *  limit to the depth of packing.\n\t */\n",
    "136114": "\t/**\n\t * Make the viewModeGlyph a joined glyph.\n\t * Note - the viewModeGlyph will leave its tierGlyph pointing to this glyph.\n\t * @param comboGlyph the ComboGlyph\n\t */\n",
    "136117": "\t/**\n\t * Make the glyph a regular (nonjoined) glyph.\n\t * @param comboGlyph the comboGlyph\n\t * @param joinedGlyph the glyph\n\t */\n",
    "136121": "\t/**\n\t * Get the number of slots used the last time packed.\n\t * Note that this should not be greater than the maximum set for a tier.\n\t * @return number of slots used to pack the visible data.\n\t */\n",
    "136126": "\t/**\n\t * Returns a HeatMap that interpolates between colors based on getColor()\n\t * and getBackgroundColor(). The color at the low end of the HeatMap will be\n\t * slightly different from the background color so that it can be\n\t * distinguished from it. This will return a HeatMap even if\n\t * getColorByScore() is false.\n\t */\n",
    "136149": "\t/**\n\t * This turns around and calls setCoords.\n\t */\n",
    "136456": "\t/**\n\t * change the threshold so that the current value becomes summary\n\t * @return new threshhold\n\t */\n",
    "136457": "\t/**\n\t * change the threshold so that the current value becomes detail\n\t * @return new threshhold\n\t */\n",
    "136460": "\t/** Returns the color used to draw the tier background, or null\n\tif there is no background. */\n",
    "136484": "\t/**\n\t * Bind two listeners(detect size and view changed) to current export seq\n\t * view.\n\t *\n\t * @param seqView\n\t */\n",
    "136487": "\t/**\n\t * Initialize height and width Spinner. Support Unit: pixels and Inches\n\t *\n\t * @param unit\n\t */\n",
    "136488": "\t/**\n\t * This number is calculated in {@link #checkVisibleBoundsY}\n\t * directly from y coordinates, and cannot be modified\n\t * (except by calling checkVisibleBoundsY() again).\n\t * @return maximum y coordinate (in graph coordinates) of all points in graph.\n\t */\n",
    "136496": "\t/**\n\t * Reset export file and file path text field to the new path.\n\t *\n\t * @param path\n\t */\n",
    "136499": "\t/**\n\t * Get export file type by passed image format description.\n\t */\n",
    "136504": "\t/**\n\t * Get export filter by passed image format extension.\n\t */\n",
    "136508": "\t/**\n\t * Get image format description by passed image format extension.\n\t */\n",
    "136516": "\t/**\n\t * Test whether the current export path is valid or not. If not, reset\n\t * current export path to previous export path and return false. Also, test\n\t * whether the image size is valid or not.\n\t */\n",
    "136520": "\t/**\n\t * Give the user the choice to overwrite the existing file or not.\n\t */\n",
    "136523": "\t/**\n\t * Creates a new buffered image by component and reset label's icon.\n\t */\n",
    "136528": "\t/**\n\t * A hack to force export to draw title bar\n\t * @param g \n\t */\n",
    "136531": "\t/**\n\t * Reset height Spinner's value when width Spinner changed.\n\t */\n",
    "136536": "\t/**\n\t * Reset width Spinner's value when height Spinner changed.\n\t */\n",
    "136544": "\t/**\n\t * Update width and height spinner's value when unit combo box action\n\t * performed.\n\t *\n\t * Reset width spinner will trigger to reset height spinner.\n\t */\n",
    "136548": "\t/**\n\t * Reset size label text by passed width and height.\n\t *\n\t * @param width\n\t * @param height\n\t */\n",
    "136551": "\t/**\n\t * Update output image resolution value when resolution combo box action\n\t * performed. If selected unit is 'inches', update width and height\n\t * spinner's value(reset width spinner will trigger to reset height\n\t * spinner).\n\t */\n",
    "136586": "    /**\n     * This method allows to get {@link ByteBuffer} object to be used for {@link #read(byte[], int, int)} processing.\n     * It tries to use {@link #singleByteReadBuffer} if possible or wraps given buffer and caches the reference.\n     * <p/>\n     * Returned buffer has correctly defined <code>'limit'</code> and <code>'position'</code> properties.\n     *\n     * @param b   buffer given by client for the reading\n     * @param off offset to use within given buffer as specified by the client\n     * @param len length to use within given buffer as specified by the client\n     * @return {@link ByteBuffer} object to use for buffered reading\n     */\n",
    "136628": "\t/**\n\t * This handles the \"select\" API parameter. The \"select\" parameter can be\n\t * followed by one or more comma separated IDs in the form:\n\t * &select=<id_1>,<id_2>,...,<id_n> Example: \"&select=EPN1,U2AF2,ZNF524\"\n\t * Each ID that exists in IGB's ID to symmetry hash will be selected, even\n\t * if the symmetries lie on different sequences.\n\t *\n\t * @param selectParam The select parameter passed in through the API\n\t */\n",
    "136635": "    /**\n     * Performs given data replacement at the given buffer. I.e. replaces given <code>'replacementFrom'</code> data\n     * with the given <code>'replacementTo'</code> at the given buffer starting from the\n     * <code>'startPosition'</code> offset. Buffer <code>'position'</code> and <code>'limit'</code> are updated\n     * as necessary.\n     * <p/>\n     * <b>Note:</b> this method supposes that <code>'replacementFrom'</code> length is greater or equal to the\n     * <code>'replacementTo'</code> length. It's also assumed that current buffer position points to the index\n     * just after <code>'replacementFrom'</code> matched section.\n     *\n     * @param data            data buffer\n     * @param startPosition   start replacement position\n     * @param replacementFrom replacement key data\n     * @param replacementTo   replacement value data\n     */\n",
    "136683": "\t/**\n\t *  Same as GraphGlyph.getInternalLinearTransform(), except\n\t *  also calculates a bottom y offset for showing thresholded\n\t *  regions, if showThresholdedRegions() == true.\n\t */\n",
    "136706": "\t/**\n\t * Refresh seqtable if more chromosomes are added, for example.\n\t */\n",
    "136739": "\t/**\n\t * The species combo box changed. If the species changes to SELECT, the\n\t * SelectedSeqGroup is set to null. If the species changes to a specific\n\t * organism and there's only one choice for the genome versionName, the\n\t * SelectedSeqGroup is set to that versionName. Otherwise, the\n\t * SelectedSetGroup is set to null.\n\t */\n",
    "136745": "\t/**\n\t * The versionName combo box changed. This changes the selected group\n\t * (either to null, or to a valid group). It is assumed that at this point,\n\t * the species is valid.\n\t */\n",
    "136777": "\t/**\n\t * Set range of view. This will go through all the ISearchMode\n\t * instances registered, including plugins. The standard forms\n\t * of region entry are hard coded. This method tries all the\n\t * ISearchModes until the first one that gives a positive result.\n\t * @param search_text - any search string like \"chr1: 40000 - 60000\",\n\t *        or \"ADAR\" (a gene name)\n\t */\n",
    "136785": "\t/**\n\t * Retrieve the map y coord corresponding to a given graph yvalue.\n\t */\n",
    "136796": "\t/**\n\t * Retrieve the graph yvalue corresponding to a given ycoord.\n\t */\n",
    "136905": "\t/**\n\t * Load any data that's marked for visible range.\n\t */\n",
    "136919": "\t/**\n\t * Handles clicking of server preferences button.\n\t *\n\t * @param evt\n\t */\n",
    "136950": "\t/**\n\t * Don't allow buttons to be used if they're not valid.\n\t */\n",
    "137025": "\t/**\n\t * The strategy was changed. Update the table, and if necessary, load the\n\t * annotations and change the button statuses.\n\t *\n\t * @param row\n\t * @param col\n\t * @param gFeature\n\t */\n",
    "137130": "  /** Sets the flag determining whether the hairline is constrained\n   *  to remain inside the visible map boundaries.\n   *  If b is null, the current value of the flag is not changed.\n   */\n",
    "137131": "  /**\n   * Sets the flag determining whether the hairline should show label.\n   * @param b \n   */\n",
    "137133": "  /** Sets the location of the hairline.  This is the only supported\n   *  way to move the hairline.  Does *NOT* call map.updateWidget() and\n   *  but you will probably want to do that after calling this method.\n   */\n",
    "137135": "  /** Returns the current location of the hairline. */\n",
    "137137": "  /** Returns the actual shadow glyph. */\n",
    "137138": "  /** Call this method to get rid of circular references, to make\n   *  garbage collection easier.\n   */\n",
    "137147": "\t/** ActionListener Implementation */\n",
    "137161": "\t/** Returns an ImageIcon, or null if the path was invalid. */\n",
    "137207": "\t/**\n\t * Receives state update from the genus/species combo boxes. \n\t * @param e \n\t */\n",
    "137241": "\t/**\n\t * add a RepositoryChangeListener, to be called when there\n\t * is a change to the Bundle Repositories on the Bundle\n\t * Repository tab of the Preferences page\n\t * @param repositoryChangeListener the listener\n\t */\n",
    "137245": "\t/**\n\t * remove a RepositoryChangeListener - so that is is no longer\n\t * called for changes to the Bundle Repository tab of\n\t * the Perferences page\n\t * @param repositoryChangeListener the listener\n\t */\n",
    "137251": "\t/**\n\t * mark a bundle repository as down / unavailable\n\t * due to an error trying to connect\n\t * @param url the URL to mark\n\t */\n",
    "137253": "\t/**\n\t * display the Bundle Repository tab of the Preferences page\n\t */\n",
    "137284": "\t/**\n\t * Given an URLorName string which should be the resolvable root URL (but\n\t * may optionally be the server name) Return the GenericServer object. (This\n\t * could be non-unique if passed a name.)\n\t *\n\t * @param URLorName\n\t * @return gserver or server\n\t */\n",
    "137306": "\t/**\n\t * Remove a server.\n\t *\n\t * @param url\n\t */\n",
    "137346": "\t/**\n\t * Add or update a repository in the preferences subsystem. This only\n\t * modifies the preferences nodes, it does not affect any other part of the\n\t * application.\n\t *\n\t * @param url URL of this server.\n\t * @param name name of this server.\n\t * @return an anemic GenericServer object whose sole purpose is to aid in\n\t * setting of additional preferences\n\t */\n",
    "137353": "\t/**\n\t * Add or update a server in the preferences subsystem. This only modifies\n\t * the preferences nodes, it does not affect any other part of the\n\t * application.\n\t *\n\t * @param server GenericServer object of the server to add or update.\n\t */\n",
    "137358": "\t/**\n\t * Remove a server from the preferences subsystem. This only modifies the\n\t * preference nodes, it does not affect any other part of the application.\n\t *\n\t * @param url URL of the server to remove\n\t */\n",
    "137379": "\t/**\n\t * Get server from ServerList that matches the URL.\n\t *\n\t * @param u\n\t * @return server\n\t * @throws URISyntaxException\n\t */\n",
    "137435": "\t/**\n\t * Gets the primary server if present else returns null.\n\t */\n",
    "137517": "\t/**\n\t * Dubious method just so we can participate in preferences.\n\t * This horrifying kludge is to sneak past the guardian\n\t * in {@link com.affymetrix.igb.prefs.KeyStrokesView}.\n\t * That guardian might be trying to enforce the use of singletons.\n\t * I could not find documentation on why this is so.\n\t * @return this\n\t */\n",
    "137549": "\t/**\n\t * Should be enabled only if we can do something.\n\t * Check that more than one graph track is selected\n\t * or that no tracks are selected.\n\t */\n",
    "137639": "  /**\n   * Overrides to only pass event to \n   *   RubberBand.heardEvent() if mouse press did not occur over a hitable glyph.\n   */\n",
    "137666": "\t/**\n\t * Get a named view.\n\t * This differs from {@link #getView(String)}\n\t * in that it wants the display name instead of the full name.\n\t * This is easier for scripting.\n\t * @param viewName the display name of a tab\n\t *        instead of a full package and class name.\n\t */\n",
    "137672": "\t/**\n\t * Put the action's accelerator key (if there is one)\n\t * in the panel's input and action maps.\n\t * This makes the action available via shortcut,\n\t * even if it is \"hidden\" in a pop up menu.\n\t * @param theAction to which the shortcut points.\n\t */\n",
    "137679": "  /** \n   *  Recursive glyph edge-matching.\n   *  Recursively descends,\n   *    only matches leaf nodes (getChildren() == null || getChildren().size()<1)\n   *   \n   *  Glyphs present in both query_glyphs and target_glyphs will match each other\n   *    (no filtering against matching self).\n   *\n   *  Glyphs added for matches are collected and returned in match_glyphs.\n   */\n",
    "137686": "\t/**\n\t * Wrapper around Apple's com.apple.eawt.setDockIconImage.\n\t * \n\t * @param image the Image to use as the Dock icon.\n\t */\n",
    "137690": "\t/**\n\t * Returns a tier for the given style and direction, creating them if they\n\t * don't already exist. Generally called by the Glyph Factory. Note that\n\t * this can create empty tiers. But if the tiers are not filled with\n\t * something, they will later be removed automatically.\n\t *\n\t * @param sym The SeqSymmetry (data model) for the track\n\t * @param style a non-null instance of IAnnotStyle; tier label and other\n\t * properties are determined by the IAnnotStyle.\n\t * @param tier_direction the direction of the track\n\t *       (FORWARD, REVERSE, or BOTH)\n\t */\n",
    "137716": "\t/**\n\t * Translate a file in a genome to a relative path under this\n\t * QuickLoad directory.  If file is null or an empty string, this\n\t * will return the path to the version directory.\n\t *\n\t * @param genome_name name of this genome version\n\t * @param file the file in question.  Can be null\n\t * @return path to the file or version directory if file is null\n\t */\n",
    "137721": "\t/**\n\t * Returns the number of residues in the sequence as a double.\n\t *\n\t * @return the number of residues in the sequence as a double\n\t */\n",
    "137725": "\t/**\n\t * Returns a stream of the file species.txt at the quickload server or null \n\t * if the file is not present.\n\t * \n\t * @return stream of the text file or null if file not present.\n\t */\n",
    "137728": "\t/**\n\t * Returns true if the quickload server has a species.txt file.\n\t * \n\t * \n\t * @return true if the quickload server has a species.txt file\n\t */\n",
    "137730": "\t\t/**\n\t * Sets the start and end of the sequence as double values.\n\t * <p />\n\t * <em>WARNING:</em> min and max are stored internally using integers.  If\n\t * min or max are outside of the range Integer.MIN_VALUE and\n\t * Integer.MAX_VALUE, the values will not be stored properly.  The length\n\t * (min - max) is computed and stored as a double before min and max are\n\t * downcast to int.\n\t *\n\t * @param min the index of the first residue of the sequence, as a double.\n\t * @param max the index of the last residue of the sequence, as a double.\n\t */\n",
    "137732": "\t/**\n\t * Sets the start and end of the sequence\n\t *\n\t * @param min the index of the first residue of the sequence.\n\t * @param max the index of the last residue of the sequence.\n\t */\n",
    "137748": "\t/**\n\t *  Returns a top-level symmetry or null.\n\t *  Used to return a TypeContainerAnnot, but now returns a SymWithProps which is\n\t *     either a TypeContainerAnnot or a GraphSym, or a ScoredContainerSym,\n\t *     so GraphSyms can be retrieved with graph id given as type\n\t */\n",
    "137765": "\t/**\n\t * Gets files for a genome and copies it to it's directory.\n\t * @param local_path\tLocal path from where mapping is to saved.\n\t */\n",
    "137767": "\t/**\n\t * Returns all residues on the sequence.\n\t *\n\t * @return a String containing all residues on the sequence.\n\t */\n",
    "137772": "\t/**\n\t * Returns all residues on the sequence.\n\t *\n\t * @return a String containing all residues on the sequence\n\t */\n",
    "137783": "\t/**\n\t * Returns the residues on the sequence between start and end using the\n\t * fillchar to fill any gaps in the sequence.  Unknown if this implementation\n\t * is inclusive or exclusive on start and end.\n\t *\n\t * @param  res_start    the start index (inclusive?)\n\t * @param  res_end      the end index (exclusive?)\n\t * @param  fillchar the character to fill empty residues in the sequence with.\n\t * @return          a String containing residues between start and end.\n\t */\n",
    "137845": "\t/**\n\t * Move non floating glyphs from pixel floater to tier glyph.\n\t */\n",
    "137917": "\t/**\n\t * optional interface for Operators, used to order\n\t * the list of Operators in the UI\n\t */\n",
    "137951": "\t/**\n\t * move floating glyphs from TierGlyph to pixel floater\n\t *\n\t * @param tiers the list of TierGlyphs\n\t */\n",
    "138025": "\t/** Gets the first entry in the list {@link #getSelectedSeq()}.\n\t *  @return a BioSeq or null.\n\t */\n",
    "138026": "\t/**\n\t * Add one to the collection and let everyone know.\n\t * All registered listeners will hear about this.\n\t * BUG: Not checking that the action has a valid identifier\n\t * which is used as a key to the collection.\n\t * @param genericAction to add.\n\t */\n",
    "138029": "\t/**\n\t * Add one to the collection and keep it a secret.\n\t * Don't tell the listeners.\n\t * This is experimental.\n\t * We are trying to avoid some actions from showing up\n\t * in the list of shortcuts in the preferences\n\t * and (hence) in the tool bar.\n\t * What about the tutorials?\n\t * <p>Don't think it's working. - elb\n\t * @param genericAction to add.\n\t */\n",
    "138041": "\t/** Gets the first entry in the list {@link #getSelectedGroup()}.\n\t *  @return an AnnotatedSeqGroup or null.\n\t */\n",
    "138063": "  /** Permanently closes the dialog.  The dialogs in this method are not intended\n   *  to be re-displayed after being closed.  This avoids some thread-related\n   *  problems.  For example, if the closeDialog() method is activated before\n   *  showDialog() or setMessage(), the dialog will remain closed, and may never\n   *  actually have ever been shown.  Nonetheless, the proper thing to do usually\n   *  is to call closeDialogEventually().\n   */\n",
    "138066": "\t/**\n\t *  Returns a style for the given name.  These styles remain associated\n\t * with the given name while the program is running, but do not get\n\t * persisted to a permanent storage.  (Subclasses may choose to store\n\t * them in persistent storage.)\n\t * @param name Unique name for a style\n\t * @return A new or existing style\n\t */\n",
    "138077": "  /** This method is called when the user selects the \"Cancel\" button.\n   *  It simply calls {@link #closeDialog()}, and if a thread was provided\n   *  in the constructor it calls interrupt() on it.\n   */\n",
    "138080": "\t/** Gets the color at the given index value.\n\t * @param heatmap_index an integer in the range 0 to 255.  If the specified\n\t *  index is outside this range, the color corresponding to index 0 or 255\n\t *  will be returned.\n\t */\n",
    "138082": "  /** This method is called when the user selects the \"OK\" button.\n   *  It simply calls {@link #closeDialog()}.\n   */\n",
    "138111": "\t/** Copies all properties from the given style into this one,\n\t *  including the transient properties.\n\t * @param g style to copy properties from\n\t */\n",
    "138184": "\t/** Adds a file extension that will be considered to represent\n\t *  compression types that the filter should\n\t *  accept.  Endings, such as \".z\" or \".gz\",  are considered case-insensitive.\n\t */\n",
    "138185": "\t/**\n\t *  Set to either {@link #THRESHOLD_DIRECTION_GREATER} or\n\t *  {@link #THRESHOLD_DIRECTION_LESS_EQUAL} or {@link #THRESHOLD_DIRECTION_BETWEEN}.\n\t */\n",
    "138193": "\t/** Returns the file extension remaining after all compression endings have\n\t *  been removed from the name.  The returned file extension is lowercase.\n\t *  In the following examples,\n\t *  assume that setCompressionEnding(new String[] {\".gz\"}) has\n\t *  been called:\n\t *<ol>\n\t *<li> \"foo.bar\" returns \"bar\".\n\t *<li> \"foo.BAR.gz\" returns \"bar\".\n\t *<li> \"foo.egr.txt\" returns \"txt\". (NOT \"egr.txt\" as you might wish)\n\t *<li> \"foo\" returns null.\n\t *<li> \"foo.gz\" returns null.\n\t *</ol>\n\t */\n",
    "138216": "\t/**\n\t * Create serverMapping.txt and add server name and corresponding directory\n\t * to it.\n\t */\n",
    "138261": "\t/**\n\t * Loads synonyms from the given input stream.\n\t *\n\t * @param istream the input stream to load synonyms from.\n\t * @throws java.io.IOException if the input stream is null or an error occurs reading it.\n\t */\n",
    "138271": "\t/**\n\t * Determine if two potential synonyms are synonymous using the default\n\t * lookup rules.\n\t * <p />\n\t * The default behaviour of case sensitivity is {@value #DEFAULT_CS}.\n\t * <p />\n\t * The default behaviour of strip random is {$value #DEFAULT_SR}.\n\t *\n\t * @param synonym1 the first potential synonym.\n\t * @param synonym2 the second potential synonym.\n\t * @return true if the two parameters are synonymous.\n\t * @see #DEFAULT_CS\n\t * @see #DEFAULT_SR\n\t */\n",
    "138282": "\t/**\n\t * Notes a start time.\n\t */\n",
    "138285": "\t/**\n\t * Find the preferred name of the given synonym.  Under the hood, this just\n\t * returns the first synonym in the list of available synonyms for the\n\t * input.\n\t * <p />\n\t * Will return the input synonym if no synonyms are known.\n\t * <p />\n\t * Case sensitive lookup of the synonym is done using the default behaviour.\n\t * The default case sensitive behaviour is {@value #DEFAULT_CS}.\n\t *\n\t * @param synonym the synonym to find the preferred name of.\n\t * @return the preferred name of the synonym.\n\t */\n",
    "138287": "\t/**\n\t * Find the preferred name of the given synonym.  Under the hood, this just\n\t * returns the first synonym in the list of available synonyms for the\n\t * input.\n\t * <p />\n\t * Will return the input synonym if no synonyms are known.\n\t * <p />\n\t * The lookup of the synonym will be case sensitive if cs is true.\n\t *\n\t * @param synonym the synonym to find the preferred name of.\n\t * @param cs set the case-sensitive behaviour of the synonym lookup.\n\t * @return the preferred name of the synonym.\n\t */\n",
    "138288": "\t/**\n\t * Finds the first synonym in a list that matches the given synonym.\n\t * <p />\n\t * Case sensitive lookup of the synonym is done using the default behaviour.\n\t * The default case sensitive behaviour is {@value #DEFAULT_CS}.\n\t * <p />\n\t * Stripping '_random' from the synonym is done using the default behaviour.\n\t * The default strip random behaviour is {@value #DEFAULT_SR}\n\t *\n\t * @param choices a list of possible synonyms that might match the given synonym.\n\t * @param synonym  the id you want to find a synonym for.\n\t * @return either null or a String synonym, where isSynonym(synonym, synonym) is true.\n\t * @see #DEFAULT_CS\n\t * @see #DEFAULT_SR\n\t */\n",
    "138290": "\t/**\n\t * Finds the first synonym in a list that matches the given synonym.\n\t * <p />\n\t * The lookup of the synonym will be case sensitive if cs is true.\n\t * <p />\n\t * the lookup will strip '_random' from the synonyms if sr is true.\n\t *\n\t * @param choices a list of possible synonyms that might match the given synonym.\n\t * @param synonym  the id you want to find a synonym for.\n\t * @param cs set the case-sensitive behaviour of the synonym lookup.\n\t * @param sr set the strip random behaviour of the synonym lookup.\n\t * @return either String synonym, where isSynonym(synonym, synonym) is true or the original synonym.\n\t */\n",
    "138292": "\t/**\n\t * Find the second synonym, if it exists.  Otherwise return the first.\n\t */\n",
    "138297": "\t/**\n\t * Returns length of residues.\n\t * @return\tReturns length of residues.\n\t */\n",
    "138325": "    /**\n     *  assumes there is only one region for each seq\n     *    may want to change this to return a list of regions instead\n     **/\n",
    "138327": "  /**\n   *  Returns the sequence at the given position in the sequence list.\n   */\n",
    "138329": "  /** Returns the number of sequences in the group. */\n",
    "138334": "  /** Gets a sequence based on its name, possibly taking synonyms into account.\n   *  See {@link #setUseSynonyms(boolean)}.\n   */\n",
    "138336": "  /**\n   *  For the given symmetry, tries to find in the group a sequence\n   *    that is pointed to by that symmetry.\n   *  @return the first sequence it finds (by iterating through sym's spans),\n   *    or null if none is found.\n   */\n",
    "138343": "\t/**\n\t *  getVersionedSource()\n\t *    assumes there is only one versioned source for each AnnotatedSeqGroup\n\t *    if server allows multiple versioned sources per group, then should\n\t *    use getVersionedSources()\n\t **/\n",
    "138348": "\t/**\n\t * If primary uri is null then load data from actual server.\n\t * @param type\tRequired das2capability type.\n\t * @return\tReturns region string.\n\t */\n",
    "138351": "\t/**\n\t * Get URL string to load data from.\n\t * Returns\n\t * @return primary server's URL if present\n\t *         else actual server's URL.\n\t */\n",
    "138360": "\t/**Returns null or a JSESSIONID used in authentication*/\n",
    "138404": "\t/**\n\t * Gets server path for a mapping on DAS server.\n\t * @param id\tGenome id\n\t * @param file\tFile name.\n\t */\n",
    "138415": "\t/** Sorts two instances of UcscPslSym based on UcscPslSym.getTargetMin(),\n\t * and in second case, by UscsPslSym.getTargetMax().\n\t * @param sym1\n\t * @param sym2\n\t * @return comparison integer\n\t */\n",
    "138468": "\t/**\n\t * Remove all methods and set feature invisible.\n\t */\n",
    "138474": "\t/**\n\t * Split the requested span into spans that still need to be loaded.\n\t * Note we can't filter inside spans (in general) until after the data is returned.\n\t */\n",
    "138478": "\t/**\n\t * This span is now considered loaded.\n\t * @param span\n\t */\n",
    "138496": "\t/**\n\t * Order by: enabled/disabled, then server name, then DAS2, DAS, Quickload.\n\t *\n\t * @param gServer\n\t * @return comparison integer\n\t */\n",
    "138499": "\t/**\n\t * React to modifications of the Java preferences. This should probably fire\n\t * an event notifying listeners that this generic server has changed.\n\t *\n\t * @param evt\n\t */\n",
    "138501": "\t/** The routine that actually creates a new AnnotatedSeqGroup.\n\t *  Override this to provide a specific subclass of AnnotatedSeqGroup.\n\t */\n",
    "138544": "\t/**\n\t *  Sets the selected symmetries.\n\t *  The symmetries can be on multiple sequences, and selecting\n\t *  them will not automatically change the selected sequence.\n\t *  All the SymSelectionListener's will be notified.\n\t *  @param all_syms A List of SeqSymmetry objects to select.\n\t *  @param graph_syms A List of Graph SeqSymmetry objects to select.\n\t *  @param src The object responsible for selecting the sequences.\n\t */\n",
    "138546": "\t/**\n\t *  NOTE - legacy code, this is only used by the IGBScript language\n\t *  Sets the selected symmetries AND selects one of the sequences that they lie on.\n\t *  The symmetries can be on multiple sequences.\n\t *  If the current bio seq contains one of the symmetries, the seq will not\n\t *  be changed.  Otherwise the seq will be changed to one of the ones which\n\t *  has a selected symmetry.\n\t *  The SeqSelectionListener's will be notified first (only if the seq changes),\n\t *  and then the SymSelectionListener's will be notified.\n\t *  @param graph_syms A List of SeqSymmetry objects to select.\n\t *  @param src The object responsible for selecting the sequences.\n\t */\n",
    "138550": "\t/**\n\t *  Clears the symmetry selection for every sequence. Notifies all the selection listeners.\n\t *  @param src The object to use as the event source for the SymSelectionEvent.\n\t */\n",
    "138553": "\t/**\n\t *  Clears the symmetry selection for every sequence.\n\t *  Does not notifies the selection listeners.\n\t */\n",
    "138578": "\t/**\n\tSets up all the current values, the line itself, the\n\tline type, the offset, and the content */\n",
    "138579": "\t/** Returns \"text/bed\". */\n",
    "138581": "\t/**\n\t *  Adds a filter to the fail_filter_hash.\n\t *  Like {@link #addFeatureFilter(String, boolean)} with pass_filter=false.\n\t */\n",
    "138584": "\t/**\n\t *  Allows you to specify the entries you want to accept while parsing, or\n\t *    the ones you want to reject.\n\t *  When filtering:\n\t *      1.  if there are any entries in pass_filter, then _only_ features with type entries\n\t *          in the pass_filter_hash will pass through the filter;\n\t *      2.  if there are any entries in fail_filter, then _only_ features that do _not_ have\n\t *          entries in the fail_filter will pass through the filter.\n\t *\n\t *  @param pass_filter  if true then add to the pass_filter_hash;\n\t *    if false then add to the fail_filter_hash\n\t */\n",
    "138588": "\t/**\n\t *  Removes a filter from the fail_filter_hash.\n\t *  Like {@link #removeFeatureFilter(String, boolean)} with pass_filter=false.\n\t */\n",
    "138590": "\t/**\n\t *  Remove a filter that had been added with {@link #addFeatureFilter(String, boolean)}.\n\t *  @param pass_filter if true then remove from pass_filter_hash;\n\t *                if false then remove from fail_filter_hash\n\t */\n",
    "138591": "\t/**\n\t *  This method will read raw sequence from the stream, and ignore it.\n\t **/\n",
    "138593": "\t/**\n\t *  Removes all filtering.  Removes all \"pass\" filters and all \"reject\" filters.\n\t *  Has no effect on any grouping tag set with {@link #setGroupTag(String)}.\n\t */\n",
    "138596": "\t/**\n\t *  Sets which tag to use to create groups.  Most commonly, this will\n\t *  be set to \"transcript_id\" to group all entries from the same transcript.\n\t *  Can be set to null if no grouping is desired.\n\t */\n",
    "138614": "\t/**\n\t *  Sets the parser to some standard settings that filter-out \"intron\" and\n\t *  \"transcript\" lines, among other things, and groups by \"transcript_id\".\n\t */\n",
    "138629": "\t/**\n\t *  Implementing AnnotationWriter interface to write out annotations\n\t *    to an output stream as \"GFF\" format.\n\t **/\n",
    "138674": "\t/**Modified to look for both xxx.bai and xxx.bam.bai files in parent directory.*/\n",
    "138727": "\t/**By position, smallest to largest, assumes same chromosome strand.*/\n",
    "138728": "\t/**Writes six column xxx.bed formatted lines to the PrintWriter*/\n",
    "138730": "\t/**Returns the position of the last position in the sortedPositions array.*/\n",
    "138733": "\t/**Writes native format to the PrintWriter*/\n",
    "138735": "\t/**Writes native format to the PrintWriter, 1 based, skips dups*/\n",
    "138742": "\t/**\n     * Get residues in the region of the chromosome.  This is generally only defined for some parsers\n     * @param span - span of chromosome\n     * @return String of residues\n     */\n",
    "138745": "\t/**Returns whether data remains.*/\n",
    "138748": "\t/**Returns the bp of the last end position in the array.*/\n",
    "138758": "\t/**Returns the bp of the last end position in the array.*/\n",
    "138767": "\t/**Returns whether data remains.*/\n",
    "138774": "\t/**Returns the position of the last position in the sortedPositionTexts array.*/\n",
    "138778": "\t/**Writes native format to the PrintWriter*/\n",
    "138779": "\t/**Returns whether data remains.*/\n",
    "138780": "\t/**Writes position score format to the PrintWriter, 1bp coor*/\n",
    "138784": "\t/**By position, smallest to largest, assumes same chromosome strand.*/\n",
    "138787": "\t/**Returns the position of the last position in the sortedPositionScores array.*/\n",
    "138790": "\t/**Returns whether data remains.*/\n",
    "138791": "\t/**Writes native format to the PrintWriter*/\n",
    "138794": "\t/**\n\t * Writes position score format to the PrintWriter, 1bp positions.\n\t */\n",
    "138796": "\t/**Assumes coordinates are interbase.*/\n",
    "138798": "\t/**Sorts by start base, then by length, smaller to larger for both.*/\n",
    "138799": "\t/**Assumes interbase coordinates.*/\n",
    "138808": "\t/**Returns the bp of the last end position in the array.*/\n",
    "138810": "\t/**Writes six column xxx.bed formatted lines to the PrintWriter*/\n",
    "138812": "\t/**Returns whether data remains.*/\n",
    "138838": "\t/**Reads a binary file this Data object.*/\n",
    "138839": "\t/**Reads a DataInputStream into this XXXData object, to be overridden.*/\n",
    "138842": "\t/**Sorts by position base, smaller to larger.*/\n",
    "138848": "\t/**Returns the bp of the last end position in the array.*/\n",
    "138851": "\t/**Writes six column xxx.bed formatted lines to the PrintWriter*/\n",
    "138856": "\t/**Writes native format to the PrintWriter*/\n",
    "138858": "\t/**Returns whether data remains.*/\n",
    "138867": "\t/**Writes position score format to the PrintWriter, 1bp coor*/\n",
    "138873": "\t/**Returns whether data remains.*/\n",
    "138881": "\t/**Returns whether data remains.*/\n",
    "138917": "\t/**For appending Archive into onto a text file.*/\n",
    "138922": "\t/**This does close the streams.*/\n",
    "138932": "\t/**Rips and loads the info from the slice name into this object.  Throws and IOException if the name is malformed*/\n",
    "138934": "\t/**Returns a properly formated name, chr5+8394834-8394854-10000.isft*/\n",
    "138966": "\t/**Must contain ARCHIVE_VERSION_KEY, VERSIONED_GENOME_KEY, and DATA_TYPE_KEY .*/\n",
    "139003": "\t/** Prints the header to the given stream. */\n",
    "139093": "\t/**\n\t *  Implementing AnnotationWriter interface to write out annotations\n\t *    to an output stream as \"DAS2FEATURE\" XML format.\n\t *\n\t *  getMimeType() should really return \"text/x-das-feature+xml\" but easier to debug as \"text/plain\"\n\t *    need to switch over once stabilized\n\t **/\n",
    "139111": "\t/**\n\t * add a new FileTypeHandler for a list of extensions\n\t * @param fileTypeHandler the FileTypeHandler\n\t */\n",
    "139115": "\t/**\n\t * remove an existing FileTypeHandler for a given list of extensions\n\t * @param fileTypeHandler the FileTypeHandler\n\t */\n",
    "139118": "\t/**\n\t * find the appropriate Parser for the given extension\n\t * @param extension the extension to use\n\t * @return the appropriate Parser\n\t */\n",
    "139174": "\t\t/** Retrieves a color that will contrast well with {@link #getColor()}. */\n",
    "139181": "\t/**\n\t *  Writes a list of annotations to a file in BGN format.\n\t *  @param annots  a List of SeqSymmetry objects, preferably implementing SupportsCdsSpan\n\t */\n",
    "139199": "\t/**\n\t *  Implementing AnnotationWriter interface to write out annotations\n\t *    to an output stream as \"binary UCSC gene\".\n\t **/\n",
    "139216": "\t/** may want to move set/getOrganism() to an AnnotatedGenome subclass */\n",
    "139221": "\t/**\n\t *  Implementing AnnotationWriter interface to write out annotations\n\t *    to an output stream as \"binary UCSC refseq gene\"\n\t **/\n",
    "139236": "\t/**\n\t *  Returns the sequence at the given position in the sequence list.\n\t */\n",
    "139240": "\t/** Returns the number of sequences in the group. */\n",
    "139244": "\t/** Gets a sequence based on its name, possibly taking synonyms into account.\n\t *  See {@link #setUseSynonyms(boolean)}.\n\t *\n\t * @param synonym the string identifier of the requested BioSeq\n\t * @return a BioSeq for the given synonym or null\n\t */\n",
    "139246": "\t/**\n\t *  For the given symmetry, tries to find in the group a sequence\n\t *    that is pointed to by that symmetry.\n\t *  @return the first sequence it finds (by iterating through sym's spans),\n\t *    or null if none is found.\n\t * PRECONDITION: sym != null.\n\t */\n",
    "139267": "\t/**\n\t * Adds the BioSeq to the group.\n\t */\n",
    "139280": "\t/**\n\t *  Associates a symmetry with a case-insensitive ID.  You can later retrieve the\n\t *  list of all matching symmetries for a given ID by calling findSyms(String).\n\t *  Neither argument should be null.\n\t */\n",
    "139289": "\t/**\n\t * Function to add a SeqSymmetry to the id2sym_hash (and symid2id_hash).\n\t * @param id ID string (lower-cased).\n\t * @param sym SeqSymmetry to add to the hash.\n\t */\n",
    "139292": "\t/** Sets the properties to the given Map.\n\t *  This does not copy the properties, but rather maintains a reference\n\t *  to the actual Map passed-in.\n\t *  @param propmap  a Map of Strings to Strings.  This class will not throw exceptions\n\t *  if the map is null.\n\t */\n",
    "139294": "\t/** Retrieves the property called \"id\". */\n",
    "139297": "\t/**\n\t * Remove symmetry from seq group, if it exists.\n\t * @param sym\n\t */\n",
    "139298": "\t/**\n\t * Removes all cds symmetries.\n\t */\n",
    "139367": "\t/** Returns null for GFF2 or the group field for GFF1. */\n",
    "139383": "\t/**\n\t * Operation not allowed, it will throw an exception.\n\t */\n",
    "139385": "\t/**\n\t * Operation not allowed, it will throw an exception.\n\t */\n",
    "139418": "\t/**\n\t * Determine the y coordinate, given x.\n\t * @param x\n\t * @return y coord. -1 indicates not found.\n\t */\n",
    "139442": "\t/** implementing ParentOfLeafSpan interface */\n",
    "139473": "\t/** The integer id converted to String representation. */\n",
    "139508": "\t/** IndexedSingletonSym does not support setting properties, so this will\n\t *  return false.\n\t */\n",
    "139518": "\t/** Returns null if index is not 1. */\n",
    "139524": "\t/** Has no effect, and returns false. */\n",
    "139608": "\t/** \n\t * Using a \"real-number\" coordinate representation, such that \n\t *   integer numbers fall <em>between</em> bases.  Thus a sequence span \n\t *   covering ACTG would now have for example start = 0, end = 4, with length = 4\n\t *   (but still designated A = base 0\n\t *                         C = base 1\n\t *                         G = base 2\n\t *                         T = base 3)\n\t */\n",
    "139614": "\t/**\n\t * Using a \"real-number\" coordinate representation, such that\n\t *   integer numbers fall <em>between</em> bases.  Thus a sequence span\n\t *   covering ACTG would now have for example start = 0, end = 4, with length = 4\n\t *   (but still designated A = base 0\n\t *                         C = base 1\n\t *                         G = base 2\n\t *                         T = base 3)\n\t */\n",
    "139686": "\t/**\n\t * private function to aid in testing constructor\n\t */\n",
    "139690": "\t/**\n\t * private function to aid in testing constructor\n\t */\n",
    "139797": "\t/**\n\t * Create string with all 256 possible 2-residue combinations... AA, AC, ..., AU, ..., UA, UC, ..., UU\n\t * @return string\n\t */\n",
    "139829": "\t/**\n\t * Make sure this writes out the same format it reads in.\n\t */\n",
    "139846": "\t/**\n\t * Make sure this writes out the same format it reads in.\n\t */\n",
    "139906": "\t/**\n\t * get the current version of IGB\n\t * @return the IGB version\n\t */\n",
    "139910": "\t/**\n\t * get the current full (detailed) version of IGB\n\t * @return the full IGB version\n\t */\n",
    "139913": "\t/**\n\t * Get the build version from svn repository.\n\t */\n",
    "139918": "\t/**\n\t * Returns the value of the argument indicated by label.\n\t * If arguments are\n\t *   \"-flag_2 -foo bar\", then get_arg(\"foo\", args)\n\t * returns \"bar\", get_arg(\"flag_2\") returns a non-null string,\n\t * and get_arg(\"flag_5\") returns null.\n\t */\n",
    "139928": "\t/**\n\t * Returns the location of the application data directory.\n\t * The String will always end with \"/\".\n\t *\n\t * @return the application directory\n\t */\n",
    "139935": "\t/**\n\t * generates part of UCSC query url for current genome coordinates.\n\t * @return query URL for current view. \"\" on error.\n\t */\n",
    "139940": "\t/**\n\t *  Returns the current position in the format used by the UCSC browser.\n\t *  This format is also understood by GBrowse and the MapRangeBox of IGB.\n\t *  @return a String such as \"chr22:15916196-31832390\", or null.\n\t */\n",
    "140010": "\t/** Use SwingUtilities.invokeLater() to schedule this Thread to be\n\t *  started later.  This lets Swing finish-up whatever else it was doing\n\t *  before calling start() on this Thread.  (The Thread itself doesn't actually\n\t *  run on the Swing event thread.)\n\t *\n\t *  In many cases, you could just call start() instead of calling this.\n\t *  But, if you already have some events pending on the Swing event thread,\n\t *  then calling this will make sure they finish first.  For example,\n\t *  this method is needed in the UnibrowControlServlet when a manipulation\n\t *  of the QuickLoad GUI needs to be followed by a file load.\n\t */\n",
    "140021": "\t/** Finds a sublist with the given name.\n\t *  @param create if true, will create the sublist if it doesn't exist.\n\t */\n",
    "140029": "\t/** Finds or creates a sublist with a given path.\n\t *  Example getSublistByPath(\"aaa/bbb/ccc\", \"/\", true) will find or create\n\t *  a BookmarkList called \"aaa\" containing a BookmarkList \"bbb\" containing\n\t *  a BookmarkList \"ccc\".\n\t */\n",
    "140031": "\t/** Prints a description of the list to a PrintStream, for debugging. */\n",
    "140032": "\t/**Check to see if port 7085, the default IGB bookmarks port is open.  \n\t * If so returns true AND send IGBControl a message to bring IGB's JFrame to the front.\n\t * If not returns false.\n\t * @author davidnix*/\n",
    "140039": "\t/** Returns true only if the two objects are the same identical object. */\n",
    "140044": "\t/** Returns true if the Path of the Url matches \n\t *  {@link SimpleBookmarkServer#SERVLET_NAME} or\n\t *  {@link SimpleBookmarkServer#SERVLET_NAME_OLD} and\n\t *  the Host is \"localhost\". \n\t */\n",
    "140050": "    /**\n    * returns the current/last parser\n    *\n    */ \n",
    "140052": "    /**\n    * sets the das2 and quickload properties of the bookmark and deletes source_url.\n    */ \n",
    "140076": "\t/**\n\t * Generate bookmark menus by passed bookmark list.\n\t *\n\t * @param pp\n\t * @param bl\n\t */\n",
    "140079": "\t/**\n\t * Generate a bookmark editor panel for adding a new bookmark.\n\t */\n",
    "140081": "\t/**\n\t * Add passed bookmark to passed menu.\n\t * \n\t * @param parent_menu\n\t * @param bm\n\t * @return \n\t */\n",
    "140082": "\t/**\n\t * Tries to import bookmarks into Unibrow. Makes use of {@link BookmarksParser#parse(BookmarkList, File)}.\n\t */\n",
    "140084": "\t/**\n\t * Fills the table model with data from the Map. Some extra empty rows may\n\t * also be appended to the table to allow room for extra data.\n\t */\n",
    "140092": "\t/**\n\t * Add passed bookmark list to passed menu.\n\t * \n\t * @param parent_menu\n\t * @param bm_list\n\t * @return \n\t */\n",
    "140162": "\t/**\n\t * When a JTextField gains focus, do nothing special.\n\t */\n",
    "140167": "\t/**\n\t * When a JTextField loses focus, process its value.\n\t */\n",
    "140282": "  /** Registers the default keyboard actions for Copy (control C) and Paste (control V). */\n",
    "140283": " /**\n  * Tests to see if the current selection area is suitable for copy action.\n  * Selections comprising non-adjacent cells result in invalid selection and\n  * then copy action cannot be performed.\n  * Paste can be done as long as there is something selected.\n  */\n",
    "140369": "\t/**\n\t * get the Bundle on the line where the cursor is\n\t * @param p the point where the cursor is\n\t * @return the bundle on the line where the cursor is\n\t */\n",
    "140389": "\t/**\n\t * once the IGBService is available, we can create the page, and\n\t * register it with OSGi, so that the tab can be added.\n\t * @param igbServiceReference the ServiceReference for the IGBService\n\t */\n",
    "140435": "\t/** Returns \"text/bb\". */\n",
    "140445": "\t/**\n\t * Join fields from startField to end of fields.\n\t *\n\t * @param fields\n\t * @param startField\n\t * @return\n\t */\n",
    "140475": "\t/**\n\t * get the index of the column in the table, given the column name\n\t *\n\t * @param key the name of the column\n\t * @return the index of the column in the table\n\t */\n",
    "140480": "\t/**\n\t * set the parent table\n\t *\n\t * @param jTable the parent table that uses this TableModel\n\t */\n",
    "140504": "\t/**\n\t * determines whether the bundle is the latest version\n\t * checks all the bundles with the same Symbolic name for\n\t * the highest version number\n\t * @param bundle the bundle to check\n\t * @return true if the bundle is the latest version, false otherwise\n\t */\n",
    "140520": "\t/**\n\t * get the bundle filter for the given user settings\n\t * @return the bundle filter\n\t */\n",
    "140544": "\t/**\n\t * gets the full set of all bundles in all the bundle repositories\n\t * in the Preferences tab, filter by IGB version\n\t */\n",
    "140563": "\t/**\n\t * reload the table data due to any changes\n\t */\n",
    "140569": "  /**\n   *   Set visible min Y to the specified value for all graphs under control\n   *   of PercentThresholder (but doesn't force an updateWidget()).\n   *   Argument is _value_, not percentage.\n   */\n",
    "140570": "\t/**\n\t * called before the page is closed\n\t */\n",
    "140572": "  /**\n   *   set visible max Y to the specified value for all graphs under control\n   *   of PercentThresholder (but doesn't force an updateWidget()).\n   *   Argument is _value_, not percentage.\n   */\n",
    "140621": "\t/**\n\t * saves the currently installed bundles\n\t * @param installedBundles the currently installed bundles\n\t */\n",
    "140634": "\t/**\n\t * saves the current set of bundles in all repositories\n\t * @param repositoryBundles the bundles in all repositories\n\t */\n",
    "140655": "\t/**\n\t * set the bundle filter to use\n\t * @param bundleFilter the bundle filter\n\t */\n",
    "140666": "\t/**\n\t *  Sets the ThreshStartShift on a collection of SmartGraphGlyphs.\n\t */\n",
    "140672": "\t/**\n\t * save the divider location for the RETRACT tray state - as a percentage\n\t */\n",
    "140677": "\t/**\n\t *  Sets the ThreshEndShift on a collection of SmartGraphGlyphs.\n\t */\n",
    "140678": "\t/**\n\t * Saves information about which plugins are in separate windows and\n\t * what their preferred sizes are.\n\t */\n",
    "140687": "\t/**\n\t * set the tab menu for a tab pane\n\t * @param plugin the tab pane\n\t */\n",
    "140691": "\t/**\n\t * remove a tab pane from the window service\n\t * @param plugin the tab pane\n\t */\n",
    "140692": "\t/**\n\t * set a given tab pane to a given tab state\n\t * @param panel the tab pane\n\t * @param tabState the new tab state\n\t */\n",
    "140735": "\t/**\n\t * get the tab state of a given tab pane\n\t * @param panel the tab pane\n\t * @return the tab state of the give pane\n\t */\n",
    "140738": "\t/** Returns \"text/bw\". */\n",
    "140742": "\t/**\n\t * put the tray in the HIDDEN tray state\n\t * this happens when there are not tabs in the tray\n\t */\n",
    "140750": "\t/**\n\t * put the tray in the EXTEND tray state\n\t * this happens when the user clicks on a tab from the RETRACTED\n\t * tray state, or clicks on a different tab in the EXTENDED tray\n\t * state\n\t */\n",
    "140759": "\t/**\n\t * put the tray in the RETRACT tray state\n\t * this happens when the user clicks on the already selected tab\n\t * from the EXTENDED tray state\n\t */\n",
    "140786": "\t/**\n\t * puts the tray into the given tray state\n\t * @param newState the new state for the tray\n\t */\n",
    "140835": "\t/**\n\t * create the JTabbedPane for the Tray\n\t * @param tabPlacement the tabPlacement (orientation) for\n\t * the JTabbedPane\n\t * @return the JTabbedPane\n\t */\n",
    "140850": "\t/**\n\t * call all the TrayStateChangeListeners, notifying them\n\t * of a change in the tray state of this tray\n\t */\n",
    "140853": "    /**\n     * Unloads everything from GnomeView if unable to read the selected path.\n     */\n",
    "140854": "\t/**\n\t * add a new listener for tray state changes\n\t * @param trayStateChangeListener the new listener\n\t */\n",
    "140855": "    /**\n     * Takes in Document object to parse it and convert into BioSeq.\n     * @param   seqdoc  Document object name\n     * @return          Returns BioSeq of given document object.\n     * @see     com.affymetrix.genometryImpl.BioSeq\n     */\n",
    "140857": "\t/**\n\t * remove an existing listener for tray state changes\n\t * it will no longer be notified of changes\n\t * @param trayStateChangeListener the listener to remove\n\t */\n",
    "140860": "    /**\n     * Process dna in BioSeq for each child node of element provided.\n     * @param   genomic\n     * @param   elem        Node in genomic for which dna is to be processed\n     * @see     com.affymetrix.genometryImpl.BioSeq\n     */\n",
    "140862": "    /**\n     * One of part in setting up the outer frame. Sets up panels.\n     */\n",
    "140901": "    /** Close everything and exit upon closing the window */\n",
    "140919": "\t/** Set the text in the status bar in a thread-safe way. */\n",
    "140931": "\t/**\n\t * Adds help menu item to Help help_menu.\n\t * @param help_menu Menu name to which submenus should be added.\n\t */\n",
    "140945": "\t/**\n\t * Moves given file to directory named failed.\n\t * @param filename\tFile to be moved\n\t * @return boolean true if file was move successfully, false if not.\n\t */\n",
    "140947": "\t/**\n\t * Prints how to use the tool.\n\t */\n",
    "141026": "\t/**\n\t * Loads the path selected in the path browser.\n\t * @param   seqfile - Name of path to be loaded\n\t */\n",
    "141028": "    /**\n     * Initialized GenomeView colors with preferences provided in the parameter phash\n     * @param   phash   Map providing color preferences for GenomeView\n     */\n",
    "141037": "    /**\n     * Parses command line argument and adds valid arguments to the argument dictionary.\n     * @param   args    Command line arguments\n     */\n",
    "141040": "    /**\n     * Add mouse listener to maps so that the application can detect\n\t * user interactions with the display.\n     * @param   listener    Listener that is to be added to maps.\n     */\n",
    "141053": "    /**\n     * Adds argument to dictionary\n     * @param   args    Argument pair to be inserted in dictionary.\n     */\n",
    "141058": "\t/**\n\t * Toggle hairline on/off.\n\t * @return\n\t */\n",
    "141081": "    /**\n     * Loads the sample directory from the server\n     * @return  String  Returns directory listing in string format.\n     */\n",
    "141090": "\t/**\n\t * Toggle hairline label on/off.\n\t * @return\n\t */\n",
    "141156": "            /**\n             * Gets number of rows.\n             * @return  int     Returns number of rows.\n             */\n",
    "141164": "            /**\n             * Gets number of columns.\n             * @return  int     Returns number of columns.\n             */\n",
    "141174": "            /**\n             * Returns value at rowIndex and columnIndex.\n             * @param rowIndex      Row number\n             * @param columnIndex   Column number\n             * @return  Object      Returns value at rowIndex and columnIndex.\n             */\n",
    "141441": "  /**\n   * Clears all selective acknowledgement options.  This is a\n   * temporary kluge and will be removed from the final API.  Do not\n   * use it.  The final API will have proper methods for adjusting\n   * selective acknowledgement options.\n   */\n",
    "141448": "  /**\n   * Sets the specified control bits without altering any other bits\n   * in the control header.\n   *\n   * @param mask The bits to set.\n   */\n",
    "141450": "  /**\n   * Unsets the specified control bits.\n   *\n   * @param mask The bits to unset.\n   */\n",
    "141452": "  /**\n   * Sets the control header to the sepecified value.\n   *\n   * @param mask The new control header bit mask.\n   */\n",
    "141463": "  /**\n   * Sets the UDP total length header field.\n   *\n   * @param length The length of the UDP packet in bytes.\n   */\n",
    "141466": "  /**\n   * Sets the raw packet byte array.  Although this method would\n   * appear to violate object-oriented principles, it is necessary to\n   * implement efficient packet processing.  You don't necessarily\n   * want to allocate a new IPPacket and data buffer every time a\n   * packet arrives and you need to be able to wrap packets from\n   * APIs that supply them as byte arrays.\n   *\n   * @param data The raw packet byte array to wrap.\n   */\n",
    "141468": "  /**\n   * Copies the raw packet data into a byte array.  If the array\n   * is too small to hold the data, the data is truncated.\n   *\n   * @param data The raw packet byte array to wrap.\n   */\n",
    "141469": "  /**\n   * Sets the IP header length field.  At most, this can be a \n   * four-bit value.  The high order bits beyond the fourth bit\n   * will be ignored.\n   *\n   * @param length The length of the IP header in 32-bit words.\n   */\n",
    "141479": "  /**\n   * Closes the ipq handle.\n   */\n",
    "141480": "  /**\n   * Sets the packet copying mode for calls to {@link #read}.\n   *\n   * @param mode One of either {@link #MODE_COPY_META} or {@link\n   * #MODE_COPY_PACKET}.  The first indicates only packet metadata\n   * should be copied to user space.  The second indicates both the\n   * packet metadata and data payload should be cpied.\n   * @param range The number of bytes of the packet payload to copy.\n   * It does not include the bytes in the packet metadata.\n   * @return A positive value on success; -1 on failure.\n   */\n",
    "141481": "  /**\n   * Reads a netlink message from the user space queue, containing\n   * packet metadata and possibly packet data payload depending on the mode\n   * requested with {@link #setMode}.\n   *\n   * @param message The message in which to store the message\n   * retrieved from the queue.\n   * @param timeout A timeout in microseconds specifying the maximum\n   * amount of time to wait for a message to become available for\n   * reading.  If set to zero, the read will block indefinitely.\n   * @return -1 on failure and a positive value on success.  A value\n   * of zero is returned if a timeout value is specified and no data\n   * message was available to be read.\n   */\n",
    "141486": "  /**\n   * Frees the memory allocated for the netlink message buffer.\n   * Do not override this method without calling <code>super.finalize()</code>.\n   */\n",
    "141530": "\t/**\n\t * Get the protocol information from the ethernet header\n\t * \n\t * \n\t * @return the protocol code\n\t */\n",
    "141587": "\t/**\n     * Close this object manager\n     * \n     */\n",
    "141605": "\t/**\n\t * Open the session output writer \n\t * \n\t */\n",
    "141607": "\t/**\n\t * Close the session output writer \n\t * \n\t */\n",
    "141611": "\t/**\n\t *  The server is going down.  Clean up and exit all threads \n\t * \n\t */\n",
    "141612": "\t/**\n\t *  Is the server shutting down \n\t * \n\t * @return True = the server is shutting down\n\t */\n",
    "141614": "\t/**\n\t * Get the packet flows associated with this session \n\t * \n\t * @param key  The key to this session\n\t * @return The vector contains the Summary flows\n\t * @throws Exception  Flows not found\n\t */\n",
    "141616": "\t/**\n\t * Update the running packet timer with the time of the current packet\n\t * \n\t * @param currentPacketTime The time of the current packet in milliseconds\n\t */\n",
    "141617": "\t/**\n\t *  Get an enumeration of all the inflight active sessions\n\t * \n\t * @return  Enumeration of active sessions\n\t */\n",
    "141638": "\t/**\n\t * Flush/write out a completed UDP Session\n\t * \n\t * \n\t * @param udpsbean The UDPSession to flush\n\t */\n",
    "141640": "\t/**\n\t * Set the key for this flow/session \n\t * \n\t * \n\t * @param key\n\t */\n",
    "141642": "\t/**\n\t * Set the packet time clock to current packet \n\t * \n\t * \n\t * @param ptime The packet time in milliseconds  \n\t */\n",
    "141644": "\t/**\n\t * Get the current packet clock time \n\t * \n\t * \n\t * @return  The current packet clock time in milliseconds\n\t */\n",
    "141645": "\t/**\n\t * Signal to the end of process and finish all work\n\t * \n\t *\n\t */\n",
    "141646": "\t/**\n\t *  Check if the process is in exiting state\n\t * \n\t * \n\t * @return True if the process is exiting\n\t */\n",
    "141661": "\t/**\n     * Call from AbstractParser to initialize of the new parser.\n     * \n     * The procotol tells us which protocol is being process. \n     * \n     * @see AbstractParser#init(int)\n     * @see AbstractParser#TCP\n     * @see AbstractParser#UDP\n     */\n",
    "141665": "\t/**\n\t * Flush/write out a completed TCP Session\n\t * \n\t * \n\t * @param tcpsbean The TCPSession bean to flush\n\t */\n",
    "141668": "\t/**\n\t * Checks whether this module has been asked to finish processing its sessions\n\t * \n\t * @return True if this module is set to finish its processing\n\t */\n",
    "141673": "\t/**\n\t * Checks where this Thread is running\n\t * \n\t * \n\t * @return True if this Thread is running\n\t */\n",
    "141677": "\t/**\n\t * Called by AppLayerMgr to register a shutdown event of the server.\n\t */\n",
    "141679": "\t/** \n\t * Used by Parsers to register for TCP/UDP events.  \n\t * \n\t * @param port\tarray of server ports the parser is interested in\n\t * @param tcpflags\tarray of TCP flags in base 10, the parser is interested in.  Data packets usually arrive on 24 (ACK/PSH) and 16 (ACK).  For UDP, leave null.\n\t */\n",
    "142008": "    /**\n     * Updates the display area of the window.\n     */\n",
    "142012": "    /**\n     * Paints the image on the window.\n     */\n",
    "142352": "\t/**\n\t * Looks for an Annotation in the provided AnnotationGrouping with the given name.\n\t * Used for adding multiple files to the same Annotation to suport bar and bam file formats.\n\t * @return null if not found or its directory.\n\t * - davidnix\n\t */\n",
    "142384": "\t/**\n\t * This is the \"meat\" of the handler.  We figure out where in the\n\t * document we are, based on the current list, and then start puting\n\t * the data into the recipe fields.\n\t */\n",
    "143256": "\t/**\n\t * Moves viewport to an internal link target\n\t * \n\t * @param internal\n\t *            ID or name of target\n\t */\n",
    "143261": "\t/**\n\t * Moves viewport to an internal link target\n\t * \n\t * @param internal\n\t *            ID or name of target\n\t * @param delayed\n\t *            whether to wait before the viewport is set (sometimes needed\n\t *            to let the programm load the dom first)\n\t */\n",
    "143279": "\t/**\n\t * Sets the viewport to display a links target\n\t * \n\t * @param internal\n\t *            ID or name of link target\n\t */\n",
    "144869": "    /**\n     * Removes a <code>ChangeListener</code>.\n     *\n     * @param l the ChangeListener to remove\n     * @see #fireStateChanged\n     * @see #addChangeListener\n     */\n",
    "144873": "    /**\n     * Send a <code>ChangeEvent</code>, whose source is this tabbedpane, to\n     * each listener.  This method method is called each time\n     * a <code>ChangeEvent</code> is received from the model.\n     *\n     * @see #addChangeListener\n     */\n",
    "145278": "\t\t/**\n\t\t * Overwrites paintIcon to get hold of the coordinates of the icon.\n\t\t */\n",
    "145361": "        /** \n         * Invoked when a tab is selected.\n         */\n",
    "145646": "\t/**\n\t * This method is called when the plug-in is stopped\n\t */\n",
    "145647": "\t/**\n\t * Returns the plugin's resource bundle,\n\t */\n",
    "145874": "\t/**\n\t * Close the dialog on a button event.\n\t * \n\t * @param actionEvent\n\t *            ActionEvent\n\t */\n",
    "146040": "   /** Returns the color of this edge as Color. */\n",
    "146042": "   /** Set the color of this Edge to the Color <tt>color</tt>. */\n",
    "146049": "   /** Set the length of this Edge to the int <tt>len</tt>. */\n",
    "146051": "   /** Set the visibility of this Edge to the boolean <tt>v</tt>. */\n",
    "146057": "    /** Switches the endpoints of the edge */\n",
    "146119": "    /** Returns an Iterator over all nodes in the complete graph. */\n",
    "146127": "    /** Return the current visible locality. */\n",
    "146135": "    /** Returns the current node count. */\n",
    "146138": "    /** Return the Node at int <tt>index</tt>, null if none are available. */\n",
    "146140": "    /** Return the number of Nodes in the cumulative Vector. \n      * @deprecated        this method has been replaced by the <tt>nodeCount()</tt> method.\n      */\n",
    "146141": "    /** Returns the current node count within the VisibleLocality.\n      * @deprecated        this method has been replaced by the <tt>visibleNodeCount()</tt> method.\n      */\n",
    "146142": "    /** Return the number of Nodes in the cumulative Vector. */\n",
    "146144": "    /** Returns the current node count within the VisibleLocality. */\n",
    "146145": "    /** Registers the Node <tt>node</tt> via its ID String <tt>id</tt>. \n      *\n      * @param id the ID of the object.\n      * @param node the Node to be registered.\n      */\n",
    "146149": "    /** Returns true if the graph contains the Node <tt>node</tt>. */\n",
    "146151": "    /** Return the Edge at int <tt>index</tt>, null if none are available. */\n",
    "146152": "    /** Return the number of Edges in the cumulative Vector. \n      * @deprecated        this method has been replaced by the <tt>edgeCount()</tt> method.\n      */\n",
    "146154": "   /** Return the first Nodes whose label contains the String <tt>substring</tt>,      \n     * null if no match is found. \n     * @param substring The Substring used as a query.\n     */\n",
    "146155": "    /** Return the number of Edges in the cumulative Vector. */\n",
    "146158": "    /** Add the Edge <tt>edge</tt> to the graph. */\n",
    "146161": "    /** Add an Edge from Node <tt>from</tt> to Node <tt>to</tt>, \n      * with tension of int <tt>tension</tt>, returning the Edge.\n      */\n",
    "146162": "    /** Returns true if the graph contains the Edge <tt>edge</tt>. */\n",
    "146163": "   /** Adds a Node, provided its label.  The node is assigned a unique ID.\n     * @see com.touchgraph.graphlayout.graphelements.GraphEltSet\n     */\n",
    "146166": "   /** Return the first Nodes whose label contains the String <tt>substring</tt>, \n     * null if no match is found. */\n",
    "146167": "   /** Adds a Node, provided its ID and label.\n     * @see com.touchgraph.graphlayout.Node\n     */\n",
    "146168": "    /** Return an Edge spanning Node <tt>from</tt> to Node <tt>to</tt>. */\n",
    "146169": "    /** Delete the Edge <tt>edge</tt>. */\n",
    "146171": "    /** Delete the Edges contained within the Vector <tt>edgedToDelete</tt>. */\n",
    "146174": "   /** Delete the Edge spanning Node <tt>from</tt> to Node <tt>to</tt>,\n     * returning true if successful. */\n",
    "146177": "    /** Delete the Nodes contained within the Vector <tt>nodesToDelete</tt>. */\n",
    "146178": "    /** Returns a random node, or null if none exist (for making random graphs). */\n",
    "146182": "    /** Return the first Node, null if none exist. */\n",
    "146183": "    /** Clear all nodes and edges. */\n",
    "146184": "   /** A way of iterating through all the nodes.\n     * Maybe too complex, and should be replaced by iterators.\n     */\n",
    "146187": "    /** iterates through pairs of Nodes. */\n",
    "146188": "    /** Iterates through Edges. */\n",
    "146202": "    /** Returns an Iterator over all edges in the complete graph. */\n",
    "146223": "    /** Returns the current edge count in the complete graph. \n      */\n",
    "146228": "    /** Return the number of Edges in the Locality. \n      * @deprecated        this method has been replaced by the <tt>visibleEdgeCount()</tt> method.\n      */\n",
    "146232": "    /** Return the number of Edges in the Locality. \n      */\n",
    "146360": "    /** Start and stop the damper.  Should be placed in the TGPanel too. */\n",
    "146367": "    /** Makes the graph mobile, and slowly slows it down. */\n",
    "146371": "    /** Gently stops the graph from moving */\n",
    "146462": "   /** Initialize panel, lens, and establish a random graph as a demonstration.\n     */\n",
    "146465": "    /** Return the TGPanel used with this GLPanel. */\n",
    "146474": "    /** Sets the horizontal offset to p.x, and the vertical offset to p.y\n      * given a Point <tt>p<tt>. \n      */\n",
    "146477": "    /** Return the horizontal and vertical offset position as a Point. */\n",
    "146484": "    /** Set the rotation angle of this GLPanel (allowable values between 0 to 359). */\n",
    "146486": "    /** Return the rotation angle of this GLPanel. */\n",
    "146494": "    /** Set the locality radius of this TGScrollPane  \n      * (allowable values between 0 to 4, or LocalityUtils.INFINITE_LOCALITY_RADIUS). \n      */\n",
    "146497": "    /** Return the locality radius of this GLPanel. */\n",
    "146504": "    /** Set the zoom value of this GLPanel (allowable values between -100 to 100). */\n",
    "146508": "    /** Return the zoom value of this GLPanel. */\n",
    "146519": "    /** Convert draw position to real position. */\n",
    "146520": "    /** Convert draw position to real position. */\n",
    "146522": "    /** Convert real position to draw position. */\n",
    "146523": "    /** Convert real position to draw position. */\n",
    "146545": "    /** Set the location of this Node provided the Point <tt>p</tt>.\n      */\n",
    "146547": "    /** Return the location of this Node as a Point.\n      */\n",
    "146564": "    /** Return the type of this Node as an int.\n      * @see TYPE_RECTANGLE\n      * @see TYPE_ROUNDRECT \n      * @see TYPE_ELLIPSE\n      * @see TYPE_CIRCLE\n      */\n",
    "146567": "    /**\n     * Set the parameters to be used in communication with the serial port.\n     * The baudrate should be one of the BAUD_RATE constants found in the\n     * SerialComm class. dataBits, stopBits and parity should all be of the\n     * similar constants found in the Java Communications SerialPort class.<BR>\n     * The NMEA standard for serial port communication is 4800 baud with 8 bits\n     * of data, no parity, and one stop bit. All units that support NMEA should\n     * support this speed\n     * @throws java.lang.Exception\n     * @param parity        Parity to be used in serial port communication\n     * @param stopBits      The number of stop bits to be used in serial port communication\n     * @param dataBits      The number of databits to be used in serial port communication\n     * @param baudrate      The baudrate to be used in serial port communication\n     */\n",
    "146571": "    /**\n     * Open the given serial port for communications.\n     * Please use the COM_PORT constants defined in the {@link SerialComm}\n     * package to ensure the correct names for the serial ports are\n     * used.\n     * @throws java.lang.Exception\n     * @param comport   The serial port to open.\n     */\n",
    "146573": "   /** Return the background color of this Node as a Color.\n     */\n",
    "146575": "    /**\n     * Close the previously opened serial port.\n     * @throws java.lang.Exception\n     */\n",
    "146577": "   /** Return the text color of this Node as a Color.\n     */\n",
    "146580": "    /**\n     * Retrieve the latitude and longitude of the current GPS fix.\n     * @return Latitude and longitude\n     */\n",
    "146581": "   /** Set the label of this Node to the String <tt>label</tt>. */\n",
    "146583": "    /**\n     * Set parameters to be used for serial communications\n     * \n     * @throws java.lang.Exception\n     * @param baudrate  Following values are preferred: 1200, 2400, 4800, 9600\n     * @param dataBits  SerialPort.DATABITS_5, DATABITS_6, DATABITS_7, DATABITS_8\n     * @param stopBits  SerialPort.STOPBITS_1, STOPBITS_1_5, STOPBITS_2\n     * @param parity    SerialPort.PARITY_EVEN, PARITY_MARK, PARITY_NONE, PARITY_ODD, PARITY_SPACE\n     */\n",
    "146585": "   /** Return the label of this Node as a String.\n     */\n",
    "146586": "    /**\n     * Retrieve the speed of the current GPS fix.\n     * @return Speed in knots.\n     */\n",
    "146587": "    /**\n     * Close communication with COM port.\n     * Communications can be reopened by another call to the {@link #open(String) open} method.\n     * \n     * @throws java.lang.Exception\n     */\n",
    "146588": "    /**\n     * Gets the input stream used to retrieve data from the COM port.\n     * \n     * @throws java.lang.Exception\n     * @return InputStream affiliated with selected COM port\n     */\n",
    "146589": "   /** Set the fixed status of this Node to the boolean <tt>fixed</tt>. */\n",
    "146590": "    /**\n     * Gets the output stream used to send data to the COM port.\n     * \n     * @throws java.lang.Exception\n     * @return OutputStream affiliated with selected COM port\n     */\n",
    "146592": "    /**\n     * Adds a serial port event listener.\n     * Only one listener per SerialPort is supported. Calling addEventListener\n     * multiple times will simply replace the current SerialPortEventListener\n     * object.\n     * \n     * @throws java.util.TooManyListenersException  If an initial attempt to\n     *              attach a listener succeeds, subsequent attempts will throw\n     *              TooManyListenersException without effecting the first\n     *              listener.\n     * @param listener  The SerialPortEventListener object whose serialEvent\n     *                  method will be called with a SerialEvent describing\n     *                  the event.\n     */\n",
    "146593": "   /** Returns true if this Node is fixed (in place).\n     */\n",
    "146594": "    /**\n     * Retrieve the altitude of the current GPS fix.\n     * @return  Altitude in meters\n     */\n",
    "146595": "    /**\n     * Deregisters event listener registered using addEventListener.\n     * This is done automatically at port close.\n     * \n     */\n",
    "146596": "    /**\n     * Gets the Pseudo Random Noise identificator of this satellite.\n     * @return String representation of the ID\n     */\n",
    "146597": "    /**\n     * Gets the current elevation above the horizon for this satellite.\n     * @return Elevation above horizon\n     */\n",
    "146599": "    /**\n     * Gets the current azimuth of this satellite. 0 is north, 180 is south.\n     * @return Azimuth of satellite\n     */\n",
    "146600": "    /**\n     * Gets the Signal to Noise Ratio for this satellite. The higher the number\n     * the better.\n     * @return Signal to Noise Ratio\n     */\n",
    "146601": "    /**\n     * Sets the Pseudo Random Noise identificator of this satellite.\n     * @param PRN   String representation of the ID\n     */\n",
    "146602": "    /**\n     * Sets the current elevation above the horizon for this satellite.\n     * @param elevation     Elevation above horizon\n     */\n",
    "146603": "    /**\n     * Get the quality of the current GPS fix.<BR>\n     * 0 = invalid<BR>\n     * 1 = GPS fix (SPS)<BR>\n     * 2 = DGPS fix<BR>\n     * 3 = PPS fix<BR>\n     * 4 = Real Time Kinematic<BR>\n     * 5 = Float RTK<BR>\n     * 6 = Estimated (dead reckoning) (NMEA 2.3 feature)<BR>\n     * 7 = Manual input mode<BR>\n     * 8 = Simulation mode<BR>\n     * @return Quality of fix\n     */\n",
    "146605": "    /**\n     * Sets the current azimuth of this satellite. 0 is north, 180 is south.\n     * @param azimuth   Azimuth of satellite\n     */\n",
    "146606": "    /**\n     * Sets the Signal to Noise Ratio for this satellite. The higher the number\n     * the better.\n     * @param SNR   Signal to Noise Ratio\n     */\n",
    "146608": "    /**\n     * Set the \"in use\" status for the satellite with the given PRN number.\n     * This status is used to tell if this satellite is being used for the\n     * current GPS fix or not.\n     * @param status    True if this satellite is used.\n     * @param PRN       The integer equivalent to the satellites PRN number (\"07\" equals 7)\n     */\n",
    "146609": "    /**\n     * Set the \"in use\" status for all the satellites in the array.\n     * This status is used to tell if the satellites are being used for the\n     * current GPS fix or not. This method should not be called with a true\n     * value as it should be used to reset the array. All the satellites in an\n     * array can never, at the same time, be used for a GPS fix.\n     * @param status    False to set all satellites as not being used.\n     */\n",
    "146610": "    /** Returns the local Edge count. */\n",
    "146611": "    /**\n     * Set the availability status for the satellite with the given PRN number.\n     * This status is used to tell if this satellite can be seen by the GPS\n     * device or not.\n     * @param status    True if this satellite is visible.\n     * @param PRN       The integer equivalent to the satellites PRN number (\"07\" equals 7)\n     */\n",
    "146612": "    /**\n     * Set the availability status for all the satellites in the array.\n     * This status is used to tell if the satellites can be seen by the GPS\n     * device or not. This method should not be called with a true\n     * value as it should be used to reset the array. All the satellites in an\n     * array can never, at the same time, be seen by a GPS device\n     * @param status    False to set all satellites as not visible.\n     */\n",
    "146613": "    /**\n     * Add/Update new satellite data to the array\n     * @param element   The satellite data to add/update\n     * @param index     The integer equivalent to the satellites PRN number (\"07\" equals 7)\n     */\n",
    "146614": "    /**\n     * Get the satellite data for the requested satellite\n     * @return          Requested data\n     * @param index     The integer equivalent to the satellites PRN number (\"07\" equals 7)\n     */\n",
    "146616": "    /**\n     * Retrieve the horizontal dilution of the current GPS fix.\n     * @return  Horizontal dilution\n     */\n",
    "146617": "    /** Return the Edge at int <tt>index</tt>. */\n",
    "146621": "    /**\n     * Gets this objects latitude.\n     * \n     * @return Latitude\n     */\n",
    "146622": "    /** Add the Edge <tt>edge</tt> to the graph. */\n",
    "146624": "    /**\n     * Gets the degrees value of this objects latitude.\n     * \n     * @return Latitude degrees\n     */\n",
    "146625": "    /**\n     * Gets the number of satellites used to calculate current GPS fix.\n     * @return  Number of satellites\n     */\n",
    "146626": "    /**\n     * Gets the minutes value of this objects latitude.\n     * \n     * @return Latitude minutes\n     */\n",
    "146627": "    /**\n     * Gets the seconds value of this objects latitude.\n     * \n     * @return Latitude seconds\n     */\n",
    "146628": "    /** Remove the Edge <tt>edge</tt> from the graph. */\n",
    "146629": "    /**\n     * Gets this objects longitude.\n     * \n     * @return Longitude\n     */\n",
    "146631": "    /**\n     * Gets the degrees value of this objects longitude.\n     * \n     * @return Longitude degrees\n     */\n",
    "146632": "    /**\n     * Gets the minutes value of this objects longitude.\n     * \n     * @return Longitude minutes\n     */\n",
    "146633": "    /** Return the width of this Node. */\n",
    "146634": "    /**\n     * Gets the total number of satellites the GPS receiver can see.\n     * @return  Number of satellites\n     */\n",
    "146635": "    /**\n     * Gets the seconds value of this objects longitude.\n     * \n     * @return Longitude seconds\n     */\n",
    "146638": "    /** Return the height of this Node. */\n",
    "146639": "    /**\n     * Set the changed mask of this listener event.\n     * @param mask  The mask of changed values.\n     */\n",
    "146640": "    /**\n     * Get the changed mask of this listener event.\n     * @return The mask of changed values.\n     */\n",
    "146642": "    /** Returns true if this Node intersects Dimension <tt>d</tt>. */\n",
    "146645": "    /**\n     * Gets the current satellite information, including where in the sky\n     * all the satellites the GPS receiver can see, and which ones are used for\n     * the current GPS fix.\n     * @return  Satellite information\n     */\n",
    "146648": "    /** Returns true if this Node contains the Point <tt>px,py</tt>. */\n",
    "146652": "    /** Returns true if this Node contains the Point <tt>p</tt>. */\n",
    "146654": "    /**\n     * Adds a GPS listener.\n     * This listener will receive new GPS data when it is available.\n     * @param listener  The listener to be added.\n     */\n",
    "146658": "    /**\n     * Remove a GPS listener.\n     * This listener will no longer receive GPS data.\n     * @param listener  The listener to be removed.\n     */\n",
    "146676": "    /**\n     * Set the current fix type.\n     * @param fix Current fix\n     */\n",
    "146677": "    /**\n     * Test that NMEA messages are decoded correctly.\n     * Input one string that contains a NMEA sentence. Not to be used for any\n     * actual data, only for testing.\n     * @param inputBuffer   NMEA sentence\n     */\n",
    "146678": "    /**\n     * Get the current fic\n     * @return Fic\n     */\n",
    "146681": "    /**\n     * Get the current position\n     * @return Position\n     */\n",
    "146682": "    /**\n     * Set the current altitude above mean sea level, in meters.\n     * @param altitude Altitude\n     */\n",
    "146683": "    /**\n     * Get the current altidude.\n     * @return Altitude\n     */\n",
    "146685": "    /**\n     * Set the current velocity, in knots.\n     * @param velocity Velocity\n     */\n",
    "146687": "    /**\n     * Get the current velocity\n     * @return Velocity\n     */\n",
    "146688": "    /**\n     * Set the quality of the current positional fix.\n     * \n     * @param quality Current quality\n     */\n",
    "146689": "    /**\n     * Get the current quality\n     * @return Quality\n     */\n",
    "146691": "    /**\n     * Set the current loss of horizontal precision.\n     * @param horizontalDilution Horizontal dilution\n     */\n",
    "146695": "    /**\n     * Set the Pseude Random Noise identificator of the satellite.\n     * @param PRN PRN ID\n     */\n",
    "146696": "    /**\n     * Get the PRN ID.\n     * @return PRN ID\n     */\n",
    "146698": "    /**\n     * Set the elevation above horizon of satellite.\n     * @param elevation Elevation\n     */\n",
    "146700": "    /**\n     * Get the elevation.\n     * @return Elevation\n     */\n",
    "146702": "    /**\n     * Set the azimuth (direction) of satellite. 0 is North, 180 is South.\n     * @param azimuth Azimuth\n     */\n",
    "146703": "    /**\n     * Get the azimuth.\n     * @return Azimuth\n     */\n",
    "146704": "    /**\n     * Set the Signal to Noise Ratio of signal from satellite. The higher the\n     * number, the better.\n     * @param SNR SNR Ration\n     */\n",
    "146705": "    /**\n     * Get the Signal to Noise Ratio.\n     * @return SNR\n     */\n",
    "146707": "    /**\n     * Set the availability status of this satellite. Set to True, if the\n     * GPS receiver can \"see\" the satellite.\n     * @param available Availability\n     */\n",
    "146709": "    /**\n     * Get the availability of this satellite.\n     * @return Availability\n     */\n",
    "146710": "    /**\n     * Sets the use status of this satellite. Set to True if this satellite is\n     * used for the current positional fix.\n     * @param inUse Use status\n     */\n",
    "146711": "    /**\n     * Get the use status of this satellite.\n     * @return Use status\n     */\n",
    "146712": "    /**\n     * Add/Update new satellite data to the array\n     * @param satellite   The satellite data to add/update\n     * @param PRN         The PRN ID of the satellite\n     */\n",
    "146714": "    /**\n     * Get the satellite data for the requested satellite\n     * @return        Requested data\n     * @param PRN     The PRN ID of the satellite\n     */\n",
    "146717": "    /**\n     * Adds a new configuration parameter to the array.\n     * The \"Name\" attribute in the parameter is used as the key. Any subsequent\n     * addings of the same parameter will overwrite the existing parameter.\n     * @param newParameter  Configuration parameter to add\n     * @throws Exception    If a configuration parameter with the same \"Sort\n     *                      order\" attribute, but a different \"Name\" attribute\n     *                      has already been added.\n     */\n",
    "146718": "    /**\n     * Get a configuration parameter.\n     * @param name  The name of the parameter to get. This is the same as the\n     *              \"Name\" attribute in the configuration parameter.\n     * @return      Configuration parameter.\n     */\n",
    "146719": "    /**\n     * When iterating through an array of config parameters, this lets you know\n     * if the parameter array has any more elements.\n     * @return  True if configuration parameter array has more elements.\n     *          Otherwise false.\n     */\n",
    "146721": "    /**\n     * Gets the next configuration parameter when iterating through the array.\n     * @return  The next available configuration parameter. If the end of the\n     *          array has been reached, returns null.\n     */\n",
    "146723": "    /**\n     * This array does not provide a true iteration to loop through the array,\n     * so each time an array iteration starts you must reset the internal\n     * iterator counter.\n     */\n",
    "146724": "    /**\n     * Removes all configuration parameters from the array.\n     */\n",
    "146729": "    /**\n     * Set what kind of parameter this is.\n     * @param type Type\n     * @throws ParseException If the configuration type is TEXT or NUMBER and the format\n     * variable is not only numbers\n     */\n",
    "146732": "    /**\n     * Get what kind of parameter this is.\n     * @return Type\n     */\n",
    "146734": "    /**\n     * Set the presentation format for the configuration parameter. Use this to\n     * further specify limits for the parameter.\n     * <ul>\n     * <li><code>TEXT</code>: Maximum length of parameter.</li>\n     * <li><code>NUMBER</code>: Maximum digits in number.</li>\n     * <li><code>ENUM</code>: All choices in drop down list, separated with a semi colon. For\n     * example \"Yes;No;Maybe\".</li>\n     * </ul>\n     * @param format Presentation format\n     * @throws ParseException If the configuration type is TEXT or NUMBER and the format\n     * variable is not only numbers\n     */\n",
    "146736": "    /**\n     * Gets the presentation format\n     * @return Presentation format\n     */\n",
    "146738": "    /**\n     * Sets the short description of the parameter. WIGS GUI will use this value\n     * in front of the text field or drop down list.\n     * @param label Short description\n     */\n",
    "146745": "    /**\n     * The order in which the configuration parameters are displayed in the GUI.\n     * The lowest number is displayed at the top. This number must not be used\n     * by any other config parameters. If an element with the same sort order\n     * already exists in an NMEA_ProviderConfigParameterArray, the new element\n     * cannot be put into the array.\n     * @param sortOrder Sort order\n     */\n",
    "146746": "    /**\n     * Get the sort order\n     * @return Sort order\n     */\n",
    "146753": "    /**\n     * Gets this GPS point's longitude.\n     * \n     * @return Longitude\n     */\n",
    "146757": "    /**\n     * Adds a GPS_DataListener\n     * @param listener The listener to be added\n     */\n",
    "146758": "    /**\n     * Add the specified listener to the list of listeners that listen to\n     * changes in the GPS positional and satellite data.\n     * @param listener Listener to add.\n     */\n",
    "146760": "    /**\n     * Removes an ActionListener\n     * @param listener The listener to be removed\n     */\n",
    "146761": "    /**\n     * Remove the specified listener to the list of listeners that listen to\n     * changes in the GPS positional and satellite data.\n     * @param listener Listener to remove.\n     */\n",
    "146763": "    /**\n     * Validates the config parameter. This method checks if the value to be\n     * used conforms to the type of the config parameter.\n     * @return True if this config parameters' value is within the bounds of the\n     * preset requirements. Otherwise false. Also returns false if the actual\n     * value is empty. In other words, the value to be used is not allowed to be\n     * empty.\n     */\n",
    "146764": "    /**\n     * Open connection with GPS receiver using the input provider.\n     * @param provider NMEA provider to open connection with.\n     * @return True, if the connection was opened succesfully. Otherwise false.\n     */\n",
    "146767": "    /**\n     * Close the connection to the GPS receiver connected to the input provider.\n     * @param provider NMEA provider to close connection with.\n     * @return True, if the connection was succesfully closed. Otherwise false.\n     */\n",
    "146768": "    /**\n     * Decode the provided NMEA message.<br>\n     * The updated data is sent to all GPS_DataListeners.\n     * @param NMEA The NMEA message to be decoded.\n     */\n",
    "146769": "    /**\n     * Gets the name of this provider.\n     * @return Provider name\n     */\n",
    "146777": "    /**\n     * Gets the description of this provider.\n     * @return Description of what this provider does.\n     */\n",
    "146787": "    /**\n     * Set a configuration to this provider so that the provider knows how to\n     * communicate with the GPS device.\n     * @param parameters    The configuration to set.\n     * @throws Exception    If not all configuration parameters have been set.\n     */\n",
    "146798": "    /**\n     * Get the configuration parameters needed to communicate with the GPS device.\n     * @return Configuration parameters.\n     */\n",
    "146827": "    /**\n     * Close the communication with the GPS device.\n     * @return True if communication was succesfully closed, otherwise false.\n     */\n",
    "146834": "    /**\n     * Convert string to BigDecimal with degree information. *\n     */\n",
    "146843": "    /**\n     * Convert a string in \"hhmmss\" format to a Date object.\n     * This will use the current date on the client computer.\n     */\n",
    "146861": "    /**\n     * Add a listener to listen for received NMEA messages.\n     * @param listener The listener which shall receive the NMEA messages when ready.\n     */\n",
    "146869": "    /**\n     * Remove a listener from the list of listeners who receives NMEA messages.\n     * @param listener The listener to be removed.\n     */\n",
    "146870": "    /**\n     * Produce a concise string that just lists \"class.function(file:line)\" at\n     * the point where the function is called. Pretty much like what C/C++\n     * folks used to have with the __FILE__ and __LINE__ macros, but in fact\n     * better. This is _not_ a stack trace. \n     * <P>\n     * The file:line string has a format that is parseable by emacs\n     * compilation mode. \n     * <P>\n     * Note: this function produces a class.function(file:line) that\n     * corresponds to _where_ it is called. If you want to call this\n     * function in an error reporting function (e.g., assertMsg()), use the\n     * function {@link #lineAndFile(int)}, because otherwise the\n     * class.function(file:line) of the error reporting function\n     * (e.g. assertMsg()) itself is returned.\n     *\n     * @return  a string that looks like \"class.function(file:line)\"\n     * @see #lineAndFile(int) lineAndFile(int) */\n",
    "146872": "    /**\n     * Produce a concise string \"class.function(file:line)\" corresponding to\n     * the call frame at level stackDepth.  It is typically used for\n     * constructing error reporting functions, such as assertMsg(). Usually, the\n     * stackDepth will be 2: top of stack (depth 0) is lineAndFile(int), that\n     * is, the call frame of this function itself; one level up (depth 1)\n     * is (e.g.) assertMsg(); depth 2 is the function that called assertMsg().\n     * <P>\n     * @param stackDepth The stack frame for which\n     *    \"class.function(file:line)\" is wanted (0 is this function itself)\n     * @return  a string that looks like \"class.function(file:line)\"\n     * @see #lineAndFile() lineAndFile() \n     */\n",
    "146957": "    /**\n     * The same as {@link BaseCmdLine (String[])} but it also makes sure\n     * that all arguments specified in <tt>names</tt> and having number of values specified\n     * in <tt>lengths</tt> are removed from the argument list. <P>\n     *\n     * Note that \"removing\" does not mean that the arguments are lost - they are still\n     * normally accessible by <tt>get...</tt> and <tt>has...</tt> methods.<P>\n     *\n     * This is a convenient way how to remove all known arguments from the list\n     * without explicit calls of <tt>getParam()</tt> or/and <tt>hasOption()</tt> methods.\n     * <P>\n     * An example:  Let's have a command-line\n     * <PRE>\n     *   -name Katrin Sengerova -age 7 -v bar -foo\n     * </PRE>\n     * To make sure that no other argument appears on the command-line, we can do:\n     * <PRE>\n     *   public static void main (String[] args) {\n     *     BaseCmdLine cmd =\n     *        new BaseCmdLine (args,\n     *                         new String[] {\"-name\", \"-age\", \"-v\", \"-foo\"},\n     *                         new int[]    {2,        1,      1,    0} );\n     *     if (cmd.params.length > 0)\n     *        System.err.println (\"Error on cmd line...\");\n     *     ...\n     *   }\n     * </PRE><P>\n     *\n     * @param argv array of arguments names and values\n     * @param names array of argument names which should be removed from the <tt>argv</tt>\n     * @param lengths array where each element represents a number of values associated with\n     *                a corresponding argument from array <tt>names</tt>; note that sizes\n     *                of <tt>names</tt> and <tt>lengths</tt> arrays should be the same\n     */  \n",
    "146961": "    /**\n     * The same as {@link BaseCmdLine (String[])} but it also sets\n     * how are methods <tt>getParam()</tt> and <tt>hasParam</tt>\n     * case sensitive.\n     *\n     * @param argv array of arguments names and values\n     * @param ignoreCase if true all subsequent comparison of names will be case-insensitive\n     *                   (default is case-sensitive)\n     */  \n",
    "146964": "    /**\n     * A combinantion of {@link BaseCmdLine (String[],boolean)} and \n     * {@link BaseCmdLine (String[],String[],int[])}. <P>\n     *\n     * @param argv array of arguments names and values\n     * @param ignoreCase if true all subsequent comparison of names will be case-insensitive\n     *                   (default is case-sensitive)\n     * @param names array of argument names which should be removed from the <tt>argv</tt>\n     * @param lengths array where each element represents a number of values associated with\n     *                a corresponding argument from array <tt>names</tt>; note that sizes\n     *                of <tt>names</tt> and <tt>lengths</tt> arrays should be the same\n     */  \n",
    "146968": "    /**\n     * Ask if a given argument exists. <P>\n     *\n     * Note that it does not change <tt>params</tt> field, which may result\n     * (if used by multiple threads) that next time it can give a different\n     * answer (when an another thread extracted the <tt>name</tt> as a value\n     * of some other argument). Surely unprobable :-)\n     * <P>\n     * Why does it not change <tt>params</tt>? Because this method does not\n     * know how many values are associated with this parameter. Therefore,\n     * nothing can be removed from the list of arguments. However, if you\n     * know that this argument has actually no value associated at all - and\n     * you need to remove it from the list of arguments - use method\n     * {@link #hasOption(String)} instead.\n     * <P>\n     *\n     * @param name an argument we are looking for\n     * @return true if <tt>name</tt> was found on the command-line\n     */\n",
    "146972": "    /**\n     * Check if an argument <TT>name</TT> exists, and remove it from the\n     * argument list (so it is not any more in <tt>params</tt> field). <P>\n     *\n     * This is a convenient combinantion of methods <tt>hasParam(name)</tt> (which\n     * only checks existence) and <tt>getParam(name,0)</tt> (which removes\n     * named argument from the list).\n     *\n     * @param name an argument we are looking for\n     * @return true if <tt>name</tt> was found on the command-line\n     *\n     * @see #getParam(String,int) getParam\n     * @see #hasParam(String) hasParam\n     */\n",
    "146975": "    /**\n     * Extract an argument <TT>name</TT> with its value.\n     * This is a convenient method for <tt>getParam (String name, 1)</tt>.\n     *\n     * @param name an argument we are asking for\n     * @return a value of this argument, or null if <tt>name</tt> was not found,\n     *         or if it has no value at all\n     *\n     * @see #getParam(String,int) getParam\n     */\n",
    "147557": "\t/**\n\t * Create a <code>JMenuItem</code> for use internally\n\t * with a popup menu.\n\t * \n\t * @param title\t\tLabel of the menu item\n\t * @param action\tActionCommand the menu item calls\n\t * @return\tJMenuItem\n\t */\n",
    "147561": "\t/**\n\t * Constructs a JButton for use in a toolbar.\n\t * \n\t * @param imageName\t\t\tPath of the image to use as the button's icon\n\t * @param actionCommand\t\tAction command sent by the button\n\t * @param toolTipText\t\tTool tip help text\n\t * @param altText\t\t\tText of the button of the image cannot be loaded\n\t * \n\t * @return\t\t\t\t\tThe constructed button\n\t */\n",
    "147564": "\t/**\n\t * Retreive the instance of <code>InternalFrame</code> that is housing this\n\t * toolbar.\n\t * \n\t * @return\t\tThe <code>InternalFrame</code> that is housing the toolbar.\n\t */\n",
    "147569": "\t/**\n\t * Adds the JTable to the Panel.\n\t * <p>\n\t * Not all child classes of this Panel are alike.  Because of this,\n\t * it is often desirable to add additional labels, toolbars, or other\n\t * GUI objects <b>before</b> adding the table.  Since we cannot specify\n\t * that the table is the <b>last</b> object with any available layout\n\t * managers, this is a dirty fix to get around it.\n\t */\n",
    "147582": "\t/**\n\t * Generates a new <code>JMenuItem</code>\n\t * \n\t * @param label\t\t\tLabel to be displayed\n\t * @param mnemonic\t\tMnemonic to use\n\t * @param keyStroke\t\tAccelerator\n\t * @param command\t\tAction Command\n\t * @param al\t\t\tAcition Listener\n\t * @return JMenuItem\n\t */\n",
    "147588": "\t/**\n\t * Report an error to the system.  The error message it outputted to the\n\t * logger and also diplayed in an internal <code>JOptionPane</code> to alert\n\t * the user.\n\t * <p>\n\t * Typically this is called from a catch block.  For example:\n\t * <p>\n\t * <code>\n\t * try {<br>\n\t * \t\tsomethingRisky<br>\n\t * } catch (Exception e) {<br>\n\t * \t\treportError(\"Unknown Excpeption\", e.getMessage());<br>\n\t * }\n\t * </code>\n\t * <p>\n\t * This is merely a convience function and may not be applicable to all situations.\n\t * \n\t * @param title\t\tA short description of the error\n\t * @param message\tThe <code>Exception</code> that cause the error.\n\t */\n",
    "147596": "\t/**\n\t * Writes the firewall DOM object to the specified file name.\n\t * \n\t * @param file\tFile to write the firewall configuration to\n\t * @throws IOException\n\t * @throws MappingException\n\t * @throws ValidationException\n\t * @throws MarshalException\n\t */\n",
    "147603": "\t/**\n\t * Removes the scrub rule from the specified row.\n\t * \n\t * @param row\tThe row index of the scrub rule to be removed.\n\t */\n",
    "147607": "\t/**\n\t * Sets the file we are working with\n\t * \n\t * @param file\tFile to save data to\n\t */\n",
    "147613": "\t/**\n\t * Given a string, returns a <code>null</code> if the value is \"\",\n\t * otherwise returns the string.\n\t *\n\t * @param\tobj The string to examine\n\t * @return\tString Null; or the Object representation of the string.\n\t */\n",
    "147614": "\t/**\n\t * Reconstructs a To object from the given Vector of Host, Interface, and Network\n\t * objects.\n\t * \n\t * @param  vector\tThe Vector to be converted\n\t * @return To\t\tThe generated To object\n\t */\n",
    "147615": "\t/**\n\t * Returns the DOM Tag name associated with a specified column\n\t * \n\t * @param columnIndex\tColumn to retrieve the tag name for\n\t * @return\tDOM tag name of column\n\t */\n",
    "147616": "\t/**\n\t * Converts an <code>Object</code> to a primative type <code>int</code>.\n\t * While you can plug a primative into a <code>Vector</code>, you can\n\t * only retreive a <code>Object</code>, and casting back to a primative\n\t * is very nasty to have to do repeatedly.\n\t * \n\t * @param obj\tObject to cast to primative <code>int</code>\n\t * @return\tThe <code>int</code> value of the supplied <code>Object</code>\n\t */\n",
    "147618": "\t/**\n\t * Generates a <code>java.util.Vector</code> from a\n\t * given <code>Enumeration</code>\n\t * \n\t * @param enumeration\tEnumeration to be transformed\n\t * @return\tVector\n\t */\n",
    "147624": "\t/**\n\t * Appends the enumeration to the supplied Vector\n\t * \n\t * @param vector\t\tVector to append to\n\t * @param enumeration\tEnumeration to append to the Vector\n\t * @return Passed Vector + Enumeration\n\t */\n",
    "147627": "\t/**\n\t * Create a new, empty NAT declaration.\n\t * \n\t * @see #addBottom\n\t */\n",
    "147630": "\t/**\n\t * Removes the NAT declaration from the specified row in the table.\n\t * \n\t * @param row\tRow to remove.\n\t */\n",
    "147641": "\t/**\n\t * Returns the <code>Firewall</code> stored by the <code>TableModel</code>\n\t * \n\t * @return\tFirewall\n\t */\n",
    "147643": "\t/**\n\t * Create a new, empty rule.  By default this is placed at the bottom.\n\t * \n\t * @see #addBottom\n\t */\n",
    "147649": "\t/**\n\t * Creates a new rule with a specific index\n\t * \n\t * @param num\tIndex of the new rule\n\t */\n",
    "147651": "\t/**\n\t * Create a new, empty NAT declaration.\n\t * \n\t * @see #addBottom\n\t */\n",
    "147654": "\t/**\n\t * Removes the NAT declaration from the specified row in the table.\n\t * \n\t * @param row\tRow to remove.\n\t */\n",
    "147655": "\t/**\n\t * Adds a new, blank rule to the bottom of the rule list.\n\t */\n",
    "147662": "\t/**\n\t * Adds a new, blank rule to the top of the rule list.\n\t */\n",
    "147666": "\t/**\n\t * Given an Object, extracts the last segment of the full\n\t * class name (read: removes the package path from it)\n\t * \n\t * @param parent\n\t * @return String\n\t */\n",
    "147670": "\t/**\n\t * Adds a new, blank rule below the specified index\n\t * \n\t * @param rowIndex\tIndex to precede the new rule\n\t */\n",
    "147671": "\t/**\n\t * Given an Object, casts it into the appropriate PfPro\n\t * class and returns the result of getName().  This works\n\t * only for objects of type Firewall, Interface, Network, Host,\n\t * and Service.  If the passed Object is not an instance of\n\t * one of these classes, the result of the Object's toString()\n\t * method is returned.\n\t * \n\t * @param obj\n\t * @return\tThe result of getName() after casting or toString() otherwise\n\t */\n",
    "147682": "\t/**\n\t * Adds a new blank rule above the current row.\n\t * \n\t * @param rowIndex\tThe row to place the rule before\n\t */\n",
    "147701": "\t/**\n\t * Removes the rule from the specified row in the table.\n\t * \n\t * @param row\tRow to remove.\n\t */\n",
    "147702": "\t/**\n\t * Exits the application, saving the preferences as it goes\n\t */\n",
    "149712": "\t/**\n\t * Returns the header response. \n\t * \n\t * @return header response\n\t */\n",
    "151410": "\t/**\n\t * find contact by id\n\t * \n\t * @param id\n\t * @return contact\n\t */\n",
    "151414": "\t/**\n\t * select contacts and apply sort\n\t * \n\t * @param first\n\t * @param count\n\t * @param sortProperty\n\t * @param sortAsc\n\t * @return list of contacts\n\t */\n",
    "151422": "\t/**\n\t * add contact to the database\n\t * \n\t * @param contact\n\t */\n",
    "151425": "\t/**\n\t * delete contact from the database\n\t * \n\t * @param contact\n\t */\n",
    "151433": "\t/**\n\t * generates a new contact\n\t * \n\t * @return generated contact\n\t */\n",
    "152575": "    /**\n     * Returns the structure's tag, which specifies its type.  This tag is a\n     * value between 0 and 8, as defined by the <code>ITEM_*</code> constants\n     * in this class.  (When Java 5 is the minimum JVM for NetBeans, these\n     * constants can be replaced with an enum.)\n     */\n",
    "152578": "        /**\n         * Returns the constant pool entry which initializes this variables.\n         */\n",
    "152581": "        /**\n         * Returns  the offset of the new instruction that created \n         * the object being stored in the location.\n         */\n",
    "152593": "    /**\n     * Returns the generic type information associated with this field.  \n     * If this field does not have generic type information, then null \n     * is returned.\n     */\n",
    "152609": "    /**\n     * Returns the default annotation value for the element\n     * defined by this method.  Null is returned if no default \n     * is specified for this element, or if the class that contains \n     * this method does not define an annotation type.\n     */\n",
    "152611": "    /**\n     * Returns the number of attributes in this map.\n     */\n",
    "152615": "    /**\n     * Returns true if no attributes exist in this map.\n     */\n",
    "152618": "    /**\n     * Returns true if an attribute of the specified name exists in this map.\n     */\n",
    "152620": "    /**\n     * Returns a set of names of all of the attributes in this map.\n     */\n",
    "152628": "        /**\n         * The <code>offset_delta</code> value for the frame is the value \n         * of the tag item, frame_type.\n         */\n",
    "152632": "        /**\n         * The <code>offset_delta</code> value for the frame is the value \n         * <code>(frame_type - 64)</code>.\n         */\n",
    "152637": "        /**\n         * Returns the verification type info for the single stack item\n         * referenced by this frame.\n         */\n",
    "152642": "        /**\n         * Returns the <code>offset_delta</code> for this frame type.\n         */\n",
    "152644": "    /**\n     * Returns the major version number of this classfile.\n     */\n",
    "152651": "    /**\n     * Returns the minor version number of this classfile.\n     */\n",
    "152657": "    /**\n     * Returns the generic type information associated with this class.  \n     * If this class does not have generic type information, then null \n     * is returned.\n     */\n",
    "152665": "    /**\n     * Returns the enclosing method for this class.  A class will have an\n     * enclosing class if and only if it is a local class or an anonymous\n     * class, and has been compiled with a compiler target level of 1.5 \n     * or above.  If no such attribute is present in the classfile, then\n     * null is returned.\n     */\n",
    "152672": "    /**\n     * Returns the constant pool entry for the enclosing class.\n     */\n",
    "152673": "    /**\n     * Returns whether the enclosing method attribute describes a method\n     * the inner class is defined within.  If false, then the inner\n     * class was defined in an init block (or statement) in the class,\n     * outside of any method or constructor bodies.\n     */\n",
    "152675": "    /**\n     * Returns the constant pool entry for the enclosing method, or\n     * null if the inner class was defined outside of any method or\n     * constructor bodies.\n     *\n     * Note: a CPNameAndTypeInfo instance is returned because the method\n     * is external to the enclosed class.  Do not attempt to cast it to a\n     * CPMethodInfo type, which is an internal method structure.\n     */\n",
    "152686": "    /**\n     * Returns the \"internal\" classname, as defined by the JVM \n     * Specification, without any parameter or return type \n     * information.  For example, the name for the String\n     * class would be \"java/lang/String\".  Inner classes are \n     * separated from their outer class with '$'; such as\n     * \"java/util/HashMap$Entry\".  Array specifications are\n     * stripped; use getType() instead.\n     */\n",
    "152689": "    /**\n     * Returns the \"external\" classname, as defined by the \n     * Java Language Specification, without any parameter\n     * or return type information.  For example, the name for the\n     * String class would be \"java.lang.String\".  Inner classes\n     * are separated from their outer class with '.'; such as\n     * \"java.util.HashMap.Entry\".  Arrays are shown as having one\n     * or more \"[]\" characters behind the base classname, such\n     * as \"java.io.Files[]\".\n     */\n",
    "152690": "    /**\n     * Returns true if this annotation is loaded by the Java Virtual\n     * Machine to be available via the Java reflection facility.\n     */\n",
    "152693": "    /**\n     * Returns the \"external\" classname, as defined by the \n     * Java Language Specification, without any parameter\n     * or return type information.  For example, the name for the\n     * String class would be \"java.lang.String\".  Inner classes\n     * are separated from their outer class with '.'; such as\n     * \"java.util.HashMap.Entry\".  Unless suppressed, arrays are \n     * shown as having one or more \"[]\" characters behind the \n     * base classname, such as \"java.io.Files[]\".\n     */\n",
    "152700": "    /**\n     * Returns the classname without any package specification.\n     */\n",
    "152712": "    /**\n     * Compares this ClassName to another Object.  If the Object is a \n     * ClassName, this function compares the ClassName's types.  Otherwise,\n     * it throws a <code>ClassCastException</code>.\n     *\n     * @param   obj the <code>Object</code> to be compared.\n     * @return  the value <code>0</code> if the argument is a string\n     *\t\tlexicographically equal to this string; a value less than\n     *\t\t<code>0</code> if the argument is a string lexicographically \n     *\t\tgreater than this string; and a value greater than\n     *\t\t<code>0</code> if the argument is a string lexicographically\n     *\t\tless than this string.\n     * @exception <code>ClassCastException</code> if the argument is not a\n     *\t\t  <code>ClassName</code>. \n     * @see     java.lang.Comparable\n     */\n",
    "152719": "    /**\n     * Compares its two arguments for order.  Returns a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal\n     * to, or greater than the second.<p>\n     *\n     * @param o1 the first object to be compared.\n     * @param o2 the second object to be compared.\n     * @return a negative integer, zero, or a positive integer as the\n     * \t       first argument is less than, equal to, or greater than the\n     *\t       second. \n     * @throws ClassCastException if the arguments' types prevent them from\n     * \t       being compared by this Comparator.\n     */\n",
    "152745": "    /**\n     * Suppress multiple instances of the same type, as well as any\n     * immutability attacks (unlikely as that might be).  For more information\n     * on this technique, check out Effective Java, Item 57, by Josh Bloch.\n     */\n",
    "154443": "\t/**\n\t * Get current window state\n\t * \n\t * @see javax.portlet.WindowState\n\t *\n\t * @return portlet window state\n\t */\n",
    "156270": "\t/**\n\t * Dump the component trees to log.\n\t * \n\t * @param filter\n\t *            Show only the components, which path contains the\n\t *            filterstring.\n\t */\n",
    "156373": "\t/**\n\t * Returns whether the head has already been rendered.\n\t * @return boolean\n\t */\n",
    "156381": "\t/**\n\t * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT CALL.\n\t * \n\t * Resets the state of head rendering.\n\t */\n",
    "156732": "\t/**\n\t * Listener method invoked on form submit with errors\n\t * \n\t * @param target\n\t * @param form\n\t * \n\t * TODO 1.3: Make abstract to be consistent with onsubmit()\n\t */\n",
    "157048": "\t/**\n\t * generats <code>count</code> number contacts and puts them into\n\t * <code>collection</code> collection\n\t * \n\t * @param collection\n\t * @param count\n\t */\n",
    "157049": "\t/**\n\t * Retrieves contact dao bean. This bean should not be serialized so BE\n\t * CAREFUL when using it.\n\t * \n\t * @return contact dao bean\n\t */\n",
    "157052": "\t/**\n\t * Returns a lazy init proxy for the dao bean. This proxy is safe to\n\t * serialize and will take up very little space when serialized.\n\t * \n\t * @return a lazy init proxy for the dao bean\n\t */\n",
    "158150": "\t/**\n\t * Initialize the factory.\n\t * \n\t * @param locator\n\t *            context locator\n\t */\n",
    "158828": "\t/**\n\t * This method should be implemented by subclasses to provide behavior for\n\t * the clear button.\n\t * \n\t * @param button\n\t *            the 'clear' button\n\t * \n\t */\n",
    "159077": "\t/**\n\t * This method is called before the onAttach is called. Code here gets\n\t * executed before the items have been populated. \n\t */\n",
    "164848": "  /**\n   * Test of add method, of class org.meshcms.util.Path.\n   */\n",
    "164851": "  /**\n   * Returns the quality setting.\n   */\n",
    "164852": "  /**\n   * Test of getParent method, of class org.meshcms.util.Path.\n   */\n",
    "164853": "  /**\n   * Sets the content of the clipboard.\n   *\n   * @param dirPath the path of the directory where the files are located\n   * @param names a comma-separated list of the file names\n   * @param cut true for the \"cut\" operation, false for the \"copy\"\n   */\n",
    "164855": "  /**\n   * Marks the clipboard as empty.\n   */\n",
    "164857": "  /**\n   * Enables or disables better quality for image resizing.\n   */\n",
    "164858": "  /**\n   * Test of getPartial method, of class org.meshcms.util.Path.\n   */\n",
    "164859": "  /**\n   * Returns the number of files in the clipboard.\n   */\n",
    "164860": "  /**\n   * Returns the path of the directory where the files are located\n   */\n",
    "164862": "  /**\n   * Test of getCommonPath method, of class org.meshcms.util.Path.\n   */\n",
    "164863": "  /**\n   * Returns true for the \"cut\" operation, false for the \"copy\"\n   */\n",
    "164868": "  /**\n   * Test of isRelative method, of class org.meshcms.util.Path.\n   */\n",
    "164872": "  /**\n   * Test of isRoot method, of class org.meshcms.util.Path.\n   */\n",
    "164875": "  /**\n   * Sets the friendly name of the field.\n   */\n",
    "164876": "  /**\n   * Sets the writer for logging (usually the writer of the web page).\n   */\n",
    "164877": "  /**\n   * Test of isChildOf method, of class org.meshcms.util.Path.\n   */\n",
    "164878": "  /**\n   * Returns the writer (if any).\n   */\n",
    "164880": "  /**\n   * Test of isContainedIn method, of class org.meshcms.util.Path.\n   */\n",
    "164881": "  /**\n   * Sets the static directory.\n   */\n",
    "164887": "  /**\n   * Returns the static directory.\n   */\n",
    "164889": "  /**\n   * Sets the element name of the field.\n   */\n",
    "164891": "  /**\n   * Test of getElementCount method, of class org.meshcms.util.Path.\n   */\n",
    "164893": "  /**\n   * Sets the context URL.\n   */\n",
    "164895": "  /**\n   * Test of getElementAt method, of class org.meshcms.util.Path.\n   */\n",
    "164899": "  /**\n   * Returns the context URL.\n   */\n",
    "164901": "  /**\n   * Test of getLastElement method, of class org.meshcms.util.Path.\n   */\n",
    "164905": "  /**\n   * Sets the date check to on or off. If the date check is on, only newer\n   * files are copied. HTML are always recreated regardless of this option.\n   * Default is true (recommended).\n   */\n",
    "164907": "  /**\n   * Test of getAsLink method, of class org.meshcms.util.Path.\n   */\n",
    "164909": "  /**\n   * Returns the value of the date check option.\n   */\n",
    "164910": "  /**\n   * Test of compareTo method, of class org.meshcms.util.Path.\n   */\n",
    "164914": "  /**\n   * Test of equals method, of class org.meshcms.util.Path.\n   */\n",
    "164917": "  /**\n   * Sets the value of the field.\n   */\n",
    "164919": "  /**\n   * Test of commonPart method, of class org.meshcms.util.Path.\n   */\n",
    "164923": "  /**\n   * Test of replace method, of class org.meshcms.util.Path.\n   */\n",
    "164929": "  /**\n   * Sets the options of the field.&nbsp;To be used only for fields whose type\n   * is {@link #SELECT_OPTION}.\n   */\n",
    "164937": "  /**\n   * Sets both the friendly name and the element name of the field. The value\n   * passed as argument is used as friendly name, while the element name will\n   * be created using {@link #createCode}.\n   */\n",
    "164947": "  /**\n   * Sets the required flag. A required field is supposed to have a value.\n   */\n",
    "164954": "  /**\n   * Defines the return value of <code>doStartTag()</code>. This method can be\n   * overridden by subclasses to change that value. The default implementation\n   * returns SKIP_BODY.\n   *\n   * @see #doStartTag\n   */\n",
    "164955": "  /**\n   * Returns the value of the required flag.\n   */\n",
    "164958": "  /**\n   * Writes the contents of the tag when the page is being edited. The default\n   * implementation calls <code>writeTag()</code>. Subclasses can override it\n   * when they behave differently while editing.\n   */\n",
    "164961": "  /**\n   * Copied from com.opensymphony.module.sitemesh.taglib.AbstactTag for\n   * compatibility with SiteMesh\n   */\n",
    "164962": "  /**\n   * Sets the sender flag. This should be set to true for a field that is\n   * supposed to contain the e-mail address of the sender.\n   */\n",
    "164965": "  /**\n   * Copied from com.opensymphony.module.sitemesh.taglib.AbstactTag for\n   * compatibility with SiteMesh\n   */\n",
    "164968": "  /**\n   * Returns the value of the sender flag.\n   */\n",
    "164975": "  /**\n   * Sets the recipient flag. This should be set to true for a field that is\n   * supposed to contain the e-mail address of the recipient.\n   */\n",
    "164983": "  /**\n   * Returns the value of the recipient flag.\n   */\n",
    "164991": "  /**\n   * Sets the number of rows for the editable field. In general, an\n   * <code>input</code> field is replaced with a <code>textarea</code> when\n   * this number is greater than 1.\n   */\n",
    "164999": "  /**\n   * Returns the number of rows for the editable field.\n   */\n",
    "165016": "  /**\n   * Tries to determine if the value of the field is acceptable. The check\n   * covers required values, e-mail fields and numeric fields.\n   */\n",
    "165026": "  /**\n   * Returns a descriptive name of the field. This is generally the field name.\n   */\n",
    "165032": "  /**\n   * Returns a description of the field.\n   */\n",
    "165040": "  /**\n   * Returns the value of the sender name flag.\n   */\n",
    "165046": "  /**\n   * Sets the sender name flag. This should be set to true for a field that is\n   * supposed to contain the (complete) name of the sender.\n   */\n",
    "165055": "  /**\n   * Returns the value of the subject flag.\n   */\n",
    "165067": "  /**\n   * Sets the subject flag. This should be set to true for a field that is\n   * supposed to contain the subject of the message.\n   */\n",
    "165078": "  /**\n   * Returns the value of the message body flag.\n   */\n",
    "165088": "  /**\n   * Sets the message body flag. If true, this filed is considered to be the\n   * body of the message and will be written without caption\n   */\n",
    "165148": "  /**\n   * Returns the current type of string (with or without prepended slash).\n   */\n",
    "165194": "  /**\n   * This method can be called after processing to know whether the directory\n   * has been fully deleted or not.\n   *\n   * @return <code>true</code> if the directory has been fully deleted, <code>false</code> otherwise.\n   */\n",
    "165208": "  /**\n   * Checks if the images has loaded.\n   * \n   * @return true if the image has been loaded completely.\n   */\n",
    "165212": "  /**\n   * Returns the width of the image.\n   */\n",
    "165213": "  /**\n   * Adds an object to the current path.\n   *\n   * @param o the Object to be added to the current path\n   *\n   * @return a new <code>Path</code> which is the combination of the current\n   * path and the added object\n   */\n",
    "165215": "  /**\n   * Returns the height of the image.\n   */\n",
    "165219": "  /**\n   * Adds two objects to the current path.\n   *\n   * @param o1 Object 1 to add\n   * @param o2 Object 2 to add\n   *\n   * @return a new <code>Path</code> which is the combination of the current\n   * path and the added objects\n   */\n",
    "165225": "  /**\n   * Compares two locales.\n   */\n",
    "165226": "  /**\n   * Return the parent of the current path. The parent of the root path is\n   * '..' (a <code>Path</code> with one element whose value is \"..\").\n   *\n   * @return the parent of the current path.\n   */\n",
    "165237": "  /**\n   * If true, directories will be processed recursively (default false).\n   *\n   * @param recursive it the directories will be processed recursively\n   */\n",
    "165239": "  /**\n   * If true, <code>processDirectory</code> will be called for the\n   * base directory too (default false).\n   *\n   * @param processStartDir if to process the base directory too.\n   *\n   * @see #processDirectory\n   */\n",
    "165240": "  /**\n   * Returns the common part between the two Paths (between <code>this</code> path\n   * and the <code>other</code> path).\n   *\n   * @param other the second path\n   * @return the common path\n   */\n",
    "165241": "  /**\n   * Returns whether directories will be processed recursively or not.\n   *\n   * @see #setRecursive\n   */\n",
    "165242": "  /**\n   * Returns a new image.\n   * \n   * @return the image.\n   */\n",
    "165244": "  /**\n   * Returns whether <code>processDirectory</code> will be called for the\n   * base directory too.\n   *\n   * @see #processDirectory\n   * @see #setProcessStartDir\n   */\n",
    "165245": "  /**\n   * Waits until the image has been loaded completely.\n   */\n",
    "165246": "  /**\n   * If true, files and directories will be sorted used a\n   * <code>FileNameComparator</code>.\n   *\n   * @see FileNameComparator\n   */\n",
    "165249": "  /**\n   * Returns whether files and directories will be sorted used a\n   * <code>FileNameComparator</code> or not.\n   *\n   * @see FileNameComparator\n   * @see #setSorted\n   */\n",
    "165253": "  /**\n   * Sets the directory to be processed. An istance of <code>File</code> is\n   * created and {@link #setInitialDir(File)} is called.\n   *\n   * @param dir the file path as a <code>String</code>\n   */\n",
    "165256": "  /**\n   * Sets the directory to be processed.\n   *\n   * @param dir the directory path as a <code>File</code>\n   */\n",
    "165260": "  /**\n   * Returns the directory to be processed.\n   */\n",
    "165264": "  /**\n   * Starts processing (in a separate thread if instantiated properly).\n   */\n",
    "165268": "  /**\n   * Checkes if the current path is contained in another path.\n   *\n   * @param root the othr path where to check if the current path is contained.\n   *\n   * @return <code>true</code> if the current path is contained in the\n   * given path (at any depth). Example:\n   * <pre>\n   * Path myPath = new Path(\"home/user/myfile.txt\");\n   * myPath.isContainedIn(new Path(\"nohome\")); // returns false\n   * myPath.isContainedIn(new Path(\"home\")); // returns true\n   * myPath.isContainedIn(new Path(\"home/user\")); // returns true\n   * </pre>\n   */\n",
    "165271": "  /**\n   * This method is called during the process, but before any element has been\n   * processed. If it returns false, no processing will take place.\n   *\n   * <p>The base implementation does nothing and returns true.</p>\n   *\n   * @return always true\n   */\n",
    "165272": "  /**\n   * Returns the current path as relative to the given root. Example:\n   * <pre>\n   * Path myPath = new Path(\"home/user/myfile.txt\");\n   * myPath.getRelativeTo(new Path(\"home\")); // returns \"user/myfile.txt\"\n   * </pre>\n   *\n   * @param  root the root to relate this path to.\n   *\n   * @return the current path as relative to the given root.\n   */\n",
    "165273": "  /**\n   * This method is called at the end of the processing. It is called even if\n   * {@link #preProcess} returned false.\n   *\n   * <p>The base implementation does nothing.</p>\n   */\n",
    "165275": "  /**\n   * Returns a <code>File</code> object relative to the given file.\n   *\n   * @param  parent the parent file as a relative base\n   *\n   * @return the new relative file.\n   */\n",
    "165279": "  /**\n   * This method will be called for any file found while parsing the base\n   * directory.\n   *\n   * @param file the file to be processed\n   * @param path the path of the file (relative to the base directory)\n   */\n",
    "165280": "  /**\n   * Returns the number of elements of the current path. Example:\n   * <pre>\n   * new Path().getElementCount(); // returns 0\n   * new Path(\"home/user\").getElementCount(); // returns 2\n   * new Path(\"../user\").getElementCount(); // returns 2\n   *\n   * @return the number of elements the current path has.\n   */\n",
    "165281": "  /**\n   * Parses the given String to get location, template and argument.\n   */\n",
    "165283": "  /**\n   * Returns the element at the given index. There is no check for the index\n   * value, so an <code>ArrayIndexOutOfBoundsException</code> might be thrown.\n   *\n   * @param index the index for the searched element.\n   *\n   * @return element at the given <code>index</code>\n   */\n",
    "165284": "  /**\n   * Parses the given string using the new format (version 3.0).\n   */\n",
    "165286": "  /**\n   * Checks if this module descriptor has been initialized correctly. This is\n   * true if both location and template are not null.\n   */\n",
    "165289": "  /**\n   * Returns the last element of the current path (usually the file name). For\n   * the root path the empty <code>String</code> is returned.\n   *\n   * @return the last element of the Path\n   */\n",
    "165290": "  /**\n   * Performs the search and returns the result.\n   *\n   * @return the CMS Path\n   */\n",
    "165291": "  /**\n   * Returns the name of the module location.\n   *\n   * @see #setLocation\n   */\n",
    "165292": "  /**\n   * Returns the <code>String</code> representation of the current path. The\n   * separator between elements is always a slash, regardless of the platform.\n   */\n",
    "165293": "  /**\n   * Sets the name of the module location. Each in a page needs a\n   * location name which is unique within the page itself.\n   */\n",
    "165294": "  /**\n   * Returns the name of the module template.\n   */\n",
    "165296": "  /**\n   * Sets the name of the module template.\n   */\n",
    "165299": "  /**\n   * Returns the name of the module argument.\n   *\n   * @see #setArgument(String)\n   */\n",
    "165300": "  /**\n   * Compares this path to a new <code>Path</code> built by calling\n   * <code>new Path(o)</code>\n   */\n",
    "165301": "  /**\n   * Sets the name of the module argument. The argument is set to null if that\n   * String is equal to {@link PageAssembler#EMPTY}.\n   */\n",
    "165302": "  /**\n   * Compares two paths. Please note that <code>path1.compareTo(path2)</code>\n   * is different from\n   * <code>path1.toString().compareTo(path2.toString())</code>, since this\n   * method compares the single elements of the paths.\n   *\n   * @param other the path to compare to this path\n   *\n   * @return -1, 0 or 1 as a compare result.\n   */\n",
    "165304": "  /**\n   * Returns the advanced parameters as a <code>Properties</code> object.\n   */\n",
    "165305": "  /**\n   * Returns the value of the requested advanced parameter.\n   */\n",
    "165306": "  /**\n   * Returns the hash code of the <code>String</code> that representes this path.\n   */\n",
    "165307": "  /**\n   * Creates another instance of <code>SiteMap</code>. If <code>force</code>\n   * is true, a new site map is always created and the method\n   * returns after the new site map is completed. If it is false, a new site map\n   * is created only if the current one is too old. In this case, the site map\n   * is created asynchronously and the method returns immediately. The\n   * repository will be cleaned too.\n   *\n   * @param force it to force the SiteMap creation.\n   */\n",
    "165310": "  /**\n   * Sets the advanced parameters values.\n   */\n",
    "165311": "  /**\n   * Checks the two paths for equality. They are equal when their string\n   * representations are equal.\n   */\n",
    "165312": "  /**\n   * Returns the path of the page that contains the module.\n   */\n",
    "165313": "  /**\n   * Sets the path of the page that contains the module.\n   */\n",
    "165314": "  /**\n   * Returns the successor of this <code>Path</code>, as defined in the Javadoc\n   * <code>of java.util.TreeMap.subMap(...)</code>. This is useful when you need\n   * to use that method to get a <em>closed range</em> submap (or headmap, or\n   * tailmap) of <code>Path</code>s.\n   *\n   * @return the successor path\n   */\n",
    "165316": "  /**\n   * Returns the path of the module.\n   */\n",
    "165317": "  /**\n   * Returns the instance of the <code>SiteMap</code> that is currently manage\n   * the site map. Since this object can be replaced with a new one at any\n   * moment, a class that wants to use it should store it in a local variable\n   * and use it for all the operation/method.\n   *\n   * @return the current instance of SiteMap\n   */\n",
    "165320": "  /**\n   * Sets the path of the module.\n   */\n",
    "165322": "  /**\n   * Returns the current configuration of the web application.\n   */\n",
    "165323": "  /**\n   * Returns the date format of the module.\n   */\n",
    "165324": "  /**\n   * Writes to both streams.\n   *\n   * @param b the byte to write\n   * @throws IOException if an I/O error occurs\n   */\n",
    "165325": "  /**\n   * Returns the <code>PageInfo</code> for the given path.\n   */\n",
    "165326": "  /**\n   * Flushes both streams.\n   *\n   * @throws IOException if an I/O error occurs\n   */\n",
    "165327": "  /**\n   * Sets the date format of the module.\n   */\n",
    "165328": "  /**\n   * Closes both streams.\n   *\n   * @throws IOException if an I/O error occurs\n   */\n",
    "165330": "  /**\n   * Returns the CSS style to be applied to the module.\n   */\n",
    "165332": "  /**\n   * Returns the instance of the <code>SiteInfo</code> class that is managing\n   * the site information.\n   *\n   * @see SiteInfo\n   */\n",
    "165334": "  /**\n   * Sets the CSS style to be applied to the module.\n   */\n",
    "165336": "  /**\n   * Returns the path passed as argument.\n   *\n   * @param allowCurrentPath if true and the argument parameter is null, the\n   * page path is returned\n   */\n",
    "165345": "  /**\n   * Convenience method to get full HTML class attribute (e.g.\n   * <code> class=&quot;stylename&quot;</code>. The value is searched in the\n   * given advanced parameter or, alternatively, in the\n   * value of the &quot;style&quot; tag attribute. If both are unavailable,\n   * an empty string is returned.\n   */\n",
    "165348": "  /**\n   * Returns the length of stats (hit counts) measured in days.\n   */\n",
    "165349": "  /**\n   * Returns the next page (same as {@link #next}, but returns null when there\n   * are no more pages.\n   */\n",
    "165352": "  /**\n   * Returns the given path unless it is the current welcome file in its\n   * folder; in this case the folder path is returned.\n   */\n",
    "165355": "  /**\n   * Returns format to be used to display the date. The value is searched in the\n   * given advanced parameter or, alternatively, in the\n   * value of the &quot;date&quot; tag attribute. If both are unavailable,\n   * null is returned.\n   */\n",
    "165359": "  /**\n   * Creates a new directory.\n   *\n   * @param user the user that requests the creation of the directory\n   * @param dirPath the path of the new directory\n   *\n   * @return true if the directory has been created or already\n   * existed, false otherwise\n   */\n",
    "165364": "  /**\n   * Returns the path of the page.\n   */\n",
    "165365": "  /**\n   * Returns the path of the welcome file for the given directory path. This\n   * method returns null if the path is not a directory or if there is no\n   * welcome file into it.\n   */\n",
    "165368": "  /**\n   * Creates a new file. If the extension of the file denotes a web page, the\n   * basic template is copied into the file, otherwise an empty file is created.\n   *\n   * @param user the user that requests the file creation\n   * @param filePath the path of the new file\n   *\n   * @return true if the new file has been created or already existed,\n   * false otherwise\n   */\n",
    "165370": "  /**\n   * Sets the maximum image width.\n   */\n",
    "165371": "  /**\n   * Returns the file name of the page.\n   */\n",
    "165373": "  /**\n   * Returns the depth level of the page.\n   */\n",
    "165374": "  /**\n   * Checks if the given path is the welcome file for its directory.\n   */\n",
    "165375": "  /**\n   * Returns the title of the page (same as {@link #getTitle}).\n   */\n",
    "165376": "  /**\n   * Sets the maximum image height.\n   */\n",
    "165377": "  /**\n   * Returns the time of the last modification made to the page.\n   */\n",
    "165379": "  /**\n   * Copies a file to another file in the same directory. An existing file won't\n   * be overwritten.\n   *\n   * @param user the user that requests the operation\n   * @param filePath the path of the old file\n   * @param newName the name of the new file\n   *\n   * @return true if the new file has been copied, false otherwise\n   */\n",
    "165380": "  /**\n   * Sets the time of the last modification made to the page. This value\n   * should be set equal to the value of <code>java.io.File.lastModified()</code>.\n   */\n",
    "165382": "  /**\n   * Sets the scaling mode. Possible values are {@link #MODE_SCALE} (default),\n   * {@link #MODE_CROP}, {@link #MODE_PADDING} and {@link #MODE_STRETCH}.\n   */\n",
    "165387": "  /**\n   * Sets the padding color (used only when mode is {@link #MODE_PADDING}).\n   * The color must be supplied in hexadecimal format, with or without a #\n   * sign (e.g. #ffcc00 or 123ABC).\n   */\n",
    "165388": "  /**\n   * Return an excerpt of the page content\n   * @return the excerpt\n   */\n",
    "165391": "  /**\n   * Copies a file (or directory) to another file (or directory).\n   * Existing files won't be overwritten.\n   *\n   * @param user the user that requests the operation\n   * @param oldPath the location of the existing file\n   * @param newPath the location of the new copy of the file\n   *\n   * @return true if the new file has been copied, false otherwise\n   */\n",
    "165393": "  /**\n   * Set an excerpt of the page content\n   * @param excerpt the excerpt to set\n   */\n",
    "165401": "  /**\n   * Sets the username for this user.\n   */\n",
    "165402": "  /**\n   * Renames a file.\n   *\n   * @param user the user that requests the operation\n   * @param filePath the path of the file\n   * @param newName the name of the new file\n   *\n   * @return true if the new file has been renamed, false otherwise\n   */\n",
    "165404": "  /**\n   * Returns the user's username.\n   */\n",
    "165406": "  /**\n   * Sets if the default MeshCMS theme is always used for the pages\n   * of the control panel.\n   */\n",
    "165407": "  /**\n   * Sets the password for this user. The password will be encrypted.\n   */\n",
    "165408": "  /**\n   * Sets the password for this user after verification of the old password.\n   * The password will be encrypted.\n   *\n   * @return the result of the operation\n   */\n",
    "165409": "  /**\n   * Returns true if the option to prevent hotlinking is enabled.\n   */\n",
    "165410": "  /**\n   * Moves (or renames) a file.\n   *\n   * @param user the user that requests the operation\n   * @param oldPath the current location of the file\n   * @param newPath the new location of the file\n   *\n   * @return true if the new file has been moved, false otherwise\n   */\n",
    "165412": "  /**\n   * Returns the user's (encrypted) password.\n   */\n",
    "165413": "  /**\n   * Enables or disables hotlinking prevention.\n   */\n",
    "165414": "  /**\n   * Sets the e-mail address of this user.\n   * {@link org.meshcms.util.Utils#checkAddress} is used to verify the new\n   * address.\n   *\n   * @return the result of the operation\n   */\n",
    "165415": "  /**\n   * Returns the minimum time before deleting a backup file,\n   * measured in days.\n   */\n",
    "165418": "  /**\n   * Returns the user's e-mail address.\n   */\n",
    "165419": "  /**\n   * Sets the minimum time before deleting a backup file,\n   * measured in days.\n   */\n",
    "165420": "  /**\n   * Sets the home path for the user. A user can't edit files outside his own\n   * home path.\n   */\n",
    "165422": "  /**\n   * Returns a list of pages contained in the directory that contains the given\n   * path; if the path denotes a directory, its contents are returned.\n   *\n   * @param includeDir if true, the directory itself is included in the list\n   */\n",
    "165423": "  /**\n   * Returns the user's home path.\n   */\n",
    "165424": "  /**\n   * Sets the last modified date of the file to the current time.\n   *\n   * @param user the user that requests the operation\n   * @param filePath the path of the file\n   *\n   * @return true if the date has been changed, false otherwise\n   */\n",
    "165425": "  /**\n   * Sets the length of stats (hit counts) measured in days. Please note that\n   * this value is fixed when the web application is initialized, so if the\n   * value is changed, the new value won't be used until the next restart of the\n   * web application.\n   */\n",
    "165426": "  /**\n   * Sets permissions for the user. This method should be called when creating\n   * the user.\n   */\n",
    "165427": "  /**\n   * Returns the pages contained in the menu as a unmodifiable List.\n   * All members of the list are of type <code>PageInfo</code>.\n   * Pages are sorted using a {@link PageInfoComparator}.\n   */\n",
    "165428": "  /**\n   * Returns the minimum interval between two updates of the site map,\n   * measured in hours.\n   */\n",
    "165429": "  /**\n   * Returns the user's permissions.\n   */\n",
    "165430": "  /**\n   * Returns the preferred locale for the user, in a form like\n   * <code>en_US</code>, <code>it</code> or similar.\n   */\n",
    "165431": "  /**\n   * Sets the minimum interval between two updates of the site map,\n   * measured in hours.\n   */\n",
    "165433": "  /**\n   * Sets the preferred locale for the user.\n   */\n",
    "165435": "  /**\n   * Returns the type of cache to be used for pages.\n   *\n   * @see #setCacheType\n   */\n",
    "165436": "  /**\n   * Loads the guest user.\n   */\n",
    "165437": "  /**\n   * Sets the type of cache to be used for pages. Possible values are\n   * {@link #NO_CACHE}, {@link #IN_MEMORY_CACHE} and {@link #ON_DISK_CACHE}.\n   */\n",
    "165439": "  /**\n   * Returns the name of the mail server (SMTP).\n   */\n",
    "165441": "  /**\n   * Caches a page.\n   */\n",
    "165442": "  /**\n   * Stores the user's profile in a file.\n   */\n",
    "165443": "  /**\n   * Sets the name of the mail server (SMTP).\n   */\n",
    "165444": "  /**\n   * Crypts the password if it has not been encrypted yet.\n   */\n",
    "165445": "  /**\n   * Returns the SMTP username.\n   */\n",
    "165446": "  /**\n   * Verifies the given password agains the one in the current profile.\n   */\n",
    "165447": "  /**\n   * Removes a page from the cache.\n   */\n",
    "165448": "  /**\n   * Returns the correct file in the repository. For example, if you need to\n   * create a temporary copy of /somedir/index.html, you could use\n   * <code>filePath = /somedir/index.html</code> and\n   * <code>fileName = tmp.html</code>.\n   *\n   * @param filePath the path where to search\n   * @param fileName the file name\n   *\n   * @return the searched file\n   */\n",
    "165449": "  /**\n   * Sets the SMTP username.\n   */\n",
    "165452": "  /**\n   * Returns the SMTP password.\n   */\n",
    "165453": "  /**\n   * Check if a page is available in the cache.\n   */\n",
    "165454": "  /**\n   * Verifies the permissions to do a certain thing. Example:\n   * <code>user.canDo(UserInfo.CAN_EDIT_PAGES)</code>\n   */\n",
    "165455": "  /**\n   * Sets the SMTP password.\n   */\n",
    "165458": "  /**\n   * Saves the current configuration to file.\n   */\n",
    "165460": "  /**\n   * Sets a user's detail. Available details are specified in\n   * {@link #DETAILS}. Other details can be set, but they will not be stored\n   * when {@link #store} is called.\n   *\n   * @see #getValue\n   */\n",
    "165461": "  /**\n   * Returns the minimum interval between two updates of the site map,\n   * measured in milliseconds.\n   */\n",
    "165462": "  /**\n   * Returns the value of a specific property. It is used internally, but can\n   * be use to retrieve the value of user's details.\n   *\n   * @see #setDetail\n   */\n",
    "165465": "  /**\n   * Returns the minimum time before deleting a backup file,\n   * measured in milliseconds.\n   */\n",
    "165466": "  /**\n   * Returns the value of the given user detail.\n   */\n",
    "165467": "  /**\n   * Sets the extensions that denote file types that can be edited\n   * using the wysiwyg editor.\n   */\n",
    "165468": "  /**\n   * Returns the name of the user detail at the given index.\n   */\n",
    "165470": "  /**\n   * Returns the state of the automatic redirection to welcome files.\n   */\n",
    "165471": "  /**\n   * Returns a string suitable to describe the user. It can be his full name,\n   * partial name or username, according to the available data.\n   */\n",
    "165473": "  /**\n   * Enables or disables automatic redirection to welcome files.\n   */\n",
    "165474": "  /**\n   * Checks if the user is a guest.\n   */\n",
    "165476": "  /**\n   * Returns the state of directory list blocking.\n   */\n",
    "165477": "  /**\n   * Checks if the user exists. A user exists when the corresponding file\n   * exists.\n   */\n",
    "165479": "  /**\n   * Returns the file object for a given path in the web application. The file\n   * is not checked for existance.\n   *\n   * @param path the path representation of the file\n   *\n   * @return the file object for this path, or null if it's not found\n   */\n",
    "165480": "  /**\n   * Enables or disables blocking of directory listings.\n   */\n",
    "165481": "  /**\n   * When obsolete, info contained in this site map will be discarded when a\n   * new site map is created.\n   */\n",
    "165485": "  /**\n   * Returns the main host name of this website.\n   */\n",
    "165489": "  /**\n   * Sets the main host name of this website.\n   */\n",
    "165494": "  /**\n   * Returns the website description.\n   */\n",
    "165500": "  /**\n   * Sets the website description.\n   */\n",
    "165503": "  /**\n   * Returns the site root path.\n   */\n",
    "165507": "  /**\n   * Returns the keywords related to the website.\n   */\n",
    "165513": "  /**\n   * Sets the keywords related to the website.\n   */\n",
    "165515": "  /**\n   * Returns the <code>Path</code> of a file in the context.\n   *\n   * @see #getFile\n   */\n",
    "165516": "  /**\n   * Creates the output stream.\n   *\n   * @see CacheResponseStream\n   */\n",
    "165517": "  /**\n   * Closes the stream.\n   */\n",
    "165519": "  /**\n   * Returns the author name.\n   */\n",
    "165523": "  /**\n   * Sets the author name.\n   */\n",
    "165530": "  /**\n   * Returns the site name.\n   */\n",
    "165532": "  /**\n   * Saves the configuration to file.\n   *\n   * @return true if the configuration has been saved, false otherwise\n   */\n",
    "165534": "  /**\n   * Returns the theme to be applied to the given path.\n   */\n",
    "165536": "  /**\n   * Sets the site name.\n   */\n",
    "165538": "  /**\n   * Sets the theme to be applied to the given path. If the value is null or\n   * empty, the theme is removed.\n   */\n",
    "165541": "  /**\n   * Returns the menu title for a page. If the menu configuration does not\n   * contain a value for this page, the page title itself is returned.\n   */\n",
    "165543": "  /**\n   * Returns the author's URL.\n   */\n",
    "165545": "  /**\n   * Returns the menu title for the given path (null if not available).\n   */\n",
    "165547": "  /**\n   * Sets the menu title for the given path. If the value is null or empty,\n   * the title is removed.\n   */\n",
    "165548": "  /**\n   * Sets the author's URL. Can be a website URL or a mailto. It is expected\n   * to be a full URL.\n   */\n",
    "165551": "  /**\n   * Returns the page score for the given path (0 if not available).\n   */\n",
    "165554": "  /**\n   * Returns the state of exception hiding.\n   */\n",
    "165555": "  /**\n   * Returns the page score as a string for the given path. An empty string\n   * is returned if the page score is 0.\n   */\n",
    "165557": "  /**\n   * Sets the page score for the given path.\n   */\n",
    "165559": "  /**\n   * Enables or disables hiding of Java exceptions. If enabled, exception will\n   * be catched and not rethrown.\n   */\n",
    "165561": "  /**\n   * Sets the page score for the given path. If the score is 0, it is removed\n   * since 0 is the default.\n   */\n",
    "165562": "  /**\n   * Returns the right website for the given request. Since this is a main\n   * website, it will return the website itself or a virtual website, according\n   * to the requested host name.\n   */\n",
    "165564": "  /**\n   * Returns the hide submenu for the given path (false if not available).\n   */\n",
    "165565": "  /**\n   * Returns the virtual website instance related to the given directory name.\n   * That instance will be created if not found, and will not fail if the\n   * directory does not exist (this is subject to change).\n   */\n",
    "165566": "  /**\n   * Returns the state of whether modules are collapsed in the editor.\n   */\n",
    "165567": "  /**\n   * Checks if the given path is a directory in the file system.\n   *\n   * @param path the Path to check\n   *\n   * @return true if the path is a directory.\n   */\n",
    "165568": "  /**\n   * Returns the MultiSiteManager instance.\n   */\n",
    "165569": "  /**\n   * Returns the hide submenu as a string for the given path. An empty string\n   * is returned if the hide submenu is false.\n   */\n",
    "165572": "  /**\n   * Sets the hide submenu for the given path.\n   */\n",
    "165573": "  /**\n   * Sets whether modules are collapsed in the editor or not.\n   */\n",
    "165577": "  /**\n   * Sets the hide submenu for the given path. If the submenu is shown, it is removed\n   * since false is the default.\n   */\n",
    "165581": "  /**\n   * Returns the directory that contains the given path. This is different from\n   * {@link org.meshcms.util.Path#getParent}, since if the path is known to\n   * be a directory in the web application, the path itself is returned.\n   *\n   * @param path the Path to check\n   *\n   * @return a directory(that contains the given path) as a Path object.\n   */\n",
    "165592": "  /**\n   * Returns the path of the page whose theme is inherited.\n   */\n",
    "165678": "  /**\n   * Returns the path of the module file with the given name.\n   */\n",
    "165689": "  /**\n   * Returns the path of the admin directory.\n   */\n",
    "165735": "  /**\n   * Returns the complete tag used by pages in the admin folder. This way those\n   * pages can set to be themed according to the site preferences (i.e. using\n   * a custom theme or the default admin theme).\n   */\n",
    "165772": "  /**\n   * Returns a string containing a basic HTML page.\n   *\n   * @param pageTitle the content of the &lt;title&gt; tag (if null, the title\n   * will be &quot;New Page&quot;)\n   *\n   * @return a basic \"empty\" HTML page\n   */\n",
    "165811": "  /**\n   * Logs a string by calling <code>ServletContext.log(s)</code>\n   */\n",
    "165823": "  /**\n   * Logs an exception by calling\n   * <code>ServletContext.log(message, throwable)</code>\n   */\n",
    "165835": "  /**\n   * Checks if the file name is one of the welcome files.\n   *\n   * @param fileName the file name to check\n   * @return true if the given file name is known to be a welcome file name.\n   */\n",
    "165849": "  /**\n   * Returns the current welcome file path for the given folder. If there is no\n   * welcome file in that folder, this method returns null.\n   *\n   * @param dirPath the folder where to search the welcome file\n   *\n   * @return the welcome file as a Path object of null if not found.\n   */\n",
    "165921": "\t/**\n\t * Checks the current thumbnail, and creates it if not available or too old.\n\t */\n",
    "166003": "  /**\n   * Returns the path of the theme to be applied to the given path. This depends\n   * on the stored values and on the option to use the default theme for the\n   * admin pages. This method returns null if no theme is found.\n   *\n   * @param pagePath the path of the page who's theme is searched.\n   *\n   * @return the theme of this page as a Path object\n   */\n",
    "166048": "\t/**\n\t * Copies a file (or directory) to another file (or directory). Existing files\n\t * won't be overwritten.\n\t *\n\t * @param oldPath the location of the existing file\n\t * @param newPath the location of the new copy of the file\n\t *\n\t * @return true if the new file has been copied, false otherwise\n\t */\n",
    "166050": "\t/**\n\t * Copies a file to another file in the same directory. An existing file won't\n\t * be overwritten.\n\t *\n\t * @param filePath the path of the old file\n\t * @param newName  the name of the new file\n\t *\n\t * @return true if the new file has been copied, false otherwise\n\t */\n",
    "166051": "\t/**\n\t * Returns the path of the welcome file for the given directory path. This\n\t * method returns null if the path is not a directory or if there is no welcome\n\t * file into it.\n\t */\n",
    "166052": "\t/**\n\t * Creates a new directory.\n\t *\n\t * @param dirPath the path of the new directory\n\t *\n\t * @return true if the directory has been created, false\n\t *         otherwise\n\t */\n",
    "166056": "\t/**\n\t * Creates a new file. If the extension of the file denotes a web page, the\n\t * basic template is copied into the file, otherwise an empty file is created.\n\t *\n\t * @param filePath the path of the new file\n\t *\n\t * @return true if the new file has been created, false\n\t *         otherwise\n\t */\n",
    "166059": "\t/**\n\t * Deletes a file or directory.\n\t *\n\t * @param filePath                  the path of the file\n\t * @param deleteNonEmptyDirectories if true, non-empty directories will be\n\t *                                  deleted too\n\t *\n\t * @return true if the file has been deleted, false otherwise\n\t */\n",
    "166060": "\t/**\n\t * Returns the <code>PageInfo</code> for the given path.\n\t */\n",
    "166061": "\t/**\n\t * Returns the current welcome file path for the given folder. If there is no\n\t * welcome file in that folder, this method returns null.\n\t *\n\t * @param dirPath the folder where to search the welcome file\n\t *\n\t * @return the welcome file as a Path object of null if not found.\n\t */\n",
    "166071": "\t/**\n\t * Returns the current configuration of the web application.\n\t */\n",
    "166077": "\t/**\n\t * Returns the directory that contains the given path. This is different from\n\t * {@link com.cromoteca.meshcms.client.toolbox.Path#getParent}, since if the path is\n\t * known to be a directory in the web application, the path itself is\n\t * returned.\n\t *\n\t * @param path the Path to check\n\t *\n\t * @return a directory(that contains the given path) as a Path object.\n\t */\n",
    "166080": "\t/**\n\t * Returns the file object for a given path in the web application. The file is\n\t * not checked for existance.\n\t *\n\t * @param path the path representation of the file\n\t *\n\t * @return the file object for this path, or null if it's not found\n\t */\n",
    "166106": "\t/**\n\t * Returns the path of the page whose theme is inherited.\n\t */\n",
    "166110": "\t/**\n\t * Checks if the given path is a directory in the file system.\n\t *\n\t * @param path the Path to check\n\t *\n\t * @return true if the path is a directory.\n\t */\n",
    "166113": "\t/**\n\t * Moves (or renames) a file.\n\t *\n\t * @param oldPath the current location of the file\n\t * @param newPath the new location of the file\n\t *\n\t * @return true if the new file has been moved, false otherwise\n\t */\n",
    "166124": "\t/**\n\t * Creates another instance of <code>SiteMap</code>. If <code>force</code> is\n\t * true, a new site map is always created and the method returns after the new\n\t * site map is completed. If it is false, a new site map is created only if the\n\t * current one is too old. In this case, the site map is created asynchronously\n\t * and the method returns immediately. The repository will be cleaned too.\n\t *\n\t * @param force it to force the SiteMap creation.\n\t */\n",
    "166143": "\t/**\n\t * Hidden paths are those that must not be shown in the file manager\n\t * or parsed by the site map.\n\t * @param path\n\t * @return\n\t */\n",
    "166154": "\t/**\n\t * System paths are those that must not be served to the browser.\n\t * @param path\n\t * @return\n\t */\n",
    "166225": "\t/**\n\t * Checks if the file name is one of the welcome files.\n\t *\n\t * @param fileName the file name to check\n\t *\n\t * @return true if the given file name is known to be a welcome file name.\n\t */\n",
    "166316": "\t/**\n\t * Compares two locales.\n\t */\n",
    "166358": "\t/**\n\t * If true, files and directories will be sorted used a\n\t * <code>FileNameComparator</code>.\n\t *\n\t * @see FileNameComparator\n\t */\n",
    "166431": "\t/**\n\t * Returns the minimum interval between two updates of the site map, measured\n\t * in milliseconds.\n\t */\n",
    "166454": "\t/**\n\t * Gets the (translated) label for this CMS item.\n\t * @return\n\t */\n",
    "166508": "\t/**\n\t * Returns the menu title, or the page title if menu title is empty.\n\t */\n",
    "166586": "\t/**\n\t * Returns the minimum time before deleting a backup file, measured in\n\t * milliseconds.\n\t */\n",
    "167141": "\t/**\n\t * Override this method when listening.\n\t */\n",
    "167144": "\t/**\n\t * Override when listening for questions and call receiveAnswer on question.\n\t */\n",
    "167146": "\t/**\n\t * Override when asking questions.\n\t */\n",
    "167163": "\t/**\n\t * Adds some objects to the current path.\n\t *\n\t * @param pathItems the strings to be added to the current path\n\t *\n\t * @return a new <code>Path</code> which is the combination of the current path\n\t *         and the added objects\n\t */\n",
    "167182": "\t/**\n\t * restrict maximu requests left in the JavaSpaces to restrict OutOfMemory\n\t * Error. TODO check the capacity of the JavaSpaces instead of hard coded\n\t * capacity.\n\t */\n",
    "167183": "\t/**\n\t * Read tag <service> attribute \"URL\" from file protocol.\n\t * \n\t * @return nodevalue for URL.\n\t * @throws IOException\n\t */\n",
    "167184": "\t/**\n\t * set parameter number.\n\t * @see org.simBio.sim.analyzer.csv.result.ALaCarte#prepare()\n\t */\n",
    "167188": "\t/**\n\t * prepare XYSeries for each target.\n\t * @see org.simBio.sim.analyzer.csv.CsvMaker#MakeLabelLine()\n\t */\n",
    "167189": "\t/**\n\t * set target value at the XYSeries.\n\t * @see org.simBio.sim.analyzer.csv.CsvMaker#MakeValueLine()\n\t */\n",
    "167199": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.JSProtocolParser.getServiceURL()'\n\t * 'jsProtocolParserProtocol' has tag <service> attribute 'URL'\n\t * Should be ok\n\t */\n",
    "167200": "\t/**\n\t * Return the parent of the current path. The parent of the root path is '..'\n\t * (a <code>Path</code> with one element whose value is \"..\").\n\t *\n\t * @return the parent of the current path.\n\t */\n",
    "167203": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.JSProtocolParser.getServiceURL()'\n\t * 'jsProtocolParserModel' has no tag <service> attribute 'URL'\n\t * Should raise an Exception\n\t */\n",
    "167204": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.JSProtocolParser.getCodeBases()'\n\t * 'jsProtocolParserProtocol' has tag <codebase> <URLset> attribute 'URL'\n\t */\n",
    "167205": "\t/**\n\t * Test get waiting number.\n\t * \n\t * @throws InterruptedException\n\t * @throws IOException\n\t */\n",
    "167206": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.JSProtocolParser.getCodeBases()'\n\t * 'jsProtocolParserModel' has no tag <codebase> <URLset> attribute 'URL'\n\t */\n",
    "167208": "\t/**\n\t * Test plotting feature in JSEntry.\n\t * \n\t * @throws FileNotFoundException\n\t * @throws InterruptedException\n\t */\n",
    "167209": "\t/**\n\t * Setup for testcases\n\t * \n\t * @throws FileNotFoundException \n\t */\n",
    "167210": "\t/**\n\t * Load properties from files\n\t * \n\t * @param filename\n\t */\n",
    "167211": "\t/**\n\t * Test the execute entry in JSEntry.\n\t * Should return the Table Of Contents XML-file.\n\t * \n\t * @throws IOException \n\t * @throws InterruptedException \n\t */\n",
    "167213": "\t/**\n\t * Returns the list of properties\n\t * @param c prefix for filtering\n\t * @return list of properties\n\t */\n",
    "167214": "\t/**\n\t * Returns the current path as relative to the given root. Example:\n\t * <pre>\n\t * Path myPath = new Path(&quot;home/user/myfile.txt&quot;);\n\t * myPath.getRelativeTo(new Path(&quot;home&quot;)); // returns\n\t * &quot;user/myfile.txt&quot;\n\t * </pre>\n\t *\n\t * @param rootPath the root to relate this path to.\n\t *\n\t * @return the current path as relative to the given root.\n\t */\n",
    "167216": "\t/**\n\t * Return the property as boolean\n\t * @param c\n\t * @param name\n\t * @return\n\t * \u30d7\u30ed\u30d1\u30c6\u30a3\u3092boolean\u5024\u3067\u8fd4\u3059\n\t */\n",
    "167232": "\t/**\n\t * call back Method from Processor.\n\t * \n\t * package\u30ec\u30d9\u30eb\u306e\u53ef\u8996\u6027\u3060\u3068illiegal access exception\u304c\u767a\u751f\u3059\u308b\u3002 public\u3060\u3068OK\n\t */\n",
    "167235": "\t/**\n\t * TODO protective copy is needed.\n\t * @return URLClassLoader with codebases\n\t */\n",
    "167249": "\t/**\n\t * Setup for testcases\n\t * \n\t * @throws Exception \n\t */\n",
    "167250": "\t/**\n\t * Test for the method getProperties(Class)\n\t */\n",
    "167251": "\t/**\n\t * Test for the method getProperties(Class, String)\n\t */\n",
    "167253": "\t/**\n\t * Test for the method getBooleanProperty(Class, String)\n\t */\n",
    "167254": "\t/**\n\t * Setup for testcases\n\t * \n\t * @throws Exception \n\t */\n",
    "167255": "\t/**\n\t * Test for the method getProperty(String)\n\t */\n",
    "167256": "\t/**\n\t * Test method for 'org.simBio.sim.js.entry.Request.Request()'\n\t * \n\t * @throws MalformedURLException\n\t */\n",
    "167259": "\t/**\n\t * Test method for 'org.simBio.sim.js.Channel.create(JavaSpace, String)'\n\t */\n",
    "167263": "\t/**\n\t * Test method for 'org.simBio.sim.js.Channel.dispose(JavaSpace, String)'\n\t */\n",
    "167264": "\t/**\n\t * Logs character data when debugging.\n\t * \n\t * @see org.xml.sax.ContentHandler#characters(char[], int, int)\n\t */\n",
    "167265": "\t/**\n\t * Test method for 'org.simBio.sim.js.Channel.removeHead(JavaSpace, String, long)'\n\t */\n",
    "167266": "\t/**\n\t * Returns the successor of this <code>Path</code>, as defined in the Javadoc\n\t * <code>of java.util.TreeMap.subMap(...)</code>. This is useful when you need\n\t * to use that method to get a <em>closed range</em> submap (or headmap, or\n\t * tailmap) of <code>Path</code>s.\n\t *\n\t * @return the successor path\n\t */\n",
    "167268": "\t/**\n\t * Logs comments when debugging.\n\t * \n\t * @throws SAXException\n\t * @see org.xml.sax.ext.LexicalHandler#comment(char[], int, int)\n\t */\n",
    "167269": "\t/**\n\t * Test method for 'org.simBio.sim.js.Channel.removeTail(JavaSpace, String, long)'\n\t */\n",
    "167270": "\t/**\n\t * Reports the end of the document.\n\t * \n\t * @throws SAXException\n\t * @see org.xml.sax.ContentHandler#endDocument()\n\t */\n",
    "167272": "\t/**\n\t * Test method for 'org.simBio.sim.js.Channel.readHead(JavaSpace, String, long)'\n\t */\n",
    "167274": "\t/**\n\t * Reports the end of an element.\n\t * \n\t * @throws SAXException\n\t * @see org.xml.sax.ContentHandler#endElement(java.lang.String,\n\t *      java.lang.String, java.lang.String)\n\t */\n",
    "167275": "\t/**\n\t * Test method for 'org.simBio.sim.js.Channel.readTail(JavaSpace, String, long)'\n\t */\n",
    "167277": "\t/**\n\t * Reports ignorable whitespace in element content.\n\t * \n\t * @see org.xml.sax.ContentHandler#ignorableWhitespace(char[], int, int)\n\t */\n",
    "167279": "\t/**\n\t * Test method for 'org.simBio.sim.js.Channel.getRequestNumber(JavaSpace, String, long)'\n\t */\n",
    "167280": "\t/**\n\t * Output characters as is.\n\t * \n\t * @see org.xml.sax.ContentHandler#characters(char[], int, int)\n\t */\n",
    "167283": "\t/**\n\t * Output comment as is.\n\t * \n\t * @see org.xml.sax.ext.LexicalHandler#comment(char[], int, int)\n\t */\n",
    "167284": "\t/**\n\t * Test method for 'org.simBio.sim.js.Channel.isExist(JavaSpace, String, long)'\n\t */\n",
    "167285": "\t/**\n\t * Reports processing instruction.\n\t * \n\t * @see org.xml.sax.ContentHandler#processingInstruction(java.lang.String,\n\t *      java.lang.String)\n\t */\n",
    "167287": "\t/**\n\t * Write XML document.\n\t * \n\t * @throws SAXException\n\t * @see org.xml.sax.ContentHandler#endDocument()\n\t */\n",
    "167290": "\t/**\n\t * ClassCastException is thrown by IBMJDK142 + Xerces-J causes for Locator2\n\t * Sun J2SDK1.4.1 + Xerces-J or Sun J2SE5.0 is OK. Thus, when Locator2 can\n\t * not be resolved, encoding is set to UTF-8 by default.\n\t * \n\t * @see org.xml.sax.ContentHandler#setDocumentLocator(org.xml.sax.Locator)\n\t */\n",
    "167291": "\t/**\n\t * Encode Component as one line of xml. \n\t * \n\t * <br/> Component\u3092\uff11\u884c\u306eXML\u306b\u5909\u63db\u3059\u308b\u3002\n\t * \n\t * @see org.simBio.core.Visitor#visit(org.simBio.core.Component)\n\t */\n",
    "167293": "\t/**\n\t * Output as is.\n\t * \n\t * @see org.xml.sax.ContentHandler#ignorableWhitespace(char[], int, int)\n\t */\n",
    "167294": "\t/**\n\t * Reports the start of an element.\n\t * \n\t * @throws SAXException\n\t * @see org.xml.sax.ContentHandler#startElement(java.lang.String,\n\t *      java.lang.String, java.lang.String, org.xml.sax.Attributes)\n\t */\n",
    "167295": "\t/**\n\t * Encodes Composite as several lines of xml. \n\t * Calls the accept method of every Component which belongs to the Composite.\n\t * \n\t * <br/> Composite\u3092XML\u306b\u5909\u63db\u3059\u308b\u3002 \n\t * \u6240\u6709\u3059\u308b\u5168\u3066\u306eComponent\u306eaccept\u3092\u547c\u3073\u51fa\u3059\u3002\n\t * \n\t * @see org.simBio.core.Visitor#visit(org.simBio.core.Composite)\n\t */\n",
    "167298": "\t/**\n\t * Reports the beginning of a document.\n\t * \n\t * @see org.xml.sax.ContentHandler#startDocument()\n\t */\n",
    "167299": "\t/**\n\t * Encodes a component as one line of XML.\n\t * \n\t * <br/> component\u3092\uff11\u884c\u306eXML\u306b\u5909\u63db\u3059\u308b\u3002\n\t */\n",
    "167302": "\t/**\n\t * Creates an XML start tag for the component.\n\t * \n\t * <br/>component\u306eXML start tag\u3092\u4f5c\u308b\u3002\n\t */\n",
    "167305": "\t/**\n\t * Serialize to the xml file.\n\t * \n\t * <br/> component\u3092XML\u5f62\u5f0f\u3067\u66f8\u304d\u51fa\u3059\u3002\n\t * \n\t * @param component\n\t *            component node of the model tree\n\t * @throws IOException\n\t */\n",
    "167306": "\t/**\n\t * Encodes the name and value of a component in XML.\n\t * \n\t * <br/>name and value\u3092XML\u306b\u5909\u63db\u3059\u308b\u3002\n\t */\n",
    "167307": "\t/**\n\t * Logs attribute details of elements when debugging.\n\t * \n\t * @throws SAXException\n\t * @see org.xml.sax.ext.DeclHandler#attributeDecl(String, String, String,\n\t *      String, String)\n\t */\n",
    "167309": "\t/** Encodes an attribute and its value in XML. */\n",
    "167310": "\t/**\n\t * Serializes a component to the xml file. (writes it in XML format)\n\t * \n\t * @param component\n\t *            component node of the model tree\n\t * @param uri\n\t *            location of the xml file\n\t * @throws IOException\n\t */\n",
    "167313": "\t/**\n\t * Creates an XML end tag for the component.\n\t * \n\t * <br/>component\u306eXML end tag\u3092\u4f5c\u308b\u3002\n\t */\n",
    "167314": "\t/**\n\t * Logs the end of a CDATA section.\n\t * \n\t * @throws SAXException\n\t * @see org.xml.sax.ext.LexicalHandler#endCDATA()\n\t */\n",
    "167316": "\t/**\n\t * Deserialize from xml file.\n\t * \n\t * <br/> XML\u5f62\u5f0f\u306emodel\u3092\u89e3\u91c8\u3057\u3066model\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3002\n\t * \n\t * @return root component of the model instance tree\n\t * @see org.simBio.serialize.Serializer#read()\n\t */\n",
    "167317": "\t/**\n\t * Creates the model instance and starts the calculation.\n\t * \n\t * @param serializer\n\t *            an XML serializer for creating a model instance\n\t * @param id\n\t *            id of the model\n\t * @param reference\n\t *            a Reader object which is passed to the nested class Saver\n\t * @return a model instance\n\t */\n",
    "167318": "    /**\n     * Given the <code>Tag</code> representation of this custom\n     * tag, return its string representation.\n     * @param tag the <code>Tag</code> representation of this custom tag.\n     */\n",
    "167320": "    /**\n     * Given the <code>Tag</code> representation of this custom\n     * tag, return its string representation.\n     * @param tag the <code>Tag</code> representation of this custom tag.\n     */\n",
    "167322": "\t/**\n\t * Logs the end of a DTD section.\n\t * \n\t * @throws SAXException\n\t * @see org.xml.sax.ext.LexicalHandler#endDTD()\n\t */\n",
    "167326": "\t/**\n\t * Tag and class name are registered to hash table.\n\t * \n\t * <br/> tag\u3068class name\u3092hash table\u306b\u767b\u9332\u3059\u308b\u3002\n\t * \n\t * @param tag\n\t * @param className\n\t */\n",
    "167328": "\t/**\n\t * Logs the end of an entity.\n\t * \n\t * @throws SAXException\n\t * @see org.xml.sax.ext.LexicalHandler#endEntity(String)\n\t */\n",
    "167331": "\t\t/**\n\t\t * Called when the calculation starts, but doesn't do anything.\n\t\t * <br/> \n\t\t * \u8a08\u7b97\u958b\u59cb\u76f4\u524d\u306b\u547c\u3070\u308c\u308b\u304c\u3001\u3053\u3053\u3067\u306f\u4f55\u3082\u3057\u306a\u3044\u3002\n\t\t * \n\t\t * @see org.simBio.core.CalculationObserver#start()\n\t\t */\n",
    "167333": "\t/**\n\t * Logs a parsed external entity declaration.\n\t * \n\t * @throws SAXException\n\t * @see org.xml.sax.ext.DeclHandler#externalEntityDecl(String, String,\n\t *      String)\n\t */\n",
    "167335": "\t/**\n\t * Set source encoding.\n\t * \n\t * @param encoding\n\t *            character encoding of the XML source\n\t */\n",
    "167337": "\t\t/**\n\t\t * Called when the calculation is finished, and writes the model to XML.\n\t\t * <br/> \n\t\t * \u8a08\u7b97\u7d42\u4e86\u76f4\u5f8c\u306b\u547c\u3070\u308c\u3001model\u3092XML\u306b\u66f8\u304d\u51fa\u3059\u3002\n\t\t * \n\t\t * @see org.simBio.core.CalculationObserver#stop()\n\t\t */\n",
    "167340": "    /**\n     * Will return true since this is an inline tag.\n     * @return true since this is an inline tag.\n     */\n",
    "167343": "\t/**\n\t * Returns and logs a new external subset.\n\t * \n\t * @throws SAXException\n\t * @throws IOException\n\t * @return input source for new external subset to be used by parser, or\n\t *         null\n\t * \n\t * @see org.xml.sax.ext.EntityResolver2#getExternalSubset(String, String)\n\t */\n",
    "167344": "\t/**\n\t * time series data\u3092csv\u5f62\u5f0f\u3067\u66f8\u304d\u51fa\u3059\u3002\n\t * \n\t * @param writer\n\t * @param timeSerieses\n\t * @throws IOException\n\t */\n",
    "167345": "    /**\n     * This method should not be called since arrays of inline tags do not\n     * exist.  Method {@link #tostring(Tag)} should be used to convert this\n     * inline tag to a string.\n     * @param tags the array of <code>Tag</code>s representing of this custom tag.\n     */\n",
    "167346": "\t/**\n\t * convert csv file to XYSeriesCollection.\n\t * \n\t * @param csv format of time series data\n\t * @return converted data\n\t * @throws IOException \n\t */\n",
    "167347": "\t/**\n\t * Return Class instance designated by the complete class name. child nodes\n\t * are created.\n\t * \n\t * @param className\n\t *            complete class name\n\t * @return instance of the class.\n\t * @throws InstantiationException\n\t */\n",
    "167348": "\t/**\n\t * clear value of All Reactors, and call calculate() of All Reactors\n\t * <br/>\n\t * IResetBeforeCalc\u3092impliments\u3057\u3066\u3044\u308b\u30af\u30e9\u30b9\u306e\u5024\u3092\u30bc\u30ed\u306b\u30ea\u30bb\u30c3\u30c8\u3057\u305f\u5f8c\u3001\n\t * \u5168\u3066\u306eReactor\u306ecalculate()\u3092\u547c\u3073\u51fa\u3059\u3002 \n\t * @param t time\n\t */\n",
    "167349": "\t/**\n\t * Logs an internal entity declaration\n\t * \n\t * @throws SAXException\n\t * @see org.xml.sax.ext.DeclHandler#internalEntityDecl(String, String)\n\t */\n",
    "167351": "\t/**\n\t * set parent, root, level, name and valueString and attend to the parent's\n\t * Children. <br/>\u89aa\u3068Conductor\u3078\u306e\u53c2\u7167, \u81ea\u5206\u306e\u968e\u5c64\u3001\u540d\u524d\u3001\u521d\u671f\u5024\u3001\u5358\u4f4d\u3092\u8a2d\u5b9a\u3057\u3001\u89aa\u306e\u5b50\u4f9b\u306b\u767b\u9332\u3059\u308b\n\t * \n\t * @param initializer\n\t */\n",
    "167352": "\t/**\n\t * ComponentList\u306eIterator\u3092\u8fd4\u3059\u3002\n\t * \n\t * @return Iterator of the data list\n\t */\n",
    "167354": "\t/**\n\t * called after instance tree was constructed, getNode, getLink here, <br/>\n\t * \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30c4\u30ea\u30fc\u4f5c\u6210\u5f8c\u306b\u547c\u3073\u51fa\u3055\u308c\u308b,\n\t */\n",
    "167358": "\t/**\n\t * prepare for integration.\n\t * This is called at the beginning of integration.\n\t * <br/>\n\t * \u8a08\u7b97\u958b\u59cb\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u3002\n\t */\n",
    "167359": "\t/**\n\t * \u5f15\u6570\u306ename\u3067\u6307\u5b9a\u3055\u308c\u305fxml\u306elink\u304c\u6307\u3057\u793a\u3059\u5bfe\u8c61\u3078\u306e\u53c2\u7167\u3092\u8fd4\u3059\u3002\n\t * \n\t * @param name\n\t *            of the link\n\t * @return Node linked in the xml\n\t */\n",
    "167360": "\t/**\n\t * Calls the EntityResolver2 resolveEntity method.\n\t * \n\t * @return an input source or null\n\t * @throws SAXException\n\t * @throws IOException\n\t * @see org.xml.sax.EntityResolver#resolveEntity(String, String)\n\t */\n",
    "167361": "\t/**\n\t * called at the end of integration, <br/>\u8a08\u7b97\u7d42\u4e86\u6642\u306b\u547c\u3070\u308c\u307e\u3059\u3002\n\t */\n",
    "167362": "\t/**\n\t * set reactor list for calculate dydt\n\t * \n\t * @param reactors\n\t */\n",
    "167365": "\t/**\n\t * called before destruction, <br/>instance\u3092\u7834\u68c4\u3059\u308b\u524d\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n\t */\n",
    "167366": "\t/**\n\t * restrict maximum dy/Y and adjust time step <br/>\n\t * \u5168\u3066\u306eVariable\u306e\u6700\u5927\u306edy/y\u304c\u95be\u5024\u306b\u5408\u3046\u3088\u3046\u306b\u3001time step\u3092\u6c7a\u5b9a\u3059\u308b\u3002 2004/11/12\n\t * dt\u304c\u6b8b\u308a\u8a08\u7b97\u6642\u9593\u3092\u30aa\u30fc\u30d0\u30fc\u3057\u306a\u3044\u3088\u3046\u306b\u5236\u9650\u3002 TODO \u6642\u3005dt=0\u3068\u306a\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u3042\u308b\u3002\n\t * \n\t * @return time step\n\t */\n",
    "167367": "\t/**\n\t * Reports the start of a CDATA section.\n\t * \n\t * @throws SAXException\n\t * @see org.xml.sax.ext.LexicalHandler#startCDATA()\n\t */\n",
    "167373": "\t/**\n\t * Reports the start of a DTD declaration.\n\t * \n\t * @throws SAXException\n\t * @see org.xml.sax.ext.LexicalHandler#startDTD(String, String, String)\n\t */\n",
    "167374": "\t/**\n\t * compare s with name <br/>\u5f15\u6570\u306e\u6587\u5b57\u5217\u304c\u3001\u81ea\u5206\u306e\u540d\u524d\u3068\u4e00\u81f4\u3059\u308c\u3070true\u3092\u8fd4\u3059\u3002\n\t * \n\t * @param s\n\t *            name\n\t * @return true, when name equals to s\n\t */\n",
    "167375": "\t/**\n\t * Returns the className.\n\t * \n\t * @return String\n\t */\n",
    "167376": "\t/**\n\t * check name whether start with s or not <br/>\n\t * \u5f15\u6570\u306e\u6587\u5b57\u5217\u304c\u3001\u81ea\u5206\u306e\u540d\u524d\u306e\u5148\u982d\u3068\u4e00\u81f4\u3059\u308c\u3070true\u3092\u8fd4\u3059\u3002\n\t * \n\t * @param prefix\n\t *            prefix of name\n\t * @return true, if instance name starts with s\n\t */\n",
    "167377": "\t/**\n\t * Returns the initialValue.\n\t * \n\t * @return String\n\t */\n",
    "167378": "\t/**\n\t * Add Variables to the list. <br/>\n\t * Variable\u3092list\u306b\u767b\u9332\u3057\u307e\u3059\u3002\n\t * \n\t * @see org.simBio.core.Visitor#visit(org.simBio.core.Component)\n\t */\n",
    "167379": "\t/**\n\t * Reports the start of some XML entities.\n\t * \n\t * @throws SAXException\n\t * @see org.xml.sax.ext.LexicalHandler#startEntity(String)\n\t */\n",
    "167382": "\t/**\n\t * Returns the parent.\n\t * \n\t * @return Composite\n\t */\n",
    "167383": "\t/**\n\t * add Reactors to ReactorList, and Analyzers to AnalyzerList. <br/>\n\t * Reactor, Analyzer\u3092list\u306b\u767b\u9332\u3057\u307e\u3059\u3002\n\t * \n\t * @see org.simBio.core.Visitor#visit(org.simBio.core.Composite)\n\t */\n",
    "167384": "\t/**\n\t * Reports the end of a prefix-URI mapping.\n\t * \n\t * @throws SAXException\n\t * @see org.xml.sax.ContentHandler#endPrefixMapping(String)\n\t */\n",
    "167386": "\t/**\n\t * Returns the units.\n\t * \n\t * @return String\n\t */\n",
    "167387": "\t/**\n\t * main entry of this thread. <br>\n\t * setLinks()\u3092\u547c\u3073\u51fa\u3057\u305f\u5f8c\u3001\u5f85\u6a5f\u30eb\u30fc\u30d7\u306b\u306f\u3044\u308a\u307e\u3059\u3002 \u8a08\u7b97\u958b\u59cbflag\u304c\u7acb\u3066\u3089\u308c\u308b\u3068\u3001integrate()\u3092\u547c\u3073\u51fa\u3057\u3001\u7a4d\u5206\u8a08\u7b97\u3092\u3057\u307e\u3059\u3002\n\t * \u7d42\u4e86flag\u304c\u7acb\u3066\u3089\u308c\u308b\u3068\u3001NodeList.quit()\u3092\u547c\u3073\u51fa\u3057\u3001thread\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002\n\t * \n\t * @see java.lang.Runnable#run()\n\t */\n",
    "167388": "\t/**\n\t * Sets the className.\n\t * \n\t * @param className\n\t *            The className to set\n\t */\n",
    "167389": "\t/**\n\t * always throws UnsupportedOperationException, need to implement 'Node'\n\t * \n\t * @param newValue\n\t * @throws UnsupportedOperationException\n\t *             always\n\t */\n",
    "167390": "\t/**\n\t * Sets the initialValue.\n\t * \n\t * @param initialValue\n\t *            The initialValue to set\n\t */\n",
    "167391": "\t/**\n\t * Reports a skipped entity.\n\t * \n\t * @throws SAXException\n\t * @see org.xml.sax.ContentHandler#skippedEntity(String)\n\t */\n",
    "167394": "\t/**\n\t * always throws UnsupportedOperationException, need to implement 'Node'\n\t * \n\t * @param value\n\t * @throws UnsupportedOperationException\n\t *             always\n\t */\n",
    "167395": "\t/**\n\t * Sets the parent.\n\t * \n\t * @param parent\n\t *            The parent to set\n\t */\n",
    "167396": "\t/**\n\t * Begin scope of prefix-URI mapping.\n\t * \n\t * @throws SAXException\n\t * @see org.xml.sax.ContentHandler#startPrefixMapping(String, String)\n\t */\n",
    "167397": "\t/**\n\t * call after instance tree has constructed. <br>\n\t * \u6b21\u306e\u3088\u3046\u306ainstance tree\u306e\u5834\u5408\u3001\n\t<pre>\n\texternal\n\t\tcell\n\t\t\tVm\n\t\t\tNa\n\t\t\tK\n\t\t\tNaChannel\n\t\t\t\t4sGate\n\t\t\t\t2sGate\n\t\t\t/NaChannel\n\t\t\tK1Channel\n\t\t/cell\n\t/external\n\t</pre>\n\t\t\u6b21\u306e\u9806\u5e8f\u3067\u5168\u3066\u306eNode\u306esetLinks()\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\t<pre>\n\t\t\tVm\n\t\t\tNa\n\t\t\tK\n\t\t\t\t4sGate\n\t\t\t\t2sGate\n\t\t\tNaChannel\n\t\t\tK1Channel\n\t\tcell\n\texternal\n\t *  @see org.simBio.core.Component#setLinks()\n\t * \n\t */\n",
    "167398": "\t/**\n\t * always throws UnsupportedOperationException, need to implement 'Node'\n\t * \n\t * @return value\n\t * @throws UnsupportedOperationException\n\t *             always\n\t */\n",
    "167399": "\t/**\n\t * Sets the units.\n\t * \n\t * @param units\n\t *            The units to set\n\t */\n",
    "167402": "\t/**\n\t * clear all attributes.\n\t */\n",
    "167404": "\t/**\n\t * always throws UnsupportedOperationException, need to implement 'Node'\n\t * \n\t * @param dydt\n\t * @throws UnsupportedOperationException\n\t *             always\n\t */\n",
    "167405": "\t/**\n\t * call before exit thread.\n\t * \n\t * @see org.simBio.core.Component#quit()\n\t */\n",
    "167407": "    /**\n     * keep the value positive.\n     * @see org.simBio.core.integrator.Euler#update(double)\n     */\n",
    "167408": "\t/**\n\t * log warn, this Method should not be used.\n\t * \n\t * @param newValue\n\t */\n",
    "167409": "    /**\n     * keep the value less than 1.\n     * @see org.simBio.core.integrator.Positive#update(double)\n     */\n",
    "167410": "\t/**\n\t * log warn, this Method should not be used.\n\t * \n\t * @param value\n\t */\n",
    "167412": "\t/**\n\t * complete name from root. <br/>\u5b8c\u5168\u306a\u540d\u524d\u3092\u8fd4\u3059\u3002\n\t * \n\t * @return hierarchical name\n\t */\n",
    "167422": "\t/**\n\t * end of integration\n\t * \n\t * @see org.simBio.core.Component#end()\n\t */\n",
    "167425": "\t/**\n\t * short name <br/>\u77ed\u3044\u540d\u524d\u3092\u8fd4\u3059\u3002\n\t * \n\t * @return short name\n\t */\n",
    "167427": "\t/**\n\t * set initial amount.\n\t * @see org.simBio.core.Parameter#setInitializer(org.simBio.core.Initializer)\n\t */\n",
    "167431": "\t/**\n\t * call all Euler's update() \n\t * <br/>\n\t * \u5168\u3066\u306eVariable\u306eupdate()\u3092\u547c\u3073\u51fa\u3059\u3002\n\t * \n\t * @param t elapsed time\n\t * @return time step\n\t */\n",
    "167437": "\t/**\n\t * \u81ea\u5206\u304c\u5c5e\u3059\u308binstance tree\u306eroot\u3078\u306e\u53c2\u7167\u3092\u8fd4\u3059\u3002\n\t * \n\t * @return root\n\t */\n",
    "167438": "\t/**\n\t * call calculate(double t) of the every Reactor.\n\t * <br/>\n\t * Reactor.calculate(double)\u3092\u547c\u3073\u51fa\u3059\u9806\u5e8f\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\t<pre>\n\t\t\t\t4sGate\n\t\t\t\t2sGate\n\t\t\tNaChannel\n\t\t\tK1Channel\n\t\tcell\n\texternal\n\t</pre>\n\t * @see org.simBio.core.Reactor#calculate(double)\n\t */\n",
    "167445": "\t/**\n\t * Check if this thread has thrown an exception.\n\t * \n\t * @throws Exception\n\t */\n",
    "167447": "\t/**\n\t * add value to the current value\n\t * <br/>\n\t * \u5b9f\u6570\u3092\u53d7\u3051\u53d6\u308a\u73fe\u5728\u5024\u306b\u8db3\u3057\u5408\u308f\u305b\u308b\u3002\n\t * @param value\n\t */\n",
    "167448": "\t/**\n\t * make hierarchical indent using level <br/>\u968e\u5c64\u3092\u5143\u306b\u5b57\u4e0b\u3052\u3092\u4f5c\u308b\u3002\n\t * \n\t * @return indent space\n\t */\n",
    "167453": "\t/**\n\t * return indented short name <br/>\u5b57\u4e0b\u3052\u3092\u3057\u305f\u540d\u524d\u3092\u8fd4\u3059\u3002\n\t * \n\t * @return indented short name\n\t */\n",
    "167454": "\t/**\n\t * Close the XML file.\n\t * @see org.simBio.sim.ps.IParamSpaceObserver#exit()\n\t */\n",
    "167458": "\t/**\n\t * log indented name & additional text <br/>\u5b57\u4e0b\u3052\u3092\u3057\u3066\u540d\u524d\u3092\u8a18\u9332\u3059\u308b\u3002 You should use\n\t * org.apache.commons.logging.Log instead. private static Log log =\n\t * LogFactory.getLog(YourClass.class);\n\t * \n\t * @param s\n\t *            additional text\n\t * @deprecated Use getIndentedShortName() and org.apache.commons.logging.Log\n\t *             instead\n\t */\n",
    "167463": "\t/**\n\t * exit run() of this Thread. set active flag = false\n\t */\n",
    "167466": "\t/**\n\t * Get ProtocolParser\n\t * \n\t * @return ProtocolParser\n\t */\n",
    "167475": "\t/**\n\t * Check if there are any XML-files.\n\t * \n\t * @return True if there are XML-files.\n\t */\n",
    "167479": "\t/**\n\t * check IndexOutOfBoundsException and NullPointerException to suppress error.\n\t * @see org.jfree.chart.plot.XYPlot#render(java.awt.Graphics2D, java.awt.geom.Rectangle2D, int, org.jfree.chart.plot.PlotRenderingInfo, org.jfree.chart.plot.CrosshairState)\n\t */\n",
    "167489": "\t/**\n\t * Creates a combined chart.\n\t * \n\t * @return the combined chart.\n\t */\n",
    "167502": "\t/**\n\t * Update the plot.\n\t */\n",
    "167503": "\t/**\n\t * Write Table Of Contents.\n\t * \n\t * @param protocolName\n\t * @param runResultGenerator\n\t *            ResultGenerator if true.\n\t */\n",
    "167513": "\t\t/**\n\t\t * check ArrayIndexOutOfBoundsException to suppress error.\n\t\t * @see org.jfree.chart.plot.ContourPlot#contourRenderer(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo, org.jfree.chart.plot.ContourPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ColorBar, org.jfree.data.contour.ContourDataset, org.jfree.chart.plot.CrosshairState)\n\t\t */\n",
    "167517": "\t/**\n\t * Creates a ContourDataset.\n\t * \n\t * @return ContourDataset.\n\t */\n",
    "167518": "\t/**\n\t * Creates a panel.\n\t * \n\t * @return the panel.\n\t */\n",
    "167549": "\t/**\n\t * reset scaling factor if elapsed time is over the range.\n\t * @see org.simBio.core.Analyzer#analyze(double)\n\t */\n",
    "167550": "\t/**\n\t * link to the Viewer, and count number of the target, get array.\n\t * \n\t * @see org.simBio.core.Component#setLinks()\n\t */\n",
    "167551": "\t/**\n\t * set link to the Viewer to get scale factor later.\n\t * @see org.simBio.core.Component#setLinks()\n\t */\n",
    "167556": "\t/**\n\t * link to the Viewer, and count number of the target, get array.\n\t * \n\t * @see org.simBio.core.Component#setLinks()\n\t */\n",
    "167571": "\t/**\n\t * set link to the targets.\n\t * \n\t * @see org.simBio.core.Component#prepare()\n\t */\n",
    "167584": "\t/**\n\t * Sets the container.\n\t * @param container The container to set\n\t */\n",
    "167589": "\t/**\n\t * get graphics and clear. \n\t */\n",
    "167593": "\t/**\n\t * When there are no container, construct OnScreen,\n\t * and clear.\n\t * @see org.simBio.sim.analyzer.graph.OnScreen\n\t * @see org.simBio.core.Component#setLinks()\n\t */\n",
    "167598": "\t/**\n\t * dispose graphics and OnScreen.\n\t * @see org.simBio.sim.analyzer.graph.OnScreen\n\t * @see org.simBio.core.Component#quit()\n\t */\n",
    "167599": "\t/**\n\t * Set link to the Viewer to get scale factor later.\n\t * \n\t * @see org.simBio.core.Component#setLinks()\n\t */\n",
    "167609": "\t/**\n\t * scaling factor = reference width (0.01 mm) / physical width (pixel)\n\t * @return reference width / physical width\n\t */\n",
    "167611": "\t/**\n\t * Resets the screen state.\n\t * \n\t * @see org.simBio.sim.analyzer.VisualizeAnalyzer#resetBuffer()\n\t */\n",
    "167612": "\t/**\n\t * scaling factor = reference height (0.01 mm) / physical height (pixel)\n\t * @return reference height / physical height\n\t */\n",
    "167622": "\t/**\n\t * Makes the necessary preparations for redrawing, when the display position /\n\t * display range has changed\n\t * \n\t * @see org.simBio.sim.analyzer.graph.AbstractGraph#changeScale()\n\t */\n",
    "167623": "\t/**\n\t * Performs a repaint. It is called after prepareRepaint().\n\t * \n\t * @see org.simBio.sim.analyzer.VisualizeAnalyzer#doRepaint()\n\t */\n",
    "167625": "\t/**\n\t * Called when the calculations finish, and makes adjustments to the X axis,\n\t * if necessary.\n\t * \n\t * @see org.simBio.core.Component#end()\n\t */\n",
    "167626": "\t/**\n\t * Notifies that the displayed area has changed.\n\t * \n\t * @see org.simBio.sim.analyzer.graph.AbstractGraph#setAreaChanged()\n\t */\n",
    "167631": "\t/**\n\t * Set link to the targets.\n     *\n\t * @see org.simBio.core.Component#prepare()\n\t */\n",
    "167726": "\t/**\n\t * Gets the container.\n\t * \n\t * @return The container\n\t */\n",
    "167745": "\t/**\n\t * Initialize graph area, and draw axes and grids.\n\t * \n\t * @param graphics2d\n\t *            {@.en drawn Graphics} {@.ja \u63cf\u753b\u3055\u308c\u308bGraphics}\n\t * @param plot\n\t *            {@.en drawing operation object} {@.ja \u63cf\u753b\u51e6\u7406\u30aa\u30d6\u30b8\u30a7\u30af\u30c8}\n\t */\n",
    "167749": "\t/**\n\t * Dispose of graphics and OnScreen.\n\t * \n\t * @see org.simBio.sim.analyzer.graph.OnScreen\n\t * @see org.simBio.core.Component#quit()\n\t */\n",
    "167776": "\t/**\n\t * Initialize graph area, and draw axes and grids.\n\t * \n\t * @param graphics2d\n\t *            {@.en Graphics which are drawn} {@.ja \u63cf\u753b\u3055\u308c\u308bGraphics}\n\t * @param plot\n\t *            {@.en drawing operation object} {@.ja \u63cf\u753b\u51e6\u7406\u30aa\u30d6\u30b8\u30a7\u30af\u30c8}\n\t */\n",
    "167804": "\t/**\n\t * keep the maximum and the minimum value of the target.\n\t * \n\t * @see org.simBio.sim.analyzer.measure.AbstractMeasure#measure(double)\n\t */\n",
    "167806": "\t/**\n\t * apply scaling factor and substract minimum from maximum.\n\t * when onset never comes, store current value of the target.\n\t * \n\t * @see org.simBio.core.Component#end()\n\t */\n",
    "167810": "\t/** \n\t * apply scaling factor and subtract minimum from maximum.\n\t * when onset never comes, store current value of the target.\n\t */ \n",
    "167813": "\t/**\n\t * keep the maximum and the minimum value of the target.\n\t * \n\t * @see org.simBio.sim.analyzer.measure.AbstractMeasure#measure(double)\n\t */\n",
    "167822": "\t/**\n\t * get targets to the list.\n\t * <br/>\n\t * \u66f8\u304d\u51fa\u3059\u5bfe\u8c61\u3092list\u306b\u767b\u9332\u3002\n\t * \n\t * @see org.simBio.core.Component#prepare()\n\t */\n",
    "167823": "\t/**\n\t * Call MakeValueLine() to write current value.\n\t * \n\t * @see org.simBio.core.Analyzer#analyze(double)\n\t */\n",
    "167833": "\t/**\n\t * set targets to the list <br/>\u66f8\u304d\u51fa\u3059\u5bfe\u8c61\u3092list\u306b\u767b\u9332\u3002\n\t * \n\t * @see org.simBio.core.Parameter#prepare()\n\t */\n",
    "167893": "\t/**\n\t * This method initializes this\n\t * \n\t * @return void\n\t */\n",
    "167961": "\t/**\n\t * Visitor Pattern Interface : do nothing\n\t * @see org.simBio.core.Visitor#visit(org.simBio.core.Component)\n\t */\n",
    "167968": "\t/**\n\t * Visitor Pattern Interface : set this to container of Viewer\n\t * \n\t * NOTICE: org.simBio.sim.analyser.graph.RateGraph#getJButton \u3092\u3001ToolBar\u306b\u8f09\u305b\u308b\u5834\u5408\u306f\u3001\n\t * \t\t   DnDAction\u306e\u7d44\u307f\u8fbc\u307f\u3068\u3001Save/Load \u51e6\u7406\u306e\u5bfe\u5fdc\u304c\u5fc5\u8981\u3002\n\t * \n\t * @see org.simBio.core.Visitor#visit(org.simBio.core.Composite)\n\t */\n",
    "167971": "\t/**\n\t * This method initializes jTree\t\n\t * \t\n\t * @return javax.swing.JTree\t\n\t */    \n",
    "167972": "\t/**\n\t * Get protocol as stream.\n\t * \n\t * @return protocol as stream.\n\t */\n",
    "167974": "\t/**\n\t * Read tag <baseModel> attribute \"path\" from file protocol.\n\t * \n\t * @return nodevalue for path.\n\t * @throws IOException\n\t */\n",
    "167976": "\t/**\n\t * This method initializes jButtonOK\t\n\t * \t\n\t * @return javax.swing.JButton\t\n\t */    \n",
    "167978": "\t/**\n\t * Read tag <generate> <xml> attribute \"path\" from file protocol.\n\t * \n\t * @return nodevalue for path.\n\t * @throws IOException\n\t */\n",
    "167979": "\t/**\n\t * Read tag <randomizer> attribute \"threads\" from file protocol.\n\t * \n\t * @return Max number of threads or 1 if not defined.\n\t */\n",
    "167981": "\t/**\n\t * Read tag <generate> <xml> attribute \"launch\" from file protocol.\n\t * \n\t * @return nodevalue for launch.\n\t * @throws IOException\n\t */\n",
    "167982": "\t/**\n\t * Read tag <erase> <eraser> from file protocol.\n\t * \n\t * @return nodeIterator for eraser.\n\t * @throws IOException\n\t */\n",
    "167986": "\t/**\n\t * Read tag <insert> <inserter> from file protocol.\n\t * \n\t * @return nodeIterator for inserter.\n\t * @throws IOException\n\t */\n",
    "167988": "\t/**\n\t * Read tag <insert> <before> from file protocol.\n\t * \n\t * @return nodeIterator for insert/before.\n\t * @throws IOException\n\t */\n",
    "167990": "\t/**\n\t * This method initializes jButtonCancel\t\n\t * \t\n\t * @return javax.swing.JButton\t\n\t */    \n",
    "167991": "\t/**\n\t * Read tag <write> <writer> from file protocol.\n\t * \n\t * @return nodeIterator for writer.\n\t * @throws IOException\n\t */\n",
    "167993": "\t/**\n\t * Read tag <write> <multiplier> from file protocol.\n\t * \n\t * @return nodeIterator for write/multiplier.\n\t * @throws IOException\n\t */\n",
    "167996": "\t/**\n\t * Check if the protocol file has an exchanger or not.\n\t * \n\t * @return true, when the file has at least one exchanger.\n\t */\n",
    "167999": "\t/**\n\t * Read tag <exchange> from file protocol.\n\t * \n\t * @return node for exchanger.\n\t * @throws IOException\n\t */\n",
    "168000": "\t/**\n\t * Read tag <randomizer> attribute \"identification\" from file protocol.\n\t * \n\t * @return nodevalue for identification.\n\t * @throws IOException\n\t */\n",
    "168002": "\t/**\n\t * This method initializes jTimeMin\t\n\t * \t\n\t * @return javax.swing.JTextField\t\n\t */    \n",
    "168003": "\t/**\n\t * Read tag <generate> <baseDir> attribute \"path\" from file protocol.\n\t * \n\t * @return nodevalue for path.\n\t * @throws IOException\n\t */\n",
    "168006": "\t/**\n\t * Read tag <generate> <xmlDir> attribute \"path\" from file protocol.\n\t * \n\t * @return nodevalue for path.\n\t * @throws IOException\n\t */\n",
    "168007": "\t/**\n\t * Read tag <generate> <csvFile> attribute \"path\" from file protocol.\n\t * \n\t * @return nodevalue for path.\n\t * @throws IOException\n\t */\n",
    "168009": "\t/**\n\t * This method initializes jTimeMax\t\n\t * \t\n\t * @return javax.swing.JTextField\t\n\t */    \n",
    "168010": "\t/**\n\t * Read tag <generate> <xmlFile> attribute \"path\" from file protocol.\n\t * \n\t * @return nodevalue for path.\n\t * @throws IOException\n\t */\n",
    "168013": "\t/**\n\t * Get XML root dir.\n\t * \n\t * @return file path for XML.\n\t * @throws IOException\n\t */\n",
    "168014": "\t/**\n\t * This method initializes jTimeStep\t\n\t * \t\n\t * @return javax.swing.JTextField\t\n\t */    \n",
    "168017": "\t/**\n\t * Get CSV-file.\n\t * \n\t * @return CSV-file.\n\t * @throws IOException\n\t */\n",
    "168019": "\t/**\n\t * Get Toc XML-file path.\n\t * \n\t * @return Toc XML-file path.\n\t * @throws IOException\n\t */\n",
    "168021": "\t/**\n\t * This method initializes jCsvFile\t\n\t * \t\n\t * @return javax.swing.JTextField\t\n\t */    \n",
    "168023": "\t/**\n\t * Read tag <generate> <xmlFile> attribute \"settings\" from file protocol.\n\t * \n\t * @return nodevalue for settings.\n\t * @throws IOException\n\t */\n",
    "168024": "\t/**\n\t * Read input parameter xpath from file protocol.\n\t * \n\t * @param xpath string\n\t * @return nodeIterator for xpath.\n\t * @throws IOException\n\t */\n",
    "168026": "\t/**\n\t * This method initializes jButtonBrowse\n\t * \t\n\t * @return javax.swing.JButton\t\n\t */    \n",
    "168027": "\t/**\n\t * Read tag <normalizeTo> attribute \"xpath\" from file protocol.\n\t * \n\t * @return node for xpath.\n\t * @throws IOException\n\t */\n",
    "168030": "\t/**\n\t * Set properties from file protocol.\n\t */\n",
    "168034": "\t/**\n\t * Check if the file is a randomizer or not.\n\t * \n\t * @param randinput XML file of protocol\n\t * @return true, when the file is a randomizer.\n\t */\n",
    "168036": "\t/**\n\t * Check if the file has an exchanger or not.\n\t * \n\t * @param randinput XML file of protocol\n\t * @return true, when the file has at least one exchanger.\n\t */\n",
    "168052": "\t/**\n\t * Parse XML-file.\n\t * \n\t * @param input XML-file as InputStream\n\t * @return DOM Document\n \t * @throws RuntimeException if error parsing XML\n\t */\n",
    "168054": "\t/**\n\t * Process randomizer tags in protocolDoc_ for modelDoc_\n\t * \n\t * @throws IOException\n\t */\n",
    "168056": "\t/**\n\t * Create a new instance of DOM Document.\n\t * \n\t * @return DOM Document\n\t */\n",
    "168058": "\t/**\n\t * Create a new instance of DOM Document.\n\t * \n\t * @param qualifiedName of the DOM Document\n\t * @return DOM Document\n\t */\n",
    "168060": "\t/**\n\t * Adding a Node to a new instance of DOM Document.\n\t * \n\t * @param node\n\t * @return DOM Document\n\t */\n",
    "168063": "\t/**\n\t * Get document as buffered reader.\n\t * \n\t * @param node\n\t * @return BufferedReader\n\t */\n",
    "168068": "\t/**\n\t * Adding a Node to a new instance of DOM Document and return\n\t * document as input stream.\n\t * \n\t * @param node\n\t * @return InputStream\n\t */\n",
    "168109": "\t/**\n\t * \texchange()\u306e\u5f8c\u3067\u3001indexIteration_ \u3092increment\n\t */\n",
    "168157": "\t/**\n\t * read initial values from GUI.\n\t */\n",
    "168158": "\t/**\n\t * calculate state probability by ODE.\n\t * @param t\n\t */\n",
    "168161": "\t/**\n\t * determine initial state of single channels\n\t * Method determineInitialState.\n\t * @see org.simBio.core.Component#prepare()\n\t */\n",
    "168162": "\t/**\n\t * <p>set arias for gates</p>\n\t * @see org.simBio.core.Component#setLinks()\n\t */\n",
    "168164": "\t/**\n\t * read initial values from GUI.\n\t */\n",
    "168165": "\t/**\n\t * calculate state probability by ODE.\n\t * @param t\n\t */\n",
    "168173": "\t/** initialization for IKs. */\n",
    "168236": "\t/**\n\t * Calculate the junctional conductance (nS) using by Gj=N*gj*pOpen.\n\t * <br/>Gj: junctional conductance \n\t * <br/>N: number of channels \n\t * <br/>gj: unitary conductance\n\t * <br/>pOpen: open probability\n\t * \n\t * @see org.simBio.core.Reactor#calculate(double)\n\t */\n",
    "168240": "\t/**\n\t * Calculate forward and backward rate constants\n\t * \n\t * @see org.simBio.core.Component#prepare()\n\t */\n",
    "168241": "\t/**\n\t * Calculate the open probability\n\t * @see org.simBio.core.Reactor#calculate(double)\n\t */\n",
    "168256": "\t/**\n\t * set the initial value to permeability\n\t */\n",
    "168260": "\t/**\n\t * calculate total charge movement using reduced 2 state model <br/>\n\t * 2 state gate\u3092\u7528\u3044\u3066\u96fb\u6d41\u3092\u8a08\u7b97\u3059\u308b\n\t */\n",
    "168267": "\t/**\n\t * current = permeability * concentration gradient (in - out)\n\t */\n",
    "168270": "\t/**\n\t * to keep Vm constant, Iext is applied.\n\t * Iext = -Itoal - (apply - Vm.getValue()) * Cm / (dt * 4)\n\t * Ideal voltage clamp condition is assumed.\n\t * @see org.simBio.bio.matsuoka_et_al_2003.current.MembraneTransporter#calculate(double)\n\t */\n",
    "168277": "\t/**\n\t * initialization for IKs\n\t */\n",
    "168294": "\t/**\n\t * y = inf -(inf - y_old) * exp(-t/tau)\n\t * @see org.simBio.bio.matsuoka_et_al_2003.function.Diffusion#calculate(double)\n\t */\n",
    "168302": "\t/**\n     * instantaneous equiribrium is iteratively calculated.\n     */\n",
    "168311": "\t/**\n     * calculate the force developed by the parallel elastic element, Fp.\n\t * @param deltaL L - L0\n\t */\n",
    "168313": "\t/**\n\t * calculate the tension without contraction (isometric contraction)\n\t * @param t \n\t */\n",
    "168318": "\t/**\n\t * calculate the rate of change in the cross bridge length, dX/dt\n\t */\n",
    "168372": "\t/** \n\t * calculate and set the value of r<sub>buffer</sub>.\n\t * @param t \n\t */\n",
    "168393": "\t/**\n\t * calculate total charge movement using reduced 2 state model <br/>\n\t * 2 state gate\u3092\u7528\u3044\u3066\u96fb\u6d41\u3092\u8a08\u7b97\u3059\u308b\n\t */\n",
    "168425": "\t/**\n\t * current = permeability * concentration gradient (in - out)\n\t */\n",
    "168437": "\t/**\n\t * !! INSTRUCTION !! \"amplitude * ([K]o / constant)^power\" is the single\n\t * channel conductance. \"N\" should be designated in XML, that is the number\n\t * of channels per cell. First, gamma was calcurated as \"amplitude * ([K]o /\n\t * constant)^power\". And then, the calculated total channel conductance was\n\t * divided by Cm (= 132).\n\t * \n\t * @param t elapsed time (not used)\n\t */\n",
    "168443": "\t/**\n\t * Keep initial volume.\n\t * \n\t * @see org.simBio.core.Parameter#prepare()\n\t */\n",
    "168447": "\t/**\n\t * Update the value at the end of calculation.\n\t * \n\t * @see org.simBio.core.Component#end()\n\t */\n",
    "168465": "    /**\n     * set force equilibrated length.\n     * @param t elapsed time \n     */\n",
    "168470": "\t/**\n\t * the same as VB version\n     * @author Satoshi Matsuoka\n\t */\n",
    "168500": "    /**\n     * Overridden to message super and forward the method to the tree.\n     * Since the tree is not actually in the component hierarchy it will\n     * never receive this unless we forward it in this manner.\n     */\n",
    "168507": "    /**\n     * Workaround for BasicTableUI anomaly. Make sure the UI never tries to \n     * resize the editor. The UI currently uses different techniques to \n     * paint the renderers and editors; overriding setBounds() below \n     * is not the right thing to do for an editor. Returning -1 for the \n     * editing row in this case, ensures the editor is never painted. \n     */\n",
    "168513": "    /**\n     * Returns the actual row that is editing as <code>getEditingRow</code>\n     * will always return -1.\n     */\n",
    "168519": "    /**\n     * This is overridden to invoke super's implementation, and then,\n     * if the receiver is editing a Tree column, the editor's bounds is\n     * reset. The reason we have to do this is because JTable doesn't\n     * think the table is being edited, as <code>getEditingRow</code> returns\n     * -1, and therefore doesn't automatically resize the editor for us.\n     */\n",
    "168525": "    /**\n     * Overridden to pass the new rowHeight to the tree.\n     */\n",
    "168526": "    /**\n     * Invokes fireTableDataChanged after all the pending events have been\n     * processed. SwingUtilities.invokeLater is used to handle this.\n     */\n",
    "168532": "\t/**\n\t * Test plotting feature in Entry.\n\t * \n\t * @throws Exception \n\t */\n",
    "168533": "    /**\n     * Returns the tree that is being shared between the model.\n     */\n",
    "168535": "\t/**\n\t * Test method for\n\t * 'org.simBio.serialize.xml.XMLSerializer.update(Component)'\n\t * \n\t * @throws Exception\n\t */\n",
    "168537": "\t/**\n\t * This test expects an XML file with duplicate elements, and should throw\n\t * an exception.\n\t */\n",
    "168539": "\t/**\n\t * This test expects a correct XML file, and should not throw an exception\n\t */\n",
    "168542": "\t/**\n\t * repeat 3 times for both simBio and simple driver.\n\t * \n\t * @throws Exception\n\t */\n",
    "168544": "    /**\n     * Overridden to invoke repaint for the particular location if\n     * the column contains the tree. This is done as the tree editor does\n     * not fill the bounds of the cell, we need the renderer to paint\n     * the tree in the background, and then draw the editor over it.\n     */\n",
    "168547": "    /**\n     * write all ODE variables to csv file\n     * @param t time\n     * @throws IOException\n     */\n",
    "168549": "    /**\n     * open csv file\n     * @throws IOException\n     */\n",
    "168551": "\t/**\n\t * Test method for 'org.simBio.ResultGenerator.main(String[])'\n\t * Test that <randomizer threads=\"4\"> work.\n\t */\n",
    "168552": "    /**\n     * close csv file\n     * @throws IOException\n     */\n",
    "168553": "\t/**\n\t * updateUI is overridden to set the colors of the Tree's renderer\n\t * to match that of the table.\n\t */\n",
    "168554": "\t/**\n\t * Test method for 'org.simBio.ResultGenerator.modify(String, InputStream)'\n\t * Note that the method is private Should be ok\n\t * \n\t * @throws Exception\n\t */\n",
    "168555": "\t/**\n\t * Test if the plotting feature work by reading data from a Toc-file.\n\t * \n \t * @throws Exception \n\t */\n",
    "168556": "\t/**\n\t * Test method for 'org.simBio.ResultGenerator.modify(String, InputStream)'\n\t * Note that the method is private Should raise an Exception\n\t * \n\t * @throws Exception\n\t */\n",
    "168558": "\t/**\n\t * If the elapsed time is greater than the expected time, then the elapsed\n\t * time should be used to adjust the min and max nodes.\n\t */\n",
    "168561": "\t/**\n\t * Sets the row height of the tree, and forwards the row height to\n\t * the table.\n\t */\n",
    "168563": "\t/**\n\t * Tests the p method of the Axis class with the starting condition min <=\n\t * data && data <= max. After the p method is called, the min and max values\n\t * of the X axis should remain the same.\n\t */\n",
    "168565": "\t/**\n\t * Tests the p method of the Axis class with the starting condition data <\n\t * min. After the p method is called, the min and max values should be\n\t * adjusted by the value of delta, so that min <= data && data <= max.\n\t */\n",
    "168566": "\t/**\n\t * Test method for 'org.simBio.ResultGenerator.main(String[])'\n\t * Malformed XML tagname\n\t */\n",
    "168567": "\t/**\n\t * This is overridden to set the height to match that of the JTable.\n\t */\n",
    "168568": "\t/**\n\t * Test method for 'org.simBio.ResultGenerator.main(String[])'\n\t * Empty XML\n\t */\n",
    "168569": "\t/**\n\t * Tests the p method of the Axis class with the starting condition data >\n\t * max. After the p method is called, the min and max values should be\n\t * adjusted by the value of delta, so that min <= data && data <= max.\n\t */\n",
    "168570": "\t/**\n\t * Test method for 'org.simBio.ResultGenerator.main(String[])'\n\t * Malformed path for tag <baseModel>\n\t */\n",
    "168571": "\t/**\n\t * Test method for 'org.simBio.ResultGenerator.main(String[])'\n\t * No <generate> tag\n\t */\n",
    "168572": "\t/**\n\t * Tests the p method of the Axis class with the starting condition min <=\n\t * data && data <= max. After the p method is called, the min and max values\n\t * of the X axis should remain the same.(As above, but with axis.MODE_FIXED\n\t * instead of axis.MODE_AUTOSCROLL)\n\t */\n",
    "168574": "\t/**\n\t * Test method for 'org.simBio.ResultGenerator.main(String[])'\n\t * No 'launch'\n\t */\n",
    "168575": "\t/**\n\t * Sublcassed to translate the graphics such that the last visible\n\t * row will be drawn at 0,0.\n\t */\n",
    "168576": "\t/**\n\t * Test method for 'org.simBio.ResultGenerator.main(String[])'\n\t * Malformed class name for tag <generate> <xml> attribute 'launch'\n\t */\n",
    "168577": "\t/**\n\t * Tests the p method of the Axis class with the starting condition data <\n\t * min. After the p method is called, the min and max values should stay the\n\t * same as they are, because the axis extend mode is fixed. (As above, but\n\t * with axis.MODE_FIXED instead of axis.MODE_AUTOSCROLL)\n\t */\n",
    "168578": "\t/**\n\t * Test method for 'org.simBio.ResultGenerator.main(String[])'\n\t * One writer in a write\n\t */\n",
    "168579": "\t/**\n\t * Tests the p method of the Axis class with the starting condition data >\n\t * max. After the p method is called, the min and max values should stay as\n\t * they are, because the axis extend mode is fixed. (As above, but with\n\t * axis.MODE_FIXED instead of axis.MODE_AUTOSCROLL)\n\t */\n",
    "168580": "\t/**\n\t * Test method for 'org.simBio.ResultGenerator.main(String[])'\n\t * No writer in a write\n\t */\n",
    "168581": "\t/**\n\t * Test method for 'org.simBio.ResultGenerator.main(String[])'\n\t * Malformed xpath for tag <write> <writer>\n\t */\n",
    "168583": "\t/**\n\t * Tests the p method of the Axis class with the starting condition min <=\n\t * data && data <= max. After the p method is called, the min and max values\n\t * of the X axis should remain the same.(As above, but with\n\t * axis.MODE_AUTOSCALE instead of axis.MODE_AUTOSCROLL)\n\t */\n",
    "168584": "\t/**\n\t * Test method for 'org.simBio.ResultGenerator.main(String[])'\n\t * Five eraser in a erase\n\t */\n",
    "168585": "\t/**\n\t * Test method for 'org.simBio.ResultGenerator.main(String[])'\n\t * Malformed xpath for tag <erase> <eraser>\n\t */\n",
    "168586": "\t/**\n\t * Tests the p method of the Axis class with the starting condition data <\n\t * min. After the p method is called, the min value should be adjusted by\n\t * the value of delta, so that min <= data && data <= max. Max stays as it\n\t * is, so the interval between the max and min node is doubled.(As above,\n\t * but with axis.MODE_AUTOSCALE instead of axis.MODE_AUTOSCROLL)\n\t */\n",
    "168587": "\t/**\n\t * Test method for 'org.simBio.ResultGenerator.main(String[])'\n\t * One inserter in a insert\n\t */\n",
    "168589": "\t/**\n\t * Test method for 'org.simBio.ResultGenerator.main(String[])'\n\t * One before in a insert\n\t */\n",
    "168591": "\t/**\n\t * Test method for 'org.simBio.ResultGenerator.main(String[])'\n\t * Malformed xpath for tag <insert> <inserter>\n\t */\n",
    "168593": "\t/**\n\t * Tests the p method of the Axis class with the starting condition data >\n\t * max. After the p method is called, the max value should be adjusted by\n\t * the value of delta, so that min <= data && data <= max. Min stays as it\n\t * is, so the interval between the max and min node is doubled.(As above,\n\t * but with axis.MODE_AUTOSCALE instead of axis.MODE_AUTOSCROLL)\n\t */\n",
    "168594": "\t/**\n\t * Test method for 'org.simBio.ResultGenerator.main(String[])'\n\t * Malformed xpath for tag <insert> <before>\n\t */\n",
    "168595": "\t/**\n\t * Test method for 'org.simBio.sim.dm.ParameterChanger(InputStream, InputStream)'\n\t * Argument 'datainput' is null\n\t */\n",
    "168598": "\t/**\n\t * Test method for 'org.simBio.sim.dm.ParameterChanger(InputStream, InputStream)'\n\t * Argument 'randinput' is null\n\t */\n",
    "168599": "\t/**\n\t * Test method for 'org.simBio.sim.dm.ParameterChanger(InputStream, InputStream)'\n\t * Argument 'datainput' and 'randinput' is null\n\t */\n",
    "168600": "\t/**\n\t * Tests the p method of the Axis class with the starting condition data <\n\t * min. After the p method is called, the min and max values should be\n\t * adjusted by the value of delta, so that min <= data && data <= max.\n\t * Reflection is used to set the extendRate to 0.9 instead of 1.0 for this\n\t * test case.\n\t */\n",
    "168601": "\t/**\n\t * Test method for 'org.simBio.sim.dm.ParameterChanger(InputStream)'\n\t * Argument 'randinput' is null\n\t */\n",
    "168602": "\t/**\n\t * Test method for 'org.simBio.sim.dm.ParameterChanger.isRandomizer(InputStream)'\n\t */\n",
    "168604": "\t/**\n\t * Test method for 'org.simBio.sim.dm.ParameterChanger.hasExchanger(InputStream)'\n\t */\n",
    "168605": "\t/**\n\t * Tests the p method of the Axis class with the starting condition data >\n\t * max. After the p method is called, the min and max values should be\n\t * adjusted by the value of delta, so that min <= data && data <= max.\n\t * Reflection is used to set the extendRate to 0.9 instead of 1.0 for this\n\t * test case.\n\t */\n",
    "168607": "\t/**\n\t * Test method for 'org.simBio.sim.dm.ParameterChanger.doErase()'\n\t * Note that the method is private\n\t * Should raise an Exeption because doErase is already done in setUp()\n\t * \n\t * @throws Exception\n\t */\n",
    "168609": "\t/**\n\t * Test method for 'org.simBio.sim.dm.ParameterChanger.doInsert()'\n\t * Note that the method is private\n\t * \n\t * @throws Exception\n\t */\n",
    "168611": "\t/**\n\t * This is overridden to set <code>updatingListSelectionModel</code>\n\t * and message super. This is the only place DefaultTreeSelectionModel\n\t * alters the ListSelectionModel.\n\t */\n",
    "168612": "\t/**\n\t * Test method for 'org.simBio.sim.dm.ParameterChanger.doInsertBefore()'\n\t * Note that the method is private\n\t * \n\t * @throws Exception\n\t */\n",
    "168613": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getBaseModel()'\n\t * Argument 'protocolParserMake' has tag <baseModel> attribute 'path'\n\t * Should be ok\n\t */\n",
    "168614": "\t/**\n\t * Test method for 'org.simBio.sim.dm.ParameterChanger.doWrite()'\n\t * Note that the method is private\n\t * \n\t * @throws Exception\n\t */\n",
    "168615": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getBaseModel()'\n\t * Argument 'protocolParserMake' has no tag <baseModel> attribute \"path\"\n\t * Should raise an Exception\n\t */\n",
    "168616": "\t/**\n\t * Setup for testcases\n\t * \n\t * @throws FileNotFoundException \n\t */\n",
    "168617": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getGenerateModel()'\n\t * Argument 'protocolParserMake' has tag <generate> <xml> attribute \"path\"\n\t * Should be ok\n\t */\n",
    "168618": "\t/**\n\t * Creates and returns an instance of ListSelectionHandler.\n\t */\n",
    "168619": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getGenerateModel()'\n\t * Argument 'protocolParserModel' has no tag <generate> <xml> attribute \"path\"\n\t * Should raise an IOException\n\t */\n",
    "168621": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getMaxThreads()'\n\t * Argument 'protocolParserProtocol' has tag attribute \"threads\"\n\t */\n",
    "168622": "\t/**\n\t * If <code>updatingListSelectionModel</code> is false, this will\n\t * reset the selected paths from the selected rows in the list\n\t * selection model.\n\t */\n",
    "168623": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getMaxThreads()'\n\t * Argument 'protocolParserMake' has no tag attribute \"threads\"\n\t */\n",
    "168624": "\t/**\n\t * Test if all model XML-files work.\n\t * \n\t * Run each model complete or for maximum 5 sec to verify\n\t * that it works dependent on the value of runComplete.\n\t * \n\t * @throws Exception \n\t */\n",
    "168626": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getLauncher()'\n\t * 'protocolParserMake' has tag <generate> <xml> attribute 'launch'\n\t * Should be ok\n\t */\n",
    "168628": "\t/**\n\t * Test if all make XML-files work.\n\t * \n\t * First generate the models and then run each generated model\n\t * complete or for maximum 5 sec to verify that it works\n\t * dependent on the value of runComplete.\n\t * \n \t * @throws Exception \n\t */\n",
    "168629": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getLauncher()'\n\t * 'protocolParserModel' has no tag <generate> <xml> attribute 'launch'\n\t * Should raise an IOException\n\t */\n",
    "168633": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getEraser()'\n\t * 'protocolParserMake' has eraser\n\t * Should be ok\n\t */\n",
    "168638": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getEraser()'\n\t * 'protocolParserModel' has no eraser\n\t * Should raise an IOException\n\t */\n",
    "168639": "\t/**\n\t * Execute selected XML-file(s).\n\t * \n\t * @see IActionDelegate#run(IAction)\n\t */\n",
    "168640": "\t/**\n\t * Get StructuredSelection\n\t * \n\t * @see IActionDelegate#selectionChanged(IAction, ISelection)\n\t */\n",
    "168641": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getInserter()'\n\t * 'protocolParserMake' has inserter\n\t * Should be ok\n\t */\n",
    "168646": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getInserter()'\n\t * 'protocolParserModel' has no inserter\n\t * Should raise an IOException\n\t */\n",
    "168650": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getInserterBefore()'\n\t * 'protocolParserMake' has insert/before\n\t * Should be ok\n\t */\n",
    "168653": "\t/**\n\t * execute a selected xml using org.simBio.RunGUI.\n\t * \n\t * @see IActionDelegate#run(IAction)\n\t */\n",
    "168654": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getInserterBefore()'\n\t * 'protocolParserModel' has no insert/before\n\t * Should raise an IOException\n\t */\n",
    "168657": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getWriter()'\n\t * 'protocolParserMake' has writer\n\t * Should be ok\n\t */\n",
    "168666": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getWriter()'\n\t * 'protocolParserModel' has no writer\n\t * Should raise an IOException\n\t */\n",
    "168673": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getMultiplier()'\n\t * 'protocolParserMake' has write/multiplier\n\t * Should be ok\n\t */\n",
    "168678": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getMultiplier()'\n\t * 'protocolParserModel' has no write/multiplier\n\t * Should raise an IOException\n\t */\n",
    "168684": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getExchanger()'\n\t * 'protocolParserProtocol' has exchanger\n\t * Should be ok\n\t */\n",
    "168690": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getExchanger()'\n\t * 'protocolParserModel' has no exchanger\n\t * Should raise an IOException\n\t */\n",
    "168694": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getIdentification()'\n\t * 'protocolParserProtocol' has identification\n\t * Should be ok\n\t */\n",
    "168698": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getIdentification()'\n\t * 'protocolParserModel' has no identification\n\t * Should raise an IOException\n\t */\n",
    "168701": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getXmlRootDir()'\n\t * 'protocolParserProtocol' has XML root dir path\n\t * Should be ok\n\t */\n",
    "168703": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getXmlRootDir()'\n\t * 'protocolParserModel' has no XML root dir path\n\t * Should raise an IOException\n\t */\n",
    "168705": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getCsvRootFile()'\n\t * 'protocolParserProtocol' has CSV-file path\n\t * Should be ok\n\t */\n",
    "168708": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getCsvRootFile()'\n\t * 'protocolParserModel' has no CSV-file path\n\t * Should raise an IOException\n\t */\n",
    "168712": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getTocXML()'\n\t * 'protocolParserProtocol' has Toc XML-file path\n\t * Should be ok\n\t */\n",
    "168715": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getTocXML()'\n\t * 'protocolParserModel' has no Toc XML-file path\n\t * Should raise an IOException\n\t */\n",
    "168717": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getNormalizeTo()'\n\t * 'protocolParserProtocol' has NormalizeTo\n\t * Should be ok\n\t */\n",
    "168720": "\t/**\n\t * Test method for 'org.simBio.sim.dm.serialize.ProtocolParser.getNormalizeTo()'\n\t * 'protocolParserModel' has no NormalizeTo\n\t * Should raise an IOException\n\t */\n",
    "168724": "\t/**\n\t * Setup for testcases\n\t * \n\t * @throws FileNotFoundException \n\t */\n",
    "168727": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param b TODO Missing Method Parameter Documentation\n     */\n",
    "168728": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "168731": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param selected TODO Missing Method Parameter Documentation\n     * @param columnNames TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "168732": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "168734": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "168736": "    /**\n     * Erweitert Object-Array\n     *\n     * @param o TODO Missing Constructuor Parameter Documentation\n     */\n",
    "168739": "    /**\n     * TODO Missing Method Documentation\n     */\n",
    "168754": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "168756": "    /**\n     * TODO Missing Method Documentation\n     */\n",
    "168782": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param row TODO Missing Method Parameter Documentation\n     * @param col TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "168783": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param col TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "168816": "    /**\n     * Set a player to a distinct position.\n     * @param position\n     * @param taktic\n     * @param player\n     */\n",
    "168833": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "168857": "    /**\n     * Create a new Panel\n     *\n     * @param string Label text\n     * @param checkBox CheckBox\n     *\n     * @return a panel\n     */\n",
    "168863": "    /**\n     * Initializes the state of this instance.\n     */\n",
    "168871": "    /**\n     * Upload a single Feedback Object\n     * \n     * @param fo\n     * @return\n     */\n",
    "168992": "\t/**\n\t * Overwritten toString()\n\t */\n",
    "169031": "\t/**\n\t * This method initializes jToolBar\n\t * \n\t * @return javax.swing.JToolBar\n\t */\n",
    "169074": "    /**\n     * Increase number of Appearance for the player\n     */\n",
    "169076": "    /**\n     * toString methode: creates a String representation of the object\n     *\n     * @return the String representation\n     */\n",
    "169079": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param i TODO Missing Method Parameter Documentation\n     */\n",
    "169081": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169083": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param i TODO Missing Method Parameter Documentation\n     */\n",
    "169086": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169089": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param i TODO Missing Method Parameter Documentation\n     */\n",
    "169090": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169093": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param string TODO Missing Method Parameter Documentation\n     */\n",
    "169098": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param i TODO Missing Method Parameter Documentation\n     */\n",
    "169100": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169103": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param i TODO Missing Method Parameter Documentation\n     */\n",
    "169105": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169108": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param i TODO Missing Method Parameter Documentation\n     */\n",
    "169112": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169115": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param i TODO Missing Method Parameter Documentation\n     */\n",
    "169119": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169122": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param i TODO Missing Method Parameter Documentation\n     */\n",
    "169126": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169128": "    /**\n     * toString methode: creates a String representation of the object\n     *\n     * @return the String representation\n     */\n",
    "169131": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169134": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169135": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169136": "    /**\n     * Add a player performance to the List\n     *\n     * @param pp PlayerPerformance of a player in the game\n     */\n",
    "169137": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169139": "    /**\n     * toString methode: creates a String representation of the object\n     *\n     * @return the String representation\n     */\n",
    "169142": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169144": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param rating TODO Missing Method Parameter Documentation\n     */\n",
    "169180": "    /**\n     * toString methode: creates a String representation of the object\n     *\n     * @return the String representation\n     */\n",
    "169183": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param i TODO Missing Method Parameter Documentation\n     */\n",
    "169188": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169190": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169193": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param i TODO Missing Method Parameter Documentation\n     */\n",
    "169198": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169200": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param spot TODO Missing Method Parameter Documentation\n     */\n",
    "169218": "    /**\n     * toString methode: creates a String representation of the object\n     *\n     * @return the String representation\n     */\n",
    "169227": "    /**\n     * Return description for the team\n     *\n     * @return\n     */\n",
    "169239": "    /**\n     * Returns the spot report for the specified spot field\n     *\n     * @param spot the spot number we want\n     *\n     * @return SpotReport\n     */\n",
    "169241": "    /**\n     * Sets the spot place with the passes SpotLineup\n     *\n     * @param detail SpotLineup object\n     * @param spot spot to be filled with the object\n     */\n",
    "169244": "    /**\n     * Add a match to the report\n     *\n     * @param matchDetail Match to be analyzed\n     * @param showUnavailable consider also unavailable or not\n     */\n",
    "169247": "    /**\n     * Add a performance to the correct SpotReport\n     *\n     * @param pp\n     * @param showUnavailable\n     */\n",
    "169248": "    /**\n     * toString methode: creates a String representation of the object\n     *\n     * @return the String representation\n     */\n",
    "169251": "    /**\n     * toString methode: creates a String representation of the object\n     *\n     * @return the String representation\n     */\n",
    "169253": "    /**\n     * Updates the average stars\n     *\n     * @param stars new game stars\n     */\n",
    "169254": "    /**\n     * Add a performance to the report, and updated the tactic list\n     *\n     * @param pp\n     */\n",
    "169255": "    /**\n     * Generic calculate average method\n     *\n     * @param oldValue\n     * @param newValue\n     *\n     * @return the new average number\n     */\n",
    "169257": "    /**\n     * toString methode: creates a String representation of the object\n     *\n     * @return the String representation\n     */\n",
    "169262": "    /**\n     * Add a performance to the spot and updates the position based map\n     *\n     * @param pp\n     */\n",
    "169265": "    /**\n     * Update player appearance of 1\n     *\n     * @param pp\n     */\n",
    "169268": "    /**\n     * Update positionReport based on the new player performance\n     *\n     * @param pp\n     */\n",
    "169269": "    /**\n     * toString methode: creates a String representation of the object\n     *\n     * @return the String representation\n     */\n",
    "169273": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169275": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param matches TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169278": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param positions TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169279": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param matchId TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169282": "    /**\n     * toString methode: creates a String representation of the object\n     *\n     * @return the String representation\n     */\n",
    "169285": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169286": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param matchId TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169287": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param match TODO Missing Method Parameter Documentation\n     */\n",
    "169288": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param filter TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169289": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param tacticsReport TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169292": "    /**\n     * check if a team is a favourite team\n     *\n     * @param teamId\n     *\n     * @return true if team is a favourite\n     */\n",
    "169293": "    /**\n     * Returns all favourite teams\n     *\n     * @return List of Teams Object\n     */\n",
    "169295": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param tacticsReport TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169296": "    /**\n     * Add a new Favourite team\n     *\n     * @param team the new favourite team\n     */\n",
    "169297": "    /**\n     * Remove a Favourite team\n     *\n     * @param teamId the favourite team to be removed\n     */\n",
    "169298": "    /**\n     * Returns the specialEvent code for a player\n     *\n     * @param playerId the playerId\n     *\n     * @return a numeric code\n     */\n",
    "169299": "    /**\n     * Check if the table exists, if not create it  with default values\n     */\n",
    "169300": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param id TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169302": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param b TODO Missing Method Parameter Documentation\n     */\n",
    "169303": "    /**\n     * Add a player to a team\n     *\n     * @param info\n     */\n",
    "169305": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169306": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param info TODO Missing Method Parameter Documentation\n     */\n",
    "169309": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169312": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169315": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param col TODO Missing Method Parameter Documentation\n     */\n",
    "169319": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param b TODO Missing Method Parameter Documentation\n     */\n",
    "169320": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param col TODO Missing Method Parameter Documentation\n     * @param width TODO Missing Method Parameter Documentation\n     */\n",
    "169322": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169325": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param row TODO Missing Method Parameter Documentation\n     * @param rating TODO Missing Method Parameter Documentation\n     */\n",
    "169326": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169329": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param rating TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169330": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param ae TODO Missing Method Parameter Documentation\n     */\n",
    "169336": "    /**\n     * TODO Missing Method Documentation\n     */\n",
    "169337": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param b TODO Missing Method Parameter Documentation\n     */\n",
    "169340": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169346": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169347": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169348": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169351": "    /**\n     * TODO Missing Method Documentation\n     */\n",
    "169353": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param lineup TODO Missing Method Parameter Documentation\n     * @param week TODO Missing Constructuor Parameter Documentation\n     * @param season TODO Missing Constructuor Parameter Documentation\n     */\n",
    "169354": "    /**\n     * Setup the layout, with 2 teams displayed\n     */\n",
    "169355": "    /**\n     * Setup the layout, with only one team displayed\n     */\n",
    "169357": "    /**\n     * Returns user team lineup data\n     *\n     * @return Own lineup data\n     */\n",
    "169363": "    /**\n     * Sets the Layout of the panel, by delegating to the proper class\n     *\n     * @param compare true if both teams must be shown\n     * @param mixedLIneup true if mixedlineup has to be used, false if not\n     */\n",
    "169368": "    /**\n     * Sets the rating bar in the proper line on the grid bag grid\n     *\n     * @param line\n     */\n",
    "169369": "    /**\n     * Create a new Panel\n     *\n     * @param string Label text\n     * @param checkBox CheckBox\n     *\n     * @return a panel\n     */\n",
    "169383": "    /**\n     * Set the value in the databse\n     *\n     * @param key The key\n     * @param value the value\n     */\n",
    "169384": "    /**\n     * Sets a lineup line in the proper line on the grid bag grid\n     *\n     * @param line\n     */\n",
    "169386": "    /**\n     * Returns a value\n     *\n     * @param key the key to be returned\n     * @param defaultValue to be used if not existing\n     *\n     * @return the value\n     */\n",
    "169392": "    /**\n     * Methods that fill the combo with  the favourite teams\n     */\n",
    "169397": "    /**\n     * Sets the user team title panel on the grid\n     *\n     * @param line\n     */\n",
    "169404": "    /**\n     * Sets a lineup line in the proper line on the grid bag grid\n     *\n     * @param line\n     */\n",
    "169407": "    /**\n     * Get the Panel Keeper\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169410": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param i TODO Missing Method Parameter Documentation\n     */\n",
    "169414": "    /**\n     * Returns the column class type\n     *\n     * @param column\n     *\n     * @return\n     */\n",
    "169416": "    /**\n     * Returns true if the cell is editable\n     *\n     * @param row\n     * @param column\n     *\n     * @return\n     */\n",
    "169418": "    /**\n     * Returns the column class type\n     *\n     * @param column\n     *\n     * @return\n     */\n",
    "169420": "    /**\n     * Method that returns if the cell if editable, false by default\n     *\n     * @param row the row index of the cell\n     * @param column the column index of the cell\n     *\n     * @return true if editable, false if not\n     */\n",
    "169421": "    /**\n     * Sets a lineup line in the proper line on the grid bag grid\n     *\n     * @param line\n     */\n",
    "169426": "    /**\n     * TODO Missing Method Documentation\n     */\n",
    "169429": "    /**\n     * TODO Missing Method Documentation\n     */\n",
    "169435": "    /**\n     * Sets the opponent team title panel on the grid\n     *\n     * @param line\n     */\n",
    "169438": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169440": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169441": "    /**\n     * Sets the rating bar in the proper line on the grid bag grid\n     *\n     * @param line\n     */\n",
    "169449": "    /**\n     * Sets the rating bar in the proper line on the grid bag grid\n     *\n     * @param line\n     */\n",
    "169451": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param rating TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169455": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param panel TODO Missing Method Parameter Documentation\n     * @param playerPanel TODO Missing Method Parameter Documentation\n     */\n",
    "169460": "    /**\n     * Action performed event listener Show the download dialog\n     *\n     * @param arg0 the event\n     */\n",
    "169461": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param playerId TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169465": "    /**\n     * Returns the tactic level for the user team defined formation in HO Lineup\n     *\n     * @return the actual tactic level as shown in HO LIneup tab\n     */\n",
    "169470": "    /**\n     * Get the tactic skill for a i18n'ed string.\n     */\n",
    "169474": "\t/**\n\t * Get the currently selected tactic type as i18ned string.\n\t */\n",
    "169476": "\t/**\n\t * Get the skill of the currently selected tactic as i18ned string.\n\t */\n",
    "169477": "    /**\n     * Action performed event listener, show the about panel\n     *\n     * @param arg0 the event\n     */\n",
    "169481": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param col TODO Missing Method Parameter Documentation\n     * @param width TODO Missing Method Parameter Documentation\n     */\n",
    "169482": "    /**\n     * Action performed event listener, store the key in the Database\n     *\n     * @param e the event\n     */\n",
    "169484": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param arg0 TODO Missing Method Parameter Documentation\n     */\n",
    "169486": "    /**\n     * Get the Panel Left Central Defender\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169487": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param spot TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169488": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param i TODO Missing Method Parameter Documentation\n     */\n",
    "169490": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169492": "    /**\n     * Get the Panel Left Forward\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169494": "    /**\n     * Get the Panel Left Midfield\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169495": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169497": "    /**\n     * Get the Panel Left Wing\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169498": "    /**\n     * TODO Missing Method Documentation\n     */\n",
    "169499": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169501": "    /**\n     * Get the Panel Left Wingback\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169504": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param i TODO Missing Method Parameter Documentation\n     */\n",
    "169505": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param number TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169508": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169509": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param position TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169510": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param rating TODO Missing Method Parameter Documentation\n     */\n",
    "169514": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param i TODO Missing Method Parameter Documentation\n     */\n",
    "169515": "    /**\n     * TODO Missing Method Documentation\n     */\n",
    "169516": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param text TODO Missing Method Parameter Documentation\n     * @param farbe TODO Missing Method Parameter Documentation\n     * @param Bordertype TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169517": "    /**\n     * TODO Missing Method Documentation\n     */\n",
    "169519": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169520": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169521": "    /**\n     * TODO Missing Method Documentation\n     */\n",
    "169522": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169525": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param i TODO Missing Method Parameter Documentation\n     */\n",
    "169528": "    /**\n     * TODO Missing Method Documentation\n     */\n",
    "169530": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169531": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param r1 TODO Missing Method Parameter Documentation\n     * @param r2 TODO Missing Method Parameter Documentation\n     */\n",
    "169534": "    /**\n     * TODO Missing Method Documentation\n     */\n",
    "169536": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param i TODO Missing Method Parameter Documentation\n     */\n",
    "169537": "    /**\n     * Compare two objects\n     *\n     * @param o1\n     * @param o2\n     *\n     * @return\n     */\n",
    "169540": "    /**\n     * Compare two objects\n     *\n     * @param o1\n     * @param o2\n     *\n     * @return\n     */\n",
    "169541": "    /**\n     * Compare two objects\n     *\n     * @param o1\n     * @param o2\n     *\n     * @return\n     */\n",
    "169544": "    /**\n     * Compare two objects\n     *\n     * @param o1\n     * @param o2\n     *\n     * @return\n     */\n",
    "169545": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169548": "    /**\n     * Get the Panel Right Centraldefender\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169550": "    /**\n     * Returns the Filter Panel\n     *\n     * @return\n     */\n",
    "169553": "    /**\n     * Returns the Team panel\n     *\n     * @return\n     */\n",
    "169555": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param i TODO Missing Method Parameter Documentation\n     */\n",
    "169559": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169561": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169562": "    /**\n     * Returns the pluginId\n     *\n     * @return\n     */\n",
    "169563": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169566": "    /**\n     * Hattrick Quality function\n     *\n     * @param value Official Hattrick value\n     *\n     * @return Hattrick Quality value\n     */\n",
    "169567": "    /**\n     * Get the Panel Right Forward\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169568": "    /**\n     * Initializes the state of this instance.\n     *\n     * @param messages TODO Missing Constructuor Parameter Documentation\n     */\n",
    "169569": "    /**\n     * Returns the main plugin panel\n     *\n     * @return\n     */\n",
    "169571": "    /**\n     * Returns the icon's height.\n     *\n     * @return an int specifying the fixed height of the icon.\n     */\n",
    "169572": "    /**\n     * Returns the icon's width.\n     *\n     * @return an int specifying the fixed width of the icon.\n     */\n",
    "169573": "    /**\n     * Returns the rating panel\n     *\n     * @return\n     */\n",
    "169574": "    /**\n     * Get the Panel Right Midfield\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169578": "    /**\n     * Returns the recap panel\n     *\n     * @return\n     */\n",
    "169581": "    /**\n     * Get the Panel Right Wing\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169584": "    /**\n     * Returns the Simulate Button reference\n     *\n     * @return\n     */\n",
    "169591": "    /**\n     * Returns the plugin version\n     *\n     * @return\n     */\n",
    "169592": "    /**\n     * Get the Panel Right Wingback\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169593": "    /**\n     * MEthod that refresh the data after an event\n     */\n",
    "169596": "    /**\n     * Set the Name of the Team\n     *\n     * @param teamname TODO Missing Constructuor Parameter Documentation\n     */\n",
    "169602": "    /**\n     * Get the Name of the Team\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169607": "    /**\n     * Returns the int value\n     *\n     * @return value in the cell, or 0 if empty\n     */\n",
    "169608": "    /**\n     * Method that returns if the cell if editable, false by default\n     *\n     * @param row the row index of the cell\n     * @param column the column index of the cell\n     *\n     * @return true if editable, false if not\n     */\n",
    "169610": "    /**\n     * Make sure any set String is valid.\n     *\n     * @param str String to check for validity\n     * @param offs offset to be applied\n     *\n     * @return updated string\n     */\n",
    "169611": "    /**\n     * Method the return the column class type\n     *\n     * @param column the column we want to know the class type\n     *\n     * @return Object is column is empty, or the type of object we have in the column\n     */\n",
    "169613": "    /**\n     * Make sure this string is numberic\n     *\n     * @param str String to check for validity\n     * @param offs offset to be applied\n     *\n     * @return true if number, or false if not\n     */\n",
    "169620": "    /**\n     * Returns the icon's height.\n     *\n     * @return an int specifying the fixed height of the icon.\n     */\n",
    "169623": "    /**\n     * Returns the icon's width.\n     *\n     * @return an int specifying the fixed width of the icon.\n     */\n",
    "169648": "    /**\n     * When called by HO reload everything!\n     */\n",
    "169651": "    /**\n     * Missing Method Documentation\n     */\n",
    "169653": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169655": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169657": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169658": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169660": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169662": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169663": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169665": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169667": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169668": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169670": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169672": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169673": "    /**\n     *  Missing Method Documentation\n     *\n     * @param i  Missing Method Parameter Documentation\n     */\n",
    "169676": "    /**\n     *  Missing Method Documentation\n     *\n     * @return  Missing Return Method Documentation\n     */\n",
    "169678": "    /**\n     * Missing Method Documentation\n     *\n     * @param arenaExpenses Missing Method Parameter Documentation\n     */\n",
    "169679": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169682": "    /**\n     * Missing Method Documentation\n     *\n     * @param cash Missing Method Parameter Documentation\n     */\n",
    "169683": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169688": "    /**\n     * Missing Method Documentation\n     *\n     * @param expectedProfitOrLoss Missing Method Parameter Documentation\n     */\n",
    "169690": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169692": "    /**\n     * Missing Method Documentation\n     *\n     * @param interestExpenses Missing Method Parameter Documentation\n     */\n",
    "169694": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169698": "    /**\n     * Missing Method Documentation\n     *\n     * @param interestIncome Missing Method Parameter Documentation\n     */\n",
    "169700": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169703": "    /**\n     * Missing Method Documentation\n     *\n     * @param salaries Missing Method Parameter Documentation\n     */\n",
    "169706": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169708": "    /**\n     * Missing Method Documentation\n     *\n     * @param season Missing Method Parameter Documentation\n     * @param week Missing Method Parameter Documentation\n     */\n",
    "169709": "    /**\n     * Missing Method Documentation\n     *\n     * @param spectatorsIncome Missing Method Parameter Documentation\n     */\n",
    "169710": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169713": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169714": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169715": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169717": "    /**\n     * Missing Method Documentation\n     *\n     * @param sponsorsIncome Missing Method Parameter Documentation\n     */\n",
    "169718": "    /**\n     * Missing Method Documentation\n     *\n     * @param obj Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169719": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169720": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169721": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169723": "    /**\n     * Missing Method Documentation\n     *\n     * @param obj Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169724": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169725": "    /**\n     * Missing Method Documentation\n     *\n     * @param staffExpenses Missing Method Parameter Documentation\n     */\n",
    "169726": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169727": "    /**\n     * Missing Method Documentation\n     *\n     * @param date Missing Method Parameter Documentation\n     */\n",
    "169729": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169730": "    /**\n     * Missing Method Documentation\n     *\n     * @param date Missing Method Parameter Documentation\n     */\n",
    "169732": "    /**\n     * Missing Method Documentation\n     *\n     * @param temporaryExpenses Missing Method Parameter Documentation\n     */\n",
    "169733": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169735": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169737": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169738": "    /**\n     * Missing Method Documentation\n     *\n     * @param temporaryIncome Missing Method Parameter Documentation\n     */\n",
    "169739": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169740": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169741": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169742": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169743": "    /**\n     * Adjusts the number and sizes of rows in this layout.  After calling this method, the caller\n     * should request this layout manager to perform the layout.  This can be done with the\n     * following code:\n     * <pre>\n     *     layout.layoutContainer(container);\n     *     container.repaint();\n     * </pre>\n     * or\n     * <pre>\n     *     window.pack()\n     * </pre>\n     * If this is not done, the changes in the layout will not be seen until the container is\n     * resized.\n     *\n     * @param column widths of each of the columns\n     *\n     * @see #getColumn\n     */\n",
    "169744": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169745": "    /**\n     * Missing Method Documentation\n     *\n     * @param totalExpenses Missing Method Parameter Documentation\n     */\n",
    "169747": "    /**\n     * Missing Method Documentation\n     *\n     * @param d Missing Method Parameter Documentation\n     */\n",
    "169748": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169749": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169750": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169752": "    /**\n     * Missing Method Documentation\n     *\n     * @param totalIncome Missing Method Parameter Documentation\n     */\n",
    "169753": "    /**\n     * Missing Method Documentation\n     *\n     * @param d Missing Method Parameter Documentation\n     */\n",
    "169754": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169755": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169757": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169758": "    /**\n     * Adjusts the width of a single column in this layout.  After calling this method, the caller\n     * should request this layout manager to perform the layout.  This can be done with the\n     * following code: <code> layout.layoutContainer(container); container.repaint(); </code> or\n     * <pre>\n     *     window.pack()\n     * </pre>\n     * If this is not done, the changes in the layout will not be seen until the container is\n     * resized.\n     *\n     * @param i zero-based index of column to set.  If this parameter is not valid, an\n     *        ArrayOutOfBoundsException will be thrown.\n     * @param size width of the column.  This parameter cannot be null.\n     *\n     * @see #getColumn\n     */\n",
    "169759": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169760": "    /**\n     * Missing Method Documentation\n     *\n     * @param youthSquadExpenses Missing Method Parameter Documentation\n     */\n",
    "169763": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169766": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169774": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169776": "    /**\n     * Gets the width of a single column in this layout.\n     *\n     * @param i zero-based index of row to get.  If this parameter is not valid, an\n     *        ArrayOutOfBoundsException will be thrown.\n     *\n     * @return width of the requested column\n     *\n     * @see #setRow\n     */\n",
    "169778": "    /**\n     * Missing Method Documentation\n     *\n     * @param week Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169779": "    /**\n     * Missing Method Documentation\n     *\n     * @param d Missing Method Parameter Documentation\n     */\n",
    "169780": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169782": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169784": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169785": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169786": "    /**\n     * Missing Method Documentation\n     *\n     * @param week Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169788": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169791": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169792": "    /**\n     * Missing Method Documentation\n     *\n     * @param d Missing Method Parameter Documentation\n     */\n",
    "169794": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169795": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169797": "    /**\n     * Missing Method Documentation\n     *\n     * @param playerId Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169798": "    /**\n     * Missing Method Documentation\n     *\n     * @param d Missing Method Parameter Documentation\n     */\n",
    "169799": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169801": "    /**\n     * Missing Method Documentation\n     *\n     * @param week Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169802": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169803": "    /**\n     * Gets the constraints of a given component.\n     *\n     * @param component desired component\n     *\n     * @return If the given component is found, the constraints associated with that component.  If\n     *         the given component is null or is not found, null is returned.\n     */\n",
    "169804": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169809": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169810": "    /**\n     * Cancel a Transfer\n     *\n     * @param id playerId to cancel transfer for\n     * @param sell Missing Constructuor Parameter Documentation\n     */\n",
    "169811": "    /**\n     * Missing Method Documentation\n     *\n     * @param obj Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169812": "    /**\n     * Missing Method Documentation\n     *\n     * @param string Missing Method Parameter Documentation\n     */\n",
    "169813": "    /**\n     * Missing Method Documentation\n     */\n",
    "169814": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param index TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169815": "    /**\n     * Missing Method Documentation\n     *\n     * @param week Missing Method Parameter Documentation\n     * @param playerId Missing Method Parameter Documentation\n     */\n",
    "169816": "    /**\n     * Missing Method Documentation\n     */\n",
    "169818": "    /**\n     * Missing Method Documentation\n     *\n     * @param week Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169819": "    /**\n     * Sets the horizontal gap between colunns.\n     *\n     * @param hGap the horizontal gap in pixels\n     *\n     * @throws IllegalArgumentException\n     */\n",
    "169820": "    /**\n     * Missing Method Documentation\n     *\n     * @param week Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169821": "    /**\n     * Missing Method Documentation\n     */\n",
    "169822": "    /**\n     * Missing Method Documentation\n     *\n     * @param id Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169823": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169824": "    /**\n     * Missing Method Documentation\n     */\n",
    "169825": "    /**\n     * Missing Method Documentation\n     */\n",
    "169826": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169827": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169828": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169829": "    /**\n     * Missing Method Documentation\n     */\n",
    "169830": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169831": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169832": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169833": "    /**\n     * Missing Method Documentation\n     */\n",
    "169834": "    /**\n     * Missing Method Documentation\n     *\n     * @param data Missing Method Parameter Documentation\n     */\n",
    "169835": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     *\n     * @throws RuntimeException Missing Constructuor Exception Documentation\n     */\n",
    "169836": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     *\n     * @throws RuntimeException Missing Constructuor Exception Documentation\n     */\n",
    "169839": "    /**\n     * Gets the horizontal gap between colunns.\n     *\n     * @return the horizontal gap in pixels\n     */\n",
    "169840": "    /**\n     * Missing Method Documentation\n     *\n     * @param row Missing Method Parameter Documentation\n     * @param col Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169841": "    /**\n     * Missing Method Documentation\n     *\n     * @param d Missing Method Parameter Documentation\n     */\n",
    "169842": "    /**\n     * Missing Method Documentation\n     *\n     * @param inner Missing Method Parameter Documentation\n     *\n     * @throws RuntimeException Missing Constructuor Exception Documentation\n     */\n",
    "169843": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169845": "    /**\n     * Missing Method Documentation\n     *\n     * @param col Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169846": "    /**\n     * Missing Method Documentation\n     *\n     * @param id Missing Method Parameter Documentation\n     *\n     * @throws RuntimeException Missing Constructuor Exception Documentation\n     */\n",
    "169847": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169848": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169850": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169851": "    /**\n     * Method that returns if the cell if editable, false by default\n     *\n     * @param row the row index of the cell\n     * @param column the column index of the cell\n     *\n     * @return true if editable, false if not\n     */\n",
    "169852": "    /**\n     * Missing Method Documentation\n     *\n     * @param values Missing Method Parameter Documentation\n     */\n",
    "169853": "    /**\n     * Missing Method Documentation\n     *\n     * @param row Missing Method Parameter Documentation\n     * @param editable Missing Method Parameter Documentation\n     */\n",
    "169854": "    /**\n     * Missing Method Documentation\n     *\n     * @param val Missing Method Parameter Documentation\n     * @param money Missing Method Parameter Documentation\n     */\n",
    "169855": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169856": "    /**\n     * Missing Method Documentation\n     *\n     * @param row Missing Method Parameter Documentation\n     * @param c Missing Method Parameter Documentation\n     */\n",
    "169857": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169858": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169859": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169860": "    /**\n     * Method that returns if the cell if editable, false by default\n     *\n     * @param row the row index of the cell\n     *\n     * @return true if editable, false if not\n     */\n",
    "169861": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169863": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169864": "    /**\n     * Missing Method Documentation\n     *\n     * @param row Missing Method Parameter Documentation\n     * @param multi Missing Method Parameter Documentation\n     */\n",
    "169866": "    /**\n     * Missing Method Documentation\n     *\n     * @param column Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169867": "    /**\n     * Method that returns if the cell if editable, false by default\n     *\n     * @param row the row index of the cell\n     *\n     * @return true if editable, false if not\n     */\n",
    "169868": "        /**\n         * Missing Method Documentation\n         *\n         * @param arg0 Missing Method Parameter Documentation\n         * @param arg1 Missing Method Parameter Documentation\n         *\n         * @return Missing Return Method Documentation\n         */\n",
    "169869": "    /**\n     * Missing Method Documentation\n     *\n     * @param d Missing Method Parameter Documentation\n     */\n",
    "169870": "        /**\n         * Missing Method Documentation\n         *\n         * @param arg0 Missing Method Parameter Documentation\n         *\n         * @return Missing Return Method Documentation\n         */\n",
    "169871": "    /**\n     * Missing Method Documentation\n     *\n     * @param value Missing Method Parameter Documentation\n     * @param row Missing Method Parameter Documentation\n     * @param col Missing Method Parameter Documentation\n     */\n",
    "169872": "    /**\n     * Returns the alignment along the x axis.  This specifies how the component would like to be\n     * aligned relative to other components.  The value should be a number between 0 and 1 where 0\n     * represents alignment along the origin, 1 is aligned the furthest away from the origin, 0.5\n     * is centered, etc.\n     *\n     * @param parent -\n     *\n     * @return unconditionally, 0.5\n     */\n",
    "169873": "    /**\n     * Missing Method Documentation\n     *\n     * @param week Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169874": "    /**\n     * Missing Method Documentation\n     *\n     * @param column Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169875": "    /**\n     * Missing Method Documentation\n     *\n     * @param week Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169876": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169877": "    /**\n     * Missing Method Documentation\n     */\n",
    "169878": "    /**\n     * Missing Method Documentation\n     *\n     * @param week Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169879": "    /**\n     * Missing Method Documentation\n     */\n",
    "169880": "    /**\n     * Missing Method Documentation\n     *\n     * @param week Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169881": "    /**\n     * Missing Method Documentation\n     */\n",
    "169882": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169884": "    /**\n     * Missing Method Documentation\n     */\n",
    "169885": "    /**\n     * Missing Method Documentation\n     *\n     * @param newSerie Missing Method Parameter Documentation\n     */\n",
    "169886": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169889": "    /**\n     * Missing Method Documentation\n     *\n     * @param row Missing Method Parameter Documentation\n     * @param model Missing Method Parameter Documentation\n     */\n",
    "169890": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169891": "    /**\n     * Missing Method Documentation\n     *\n     * @param cell Missing Method Parameter Documentation\n     * @param week Missing Constructuor Parameter Documentation\n     */\n",
    "169892": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169893": "    /**\n     * Missing Method Documentation\n     *\n     * @param e Missing Method Parameter Documentation\n     */\n",
    "169894": "    /**\n     * Missing Method Documentation\n     *\n     * @param week Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169896": "    /**\n     * Missing Method Documentation\n     *\n     * @param week Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169897": "    /**\n     * Missing Method Documentation\n     */\n",
    "169898": "    /**\n     * Missing Method Documentation\n     *\n     * @param d Missing Method Parameter Documentation\n     */\n",
    "169900": "    /**\n     * Missing Method Documentation\n     */\n",
    "169901": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169903": "    /**\n     * Returns the alignment along the y axis.  This specifies how the component would like to be\n     * aligned relative to other components.  The value should be a number between 0 and 1 where 0\n     * represents alignment along the origin, 1 is aligned the furthest away from the origin, 0.5\n     * is centered, etc.\n     *\n     * @param parent\n     *\n     * @return unconditionally, 0.5\n     */\n",
    "169906": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169909": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169911": "    /**\n     * Missing Method Documentation\n     */\n",
    "169912": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "169913": "    /**\n     * Missing Method Documentation\n     */\n",
    "169914": "    /**\n     * Missing Method Documentation\n     */\n",
    "169915": "    /**\n     * Missing Method Documentation\n     */\n",
    "169916": "    /**\n     * Missing Method Documentation\n     */\n",
    "169918": "    /**\n     * Missing Method Documentation\n     */\n",
    "169919": "    /**\n     * Missing Method Documentation\n     *\n     * @param week Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169921": "    /**\n     * Missing Method Documentation\n     *\n     * @param week Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169923": "    /**\n     * Missing Method Documentation\n     */\n",
    "169924": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169925": "    /**\n     * Missing Method Documentation\n     */\n",
    "169926": "    /**\n     * Gets the number of columns in this layout.\n     *\n     * @return the number of columns\n     */\n",
    "169927": "    /**\n     * Missing Method Documentation\n     */\n",
    "169930": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     *\n     * @throws RuntimeException Missing Constructuor Exception Documentation\n     */\n",
    "169931": "    /**\n     * Missing Method Documentation\n     */\n",
    "169933": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169935": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169936": "    /**\n     * Missing Method Documentation\n     */\n",
    "169938": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169940": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169943": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169944": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169946": "    /**\n     * Missing Method Documentation\n     */\n",
    "169947": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169948": "    /**\n     * Missing Method Documentation\n     *\n     * @param row Missing Method Parameter Documentation\n     * @param model Missing Method Parameter Documentation\n     */\n",
    "169950": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169952": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169953": "    /**\n     * Missing Method Documentation\n     *\n     * @param cell Missing Method Parameter Documentation\n     * @param week Missing Constructuor Parameter Documentation\n     */\n",
    "169954": "    /**\n     * Missing Method Documentation\n     *\n     * @param round Missing Method Parameter Documentation\n     * @param teamRank Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169955": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169956": "    /**\n     * Missing Method Documentation\n     *\n     * @param row Missing Method Parameter Documentation\n     * @param model Missing Method Parameter Documentation\n     */\n",
    "169958": "    /**\n     * Missing Method Documentation\n     *\n     * @param week Missing Method Parameter Documentation\n     * @param size Missing Method Parameter Documentation\n     * @param isCupMatch TODO Missing Constructuor Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169959": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169960": "    /**\n     * Gets the number of rows in this layout.\n     *\n     * @return the number of rows\n     */\n",
    "169961": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169962": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169964": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169965": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169966": "    /**\n     * Missing Method Documentation\n     *\n     * @param level Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169967": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169968": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169969": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169971": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169972": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169973": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169975": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169976": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169978": "    /**\n     * Missing Method Documentation\n     *\n     * @param level Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169979": "    /**\n     * Missing Method Documentation\n     *\n     * @param number Missing Method Parameter Documentation\n     * @param build Missing Method Parameter Documentation\n     * @param destroy Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169980": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169981": "    /**\n     * Missing Method Documentation\n     *\n     * @param spokesman Missing Method Parameter Documentation\n     * @param week Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169982": "    /**\n     * Missing Method Documentation\n     *\n     * @param row Missing Method Parameter Documentation\n     * @param model Missing Method Parameter Documentation\n     */\n",
    "169986": "    /**\n     * Missing Method Documentation\n     *\n     * @param cell Missing Method Parameter Documentation\n     * @param week Missing Constructuor Parameter Documentation\n     */\n",
    "169990": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169991": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169993": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "169994": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "169996": "    /**\n     * Adjusts the number and sizes of rows in this layout.  After calling this method, the caller\n     * should request this layout manager to perform the layout.  This can be done with the\n     * following code: <code> layout.layoutContainer(container); container.repaint(); </code> or\n     * <pre>\n     *     window.pack()\n     * </pre>\n     * If this is not done, the changes in the layout will not be seen until the container is\n     * resized.\n     *\n     * @param row heights of each of the rows.  This parameter cannot be null.\n     *\n     * @see #getRow\n     */\n",
    "169999": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "170000": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "170004": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "170006": "    /**\n     * Missing Method Documentation\n     */\n",
    "170007": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "170010": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "170012": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "170016": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "170017": "    /**\n     * Missing Method Documentation\n     */\n",
    "170018": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "170019": "    /**\n     * Missing Method Documentation\n     */\n",
    "170024": "    /**\n     * Adjusts the height of a single row in this layout.  After calling this method, the caller\n     * should request this layout manager to perform the layout.  This can be done with the\n     * following code: <code> layout.layoutContainer(container); container.repaint(); </code> or\n     * <pre>\n     *     window.pack()\n     * </pre>\n     * If this is not done, the changes in the layout will not be seen until the container is\n     * resized.\n     *\n     * @param i zero-based index of row to set.  If this parameter is not valid, an\n     *        ArrayOutOfBoundsException will be thrown.\n     * @param size height of the row.  This parameter cannot be null.\n     *\n     * @see #getRow\n     */\n",
    "170026": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "170029": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "170031": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "170032": "    /**\n     * Missing Method Documentation\n     */\n",
    "170034": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "170035": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "170038": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "170041": "    /**\n     * Missing Method Documentation\n     *\n     * @param i Missing Method Parameter Documentation\n     */\n",
    "170043": "    /**\n     * Missing Method Documentation\n     *\n     * @param cell Missing Method Parameter Documentation\n     * @param week Missing Constructuor Parameter Documentation\n     */\n",
    "170044": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "170045": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "170047": "    /**\n     * Missing Method Documentation\n     *\n     * @param cell Missing Method Parameter Documentation\n     * @param week Missing Constructuor Parameter Documentation\n     */\n",
    "170048": "    /**\n     * Missing Method Documentation\n     *\n     * @param cell Missing Method Parameter Documentation\n     * @param week Missing Constructuor Parameter Documentation\n     */\n",
    "170051": "    /**\n     * Missing Method Documentation\n     *\n     * @param row Missing Method Parameter Documentation\n     * @param model Missing Method Parameter Documentation\n     */\n",
    "170052": "    /**\n     * Missing Method Documentation\n     *\n     * @param row Missing Method Parameter Documentation\n     * @param model Missing Method Parameter Documentation\n     */\n",
    "170053": "    /**\n     * Missing Method Documentation\n     *\n     * @param row Missing Method Parameter Documentation\n     * @param model Missing Method Parameter Documentation\n     */\n",
    "170054": "    /**\n     * Missing Method Documentation\n     *\n     * @param row Missing Method Parameter Documentation\n     * @param model Missing Method Parameter Documentation\n     */\n",
    "170055": "    /**\n     * Missing Method Documentation\n     *\n     * @param week Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "170056": "    /**\n     * Gets the sizes of a row in this layout.\n     *\n     * @param i zero-based index of row to get.  If this parameter is not valid, an\n     *        ArrayOutOfBoundsException will be thrown.\n     *\n     * @return height of each of the requested row\n     *\n     * @see #setRow\n     */\n",
    "170057": "    /**\n     * Missing Method Documentation\n     *\n     * @param columnIndex Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "170058": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "170059": "    /**\n     * Missing Method Documentation\n     */\n",
    "170060": "    /**\n     * Missing Method Documentation\n     */\n",
    "170063": "    /**\n     * Missing Method Documentation\n     *\n     * @param weekNumber Missing Method Parameter Documentation\n     * @param results Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "170064": "    /**\n     * Missing Method Documentation\n     */\n",
    "170067": "    /**\n     * Missing Method Documentation\n     *\n     * @param week Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "170069": "    /**\n     * Missing Method Documentation\n     *\n     * @param fans Missing Method Parameter Documentation\n     * @param fanMorale Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "170070": "    /**\n     * Missing Method Documentation\n     */\n",
    "170071": "    /**\n     * Missing Method Documentation\n     *\n     * @param columnIndex Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "170072": "    /**\n     * Missing Method Documentation\n     */\n",
    "170073": "    /**\n     * Missing Method Documentation\n     *\n     * @param combobox Missing Method Parameter Documentation\n     * @param id Missing Method Parameter Documentation\n     */\n",
    "170074": "    /**\n     * Returns the bounds of the specified range of items in JList   coordinates. Returns null if\n     * index isn't valid.\n     *\n     * @param index0 the index of the first JList cell in the range\n     * @param index1 the index of the last JList cell in the range\n     *\n     * @return the bounds of the indexed cells in pixels\n     */\n",
    "170075": "    /**\n     * Missing Method Documentation\n     *\n     * @param text Missing Method Parameter Documentation\n     * @param listener Missing Method Parameter Documentation\n     */\n",
    "170077": "    /**\n     * Missing Method Documentation\n     *\n     * @param index Missing Method Parameter Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "170078": "    /**\n     * Missing Method Documentation\n     *\n     * @return Missing Return Method Documentation\n     */\n",
    "170080": "    /**\n     * Missing Method Documentation\n     *\n     * @param text Missing Method Parameter Documentation\n     * @param listener Missing Method Parameter Documentation\n     * @param inner Missing Constructuor Parameter Documentation\n     */\n",
    "170084": "    /**\n     * Missing Method Documentation\n     *\n     * @param text Missing Method Parameter Documentation\n     * @param listener Missing Method Parameter Documentation\n     * @param multi Missing Method Parameter Documentation\n     * @param inner Missing Method Parameter Documentation\n     */\n",
    "170085": "    /**\n     * Sets the vertical gap between rows.\n     *\n     * @param vGap the horizontal gap in pixels\n     *\n     * @throws IllegalArgumentException -\n     */\n",
    "170089": "    /**\n     * Missing Method Documentation\n     *\n     * @param text Missing Method Parameter Documentation\n     */\n",
    "170092": "    /**\n     * Missing Method Documentation\n     */\n",
    "170096": "    /**\n     * Missing Method Documentation\n     */\n",
    "170103": "        /**\n         * Missing Method Documentation\n         *\n         * @param e Missing Method Parameter Documentation\n         */\n",
    "170106": "        /**\n         * Missing Method Documentation\n         *\n         * @param e Missing Method Parameter Documentation\n         */\n",
    "170108": "    /**\n     * Gets the vertical gap between rows.\n     *\n     * @return the vertical gap in pixels\n     */\n",
    "170128": "    /**\n     * Adds the specified component with the specified name to the layout.\n     *\n     * @param name indicates entry's position and anchor\n     * @param component component to add\n     */\n",
    "170130": "    /**\n     * Get the cumulated coolness score of some flags\n     * @param flags TreeSet with FlagObjects\n     * @return cumulated coolness score of those flags\n     */\n",
    "170163": "    /**\n     * Deletes a column in this layout.  All components to the right of the deletion point are\n     * moved left one column.  The container will need to be laid out after this method returns.\n     * See <code>setColumn</code>.\n     *\n     * @param i zero-based index of column to delete\n     *\n     * @see #setColumn\n     * @see #deleteColumn\n     */\n",
    "170171": "    /**\n     * Deletes a row in this layout.  All components below the deletion point are moved up one row.\n     * The container will need to be laid out after this method returns.  See <code>setRow</code>.\n     * There must be at least two rows in order to delete a row.\n     *\n     * @param i zero-based index of row to delete\n     *\n     * @see #setRow\n     * @see #deleteRow\n     */\n",
    "170179": "    /**\n     * Inserts a column in this layout.  All components to the right of the insertion point are\n     * moved right one column.  The container will need to be laid out after this method returns.\n     * See <code>setColumn</code>.\n     *\n     * @param i zero-based index at which to insert the column\n     * @param size size of the column to be inserted\n     *\n     * @see #setColumn\n     * @see #deleteColumn\n     */\n",
    "170197": "    /**\n     * Inserts a row in this layout.  All components below the insertion point are moved down one\n     * row.  The container will need to be laid out after this method returns.  See\n     * <code>setRow</code>.\n     *\n     * @param i zero-based index at which to insert the row\n     * @param size size of the row to be inserted\n     *\n     * @see #setRow\n     * @see #deleteRow\n     */\n",
    "170205": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param i TODO Missing Method Parameter Documentation\n     */\n",
    "170206": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170207": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170210": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170213": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170214": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170216": "    /**\n     * TODO Missing Method Documentation\n     */\n",
    "170218": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param string TODO Missing Method Parameter Documentation\n     */\n",
    "170221": "    /**\n     * Invalidates the layout, indicating that if the layout manager has cached information it\n     * should be discarded.\n     *\n     * @param target -\n     */\n",
    "170222": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170223": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170224": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param string TODO Missing Method Parameter Documentation\n     */\n",
    "170225": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170226": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170227": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170228": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param string TODO Missing Method Parameter Documentation\n     */\n",
    "170230": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170232": "    /**\n     * toString methode: creates a String representation of the object\n     *\n     * @return the String representation\n     */\n",
    "170234": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170235": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param e TODO Missing Method Parameter Documentation\n     */\n",
    "170237": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param arg0 TODO Missing Method Parameter Documentation\n     */\n",
    "170238": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param arg0 TODO Missing Method Parameter Documentation\n     */\n",
    "170239": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param arg0 TODO Missing Method Parameter Documentation\n     */\n",
    "170240": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param isSeason TODO Missing Constructuor Parameter Documentation\n     */\n",
    "170255": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param panel TODO Missing Method Parameter Documentation\n     * @param mlp TODO Missing Method Parameter Documentation\n     */\n",
    "170258": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param seasonCombo TODO Missing Method Parameter Documentation\n     */\n",
    "170263": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param i TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170281": "    /**\n     * Determines the minimum size of the container argument using this layout. The minimum size is\n     * the smallest size that, if used for the container's size, will ensure that all components\n     * are at least as large as their minimum size.  This method cannot guarantee that all\n     * components will be their minimum size.  For example, if component A and component B are\n     * each allocate half of the container's width and component A wants to be 10 pixels wide\n     * while component B wants to be 100 pixels wide, they cannot both be accommodated.  Since in\n     * general components rather be larger than their minimum size instead of smaller, component\n     * B's request will be fulfilled. The minimum size of the container would be 200 pixels.\n     *\n     * @param container container being served by this layout manager\n     *\n     * @return a dimension indicating the container's minimum size\n     */\n",
    "170300": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170301": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170302": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170303": "    /**\n     * TODO Missing Method Documentation\n     */\n",
    "170307": "    /**\n     * Determines the preferred size of the container argument using this layout. The preferred\n     * size is the smallest size that, if used for the container's size, will ensure that all\n     * components are at least as large as their preferred size.  This method cannot guarantee\n     * that all components will be their preferred size.  For example, if component A and\n     * component B are each allocate half of the container's width and component A wants to be 10\n     * pixels wide while component B wants to be 100 pixels wide, they cannot both be\n     * accommodated.  Since in general components rather be larger than their preferred size\n     * instead of smaller, component B's request will be fulfilled. The preferred size of the\n     * container would be 200 pixels.\n     *\n     * @param container container being served by this layout manager\n     *\n     * @return a dimension indicating the container's preferred size\n     */\n",
    "170322": "    /**\n     * Removes the specified component from the layout.\n     *\n     * @param component component being removed\n     */\n",
    "170323": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170324": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param AL TODO Missing Method Parameter Documentation\n     */\n",
    "170325": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param IL TODO Missing Method Parameter Documentation\n     */\n",
    "170327": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170328": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param AL TODO Missing Method Parameter Documentation\n     */\n",
    "170343": "\t/**\n\t * TODO Missing Method Documentation\n\t */\n",
    "170344": "    /**\n     * Converts this TableLayout to a string.\n     *\n     * @return a string representing the columns and row sizes in the form \"{{col0, col1, col2,\n     *         ..., colN}, {row0, row1, row2, ..., rowM}}\"\n     */\n",
    "170347": "    /**\n     * TODO Missing Method Documentation\n     */\n",
    "170349": "    /**\n     * TODO Missing Method Documentation\n     */\n",
    "170350": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param event TODO Missing Method Parameter Documentation\n     */\n",
    "170356": "    /**\n     * TODO Missing Method Documentation\n     */\n",
    "170357": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170359": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param s TODO Missing Method Parameter Documentation\n     * @param l TODO Missing Method Parameter Documentation\n     * @param lid TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170363": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170374": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170377": "    /**\n     * Set the new value of the skill\n     *\n     * @param newValue\n     */\n",
    "170378": "    /**\n     * Set the new value of the skill\n     *\n     * @return value\n     */\n",
    "170379": "    /**\n     * toString methode: creates a String representation of the object\n     *\n     * @return the String representation\n     */\n",
    "170381": "    /**\n     * Get the skillup\n     *\n     * @return Skillup\n     */\n",
    "170383": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170384": "    /**\n     * Set the amount of skillups\n     *\n     * @param amount Amount of skillups\n     */\n",
    "170387": "    /**\n     * Get the amount of skillups\n     *\n     * @return Amount of skillups\n     */\n",
    "170389": "    /**\n     * Get the avarage form\n     *\n     * @return Average form\n     */\n",
    "170391": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170392": "    /**\n     * Set the average TSI\n     *\n     * @param avgTSI Average TSI\n     */\n",
    "170393": "    /**\n     * Get the avarage TSI\n     *\n     * @return Average TSI\n     */\n",
    "170395": "    /**\n     * Get the total decrease in form\n     *\n     * @return Form decrease\n     */\n",
    "170396": "    /**\n     * Get the total increase in form\n     *\n     * @return Form increase\n     */\n",
    "170397": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170399": "    /**\n     * Get the HRF id after the training update\n     *\n     * @return id\n     */\n",
    "170400": "    /**\n     * Get the HRF id before the training update\n     *\n     * @return id\n     */\n",
    "170401": "    /**\n     * Get the training HT season\n     *\n     * @return Training HT season\n     */\n",
    "170403": "    /**\n     * Get the training HT week\n     *\n     * @return Training HT week\n     */\n",
    "170404": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170405": "    /**\n     * Get the total decrease in TSI\n     *\n     * @return TSI decrease\n     */\n",
    "170407": "    /**\n     * Get the total increase in TSI\n     *\n     * @return TSI increase\n     */\n",
    "170409": "    /**\n     * Set the total TSI\n     *\n     * @param totalTSI Total TSI\n     */\n",
    "170411": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170412": "    /**\n     * Get the total TSI\n     *\n     * @return Total TSI\n     */\n",
    "170413": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param trainingType TODO Missing Method Parameter Documentation\n     */\n",
    "170414": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170417": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170420": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170424": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170425": "    /**\n     * Set the StaminaTrainingPart\n     *\n     * @param staminaTrainingPart\n     */\n",
    "170426": "    /**\n     * Returns the StaminaTrainingPart\n     *\n     * @return staminaTrainingPart\n     */\n",
    "170428": "    /**\n     * Set the training intensity\n     *\n     * @param intensity\n     */\n",
    "170429": "    /**\n     * Returns the training intensity\n     *\n     * @return intensity\n     */\n",
    "170430": "    /**\n     * Set Hattrick season of the training\n     *\n     * @param season\n     */\n",
    "170431": "    /**\n     * Assigns absolute sizes.\n     *\n     * @param z indicates row or column\n     * @param availableSize amount of space available in the container\n     *\n     * @return the amount of space available after absolute crs have been assigned sizes\n     */\n",
    "170433": "    /**\n     * Set Training type\n     *\n     * @param type\n     */\n",
    "170434": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170435": "    /**\n     * Get Training type\n     *\n     * @return type\n     */\n",
    "170437": "    /**\n     * Set Hattrick week of the training\n     *\n     * @param week\n     */\n",
    "170439": "    /**\n     * toString methode: creates a String representation of the object\n     *\n     * @return the String representation\n     */\n",
    "170441": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170444": "    /**\n     * Returns the list of future trainings\n     *\n     * @return future trainings list\n     */\n",
    "170445": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170447": "    /**\n     * Returns the list of past trainings\n     *\n     * @return past trainings list\n     */\n",
    "170448": "    /**\n     * update the panel with the new value\n     */\n",
    "170449": "    /**\n     * Populate the table is called everytime a refresh command is issued\n     */\n",
    "170450": "    /**\n     * Initialize the GUI\n     */\n",
    "170452": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170455": "    /**\n     * Get maximum value of the skill.\n     *\n     * @param index\n     *\n     * @return float Max value\n     */\n",
    "170456": "    /**\n     * Populate the Future training table with the future training\n     */\n",
    "170458": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param spieler TODO Missing Method Parameter Documentation\n     * @param skillIndex TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170462": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170472": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170478": "    /**\n     * Method that returns if a cell is editable or not\n     *\n     * @param row\n     * @param column\n     *\n     * @return\n     */\n",
    "170481": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170482": "    /**\n     * Return number of columns\n     *\n     * @return\n     */\n",
    "170484": "    /**\n     * Refill the table with the new training based on the last changes\n     */\n",
    "170485": "    /**\n     * Returns row number\n     *\n     * @return\n     */\n",
    "170486": "    /**\n     * Method that returns the Training vector\n     *\n     * @return actual training vector\n     */\n",
    "170487": "    /**\n     * Get the training length for a player in a specific skill\n     * \n     * @param player player to be considered\n     * @param skillIndex skill trained\n     * \n     * @return predicted training length\n     */\n",
    "170488": "    /**\n     * Returns the cell value\n     *\n     * @param row\n     * @param column\n     *\n     * @return Object representing the cell value\n     */\n",
    "170491": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170492": "    /**\n     * Method that returns the offset in Training point\n     *\n     * @param player player to be considered\n     * @param skill skill trained\n     *\n     * @return training point offset, if any\n     */\n",
    "170496": "    /**\n     * Create a VerticalIndicator object\n     *\n     * @param spieler object from which create the indicator\n     * @param skillIndex points to skillup\n     *\n     * @return the VerticalIndicator object\n     */\n",
    "170497": "    /**\n     * Return string toolTip for the skillup\n     *\n     * @param e MouseEvent of being over the cell\n     *\n     * @return String toolTip for active skillup\n     */\n",
    "170500": "        /**\n         * TODO Missing Method Documentation\n         *\n         * @param x TODO Missing Method Parameter Documentation\n         * @param y TODO Missing Method Parameter Documentation\n         * @param rgb TODO Missing Method Parameter Documentation\n         *\n         * @return TODO Missing Return Method Documentation\n         */\n",
    "170501": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170504": "    /**\n     * Get Training Percentage\n     *\n     * @return\n     */\n",
    "170505": "    /**\n     * Update the bar, with the new levels\n     *\n     * @param lvl1\n     * @param lvl2\n     */\n",
    "170506": "    /**\n     * Get Text describing training situation\n     *\n     * @return\n     */\n",
    "170507": "    /**\n     * Return toolTip text\n     *\n     * @return\n     */\n",
    "170510": "    /**\n     * Paint each single bar that compose the main object\n     *\n     * @param g2d graphic\n     * @param level length of the bar\n     * @param cm Color of the bar\n     */\n",
    "170512": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170513": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170526": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170527": "    /**\n     * Assigns relative sizes.\n     *\n     * @param z indicates row or column\n     * @param availableSize amount of space available in the container\n     *\n     * @return the amount of space available after relative crs have been assigned sizes\n     */\n",
    "170533": "    /**\n     * update the panel with the new value\n     */\n",
    "170537": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170542": "    /**\n     * Reload the data and redraw the panel\n     */\n",
    "170544": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170545": "    /**\n     * Returns the Locked LeftTable\n     *\n     * @return Jtable\n     */\n",
    "170547": "    /**\n     * Returns the Scrollable RightTable\n     *\n     * @return Jtable\n     */\n",
    "170548": "    /**\n     * Add a row to the table\n     *\n     * @param skillup The skillup object to be added\n     */\n",
    "170553": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170556": "    /**\n     * Get map of skillups for a list of players. The map will contain a list of skillups for each\n     * skill, represented as an <code>Integer</code> as key\n     *\n     * @param players List of players to analyze\n     *\n     * @return Map of skillups\n     */\n",
    "170560": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170562": "    /**\n     * Returns the number of Assistant Trainer\n     *\n     * @return\n     */\n",
    "170564": "    /**\n     * Returns the number of keeper Trainer\n     *\n     * @return\n     */\n",
    "170565": "    /**\n     * Returns the ability of your trainer\n     *\n     * @return\n     */\n",
    "170567": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170568": "    /**\n     * Populate the staff with HO actual value, called after each Ho refresh command!\n     */\n",
    "170569": "    /**\n     * Returns the list of all calculated Skillups for the active player.\n     *\n     * @return list of all skillups\n     */\n",
    "170570": "    /**\n     * Populate the Assistant Trainer combobox\n     */\n",
    "170572": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170574": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170577": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170578": "    /**\n     * Populate the Keeper Trainer combobox\n     */\n",
    "170579": "    /**\n     * Returns the Plugin name\n     *\n     * @return plugin name\n     */\n",
    "170580": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param value TODO Missing Method Parameter Documentation\n     */\n",
    "170581": "    /**\n     * When called by HO reload everything!\n     */\n",
    "170582": "    /**\n     * Populate the Trainer Level combobox\n     */\n",
    "170583": "    /**\n     * Returns the plugin full name, with version\n     *\n     * @return plugin fullname\n     */\n",
    "170585": "    /**\n     * Returns the plugin id\n     *\n     * @return plugin id\n     */\n",
    "170586": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170588": "    /**\n     * Returns the plugin version\n     *\n     * @return the plugin version\n     */\n",
    "170592": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param filterMode TODO Missing Method Parameter Documentation\n     */\n",
    "170593": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170595": "        /**\n         * TODO Missing Method Documentation\n         *\n         * @param e TODO Missing Method Parameter Documentation\n         */\n",
    "170597": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param filterMode TODO Missing Method Parameter Documentation\n     */\n",
    "170598": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param c TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170600": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170601": "    /**\n     * Calculates the offset of each cr.\n     *\n     * @param z indicates row or column\n     * @param inset -\n     */\n",
    "170603": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param c TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170606": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param c TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170609": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param playerId TODO Missing Method Parameter Documentation\n     */\n",
    "170612": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param row TODO Missing Method Parameter Documentation\n     * @param column TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170613": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param e TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170617": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param filterMode TODO Missing Method Parameter Documentation\n     */\n",
    "170618": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param column TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170621": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170624": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param testo TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170625": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param type TODO Missing Method Parameter Documentation\n     * @param comparator TODO Missing Method Parameter Documentation\n     */\n",
    "170627": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param valore TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170630": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param filterMode TODO Missing Method Parameter Documentation\n     */\n",
    "170632": "    /**\n     * TODO Missing Method Documentation\n     */\n",
    "170633": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170636": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param rowFind TODO Missing Method Parameter Documentation\n     * @param colonna TODO Missing Method Parameter Documentation\n     */\n",
    "170637": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param playerId TODO Missing Method Parameter Documentation\n     */\n",
    "170639": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170640": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170641": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param column TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170643": "    /**\n     * Refresh the data in the plugin\n     *\n     * @return List of transfers shown in the plugin\n     */\n",
    "170647": "    /**\n     * Method that calculates the Transfer Type for players still on roster\n     *\n     * @return transfer type code\n     */\n",
    "170648": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170649": "    /**\n     * Method that calculates the Transfer Type for old players\n     *\n     * @return transfer type code\n     */\n",
    "170651": "    /**\n     * Upload to EPV Server the needed Transfer operation\n     * NOT USED ANY LONGER\n     *\n     * @param transfers list of transfers to check for upload\n     */\n",
    "170653": "    /**\n     * Method that calculates the Transfer Type for players sold but never bought\n     *\n     * @return transfer type code\n     */\n",
    "170655": "    /**\n     * Set the 'uploaded' state for all transfers.\n     *\n     * @param transfers list of transfers to check for upload\n     */\n",
    "170656": "    /**\n     * Gets the weeks the player was/is on roster\n     *\n     * @return Amount of weeks on roster\n     */\n",
    "170661": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170662": "    /**\n     * Refreshes the table with player transfer information.\n     *\n     * @param values List of player transfers to display.\n     */\n",
    "170664": "    /**\n     * Initializes the state of this instance.\n     */\n",
    "170667": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param column TODO Missing Method Parameter Documentation\n     * @param status TODO Missing Method Parameter Documentation\n     */\n",
    "170679": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param column TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170705": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param tableHeader TODO Missing Method Parameter Documentation\n     */\n",
    "170719": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170737": "        /**\n         * Copies this Entry.\n         *\n         * @return -\n         *\n         * @throws CloneNotSupportedException -\n         */\n",
    "170739": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param tableModel TODO Missing Method Parameter Documentation\n     */\n",
    "170751": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170758": "    /**\n     * creates all RegisteredMethods for a JavaClass. The methods can \n     * be met via getMethods(). Declared abstract and native methods are ignored\n     * @param jclass\n     */\n",
    "170762": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param aValue TODO Missing Method Parameter Documentation\n     * @param row TODO Missing Method Parameter Documentation\n     * @param column TODO Missing Method Parameter Documentation\n     */\n",
    "170770": "    /**\n     * This method is a callback from the inserted operations to get an\n     * appropriate registeredMethod object for further callbacks during this \n     * method.\n     * @param id class and method declaration separated by colons, like\n     * \"net.sf.coverlipse.CentralRegistry:public RegisteredMethod getRegisteredMethod(String id)\".\n     * this is the format RegisteredMethod.getHashKey() returns.\n     * @return returns null if no matching Method is registered\n     */\n",
    "170778": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param row TODO Missing Method Parameter Documentation\n     * @param column TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170782": "        /**\n         * Gets the string representation of this Entry.\n         *\n         * @return a string in the form \"(col1, row1, col2, row2, vAlign, hAlign) component\"\n         */\n",
    "170788": "    /**\n     * returns whether the BasicBlocks have the same state, that is,\n     * are in the same method and refer to the same bytecode \n     */\n",
    "170789": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param viewIndex TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170795": "    /** \n     * weaves the callbacks at start and end of all BasicBlocks\n     * into all methods of the given ClassGen object.\n     */\n",
    "170796": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param column TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170800": "    /**\n     * toString method for a path. Blocks are in parenthesises, first the\n     * start, then the end line. Exclamationmarks are set in front of the \n     * line numbers to denote whether a line mark was not executed.\n     */\n",
    "170802": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param column TODO Missing Method Parameter Documentation\n     * @param size TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170809": "    /**\n     * TODO Missing Method Documentation\n     *\n     * @param column TODO Missing Method Parameter Documentation\n     *\n     * @return TODO Missing Return Method Documentation\n     */\n",
    "170815": "    /**\n     * TODO Missing Method Documentation\n     */\n",
    "170820": "    /**\n     * returns an InstructionHandle to the next BlockDelimiter instruction\n     * by calling getNext() including the instruction the given handle points to. \n     */\n",
    "170821": "    /**\n     * TODO Missing Method Documentation\n     */\n",
    "170826": "    /**\n     * TODO Missing Method Documentation\n     */\n",
    "170832": "        /**\n         * TODO Missing Method Documentation\n         *\n         * @return TODO Missing Return Method Documentation\n         */\n",
    "170833": "    /**\n     * print the bytecode of the parameter jclass to <code>System.out</code> \n     * in human readable form.<br>\n     * This method walks through all methods of the given class and prints out\n     * the instruction number, the corresponding source code line, the byte code,\n     * and, if it can be found, the source code. \n     */\n",
    "170841": "        /**\n         * TODO Missing Method Documentation\n         *\n         * @return TODO Missing Return Method Documentation\n         */\n",
    "170850": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170854": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170855": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170860": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170863": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170868": "        /**\n         * TODO Missing Method Documentation\n         *\n         * @param o TODO Missing Method Parameter Documentation\n         *\n         * @return TODO Missing Return Method Documentation\n         */\n",
    "170870": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170879": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170884": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170885": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170893": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170897": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170901": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170906": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170908": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170909": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170919": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170921": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170923": "  /**\n   * Use copy() if you want to have a deep copy(), i.e., with all references\n   * copied correctly.\n   *\n   * @return shallow copy of this attribute\n   */\n",
    "170932": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170934": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170935": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170942": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170950": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170957": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170958": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170962": "  /**\n   * Dump Java class to output stream in binary format.\n   *\n   * @param file Output stream\n   * @exception IOException\n   */\n",
    "170964": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of Fields,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170966": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170979": "  /**\n   * Get constant from constant pool.\n   *\n   * @param  index Index in constant pool\n   * @return Constant value\n   * @see    Constant\n   */\n",
    "170987": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170988": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170990": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "170995": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "171008": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "171009": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "171012": "  /**\n   * Called by objects that are traversing the nodes of the tree implicitely\n   * defined by the contents of a Java class. I.e., the hierarchy of methods,\n   * fields, attributes, etc. spawns a tree of objects.\n   *\n   * @param v Visitor object\n   */\n",
    "171016": "    /** Extends the error message with a string before (\"pre\") and after (\"post\") the\n        'old' error message. All of these three strings are allowed to be null, and null\n        is always replaced by the empty string (\"\"). In particular, after invoking this\n        method, the error message of this object can no longer be null.\n    */\n",
    "171019": "    /**\n     * Returns the error message string of this VerifierConstraintViolatedException object.\n     * @return the error message string of this VerifierConstraintViolatedException.\n     */\n",
    "171032": "    /** Returns the LocalVariableInfo for the given slot. */\n",
    "171039": "    /**\n     * Returns the String representation.\n     */\n",
    "171041": "    /**\n     * Returns the String representation of the Node object obj;\n     * this is obj.toString() if it does not throw any RuntimeException,\n     * or else it is a string derived only from obj's class name.\n     */\n",
    "171046": "    /**\n     * Returns a LocalVariablesInfo object containing information\n     * about the usage of the local variables in the Code attribute\n     * of the said method or <B>null</B> if the class file this\n     * Pass2Verifier operates on could not be pass-2-verified correctly.\n     * The method number method_nr is the method you get using\n     * <B>Repository.lookupClass(myOwner.getClassname()).getMethods()[method_nr];</B>.\n     * You should not add own information. Leave that to JustIce.\n     */\n",
    "171074": "  /**\n   * Set File name of class, aka SourceFile attribute value\n   */\n",
    "171099": "    /**\n     * Ensures that the constant pool entries satisfy the static constraints\n     * as described in The Java Virtual Machine Specification, 2nd Edition.\n     *\n     * @throws ClassConstraintException otherwise.\n     */\n",
    "171108": "  /**\n   * Set absolute path to file this class was read from.\n   */\n",
    "171124": "    /**\n     * Returns the type of the local variable that uses this local\n     * variable slot at the given bytecode offset.\n     * Care for legal bytecode offsets yourself, otherwise the return value\n     * might be wrong.\n     * May return 'null' if nothing is known about the type of this local\n     * variable slot at the given bytecode offset.\n     */\n",
    "171125": "    /**\n     * Returns the name of the local variable that uses this local\n     * variable slot at the given bytecode offset.\n     * Care for legal bytecode offsets yourself, otherwise the return value\n     * might be wrong.\n     * May return 'null' if nothing is known about the type of this local\n     * variable slot at the given bytecode offset.\n     */\n",
    "171126": "    /**\n     * Adds some information about this local variable (slot).\n     * @throws LocalVariableInfoInconsistentException if the new information conflicts\n     *         with already gathered information.\n     */\n",
    "171127": "    /**\n     * Adds information about name and type for a given offset.\n     * @throws LocalVariableInfoInconsistentException if the new information conflicts\n     *         with already gathered information.\n     */\n",
    "171133": "  /**\n   * Sets the ClassRepository which loaded the JavaClass.\n   * Should be called immediately after parsing is done.\n   */\n",
    "171143": "    /** Returns the method number as supplied when instantiating. */\n",
    "171152": "        /**\n         * Utility method to return the max_locals value of the method verified\n         * by the surrounding Pass3aVerifier instance.\n         */\n",
    "171158": "  /** Overridden to stop the application on a closing window. */\n",
    "171160": "        /**\n         * A utility method to always raise an exeption.\n         */\n",
    "171162": "    /**\n     * This method runs a verification pass conforming to the\n     * Java Virtual Machine Specification, 2nd edition, on a\n     * class file.\n     * PassVerifier instances perform caching;\n     * i.e. if the verify() method once determined a VerificationResult,\n     * then this result may be returned after every invocation of this\n     * method instead of running the verification pass anew; likewise with\n     * the result of getMessages().\n     *\n     * @see #getMessages()\n     * @see #addMessage(String)\n     */\n",
    "171163": "    /**\n     * This method adds a (warning) message to the message pool of this\n     * PassVerifier. This method is normally only internally used by\n     * BCEL's class file verifier \"JustIce\" and should not be used from\n     * the outside. \n     *\n     * @see #getMessages()\n     */\n",
    "171172": "    /**\n     * Returns a String representation of the Frame instance.\n     */\n",
    "171173": "        /**\n         * A utility method to raise an exception if the index is not\n         * a valid constant pool index.\n         */\n",
    "171174": "    /**\n     * Returns a deep copy of this object; i.e. the clone\n     * operates on a new local variable array.\n     * However, the Type objects in the array are shared.\n     */\n",
    "171175": "    /**\n     * Returns the type of the local variable slot i.\n     */\n",
    "171176": "    /**\n     * Returns a (correctly typed) clone of this object.\n     * This is equivalent to ((LocalVariables) this.clone()).\n     */\n",
    "171177": "    /**\n     * Returns the number of local variable slots this\n     * LocalVariables instance has.\n     */\n",
    "171178": "    /**\n     * Sets a new Type for the given local variable slot.\n     */\n",
    "171179": "    /**\n     * The OperandStack we're working on.\n     *\n     * @see #setFrame(Frame f)\n     */\n",
    "171182": "    /**\n     * Merges two local variables sets as described in the Java Virtual Machine Specification,\n     * Second Edition, section 4.9.2, page 146.\n     */\n",
    "171184": "        /**\n         * Assures the generic preconditions of a LoadClass instance.\n         * The referenced class is loaded and pass2-verified.\n         */\n",
    "171185": "    /**\n     * Returns a String representation of this object.\n     */\n",
    "171186": "    /**\n     * Replaces all occurences of u in this local variables set\n     * with an \"initialized\" ObjectType.\n     */\n",
    "171187": "    /**\n     * The LocalVariables we're working on.\n     *\n     * @see #setFrame(Frame f)\n     */\n",
    "171194": "    /**\n     * Sets the ConstantPoolGen needed for symbolic execution.\n     */\n",
    "171196": "    /**\n     * The only method granting access to the single instance of\n     * the ExecutionVisitor class. Before actively using this\n     * instance, <B>SET THE ConstantPoolGen FIRST</B>.\n     * @see #setConstantPoolGen(ConstantPoolGen)\n     */\n",
    "171198": "    /**\n     * This returns the single instance of the InstConstraintVisitor class.\n     * To operate correctly, other values must have been set before actually\n     * using the instance.\n     * Use this method for performance reasons.\n     *\n     * @see #setConstantPoolGen(ConstantPoolGen cpg)\n     * @see #setMethodGen(MethodGen mg)\n     */\n",
    "171200": "    ///** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171201": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171204": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171206": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171208": "        /** Checks if the constraints of operands of the said instruction(s) are satisfied. */\n",
    "171210": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171211": "    /**\n     * Sets the MethodGen instance needed for constraint\n     * checking prior to execution.\n     */\n",
    "171212": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171213": "        /** Checks if the constraints of operands of the said instruction(s) are satisfied. */\n",
    "171215": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171216": "    /**\n     * Assures index is of type INT.\n     * @throws de.uka.ipd.coverage.org.apache.bcel.verifier.exc.StructuralCodeConstraintException if the above constraint is not satisfied.\n     */\n",
    "171217": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171218": "        /** Checks if the constraints of operands of the said instruction(s) are satisfied. */\n",
    "171220": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171221": "    /**\n     * Assures the ReferenceType r is initialized (or Type.NULL).\n     * Formally, this means (!(r instanceof UninitializedObjectType)), because\n     * there are no uninitialized array types.\n     * @throws de.uka.ipd.coverage.org.apache.bcel.verifier.exc.StructuralCodeConstraintException if the above constraint is not satisfied.\n     */\n",
    "171223": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171225": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171226": "    /** Assures value is of type INT. */\n",
    "171227": "        /** Checks if the constraints of operands of the said instruction(s) are satisfied. */\n",
    "171228": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171230": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171231": "    /**\n     * Assures arrayref is of ArrayType or NULL;\n     * returns true if and only if arrayref is non-NULL.\n     * @throws de.uka.ipd.coverage.org.apache.bcel.verifier.exc.StructuralCodeConstraintException if the above constraint is violated.\n      */\n",
    "171232": "        /** Checks if the constraints of operands of the said instruction(s) are satisfied. */\n",
    "171233": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171235": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171236": "    /**\n     * Ensures the general preconditions of an instruction that accesses the stack.\n     * This method is here because BCEL has no such superinterface for the stack\n     * accessing instructions; and there are funny unexpected exceptions in the\n     * semantices of the superinterfaces and superclasses provided.\n     * E.g. SWAP is a StackConsumer, but DUP_X1 is not a StackProducer.\n     * Therefore, this method is called by all StackProducer, StackConsumer,\n     * and StackInstruction instances via their visitXXX() method.\n     * Unfortunately, as the superclasses and superinterfaces overlap, some instructions\n     * cause this method to be called two or three times. [TODO: Fix this.]\n     *\n     * @see #visitStackConsumer(StackConsumer o)\n     * @see #visitStackProducer(StackProducer o)\n     * @see #visitStackInstruction(StackInstruction o)\n     */\n",
    "171237": "        /** Checks if the constraints of operands of the said instruction(s) are satisfied. */\n",
    "171239": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171240": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171241": "    /**\n     * Assures the generic preconditions of a LoadClass instance.\n     * The referenced class is loaded and pass2-verified.\n     */\n",
    "171242": "        /** Checks if the constraints of operands of the said instruction(s) are satisfied. */\n",
    "171244": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171245": "    /**\n     * Ensures the general preconditions of a StackConsumer instance.\n     */\n",
    "171246": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171247": "        /** Checks if the constraints of operands of the said instruction(s) are satisfied. */\n",
    "171249": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171250": "        /** Checks if the constraints of operands of the said instruction(s) are satisfied. */\n",
    "171251": "    /**\n     * Ensures the general preconditions of a StackProducer instance.\n     */\n",
    "171252": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171254": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171255": "        /** Checks if the constraints of operands of the said instruction(s) are satisfied. */\n",
    "171256": "    /**\n     * Ensures the general preconditions of a CPInstruction instance.\n     */\n",
    "171257": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171260": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171261": "        /** Checks if the constraints of operands of the said instruction(s) are satisfied. */\n",
    "171263": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171265": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171266": "        /** Checks if the constraints of operands of the said instruction(s) are satisfied. */\n",
    "171267": "    /**\n     * Ensures the general preconditions of an InvokeInstruction instance.\n     */\n",
    "171268": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171270": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171271": "        /** Checks if the constraints of operands of the said instruction(s) are satisfied. */\n",
    "171272": "    /**\n     * Ensures the general preconditions of a StackInstruction instance.\n     */\n",
    "171273": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171275": "        /** Checks if the constraints of operands of the said instruction(s) are satisfied. */\n",
    "171276": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171277": "    /**\n     * Assures the generic preconditions of a LocalVariableInstruction instance.\n     * That is, the index of the local variable must be valid.\n     */\n",
    "171278": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171280": "        /** Checks if the constraints of operands of the said instruction(s) are satisfied. */\n",
    "171281": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171283": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171285": "        /** Checks if the constraints of operands of the said instruction(s) are satisfied. */\n",
    "171286": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171288": "        /** Checks if the constraints of operands of the said instruction(s) are satisfied. */\n",
    "171289": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171291": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171293": "        /** Checks if the constraints of operands of the said instruction(s) are satisfied. */\n",
    "171295": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171296": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171297": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171299": "    /**\n     * Ensures that the ConstantCP-subclassed entries of the constant\n     * pool are valid. According to \"Yellin: Low Level Security in Java\",\n     * this method does not verify the existence of referenced entities\n     * (such as classes) but only the formal correctness (such as well-formed\n     * signatures).\n   * The visitXXX() methods throw ClassConstraintException instances otherwise.\n     * <B>Precondition: index-style cross referencing in the constant\n     * pool must be valid. Simply invoke constant_pool_entries_satisfy_static_constraints()\n     * before.</B>\n     *\n     * @throws ClassConstraintException otherwise.\n     * @see #constant_pool_entries_satisfy_static_constraints()\n     */\n",
    "171303": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171306": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171307": "        /** Checks if the constraints of operands of the said instruction(s) are satisfied. */\n",
    "171308": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171309": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171311": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171313": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171314": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171317": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171318": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171319": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171320": "        /**\n         * Returns if the JavaClass this InnerClassDetector is working on\n         * has an Inner Class reference in its constant pool.\n         */\n",
    "171323": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171324": "        /** This method casually visits ConstantClass references. */\n",
    "171326": "    /**\n     * Returns the type of the exception that's handled. <B>'null' means 'ANY'.</B>\n     */\n",
    "171327": "    /**\n     * Returns the InstructionHandle where the handler starts off.\n     */\n",
    "171329": "    /**\n     * Returns true on equality of this and o.\n     * Equality means the ObjectType instances of \"initialized\"\n     * equal one another in this and the o instance.\n     *\n     */\n",
    "171331": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171332": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171334": "        /**\n         * Returns a String representation of this object, merely\n         * for debugging purposes.\n         * (Internal) Warning: Verbosity on a problematic subroutine may cause\n         * stack overflow errors due to recursive subSubs() calls.\n         * Don't use this, then.\n         */\n",
    "171337": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171338": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171340": "        /**\n         * A recursive helper method for getRecursivelyAccessedLocalsIndices().\n         * @see #getRecursivelyAccessedLocalsIndices()\n         */\n",
    "171342": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171343": "    /**\n     * Returns the Subroutine object associated with the given\n     * leader (that is, the first instruction of the subroutine).\n     * You must not use this to get the top-level instructions\n     * modeled as a Subroutine object.\n     *\n     * @see #getTopLevel()\n     */\n",
    "171344": "        /**\n         * A utility method like equals(Object) for arrays.\n         * The equality of the elements is based on their equals(Object)\n         * method instead of their object identity.\n         */ \n",
    "171346": "    /**\n     * Returns the subroutine object associated with the\n     * given instruction. This is a costly operation, you\n     * should consider using getSubroutine(InstructionHandle).\n     * Returns 'null' if the given InstructionHandle lies\n     * in so-called 'dead code', i.e. code that can never\n     * be executed.\n     *\n     * @see #getSubroutine(InstructionHandle)\n     * @see #getTopLevel()\n     */\n",
    "171347": "    /**\n     * Returns a deep copy of this object; that means, the clone operates\n     * on a new stack. However, the Type objects on the stack are\n     * shared.\n     */\n",
    "171348": "    /**\n     * Clears the stack.\n     */\n",
    "171349": "    /**\n     * Returns true if and only if this OperandStack\n     * equals another, meaning equal lengths and equal\n     * objects on the stacks.\n     */\n",
    "171350": "    /**\n     * Returns a (typed!) clone of this.\n     *\n     * @see #clone()\n     */\n",
    "171351": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171352": "    /**\n     * For easy handling, the piece of code that is <B>not</B> a\n     * subroutine, the top-level, is also modeled as a Subroutine\n     * object.\n     * It is a special Subroutine object where <B>you must not invoke\n     * getEnteringJsrInstructions() or getLeavingRET()</B>.\n     *\n     * @see Subroutine#getEnteringJsrInstructions()\n     * @see Subroutine#getLeavingRET()\n     */\n",
    "171353": "    /**\n     * Returns true IFF this OperandStack is empty.\n   */\n",
    "171354": "    /**\n     * Returns the number of stack slots this stack can hold.\n     */\n",
    "171355": "    /**\n     * Returns the element on top of the stack. The element is not popped off the stack!\n     */\n",
    "171356": "    /**\n   * Returns the element that's i elements below the top element; that means,\n   * iff i==0 the top element is returned. The element is not popped off the stack!\n   */\n",
    "171357": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171358": "    /**\n     * Returns the element on top of the stack. The element is popped off the stack.\n     */\n",
    "171359": "    /**\n     * Returns a String representation of this object; merely for debugging puposes.\n     */\n",
    "171360": "    /**\n     * Pops i elements off the stack. ALWAYS RETURNS \"null\"!!!\n     */\n",
    "171361": "    /**\n     * Pushes a Type object onto the stack.\n     */\n",
    "171363": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171364": "    /**\n     * Returns the number of stack slots used.\n     * @see #maxStack()\n     */    \n",
    "171366": "    /**\n     * Returns a String representation of this OperandStack instance.\n     */\n",
    "171369": "    /**\n     * Replaces all occurences of u in this OperandStack instance\n     * with an \"initialized\" ObjectType.\n     */\n",
    "171371": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171376": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171382": "        /**\n         * Returns a simple String representation of this InstructionContext.\n         */\n",
    "171384": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171385": "        /**\n         * Does the actual merging (vmspec2, page 146).\n         * Returns true IFF this.inFrame was changed in course of merging with inFrame.\n         */\n",
    "171387": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171388": "    /** Returns one one the VERIFIED_OK, VERIFIED_NOTYET, VERIFIED_REJECTED constants. */\n",
    "171389": "        /**\n         * Returns the control flow execution chain. This is built\n         * while execute(Frame, ArrayList)-ing the code represented\n         * by the surrounding ControlFlowGraph.\n         */\n",
    "171391": "    /**\n     * Returns if two VerificationResult instances are equal.\n     */ \n",
    "171392": "    /**\n     * Returns a String representation of the VerificationResult.\n     */\n",
    "171394": "    /** Returns the VerificationResult for the given pass. */\n",
    "171396": "    /** Returns the VerificationResult for the given pass. */\n",
    "171397": "    /** Returns the VerificationResult for the given pass. */\n",
    "171398": "        /**\n         * Returns the InstructionContextImpl with an JSR/JSR_W\n         * that was last in the ExecutionChain, without\n         * a corresponding RET, i.e.\n         * we were called by this one.\n         * Returns null if we were called from the top level.\n         */\n",
    "171399": "    /** Returns the VerificationResult for the given pass. */\n",
    "171400": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171401": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171402": "    /**\n     * Forget everything known about the class file; that means, really\n     * start a new verification of a possibly different class file from\n     * BCEL's repository.\n     *\n     */\n",
    "171403": "    /**\n     * Returns the InstructionContext of a given instruction.\n     */\n",
    "171412": "  /**\n   * Store a new JavaClass instance into this Repository.\n   */\n",
    "171413": "  /**\n   * Remove class from repository\n   */\n",
    "171414": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171415": "  /**\n   * Find an already defined (cached) JavaClass object by name.\n   */\n",
    "171417": "  /**\n   * Try to find class source via getResourceAsStream().\n   * @see Class\n   * @return JavaClass object for given runtime class\n   */\n",
    "171418": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171421": "  /** Clear all entries from cache.\n   */\n",
    "171422": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171433": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171436": "  /**\n   * Return stream for class or resource on CLASSPATH.\n   *\n   * @param name fully qualified file name, e.g. java/lang/String\n   * @param suffix file name ends with suff, e.g. .java\n   * @return input stream for file on class path\n   */\n",
    "171438": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171444": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171453": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171463": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171469": "  /**\n   * Find an already defined JavaClass.\n   */\n",
    "171473": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171480": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171482": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171487": "  /**\n   * Dump instruction as byte code to stream out.\n   * @param out Output stream\n   */\n",
    "171490": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171494": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171499": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171501": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171503": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171505": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171506": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171507": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171508": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171518": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171519": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171521": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171523": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171525": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171526": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171527": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171529": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171530": "  /**\n   * Dump instruction as byte code to stream out.\n   * @param out Output stream\n   */\n",
    "171533": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171534": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171539": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171540": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171542": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171544": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171545": "  /**\n   * Add an interface to this class, i.e., this class has to implement it.\n   * @param name interface to implement (fully qualified class name)\n   */\n",
    "171546": "  /** Resize internal array of constants.\n   */\n",
    "171547": "  /**\n   * Remove an interface from this class.\n   * @param name interface to remove (fully qualified name)\n   */\n",
    "171548": "  /** \n   * Look for ConstantString in ConstantPool containing String `str'.\n   *\n   * @param str String to search for\n   * @return index on success, -1 otherwise\n   */\n",
    "171551": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171552": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171553": "  /** Set major version number of class file, default value is 45 (JDK 1.1)\n   * @param major major version number\n   */\n",
    "171555": "  /** Set minor version number of class file, default value is 3 (JDK 1.1)\n   * @param minor minor version number\n   */\n",
    "171557": "  /**\n   * Look for ConstantClass in ConstantPool named `str'.\n   *\n   * @param str String to search for\n   * @return index on success, -1 otherwise\n   */\n",
    "171559": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171564": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171566": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171567": "  /**\n   * Add a new Class reference to the ConstantPool for a given type.\n   *\n   * @param str Class to add\n   * @return index of entry\n   */\n",
    "171569": "  /**\n   * Add a reference to an array class (e.g. String[][]) as needed by MULTIANEWARRAY\n   * instruction, e.g. to the ConstantPool.\n   *\n   * @param type type of array class\n   * @return index of entry\n   */\n",
    "171571": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171572": "  /** \n   * Look for ConstantInteger in ConstantPool.\n   *\n   * @param n integer number to look for\n   * @return index on success, -1 otherwise\n   */\n",
    "171576": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171577": "  /** \n   * Look for ConstantFloat in ConstantPool.\n   *\n   * @param n Float number to look for\n   * @return index on success, -1 otherwise\n   */\n",
    "171580": "  /** Replace given method with new one. If the old one does not exist\n   * add the new_ method to the class anyway.\n   */\n",
    "171581": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171582": "  /** \n   * Look for ConstantUtf8 in ConstantPool.\n   *\n   * @param n Utf8 string to look for\n   * @return index on success, -1 otherwise\n   */\n",
    "171583": "  /** Replace given field with new one. If the old one does not exist\n   * add the new_ field to the class anyway.\n   */\n",
    "171586": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171588": "  /** \n   * Look for ConstantLong in ConstantPool.\n   *\n   * @param n Long number to look for\n   * @return index on success, -1 otherwise\n   */\n",
    "171591": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171593": "  /** \n   * Look for ConstantDouble in ConstantPool.\n   *\n   * @param n Double number to look for\n   * @return index on success, -1 otherwise\n   */\n",
    "171596": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171598": "  /** \n   * Look for ConstantNameAndType in ConstantPool.\n   *\n   * @param name of variable/method\n   * @param signature of variable/method\n   * @return index on success, -1 otherwise\n   */\n",
    "171601": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171602": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171603": "  /** \n   * Look for ConstantMethodref in ConstantPool.\n   *\n   * @param class_name Where to find method\n   * @param method_name Guess what\n   * @param signature return and argument types\n   * @return index on success, -1 otherwise\n   */\n",
    "171605": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171610": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171613": "  /** \n   * Look for ConstantInterfaceMethodref in ConstantPool.\n   *\n   * @param class_name Where to find method\n   * @param method_name Guess what\n   * @param signature return and argument types\n   * @return index on success, -1 otherwise\n   */\n",
    "171615": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171618": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171621": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171625": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171626": "  /** Add observer for this object.\n   */\n",
    "171627": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171628": "  /** \n   * Look for ConstantFieldref in ConstantPool.\n   *\n   * @param class_name Where to find method\n   * @param field_name Guess what\n   * @param signature return and argument types\n   * @return index on success, -1 otherwise\n   */\n",
    "171629": "  /** Remove observer for this object.\n   */\n",
    "171631": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171632": "  /** Call notify() method on all observers. This method is not called\n   * automatically whenever the state has changed, but has to be\n   * called by the user after he has finished editing the object.\n   */\n",
    "171636": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171638": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171639": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171640": "  /**\n   * Dump instruction as byte code to stream out.\n   * @param out Output stream\n   */\n",
    "171643": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171644": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171645": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171646": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171648": "  /**\n   * Dump instruction as byte code to stream out.\n   * @param out Output stream\n   */\n",
    "171650": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171651": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171654": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171659": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171662": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171663": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171666": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171667": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171670": "  /**\n   * Returns an InstructionHandle to the physical successor\n   * of this JsrInstruction. <B>For this method to work,\n   * this JsrInstruction object must not be shared between\n   * multiple InstructionHandle objects!</B>\n   * Formally, there must not be InstructionHandle objects\n   * i, j where i != j and i.getInstruction() == this ==\n   * j.getInstruction().\n   * @return an InstructionHandle to the \"next\" instruction that\n   * will be executed when RETurned from a subroutine.\n   */\n",
    "171672": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171674": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171677": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171678": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171681": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171690": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171694": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171702": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171707": "  /** Remove any initial value.\n   */\n",
    "171712": "  /**\n   * Get field object after having set up all necessary values.\n   */\n",
    "171713": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171718": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171720": "  /** Add observer for this object.\n   */\n",
    "171722": "  /** Remove observer for this object.\n   */\n",
    "171724": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171725": "  /** Call notify() method on all observers. This method is not called\n   * automatically whenever the state has changed, but has to be\n   * called by the user after he has finished editing the object.\n   */\n",
    "171731": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171733": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171736": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171737": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171739": "  /**\n   * Dump instruction as byte code to stream out.\n   * @param out Output stream\n   */\n",
    "171741": "  /**\n   * Long output format:\n   *\n   * &lt;name of opcode&gt; \"[\"&lt;opcode number&gt;\"]\" \n   * \"(\"&lt;length of instruction&gt;\")\" \"&lt;\"&lt; local variable index&gt;\"&gt;\"\n   *\n   * @param verbose long/short format switch\n   * @return mnemonic for instruction\n   */\n",
    "171742": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171746": "  /**\n   * Set the local variable index\n   */\n",
    "171749": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171751": "  /**\n   * Returns the type associated with the instruction - \n   * in case of ALOAD or ASTORE Type.OBJECT is returned.\n   * This is just a bit incorrect, because ALOAD and ASTORE\n   * may work on every ReferenceType (including Type.NULL) and\n   * ASTORE may even work on a ReturnaddressType .\n   * @return type associated with the instruction\n   */\n",
    "171753": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171755": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171758": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171760": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171762": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171764": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171765": "  /**\n   * Dump instruction as short code to stream out.\n   */\n",
    "171775": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171778": "  /**\n   * Dump instruction as byte code to stream out.\n   * @param out Output stream\n   */\n",
    "171780": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171786": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171787": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171789": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171792": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171793": "  /**\n   * Dump instruction as byte code to stream out.\n   * @param out Output stream\n   */\n",
    "171796": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171797": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171800": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171803": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171808": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171809": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171810": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171813": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171816": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171819": "  /**\n   * Dump instruction as byte code to stream out.\n   * @param out Output stream\n   */\n",
    "171820": "  /**\n   * Long output format:\n   *\n   * &lt;name of opcode&gt; \"[\"&lt;opcode number&gt;\"]\" \n   * \"(\"&lt;length of instruction&gt;\")\" \"&lt;\"&lt; constant pool index&gt;\"&gt;\"\n   *\n   * @param verbose long/short format switch\n   * @return mnemonic for instruction\n   */\n",
    "171826": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171827": "  /**\n   * Set the index to constant pool.\n   * @param index in  constant pool.\n   */\n",
    "171834": "  /**\n   * Get LineNumber attribute .\n   *\n   * This relies on that the instruction list has already been dumped to byte code or\n   * or that the `setPositions' methods has been called for the instruction list.\n   */\n",
    "171840": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171842": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171845": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171846": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171848": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171849": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171851": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171852": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171854": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171855": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171857": "  /**\n   * Dump instruction as byte code to stream out.\n   */\n",
    "171864": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171866": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171867": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171869": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171878": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171885": "  /** Create a call to the most popular System.out.println() method.\n   *\n   * @param s the string to print\n   */\n",
    "171887": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171888": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171890": "  /** Uses PUSH to push a constant value onto the stack.\n   * @param value must be of type Number, Boolean, Character or String\n   */\n",
    "171897": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171900": "  /** Create a field instruction.\n   *\n   * @param class_name name of the accessed class\n   * @param name name of the referenced field\n   * @param type  type of field\n   * @param kind how to access, i.e., GETFIELD, PUTFIELD, GETSTATIC, PUTSTATIC\n   * @see Constants\n   */\n",
    "171906": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171913": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171921": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171928": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171935": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171937": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171943": "  /** Create new array of given size and type.\n   * @return an instruction that creates the corresponding array at runtime, i.e. is an AllocationInstruction\n   */\n",
    "171945": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171950": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171952": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171960": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171965": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171967": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171969": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171970": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171971": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171973": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171977": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171978": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171980": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171982": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171984": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171986": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "171988": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171991": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171992": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171994": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171995": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "171997": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "171999": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172001": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172002": "  /**\n   * Dump instruction as byte code to stream out.\n   * @param out Output stream\n   */\n",
    "172007": "  /**\n   * Called by InstructionList.setPositions when setting the position for every\n   * instruction. In the presence of variable length instructions `setPositions'\n   * performs multiple passes over the instruction list to calculate the\n   * correct (byte) positions and offsets by calling this function.\n   *\n   * @param offset additional offset caused by preceding (variable length) instructions\n   * @param max_offset the maximum offset that may be caused by these instructions\n   * @return additional offset caused by possible change of this instruction's length\n   */\n",
    "172009": "  /**\n   * Long output format:\n   *\n   * &lt;position in byte code&gt;\n   * &lt;name of opcode&gt; \"[\"&lt;opcode number&gt;\"]\" \n   * \"(\"&lt;length of instruction&gt;\")\"\n   * \"&lt;\"&lt;target instruction&gt;\"&gt;\" \"@\"&lt;branch target offset&gt;\n   *\n   * @param verbose long/short format switch\n   * @return mnemonic for instruction\n   */\n",
    "172012": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172018": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172021": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172022": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172024": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172025": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172028": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172030": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172032": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172033": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172035": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172036": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172038": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172047": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172053": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172057": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172062": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172065": "  /**\n   * Give an instruction a line number corresponding to the source code line.\n   *\n   * @param ih instruction to tag\n   * @return new line number object\n   * @see LineNumber\n   */\n",
    "172068": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172070": "  /**\n   * Remove a line number.\n   */\n",
    "172071": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172074": "  /**\n   * Remove all line numbers.\n   */\n",
    "172076": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172079": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172080": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172083": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172084": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172086": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172087": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172088": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172089": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172091": "  /**\n   * Get CodeException object.<BR>\n   *\n   * This relies on that the instruction list has already been dumped\n   * to byte code or or that the `setPositions' methods has been\n   * called for the instruction list.\n   *\n   * @param cp constant pool\n   */\n",
    "172097": "  /**\n   * Remove an exception handler.\n   */\n",
    "172099": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172104": "  /**\n   * Remove all line numbers.\n   */\n",
    "172107": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172108": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172109": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172110": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172111": "  /**\n   * Get LocalVariable object.\n   *\n   * This relies on that the instruction list has already been dumped to byte code or\n   * or that the `setPositions' methods has been called for the instruction list.\n   *\n   * Note that for local variables whose scope end at the last\n   * instruction of the method's code, the JVM specification is ambiguous:\n   * both a start_pc+length ending at the last instruction and\n   * start_pc+length ending at first index beyond the end of the code are\n   * valid.\n   *\n   * @param il instruction list (byte code) which this variable belongs to\n   * @param cp constant pool\n   */\n",
    "172113": "  /**\n   * Add an exception possibly thrown by this method.\n   *\n   * @param class_name (fully qualified) name of exception\n   */\n",
    "172118": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172120": "  /**\n   * Remove an exception.\n   */\n",
    "172126": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172127": "  /**\n   * Remove all exceptions.\n   */\n",
    "172129": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172136": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172137": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172138": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172139": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172140": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172141": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172149": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172150": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172153": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172155": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172156": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172157": "  /**\n   * Dump instruction as byte code to stream out.\n   * @param out Output stream\n   */\n",
    "172160": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172161": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172164": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172165": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172166": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172167": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172168": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172170": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172171": "  /**\n   * Dump instruction as byte code to stream out.\n   * @param out Output stream\n   */\n",
    "172173": "  /**\n   * Remove all NOPs from the instruction list (if possible) and update every\n   * object refering to them, i.e., branch instructions, local variables and\n   * exception handlers.\n   */\n",
    "172174": "  /**\n   * Long output format:\n   *\n   * &lt;name of opcode&gt; \"[\"&lt;opcode number&gt;\"]\" \n   * \"(\"&lt;length of instruction&gt;\")\"\n   *\n   * @param verbose long/short format switch\n   * @return mnemonic for instruction\n   */\n",
    "172177": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172179": "  /**\n   * Use with caution, since `BranchInstruction's have a `target' reference which\n   * is not copied correctly (only basic types are). This also applies for \n   * `Select' instructions with their multiple branch targets.\n   *\n   * @see BranchInstruction\n   * @return (shallow) copy of an instruction\n   */\n",
    "172181": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172182": "  /**\n   * This method also gives right results for instructions whose\n   * effect on the stack depends on the constant pool entry they\n   * reference.\n   *  @return Number of words consumed from stack by this instruction,\n   * or Constants.UNPREDICTABLE, if this can not be computed statically\n   */\n",
    "172183": "  /**\n   * Set maximum number of local variables.\n   */\n",
    "172184": "  /**\n   * This method also gives right results for instructions whose\n   * effect on the stack depends on the constant pool entry they\n   * reference.\n   * @return Number of words produced onto stack by this instruction,\n   * or Constants.UNPREDICTABLE, if this can not be computed statically\n   */\n",
    "172188": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172190": "  /** Check for equality, delegated to comparator\n   * @return true if that is an Instruction and has the same opcode\n   */\n",
    "172191": "  /**\n   * Set maximum stack size for this method.\n   */\n",
    "172193": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172194": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172195": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172198": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172202": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172204": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172206": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172207": "  /**\n   * Dump instruction as byte code to stream out.\n   * @param out Output stream\n   */\n",
    "172211": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172213": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172214": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172215": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172217": "  /**\n   * Temporarily swap the current instruction, without disturbing\n   * anything. Meant to be used by a debugger, implementing\n   * breakpoints. Current instruction is returned.\n   */\n",
    "172218": "  /**\n   * Called by InstructionList.setPositions when setting the position for every\n   * instruction. In the presence of variable length instructions `setPositions()'\n   * performs multiple passes over the instruction list to calculate the\n   * correct (byte) positions and offsets by calling this function.\n   *\n   * @param offset additional offset caused by preceding (variable length) instructions\n   * @param max_offset the maximum offset that may be caused by these instructions\n   * @return additional offset caused by possible change of this instruction's length\n   */\n",
    "172221": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172223": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172224": "  /** Remove all targeters, if any.\n   */\n",
    "172225": "  /**\n   * Denote this handle isn't referenced anymore by t.\n   */\n",
    "172226": "  /**\n   * Denote this handle is being referenced by t.\n   */\n",
    "172231": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172232": "  /** Add an attribute to an instruction handle.\n   *\n   * @param key the key object to store/retrieve the attribute\n   * @param attr the attribute to associate with this handle\n   */\n",
    "172233": "  /** Delete an attribute of an instruction handle.\n   *\n   * @param key the key object to retrieve the attribute\n   */\n",
    "172235": "  /** Get attribute of an instruction handle.\n   *\n   * @param key the key object to store/retrieve the attribute\n   */\n",
    "172238": "  /** Convenience method, simply calls accept() on the contained instruction.\n   *\n   * @param v Visitor object\n   */\n",
    "172240": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172244": "  /**\n   * If \"this\" doesn't reference a class, it references an interface\n   * or a non-existant entity.\n   */\n",
    "172245": "  /**\n   * If \"this\" doesn't reference an interface, it references a class\n   * or a non-existant entity.\n   */\n",
    "172247": "  /**\n   * Java Virtual Machine Specification edition 2, \ufffd 5.4.4 Access Control\n   */\n",
    "172248": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172249": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172251": "  /**\n   * Dump instruction as byte code to stream out.\n   * @param out Output stream\n   */\n",
    "172253": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172257": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172258": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172260": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172263": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172265": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172266": "  /** Handle adds itself to the list of resuable handles.\n   */\n",
    "172269": "  /**\n   * Pass new target to instruction.\n   */\n",
    "172270": "  /**\n   * Update target of instruction.\n   */\n",
    "172273": "  /** \n   * Set new contents. Old instruction is disposed and may not be used anymore.\n   */\n",
    "172274": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172277": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172278": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172281": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172282": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172283": "  /**\n   * Since this is a variable length instruction, it may shift the following\n   * instructions which then need to update their position.\n   *\n   * Called by InstructionList.setPositions when setting the position for every\n   * instruction. In the presence of variable length instructions `setPositions'\n   * performs multiple passes over the instruction list to calculate the\n   * correct (byte) positions and offsets by calling this function.\n   *\n   * @param offset additional offset caused by preceding (variable length) instructions\n   * @param max_offset the maximum offset that may be caused by these instructions\n   * @return additional offset caused by possible change of this instruction's length\n   */\n",
    "172284": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172285": "  /**\n   * Dump instruction as byte code to stream out.\n   * @param out Output stream\n   */\n",
    "172287": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172290": "  /**\n   * Set branch target for `i'th case\n   */\n",
    "172293": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172294": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172296": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172297": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172298": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172299": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172300": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172301": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172303": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172304": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172305": "  /**\n   * Compute maximum number of local variables.\n   */\n",
    "172306": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172307": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172308": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172309": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172311": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172313": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172315": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172317": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172318": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172325": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172331": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172332": "  /**\n   * Returns if the two Returnaddresses refer to the same target.\n   */\n",
    "172335": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172337": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172338": "  /**\n   * Also works for instructions whose stack effect depends on the\n   * constant pool entry they reference.\n   * @return Number of words consumed from stack by this instruction\n   */\n",
    "172340": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172341": "  /**\n   * Also works for instructions whose stack effect depends on the\n   * constant pool entry they reference.\n   * @return Number of words produced onto stack by this instruction\n   */\n",
    "172345": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172346": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172347": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172348": "  /** Add observer for this object.\n   */\n",
    "172349": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172351": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172352": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172353": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172354": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172355": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172356": "  /** Remove observer for this object.\n   */\n",
    "172357": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172358": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172359": "  /** Call notify() method on all observers. This method is not called\n   * automatically whenever the state has changed, but has to be\n   * called by the user after he has finished editing the object.\n   */\n",
    "172360": "    /** Symbolically executes the corresponding Java Virtual Machine instruction. */ \n",
    "172363": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172364": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172365": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172368": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172369": "  /**\n   * Dump instruction as byte code to stream out.\n   * @param out Output stream\n   */\n",
    "172370": "  /** Called in pass 2 of InstructionList.setPositions() in order to update\n   * the branch target, that may shift due to variable length instructions.\n   */\n",
    "172371": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172372": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172374": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172375": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172376": "  /**\n   * Dump instruction as byte code to stream out.\n   * @param out Output stream\n   */\n",
    "172377": "  /**\n   * Get instruction handle for instruction at byte code position pos.\n   * This only works properly, if the list is freshly initialized from a byte array or\n   * setPositions() has been called before this method.\n   *\n   * @param pos byte code position to search for\n   * @return target position's instruction handle if available\n   */\n",
    "172380": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172385": "  /**\n   * Append another list after instruction (handle) ih contained in this list.\n   * Consumes argument list, i.e., it becomes empty.\n   *\n   * @param ih where to append the instruction list \n   * @param il Instruction list to append to this one\n   * @return instruction handle pointing to the <B>first</B> appended instruction\n   */\n",
    "172386": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172396": "  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n",
    "172406": "  /**\n   * Append another list after instruction i contained in this list.\n   * Consumes argument list, i.e., it becomes empty.\n   *\n   * @param i  where to append the instruction list \n   * @param il Instruction list to append to this one\n   * @return instruction handle pointing to the <B>first</B> appended instruction\n   */\n",
    "172420": "  /**\n   * Append another list to this one.\n   * Consumes argument list, i.e., it becomes empty.\n   *\n   * @param il list to append to end of this list\n   * @return instruction handle of the <B>first</B> appended instruction\n   */\n",
    "172425": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172452": "  /**\n   * Append an instruction to the end of this list.\n   *\n   * @param ih instruction to append\n   */\n",
    "172477": "  /**\n   * Append an instruction to the end of this list.\n   *\n   * @param i instruction to append\n   * @return instruction handle of the appended instruction\n   */\n",
    "172484": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172491": "  /**\n   * Append a branch instruction to the end of this list.\n   *\n   * @param i branch instruction to append\n   * @return branch instruction handle of the appended instruction\n   */\n",
    "172506": "  /**\n   * Append a single instruction j after another instruction i, which\n   * must be in this list of course!\n   *\n   * @param i Instruction in list\n   * @param j Instruction to append after i in list\n   * @return instruction handle of the first appended instruction\n   */\n",
    "172521": "  /**\n   * Append a compound instruction, after instruction i.\n   *\n   * @param i Instruction in list\n   * @param c The composite instruction (containing an InstructionList)\n   * @return instruction handle of the first appended instruction\n   */\n",
    "172527": "    /**\n     * translates a list containing bytecode positions to source code \n     * line numbers.\n     * @param byteCodePositions\n     * @return returns an array with source code line numbers.\n     */\n",
    "172530": "  /**\n   * Append a compound instruction.\n   *\n   * @param c The composite instruction (containing an InstructionList)\n   * @return instruction handle of the first appended instruction\n   */\n",
    "172540": "    /**\n     * removes blocks at the end of the path where the given index\n     * is not read.\n     * @param index\n     */\n",
    "172541": "  /**\n   * Append a compound instruction.\n   *\n   * @param ih where to append the instruction list \n   * @param c The composite instruction (containing an InstructionList)\n   * @return instruction handle of the first appended instruction\n   */\n",
    "172542": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172549": "  /**\n   * Append an instruction after instruction (handle) ih contained in this list.\n   *\n   * @param ih where to append the instruction list \n   * @param i Instruction to append\n   * @return instruction handle pointing to the <B>first</B> appended instruction\n   */\n",
    "172554": "    /**\n     * removes duplicates from the definitionFreePaths list\n     */\n",
    "172556": "  /**\n   * Append an instruction after instruction (handle) ih contained in this list.\n   *\n   * @param ih where to append the instruction list \n   * @param i Instruction to append\n   * @return instruction handle pointing to the <B>first</B> appended instruction\n   */\n",
    "172561": "  /**\n   * Insert another list before Instruction handle ih contained in this list.\n   * Consumes argument list, i.e., it becomes empty.\n   *\n   * @param i  where to append the instruction list \n   * @param il Instruction list to insert\n   * @return instruction handle of the first inserted instruction\n   */\n",
    "172565": "    /**\n     * returns an array of variable indices that are defined in a given\n     * basic block. Those are the variables that are stored via a \n     * store instruction.\n     * @param wrapper\n     * @return returns a list containing Integer objects representing the\n     * SSA index of the instructions.\n     */\n",
    "172568": "  /**\n   * Insert another list.   \n   *\n   * @param il list to insert before start of this list\n   * @return instruction handle of the first inserted instruction\n   */\n",
    "172569": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172574": "  /**\n   * Insert an instruction at start of this list.\n   *\n   * @param ih instruction to insert\n   */\n",
    "172579": "  /**\n   * Insert another list before Instruction i contained in this list.\n   * Consumes argument list, i.e., it becomes empty.\n   *\n   * @param i  where to append the instruction list \n   * @param il Instruction list to insert\n   * @return instruction handle pointing to the first inserted instruction,\n   * i.e., il.getStart()\n   */\n",
    "172584": "  /**\n   * Insert an instruction at start of this list.\n   *\n   * @param i instruction to insert\n   * @return instruction handle of the inserted instruction\n   */\n",
    "172585": "    /**\n     * checks whether the given DefinitionFeePath descents from the same \n     * definition. This is true if the index and the first block are the same.\n     */\n",
    "172590": "  /**\n   * Insert a branch instruction at start of this list.\n   *\n   * @param i branch instruction to insert\n   * @return branch instruction handle of the appended instruction\n   */\n",
    "172592": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172595": "    /**\n     * after triggerFinished is called, the path will accept no further entries.\n     */\n",
    "172596": "  /**\n   * Insert a single instruction j before another instruction i, which\n   * must be in this list of course!\n   *\n   * @param i Instruction in list\n   * @param j Instruction to insert before i in list\n   * @return instruction handle of the first inserted instruction\n   */\n",
    "172607": "  /**\n   * Insert a compound instruction before instruction i.\n   *\n   * @param i Instruction in list\n   * @param c The composite instruction (containing an InstructionList)\n   * @return instruction handle of the first inserted instruction\n   */\n",
    "172611": "    /**\n     * first, this method replaces all IINC instruction in the given instruction\n     * list with load, add and store instructions. <br>\n     * then, it replaces all uses of fields with local variables.<br>\n     * then, it sets the stores to \"define\" the arguments.\n     */\n",
    "172613": "  /**\n   * Insert a compound instruction.\n   *\n   * @param c The composite instruction (containing an InstructionList)\n   * @return instruction handle of the first inserted instruction\n   */\n",
    "172619": "  /**\n   * Insert an instruction before instruction (handle) ih contained in this list.\n   *\n   * @param ih where to insert to the instruction list \n   * @param i Instruction to insert\n   * @return instruction handle of the first inserted instruction\n   */\n",
    "172620": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172626": "  /**\n   * Insert a compound instruction.\n   *\n   * @param ih where to insert the instruction list \n   * @param c The composite instruction (containing an InstructionList)\n   * @return instruction handle of the first inserted instruction\n   */\n",
    "172631": "  /**\n   * Insert an instruction before instruction (handle) ih contained in this list.\n   *\n   * @param ih where to insert to the instruction list \n   * @param i Instruction to insert\n   * @return instruction handle of the first inserted instruction\n   */\n",
    "172634": "    /**\n     * this method will check if the SSA form can be finished. It first checks\n     * whether all predecessors are in SSA form, and if so, it will replace\n     * existing PhiDashFunctions with PhiFunctions.\n     */\n",
    "172642": "  /**\n   * Move a single instruction (handle) to a new location.\n   *\n   * @param ih     moved instruction\n   * @param target new location of moved instruction\n   */\n",
    "172666": "  /**\n   * Remove instruction from this list. The corresponding Instruction\n   * handles must not be reused!\n   *\n   * @param ih instruction (handle) to remove \n   */\n",
    "172675": "  /**\n   * Remove instruction from this list. The corresponding Instruction\n   * handles must not be reused!\n   *\n   * @param i instruction to remove\n   */\n",
    "172676": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172696": "    /**\n     * creates a local variable that is the replacement of the field\n     * the given FieldInstruction points to.\n     */\n",
    "172698": "  /**\n   * Remove instructions from instruction `from' to instruction `to' contained\n   * in this list. The user must ensure that `from' is an instruction before\n   * `to', or risk havoc. The corresponding Instruction handles must not be reused!\n   *\n   * @param from where to start deleting (inclusive)\n   * @param to   where to end deleting (inclusive)\n   */\n",
    "172705": "  /**\n   * Search for given Instruction reference, start at beginning of list.\n   *\n   * @param i instruction to search for\n   * @return instruction found on success, null otherwise\n   */\n",
    "172711": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172714": "  /**\n   * Search for given Instruction reference, start at end of list\n   *\n   * @param i instruction to search for\n   * @return instruction found on success, null otherwise\n   */\n",
    "172728": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172743": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172759": "    /**\n     * sets high priority for the given class, then waits until it is computed.\n     * @param jc\n     */\n",
    "172760": "    /**\n     * adds the item to the list if it is not already contained.\n     * @return returns true if the list was modified by the command.\n     */\n",
    "172777": "    /**\n     * starts the clock for the measurement in spe called <code>name</code>.\n     * \n     * @param name\n     */\n",
    "172779": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172780": "    /**\n     * stops the clock for the measurement called <code>name</code>. Only\n     * measurements can be stopped that where started with\n     * <code>startTiming</code>. If the <code>name</code> is \n     * not known, nothing happens.\n     * @param name\n     */\n",
    "172783": "    /**\n     * prints a list of all measurements and their times that where clocked with\n     * this class.\n     */\n",
    "172787": "    /**\n     * clears the list of measurements.\n     */\n",
    "172817": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172820": "    /**\n     * Set the java project attribute based on the IJavaElement.\n     */\n",
    "172843": "    /**\n     * Prompts the user to select a type\n     * \n     * @return the selected type or <code>null</code> if none.\n     */\n",
    "172847": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172866": "    /**\n     * Returns the local java launch config type\n     */\n",
    "172876": "  /** Replace all references to the old constant pool with references to the new\n   *  constant pool\n   */\n",
    "172881": "    /**\n     * Convenience method to get the window that owns this action's Shell.\n     */\n",
    "172886": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172911": "  /**\n   * Delete contents of list. Provides besser memory utilization,\n   * because the system then may reuse the instruction handles. This\n   * method is typically called right after\n   * <href=\"MethodGen.html#getMethod()\">MethodGen.getMethod()</a>.\n   */\n",
    "172918": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172946": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172967": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "172989": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173011": "  /** Add observer for this object.\n   */\n",
    "173016": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173021": "  /** Remove observer for this object.\n   */\n",
    "173029": "  /** Call notify() method on all observers. This method is not called\n   * automatically whenever the state has changed, but has to be\n   * called by the user after he has finished editing the object.\n   */\n",
    "173031": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173058": "    /**\n     * Clears any cached collation keys. Use to free up some memory if the markers in this\n     * list won't be sorted for awhile. \n     */\n",
    "173059": "    /**\n     * Returns the marker table or lazily creates it if it doesn't exist yet\n     * \n     * @return a map of IMarker onto ConcreteMarker, containing all the ConcreteMarkers in the list\n     */\n",
    "173061": "    /**\n     * Returns an existing marker from the list that is associated with\n     * the given IMarker\n     *  \n     * @param toFind the IMarker to lookup in the list\n     * @return the ConcreteMarker that corresponds to the given IMarker\n     */\n",
    "173064": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173069": "    /**\n     * Returns the markers in this list. Read-only.\n     * \n     * @return the markers in the list\n     */\n",
    "173071": "    /**\n     * Returns the number of items in the list\n     *  \n     * @return the number of items \n     */\n",
    "173073": "    /**\n     * Returns the number of error markers in the list\n     * \n     * @return the number of errors \n     */\n",
    "173075": "    /**\n     * Returns the number of info markers in the list\n     * \n     * @return the number of info markers\n     */\n",
    "173081": "    /**\n     * Returns the number of warning markers in the list \n     * \n     * @return the number of warning markers\n     */\n",
    "173085": "    /**\n     * secondary markers are intended to show additionaly places a \n     * primary marker points to. All-Uses uses secondary markers to \n     * show the coverage of \n     * uses to a definition (which the primary markers mark).\n     * @param marker\n     */\n",
    "173095": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173122": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173159": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173163": "    /**\n     * Sets the resource to use when creating a new marker.\n     * If not set, the new marker is created on the workspace root.\n     */\n",
    "173166": "    /**\n     * Method declared on Window.\n     */\n",
    "173172": "    /**\n     * Method createCreationTimeArea.\n     * @param composite\n     */\n",
    "173175": "    /**\n     * Creates the OK and Cancel buttons.\n     */\n",
    "173179": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173186": "    /**\n     * This method is intended to be overridden by subclasses. The attributes area is created between\n     * the creation time area and the resource area.\n     * \n     * @param parent the parent composite\n     */\n",
    "173202": "    /**\n     * Creates the table control.\n     */\n",
    "173203": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173208": "    /**\n     * Sets the dialog's dirty flag to <code>true</code>\n     */\n",
    "173221": "    /**\n     * Sets the dirty flag to true.\n     */\n",
    "173223": "    /**\n     * Set the layout data of the button to a GridData with \n     * appropriate heights and widths.\n     * @param button\n     */\n",
    "173226": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173231": "    /**\n     * Appends all this type's supertypes to the given list.\n     */\n",
    "173236": "    /**\n     * Returns the marker attributes to save back to the marker, \n     * based on the current dialog fields.\n     */\n",
    "173237": "    /**\n     * Returns whether this marker type is considered to be a subtype of\n     * the given marker type. \n     *\n     * @return boolean <code>true</code>if this type is the same as (or a subtype of) the given type\n     */\n",
    "173240": "    /**\n     * Copies the marker(s) from the clipboard to the bookmark navigator view.\n     */\n",
    "173241": "    /**\n     * Create the marker and report progress\n     * to the monitor.\n     * @param monitor\n     * @throws a CoreException\n     */\n",
    "173245": "    /**\n     * Displays a list of resolutions and performs the selection.\n     */\n",
    "173246": "    /**\n     * Returns the selected marker (may be <code>null</code>).\n     * \n     * @return the selected marker\n     */\n",
    "173248": "    /**\n     * Updates widget enablement for the dialog. Should be overridden by subclasses. \n     */\n",
    "173250": "            /**\n             * Handles the case of user selecting the\n             * header area.\n             */\n",
    "173253": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173256": "    /**\n     * Queues the given set of items to be refreshed in the viewer. If there\n     * are any items in the viewer (or its queues) that compare as equal(...)\n     * to one of these items, the new item will replace the old one. Should\n     * be run in a background thread.\n     * \n     * @param changes set if items to be refreshed in the viewer\n     */\n",
    "173261": "    /**\n     * Subclasses should override to determine if the given marker passes the filter.\n     * \n     * @param marker\n     * @return <code>true</code> if the marker passes the filter and <code>false</code> otherwise\n     */\n",
    "173262": "    /**\n     * Applies the next set of changes to the table. Returns the number of items\n     * actually refreshed. Must run in the UI thread.\n     * \n     * @param maximumToChange maximum number of queued changes to apply\n     * @return the number of changes actually applied.\n     */\n",
    "173264": "    /**\n     * Applies the next set of removals from the table. Must run in the UI thread.\n     * \n     * @param maximumToRemove maximum number of items to remove from the table.\n     * @return the number of items actually removed.\n     */\n",
    "173265": "    /**\n     * Returns a set of strings representing the full pathnames to every resource directly\n     * or indirectly contained in the working set. A resource is in the working set iff its\n     * path name can be found in this set.\n     */\n",
    "173267": "    /**\n     * Applies the next set of insertions into the middle of the queue.\n     * \n     * @param maximumToInsert\n     */\n",
    "173270": "    /**\n     * Applies the next insertion at the end of the table. Returns the number of\n     * items actually inserted.\n     * \n     * @param maximumToInsert maximum number of items to insert into the end\n     * of the table\n     * @return the number of items actually inserted into the table\n     */\n",
    "173271": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173274": "    /**\n     * Clears the set of visible items, and reinserts everything from scratch.\n     */\n",
    "173275": "    /**\n     * Get the IWorkbenchSiteProgressService for the receiver.\n     * @return IWorkbenchSiteProgressService or <code>null</code>.\n     */\n",
    "173278": "    /**\n     * Returns true iff there are pending changes remaining to be applied.\n     * \n     * @return true iff there are pending changes to be applied to the table\n     */\n",
    "173282": "    /**\n     * Returns an estimate of the work remaining (the result is meaningful with respect\n     * to the return value of nextUpdate())\n     * \n     * @return an estimate of the work remaining\n     */\n",
    "173285": "    /**\n     * Returns if the given resource is enclosed by a working set element.\n     * Previous versions of this method used IContainmentAdapter for \n     * containment tests. For performance reasons, this is no longer possible.\n     * Code that relies on this behavior should be updated appropriately.\n     * \n     * @param element resource to test for enclosure by a working set\n     *     element \n     * @return true if element is enclosed by a working set element and \n     *     false otherwise. \n     */\n",
    "173291": "    /**\n     * Sets the focused resources.\n     */\n",
    "173293": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173295": "    /**\n     * Applies any deferred sorting. \n     * @param mon\n     */\n",
    "173299": "    /**\n     * Determines the insertion position for the given element in the table. Note\n     * that this is essentially the same as TableViewer.getInsertPosition, but we\n     * need to do it here because if we set a sorter on the TableViewer, this will\n     * force a refresh of the table which can be extremely slow.\n     * \n     * @param element object whose insertion position is being computed.\n     */\n",
    "173307": "    /**\n     * Returns the TableViewer that is being populated.\n     * \n     * @return the TableViewer that is being modified.\n     */\n",
    "173311": "    /**\n     * Clears any cached information. This frees up some memory, but will slow down\n     * the next comparison operation. It is a good idea to call this on a set of markers\n     * after sorting them, in order to reduce their memory cost. \n     */\n",
    "173312": "    /**\n     * Refresh the properties of this marker from the underlying IMarker instance\n     */\n",
    "173313": "    /**\n     * Returns a new empty set to be used for insertionsAtEnd\n     * \n     * @return\n     */\n",
    "173324": "    /**\n     * Copies the selected IMarker objects to the clipboard. If properties have \n     * been set, also copies a plain-text report of the selected markers to the\n     * clipboard.\n     */\n",
    "173326": "    /**\n     * Causes the view to re-sync its contents with the workspace. Note that\n     * changes will be scheduled in a background job, and may not take effect\n     * immediately. \n     */\n",
    "173327": "    /** \n     * Updates enablement based on the current selection\n     */\n",
    "173334": "    /**\n     * Returns the label for the given marker type.\n     * Workaround until we have labels in XML.\n     */\n",
    "173341": "    /**\n     * Delete the marker selection.\n     */\n",
    "173342": "    /**\n     * Instantiates the actual Job object.\n     * \n     * @param name\n     */\n",
    "173348": "    /**\n     * Aborts the currently running job (if any) by cancelling its progress\n     * monitor, and reschedules it. If there is no currently running job,\n     * it will be started.\n     */\n",
    "173351": "    /**\n     * Schedules the job. Does nothing if the job is already running. \n     */\n",
    "173353": "    /**\n     * Schedule theJob using the progress service if there\n     * is one.\n     */\n",
    "173356": "    /**\n     * Cancels the job. If the job is currently running, it will be\n     * terminated as soon as possible.\n     */\n",
    "173364": "        /**\n         * Will be executed each time the update thread wakes up. This makes\n         * a single incremental update to the viewer (ie: adds or removes a few items)\n         */ \n",
    "173368": "    /**\n     * Sets the view's sorter (or null if no sorting is to be used)\n     * \n     * @param c comparator that controls the view's sort order (or null if no sorting)\n     */\n",
    "173374": "    /**\n     * Sets the contents of the table. Note that the changes may not become visible\n     * immediately, as the viewer will actually be updated in a background thread.\n     * \n     * @param newVisibleItems\n     */\n",
    "173378": "    /**\n     * Method declared on Window.\n     */\n",
    "173379": "    /**\n     * Returns the TableViewer being populated by this content provider\n     * \n     * @return the TableViewer being populated by this content provider\n     */\n",
    "173380": "    /**\n     * Returns true iff this content provider contains changes that are not yet\n     * reflected in the viewer.\n     * \n     * @return true iff the reciever has unprocessed changes\n     */\n",
    "173383": "    /**\n     * Returns an estimate of the total work remaining (used for progress monitors)\n     * \n     * @return\n     */\n",
    "173387": "    /**\n     * Cancels any pending changes to the viewer. The contents of the viewer\n     * will be left in whatever state they are in at the time. Any changes that\n     * have not yet been applied will be lost. It is a good idea to call this\n     * method before performing a long computation that will ultimately invalidate\n     * the contents of the viewer.\n     */\n",
    "173388": "    /**\n     * Creates a check box button with the given parent and text.\n     *\n     * @param parent the parent composite\n     * @param text the text for the check box\n     * @param grabRow <code>true</code>to grab the remaining horizontal space, <code>false</code> otherwise\n     * @return the check box button\n     */\n",
    "173391": "    /**\n     * Performs a single update to the viewer. Based on the contents of the pending* queues,\n     * items will either be removed, added, or refreshed in the viewer (in that order). This\n     * should only be called within a synchronized block, since the various queues shouldn't\n     * be modified during an update. This method is invoked repeatedly by jobs to gradually\n     * apply the pending changes.\n     */\n",
    "173394": "    /**\n     * Creates a combo box with the given parent, items, and selection\n     *\n     * @param parent the parent composite\n     * @param items the items for the combo box\n     * @param selectionIndex the index of the item to select\n     * @return the combo box\n     */\n",
    "173399": "    /**\n     * Opens the dialog. Notifies the view if the filter has been modified.\n     */\n",
    "173407": "    /**\n     * Creates a separator line above the OK/Cancel buttons bar\n     * \n     * @param parent the parent composite\n     */\n",
    "173412": "    /**\n     * Creates a radio button with the given parent and text.\n     *\n     * @param parent the parent composite\n     * @param text the text for the check box\n     * @return the radio box button\n     */\n",
    "173421": "    /**\n     * The user is attempting to drag marker data.  Add the appropriate\n     * data to the event depending on the transfer type.\n     */\n",
    "173438": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173442": "    /**\n     * Creates the filter enablement area.\n     * \n     * @param parent the parent composite\n     */\n",
    "173478": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173502": "    /**\n     * Returns the selected marker types.\n     *\n     * @return the selected marker types\n     */\n",
    "173508": "    /**\n     * Returns the marker limit or -1 if unlimited\n     *  \n     */\n",
    "173509": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173521": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173522": "    /**\n     * Updates the message displayed in the status line.  This method is\n     * invoked in the following cases:\n     * <ul>\n     * <li>when this view is first created</li>\n     * <li>when new elements are added</li>\n     * <li>when something is deleted</li>\n     * <li>when the filters change</li>\n     * </ul>\n     * <p>\n     * By default, this method calls <code>updateStatusMessage(IStructuredSelection)</code>\n     * with the current selection or <code>null</code>.  Classes wishing to override\n     * this functionality, should just override the method\n     * <code>updateStatusMessage(IStructuredSelection)</code>.\n     * </p>\n     */\n",
    "173527": "    /**\n     * Updates that message displayed in the status line.  If the\n     * selection parameter is <code>null</code> or its size is 0, the status \n     * area is blanked out.  If only 1 marker is selected, the\n     * status area is updated with the contents of the message\n     * attribute of this marker.  In other cases (more than one marker\n     * is selected) the status area indicates how many items have\n     * been selected.\n     * <p>\n     * This method may be overwritten.\n     * </p><p>\n     * This method is called whenever a selection changes in this view.\n     * </p>\n     * @param selection a valid selection or <code>null</code>\n     */\n",
    "173532": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173533": "    /**\n     * Handles selection on a check box or combo box.\n     */\n",
    "173538": "    /**\n     * Given a selection of IMarker, reveals the corresponding elements in the viewer\n     * \n     * @param structuredSelection\n     * @param reveal\n     */\n",
    "173545": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173556": "    /**\n     * Create the UIJob used in the receiver for updates.\n     *\n     */\n",
    "173557": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173577": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173600": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173617": "    /**\n     * Show a dialog that lets the user select a project.  This in turn provides\n     * context for the main type, allowing the user to key a main type name, or\n     * constraining the search for main types to the specified project.\n     */\n",
    "173640": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173666": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173669": "    /**\n     * This will set the target for the PI.\n     *\n     * @param newTarget <code>String</code> new target of PI.\n     * @return <code>ProcessingInstruction</code> - this PI modified.\n     */\n",
    "173670": "    /**\n     * Returns the XPath 1.0 string value of this element, which is the\n     * data of this PI.\n     *\n     * @return the data of this PI\n     */\n",
    "173672": "    /**\n     * This will retrieve the target of the PI.\n     *\n     * @return <code>String</code> - target of PI.\n     */\n",
    "173674": "    /**\n     * This will return the raw data from all instructions.\n     *\n     * @return <code>String</code> - data of PI.\n     */\n",
    "173676": "    /**\n     * This will return a <code>List</code> containing the names of the\n     * \"attribute\" style pieces of name/value pairs in this PI's data.\n     *\n     * @return <code>List</code> - the <code>List</code> containing the\n     *         \"attribute\" names.\n     */\n",
    "173678": "    /**\n     * This will set the raw data for the PI.\n     *\n     * @param data <code>String</code> data of PI.\n     * @return <code>ProcessingInstruction</code> - this PI modified.\n     */\n",
    "173679": "    /**\n     * This will set the name/value pairs within the passed\n     * <code>Map</code> as the pairs for the data of\n     * this PI.  The keys should be the pair name\n     * and the values should be the pair values.\n     *\n     * @param data new map data to use\n     * @return <code>ProcessingInstruction</code> - modified PI.\n     */\n",
    "173681": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173682": "    /**\n     * This will return the value for a specific\n     * name/value pair on the PI.  If no such pair is\n     * found for this PI, null is returned.\n     *\n     * @param name <code>String</code> name of name/value pair\n     *             to lookup value for.\n     * @return <code>String</code> - value of name/value pair.\n     */\n",
    "173684": "    /**\n     * This will set a pseudo attribute with the given name and value.\n     * If the PI data is not already in a pseudo-attribute format, this will\n     * replace the existing data.\n     *\n     * @param name <code>String</code> name of pair.\n     * @param value <code>String</code> value for pair.\n     * @return <code>ProcessingInstruction</code> this PI modified.\n     */\n",
    "173686": "    /**\n     * This will remove the pseudo attribute with the specified name.\n     *\n     * @param name name of pseudo attribute to remove\n     * @return <code>boolean</code> - whether the requested\n     *         instruction was removed.\n     */\n",
    "173688": "    /**\n     * This will convert the Map to a string representation.\n     *\n     * @param mapData <code>Map</code> PI data to convert\n     * @return a string representation of the Map as appropriate for a PI\n     */\n",
    "173692": "    /**\n     * This returns a <code>String</code> representation of the\n     * <code>ProcessingInstruction</code>, suitable for debugging. If the XML\n     * representation of the <code>ProcessingInstruction</code> is desired,\n     * {@link org.jdom.output.XMLOutputter#outputString(ProcessingInstruction)}\n     * should be used.\n     *\n     * @return <code>String</code> - information about the\n     *         <code>ProcessingInstruction</code>\n     */\n",
    "173694": "    /**\n     * This will return a clone of this <code>ProcessingInstruction</code>.\n     *\n     * @return <code>Object</code> - clone of this\n     * <code>ProcessingInstruction</code>.\n     */\n",
    "173696": "    /**\n     * This will retrieve the element name being constrained.\n     *\n     * @return <code>String</code> - element name for DOCTYPE\n     */\n",
    "173697": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173698": "    /**\n     * This will set the root element name declared by this\n     * DOCTYPE declaration.\n     *\n     * @return DocType <code>DocType</code> this DocType object\n     * @param elementName <code>String</code> name of\n     *        root element being constrained.\n     * @throws IllegalNameException if the given root element name is not a\n     *         legal XML element name.\n     */\n",
    "173700": "    /**\n     * This will retrieve the public ID of an externally\n     * referenced DTD, or an empty <code>String</code> if\n     * none is referenced.\n     *\n     * @return <code>String</code> - public ID of referenced DTD.\n     */\n",
    "173702": "    /**\n     * This will set the public ID of an externally\n     * referenced DTD.\n     *\n     * @param publicID id to set\n     * @return DocType <code>DocType</code> this DocType object\n     * @throws IllegalDataException if the given public ID is not a legal\n     *         public ID.\n     */\n",
    "173703": "    /**\n     * This will retrieve the system ID of an externally\n     * referenced DTD, or an empty <code>String</code> if\n     * none is referenced.\n     *\n     * @return <code>String</code> - system ID of referenced DTD.\n     */\n",
    "173704": "    /**\n     * This will set the system ID of an externally\n     * referenced DTD.\n     *\n     * @param systemID id to set\n     * @return systemID <code>String</code> system ID of\n     *                  referenced DTD.\n     * @throws IllegalDataException if the given system ID is not a legal\n     *         system literal.\n     */\n",
    "173706": "    /**\n     * Returns the empty string since doctypes don't have an XPath\n     * 1.0 string value.\n     * @return the empty string\n     */\n",
    "173708": "    /**\n     * This sets the data for the internal subset.\n     *\n     * @param newData data for the internal subset, as a\n     *        <code>String</code>.\n     */\n",
    "173709": "    /**\n     * This returns the data for the internal subset.\n     *\n     * @return <code>String</code> - the internal subset\n     */\n",
    "173711": "    /**\n     * This returns a <code>String</code> representation of the\n     * <code>DocType</code>, suitable for debugging.\n     *\n     * @return <code>String</code> - information about the\n     *         <code>DocType</code>\n     */\n",
    "173714": "    /**\n     * This creates an empty <code>Document</code> object based\n     * on a specific parser implementation.\n     *\n     * @return <code>Document</code> - created DOM Document.\n     * @throws JDOMException when errors occur.\n     */\n",
    "173716": "    /**\n     * This creates an empty <code>Document</code> object based\n     * on a specific parser implementation.\n     *\n     * @return <code>Document</code> - created DOM Document.\n     * @throws JDOMException when errors occur.\n     */\n",
    "173717": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173723": "    /**\n     * This creates an empty <code>Document</code> object based\n     * on a specific parser implementation.\n     *\n     * @return <code>Document</code> - created DOM Document.\n     * @throws JDOMException when errors occur.\n     */\n",
    "173726": "    /**\n     * This creates an empty <code>Document</code> object based\n     * on a specific parser implementation with the given DOCTYPE.\n     * If the doctype parameter is null, the behavior is the same as\n     * calling <code>createDocument()</code>.\n     *\n     * @param doctype Initial <code>DocType</code> of the document.\n     * @return <code>Document</code> - created DOM Document.\n     * @throws JDOMException when errors occur.\n     */\n",
    "173727": "    /**\n     * This creates an empty <code>Document</code> object based\n     * on a specific parser implementation.\n     *\n     * @return <code>Document</code> - created DOM Document.\n     * @throws JDOMException when errors occur.\n     */\n",
    "173728": "    /**\n     * This attempts to change the DocumentType to have the given internal DTD \n     * subset value.  This is not a standard ability in DOM, so it's only\n     * available with some parsers.  Subclasses can alter the mechanism by\n     * which the attempt is made to set the value.\n     *\n     * @param dt DocumentType to be altered\n     * @param s String to use as the internal DTD subset\n     */\n",
    "173730": "    /**\n     * This creates an empty <code>Document</code> object based\n     * on a specific parser implementation.\n     *\n     * @return <code>Document</code> - created DOM Document.\n     * @throws JDOMException when errors occur.\n     */\n",
    "173734": "   /**\n    * Evaluates the wrapped XPath expression and returns the list\n    * of selected items.\n    *\n    * @param  context   the node to use as context for evaluating\n    *                   the XPath expression.\n    *\n    * @return the list of selected items, which may be of types: {@link Element},\n    *         {@link Attribute}, {@link Text}, {@link CDATA},\n    *         {@link Comment}, {@link ProcessingInstruction}, Boolean,\n    *         Double, or String.\n    *\n    * @throws JDOMException   if the evaluation of the XPath\n    *                         expression on the specified context\n    *                         failed.\n    */\n",
    "173735": "   /**\n    * Evaluates the wrapped XPath expression and returns the first\n    * entry in the list of selected nodes (or atomics).\n    *\n    * @param  context   the node to use as context for evaluating\n    *                   the XPath expression.\n    *\n    * @return the first selected item, which may be of types: {@link Element},\n    *         {@link Attribute}, {@link Text}, {@link CDATA},\n    *         {@link Comment}, {@link ProcessingInstruction}, Boolean,\n    *         Double, String, or <code>null</code> if no item was selected.\n    *\n    * @throws JDOMException   if the evaluation of the XPath\n    *                         expression on the specified context\n    *                         failed.\n    */\n",
    "173736": "    /**\n     * This prints the stack trace of the <code>Exception</code>. If\n     * there is a root cause, the stack trace of the root\n     * <code>Exception</code> is printed right after.\n     */\n",
    "173737": "   /**\n    * Returns the string value of the first node selected by applying\n    * the wrapped XPath expression to the given context.\n    *\n    * @param  context   the element to use as context for evaluating\n    *                   the XPath expression.\n    *\n    * @return the string value of the first node selected by applying\n    *         the wrapped XPath expression to the given context.\n    *\n    * @throws JDOMException   if the XPath expression is invalid or\n    *                         its evaluation on the specified context\n    *                         failed.\n    */\n",
    "173738": "    /**\n     * Prints the stack trace of the <code>Exception</code> to the given\n     * PrintStream. If there is a root cause, the stack trace of the root\n     * <code>Exception</code> is printed right after.\n     *\n     * @param s PrintStream to print to\n     */\n",
    "173739": "   /**\n    * Returns the number value of the first item selected by applying\n    * the wrapped XPath expression to the given context.\n    *\n    * @param  context   the element to use as context for evaluating\n    *                   the XPath expression.\n    *\n    * @return the number value of the first item selected by applying\n    *         the wrapped XPath expression to the given context,\n    *         <code>null</code> if no node was selected or the\n    *         special value {@link java.lang.Double#NaN}\n    *         (Not-a-Number) if the selected value can not be\n    *         converted into a number value.\n    *\n    * @throws JDOMException   if the XPath expression is invalid or\n    *                         its evaluation on the specified context\n    *                         failed.\n    */\n",
    "173741": "    /**\n     * Prints the stack trace of the <code>Exception</code> to the given\n     * PrintWriter. If there is a root cause, the stack trace of the root\n     * <code>Exception</code> is printed right after.\n     *\n     * @param w PrintWriter to print to\n     */\n",
    "173744": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173745": "   /**\n    * Adds a namespace definition to the list of namespaces known of\n    * this XPath expression.\n    * <p>\n    * <strong>Note</strong>: In XPath, there is no such thing as a\n    * 'default namespace'.  The empty prefix <b>always</b> resolves\n    * to the empty namespace URI.</p>\n    *\n    * @param  namespace   the namespace.\n    */\n",
    "173746": "   /**\n    * Returns the wrapped XPath expression as a string.\n    *\n    * @return the wrapped XPath expression as a string.\n    */\n",
    "173749": "   /**\n    * Compiles and sets the XPath expression wrapped by this object.\n    *\n    * @param  expr   the XPath expression to wrap.\n    *\n    * @throws JDOMException   if the XPath expression is invalid.\n    */\n",
    "173753": "   /**\n    * Adds a namespace definition (prefix and URI) to the list of\n    * namespaces known of this XPath expression.\n    * <p>\n    * <strong>Note</strong>: In XPath, there is no such thing as a\n    * 'default namespace'.  The empty prefix <b>always</b> resolves\n    * to the empty namespace URI.</p>\n    *\n    * @param  prefix   the namespace prefix.\n    * @param  uri      the namespace URI.\n    *\n    * @throws IllegalNameException   if the prefix or uri are null or\n    *                                empty strings or if they contain\n    *                                illegal characters.\n    */\n",
    "173758": "      /**\n       * <i>[Jaxen NamespaceContext interface support]</i> Translates\n       * the provided namespace prefix into the matching bound\n       * namespace URI.\n       *\n       * @param  prefix   the namespace prefix to resolve.\n       *\n       * @return the namespace URI matching the prefix.\n       */\n",
    "173759": "    /**\n     * Add a attribute to the end of the list or replace a existing\n     * attribute with the same name and <code>Namespace</code>.\n     *\n     * @param obj The object to insert into the list.\n     * @return true (as per the general contract of Collection.add).\n     * @throws IndexOutOfBoundsException if index < 0 || index > size()\n     */\n",
    "173760": "      /**\n       * <i>[Serialization support]</i> Resolves the read XPathString\n       * objects into XPath implementations.\n       *\n       * @return an instance of a concrete implementation of\n       *         XPath.\n       *\n       * @throws ObjectStreamException   if no XPath could be built\n       *                                 from the read object.\n       */\n",
    "173761": "    /**\n     * Inserts the specified attribute at the specified position in this list.\n     * Shifts the attribute currently at that position (if any) and any\n     * subsequent attributes to the right (adds one to their indices).\n     *\n     * @param index The location to set the value to.\n     * @param obj The object to insert into the list.\n     * throws IndexOutOfBoundsException if index < 0 || index > size()\n     */\n",
    "173763": "    /**\n     * This will return the parent of this <code>Attribute</code>.\n     * If there is no parent, then this returns <code>null</code>.\n     *\n     * @return parent of this <code>Attribute</code>\n     */\n",
    "173765": "    /**\n     * Add all the objects in the specified collection.\n     *\n     * @param collection The collection containing all the objects to add.\n     * @return <code>true</code> if the list was modified as a result of\n     * the add.\n     */\n",
    "173767": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173770": "    /**\n     * This retrieves the owning <code>{@link Document}</code> for\n     * this Attribute, or null if not a currently a member of a\n     * <code>{@link Document}</code>.\n     *\n     * @return <code>Document</code> owning this Attribute, or null.\n     */\n",
    "173771": "    /**\n     * Inserts the specified collecton at the specified position in this list.\n     * Shifts the attribute currently at that position (if any) and any\n     * subsequent attributes to the right (adds one to their indices).\n     *\n     * @param index The offset to start adding the data in the collection\n     * @param collection The collection to insert into the list.\n     * @return <code>true</code> if the list was modified as a result of\n     *                           the add.\n     * throws IndexOutOfBoundsException if index < 0 || index > size()\n     */\n",
    "173775": "    /**\n     * Clear the current list.\n     */\n",
    "173776": "    /**\n     * This will set the parent of this <code>Attribute</code>.\n     *\n     * @param parent <code>Element</code> to be new parent.\n     * @return this <code>Attribute</code> modified.\n     */\n",
    "173779": "    /**\n     * Increases the capacity of this <code>AttributeList</code> instance,\n     * if necessary, to ensure that it can hold at least the number of\n     * items specified by the minimum capacity argument.\n     *\n     * @param minCapacity the desired minimum capacity.\n     */\n",
    "173781": "    /**\n     * This detaches the <code>Attribute</code> from its parent, or does\n     * nothing if the <code>Attribute</code> has no parent.\n     *\n     * @return <code>Attribute</code> - this <code>Attribute</code> modified.\n     */\n",
    "173784": "    /**\n     * Return the object at the specified offset.\n     *\n     * @param index The offset of the object.\n     * @return The Object which was returned.\n     */\n",
    "173788": "    /**\n     * Remove the object at the specified offset.\n     *\n     * @param index The offset of the object.\n     * @return The Object which was removed.\n     */\n",
    "173791": "    /**\n     * This sets the local name of the <code>Attribute</code>.\n     *\n     * @param name the new local name to set\n     * @return <code>Attribute</code> - the attribute modified.\n     * @throws IllegalNameException if the given name is illegal as an\n     *         attribute name.\n     */\n",
    "173793": "    /**\n     * Set the object at the specified location to the supplied\n     * object.\n     *\n     * @param index The location to set the value to.\n     * @param obj The location to set the value to.\n     * @return The object which was replaced.\n     * throws IndexOutOfBoundsException if index < 0 || index >= size()\n     */\n",
    "173796": "    /**\n     * This will retrieve the qualified name of the <code>Attribute</code>.\n     * For any XML attribute whose name is\n     * <code>[namespacePrefix]:[elementName]</code>,\n     * the qualified name of the attribute would be\n     * everything (both namespace prefix and\n     * element name). When the attribute has no\n     * namespace, the qualified name is simply the attribute's\n     * local name.\n     * <p>\n     * To obtain the local name of the attribute, the\n     * <code>{@link #getName()}</code> method should be used.\n     * <p>\n     * To obtain the namespace prefix for this attribute,\n     * the <code>{@link #getNamespacePrefix()}</code>\n     * method should be used.\n     *\n     * @return <code>String</code> - full name for this element.\n     */\n",
    "173797": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173798": "    /**\n     * Return index of attribute with same name and Namespace, or\n     * -1 if one doesn't exist\n     */\n",
    "173802": "    /**\n     * Return the number of items in this list\n     *\n     * @return The number of items in this list.\n     */\n",
    "173803": "    /**\n     * This will retrieve the namespace prefix of the\n     * <code>Attribute</code>. For any XML attribute\n     * which appears as\n     * <code>[namespacePrefix]:[attributeName]</code>,\n     * the namespace prefix of the attribute would be\n     * <code>[namespacePrefix]</code>. When the attribute\n     * has no namespace, an empty <code>String</code> is returned.\n     *\n     * @return <code>String</code> - namespace prefix of this\n     *                               attribute.\n     */\n",
    "173806": "    /**\n     * Return this list as a <code>String</code>\n     */\n",
    "173807": "    /**\n     * This returns the URI mapped to this <code>Attribute</code>'s\n     * prefix. If no mapping is found, an empty <code>String</code> is\n     * returned.\n     *\n     * @return <code>String</code> - namespace URI for this <code>Attribute</code>.\n     */\n",
    "173808": "    /**\n     * Transforms the given input nodes to a list of output nodes.\n     *\n     * @param  inputNodes          input nodes\n     * @return                     transformed output nodes\n     * @throws XSLTransformException       if there's a problem in the transformation\n     */\n",
    "173809": "  /**\n   * Sets the source document used by this TrAX source.\n   *\n   * @param  source   the JDOM document to use as source for the\n   *                  transformations\n   *\n   * @throws IllegalArgumentException   if <code>source</code> is\n   *                                    <code>null</code>.\n   *\n   * @see    #getDocument\n   */\n",
    "173810": "    /**\n     * Transforms the given document to an output document.\n     *\n     * @param  inputDoc            input document\n     * @return                     transformed output document\n     * @throws XSLTransformException       if there's a problem in the transformation\n     */\n",
    "173811": "    /**\n     * This will return this <code>Attribute</code>'s\n     * <code>{@link Namespace}</code>.\n     *\n     * @return <code>Namespace</code> - Namespace object for this <code>Attribute</code>\n     */\n",
    "173812": "  /**\n   * Returns the source document used by this TrAX source.\n   *\n   * @return the source document used by this TrAX source or\n   *         <code>null</code> if the source is a node list.\n   *\n   * @see    #setDocument\n   */\n",
    "173813": "  /**\n   * Sets the object(s) produced as result of an XSL Transformation.\n   * <p>\n   * <strong>Note</strong>: This method shall be used by the\n   * {@link javax.xml.transform.Transformer} implementations that\n   * natively support JDOM to directly set the transformation\n   * result rather than considering this object as a\n   * {@link SAXResult}.  Applications should <i>not</i> use this\n   * method.</p>\n   *\n   * @param  result   the result of a transformation as a\n   *                  {@link java.util.List list} of JDOM nodes\n   *                  (Elements, Texts, Comments, PIs...).\n   *\n   * @see    #getResult\n   */\n",
    "173814": "  /**\n   * Sets the source node list used by this TrAX source.\n   *\n   * @param  source   the JDOM nodes to use as source for the\n   *                  transformations\n   *\n   * @throws IllegalArgumentException   if <code>source</code> is\n   *                                    <code>null</code>.\n   *\n   * @see    #getNodes\n   */\n",
    "173815": "    /**\n     * This sets this <code>Attribute</code>'s <code>{@link Namespace}</code>.\n     * If the provided namespace is null, the attribute will have no namespace.\n     * The namespace must have a prefix.\n     *\n     * @param namespace the new namespace\n     * @return <code>Element</code> - the element modified.\n     * @throws IllegalNameException if the new namespace is the default\n     *         namespace. Attributes cannot be in a default namespace.\n     */\n",
    "173816": "  /**\n   * Returns the source node list used by this TrAX source.\n   *\n   * @return the source node list used by this TrAX source or\n   *         <code>null</code> if the source is a JDOM document.\n   *\n   * @see    #setDocument\n   */\n",
    "173817": "  /**\n   * Returns the result of an XSL Transformation as a list of JDOM\n   * nodes.\n   * <p>\n   * If the result of the transformation is a JDOM document,\n   * this method converts it into a list of JDOM nodes; any\n   * subsequent call to {@link #getDocument} will return\n   * <code>null</code>.</p>\n   *\n   * @return the transformation result as a (possibly empty) list of\n   *         JDOM nodes (Elements, Texts, Comments, PIs...).\n   */\n",
    "173821": "  /**\n   * Sets the document produced as result of an XSL Transformation.\n   * <p>\n   * <strong>Note</strong>: This method shall be used by the\n   * {@link javax.xml.transform.Transformer} implementations that\n   * natively support JDOM to directly set the transformation\n   * result rather than considering this object as a\n   * {@link SAXResult}.  Applications should <i>not</i> use this\n   * method.</p>\n   *\n   * @param  document   the JDOM document result of a transformation.\n   *\n   * @see    #setResult\n   * @see    #getDocument\n   */\n",
    "173823": "    /**\n     * This will set the value of the <code>Attribute</code>.\n     *\n     * @param value <code>String</code> value for the attribute.\n     * @return <code>Attribute</code> - this Attribute modified.\n     * @throws IllegalDataException if the given attribute value is\n     *         illegal character data (as determined by\n     *         {@link org.jdom.Verifier#checkCharacterData}).\n     */\n",
    "173824": "  /**\n   * Returns the XMLReader to be used for the Source.\n   * <p>\n   * This implementation returns a specific XMLReader reading\n   * the XML data from the source JDOM document.\n   * </p>\n   *\n   * @return an XMLReader reading the XML data from the source\n   *         JDOM document.\n   */\n",
    "173825": "  /**\n   * Returns the result of an XSL Transformation as a JDOM document.\n   * <p>\n   * If the result of the transformation is a list of nodes,\n   * this method attempts to convert it into a JDOM document. If\n   * successful, any subsequent call to {@link #getResult} will\n   * return an empty list.</p>\n   * <p>\n   * <strong>Warning</strong>: The XSLT 1.0 specification states that\n   * the output of an XSL transformation is not a well-formed XML\n   * document but a list of nodes. Applications should thus use\n   * {@link #getResult} instead of this method or at least expect\n   * <code>null</code> documents to be returned.\n   *\n   * @return the transformation result as a JDOM document or\n   *         <code>null</code> if the result of the transformation\n   *         can not be converted into a well-formed document.\n   *\n   * @see    #getResult\n   */\n",
    "173827": "    /**\n     * This will return the actual declared type of this\n     * <code>Attribute</code>.\n     *\n     * @return <code>int</code> - type for this attribute.\n     */\n",
    "173828": "  /**\n   * Sets a custom JDOMFactory to use when building the\n   * transformation result. Use a custom factory to build the tree\n   * with your own subclasses of the JDOM classes.\n   *\n   * @param  factory   the custom <code>JDOMFactory</code> to use or\n   *                   <code>null</code> to use the default JDOM\n   *                   classes.\n   *\n   * @see    #getFactory\n   */\n",
    "173830": "    /**\n     * This will set the type of the <code>Attribute</code>.\n     *\n     * @param type <code>int</code> type for the attribute.\n     * @return <code>Attribute</code> - this Attribute modified.\n     * @throws IllegalDataException if the given attribute type is\n     *         not one of the supported types.\n     */\n",
    "173831": "  /**\n   * Returns the custom JDOMFactory used to build the transformation\n   * result.\n   *\n   * @return the custom <code>JDOMFactory</code> used to build the\n   *         transformation result or <code>null</code> if the\n   *         default JDOM classes are being used.\n   *\n   * @see    #setFactory\n   */\n",
    "173832": "    /**\n     * Gets the character stream for this input source.\n     * <p>\n     * Note that this method is only provided to make this\n     * InputSource implementation acceptable by any XML\n     * parser.  As it generates an in-memory string representation\n     * of the JDOM document, it is quite inefficient from both\n     * speed and memory consumption points of view.\n     * </p>\n     *\n     * @return a Reader to a string representation of the\n     *         source JDOM document.\n     */\n",
    "173833": "    /**\n     * Parses an XML document from a system identifier (URI).\n     * <p>\n     * This implementation does not support reading XML data from\n     * system identifiers, only from JDOM documents.  Hence,\n     * this method always throws a {@link SAXNotSupportedException}.\n     * </p>\n     *\n     * @param  systemId   the system identifier (URI).\n     *\n     * @throws SAXNotSupportedException   always!\n     */\n",
    "173834": "  /**\n   * Checks whether a transformation result has been set and, if not,\n   * retrieves the result tree being built by the document builder.\n   */\n",
    "173835": "    /**\n     * This returns a <code>String</code> representation of the\n     * <code>Attribute</code>, suitable for debugging.\n     *\n     * @return <code>String</code> - information about the\n     *         <code>Attribute</code>\n     */\n",
    "173836": "    /**\n     * Parses an XML document.\n     * <p>\n     * The methods accepts only <code>JDOMInputSource</code>s\n     * instances as input sources.\n     * </p>\n     *\n     * @param  input   the input source for the top-level of the\n     *                  XML document.\n     *\n     * @throws SAXException               any SAX exception,\n     *                                    possibly wrapping\n     *                                    another exception.\n     * @throws SAXNotSupportedException   if the input source does\n     *                                    not wrap a JDOM document.\n     */\n",
    "173838": "    /**\n     * This will return a clone of this <code>Attribute</code>.\n     *\n     * @return <code>Object</code> - clone of this <code>Attribute</code>.\n     */\n",
    "173839": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173841": "    /**\n     * This gets the value of the attribute, in\n     * <code>int</code> form, and if no conversion\n     * can occur, throws a\n     * <code>{@link DataConversionException}</code>\n     *\n     * @return <code>int</code> value of attribute.\n     * @throws DataConversionException when conversion fails.\n     */\n",
    "173842": "    /**\n     * Sets the new format logic for the outputter.  Note the Format\n     * object is cloned internally before use.\n     *\n     * @param newFormat the format to use for output\n     */\n",
    "173843": "    /**\n     * Returns the result of an XSL Transformation.\n     *\n     * @return the transformation result as a (possibly empty) list of\n     *         JDOM nodes (Elements, Texts, Comments, PIs...).\n     */\n",
    "173844": "    /**\n     * This gets the value of the attribute, in\n     * <code>long</code> form, and if no conversion\n     * can occur, throws a\n     * <code>{@link DataConversionException}</code>\n     *\n     * @return <code>long</code> value of attribute.\n     * @throws DataConversionException when conversion fails.\n     */\n",
    "173845": "    /**\n     * Returns the content of a JDOM Element detached from it.\n     *\n     * @param  elt   the element to get the content from.\n     *\n     * @return a (possibly empty) list of JDOM nodes, detached from\n     *         their parent.\n     */\n",
    "173846": "    /**\n     * This gets the value of the attribute, in\n     * <code>float</code> form, and if no conversion\n     * can occur, throws a\n     * <code>{@link DataConversionException}</code>\n     *\n     * @return <code>float</code> value of attribute.\n     * @throws DataConversionException when conversion fails.\n     */\n",
    "173847": "    /**\n     * Returns the current format in use by the outputter.  Note the \n     * Format object returned is a clone of the one used internally.\n     */\n",
    "173848": "    /**\n     * Returns the result of an XSL Transformation.\n     *\n     * @return the transformation result as a (possibly empty) list of\n     *         JDOM nodes (Elements, Texts, Comments, PIs...) or\n     *         <code>null</code> if no new transformation occurred\n     *         since the result of the previous one was returned.\n     */\n",
    "173849": "    /**\n     * This gets the value of the attribute, in\n     * <code>double</code> form, and if no conversion\n     * can occur, throws a\n     * <code>{@link DataConversionException}</code>\n     *\n     * @return <code>double</code> value of attribute.\n     * @throws DataConversionException when conversion fails.\n     */\n",
    "173850": "    /**\n     * Ensures the specific preconditions of the said instruction.\n     */\n",
    "173853": "    /**\n     * This gets the effective boolean value of the attribute, or throws a\n     * <code>{@link DataConversionException}</code> if a conversion can't be\n     * performed.  True values are: \"true\", \"on\", \"1\", and \"yes\".  False\n     * values are: \"false\", \"off\", \"0\", and \"no\".  Values are trimmed before\n     * comparison.  Values other than those listed here throw the exception.\n     *\n     * @return <code>boolean</code> value of attribute.\n     * @throws DataConversionException when conversion fails.\n     */\n",
    "173854": "    /**\n     * <i>[SAX ContentHandler interface support]</i> Processes a\n     * start of document event.\n     * <p>\n     * This implementation creates a new JDOM document builder and\n     * marks the current result as \"under construction\".</p>\n     *\n     * @throws SAXException   if any error occurred while creating\n     *                        the document builder.\n     */\n",
    "173860": "    /**\n     * This will add a new <code>{@link Namespace}</code>\n     * to those currently available.\n     * \n     * @param ns <code>Namespace</code> to add.\n     */\n"
}
