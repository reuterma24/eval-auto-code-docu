{
    "321": "\t/**\n\t * Returns the pushes lowerbound of this board position.\n\t * \n\t * @return the pushes lowerbound\n\t */\n",
    "323": "\t/**\n\t * Sets the pushes lowerbound of this board position.\n\t * \n\t * @param pushesLowerbound\n\t */\n",
    "324": "\t\t/**\n\t\t * Play a sound.\n\t\t */\n",
    "343": "\t/**\n\t * Returns the influence value between the positions of the passed boxes.\n\t * <p>\n\t * The LOWER the influence value the more influence has the box on the other box.\n\t * \n\t * @param boxNo1  the position of the first  box whose position is considered\n\t * @param boxNo2  the position of the second box whose position is considered\n\t * @return the influence value \n\t */\n",
    "351": "\t/**\n\t * Sets the box positions and the player position.\n\t *     \n\t * @param positions positions of the boxes and the player\n\t */\n",
    "352": "\t/**\n\t * Returns the player position of this board position.\n\t * \n\t * @return the player position\n\t */\n",
    "355": "\t/**\n\t * Returns the number of the moved box.\n\t * \n\t * @return the number of the moved box\n\t */\n",
    "357": "\t/**\n\t * Returns the start position of the pulled box.\n\t * \n\t * @return the position of the box before it was pulled.\n\t */\n",
    "359": "\t/**\n\t * Returns the target position of the pulled box.\n\t * \n\t * @return the position of the box after it was pulled.\n\t */\n",
    "361": "    /**\n     * Returns the preceding board position of this board position.\n     *\n     * @return the preceding board position of this board position\n     */\n",
    "364": "\t/**\n\t * Compares both board positions. Note: lower values means high priority\n\t * in the <code>PriorityQueue</code>.\n\t */\n",
    "373": "\t/**\n\t * Returns whether the push is a forced push, that means a box \n\t * must be pushed from the start position to the target position.\n\t */\n",
    "376": "\t/**\n\t * Sets the status bar text.\n\t * \n\t * @param text\n\t *            the text to be shown in the status bar\n\t */\n",
    "412": "\t/**\n\t * Returns whether the solver has been stopped due to insufficient memory.\n\t * \n\t * @return <code>true</code> if the solver stopped due to insufficient memory, and\n\t *        <code>false</code> otherwise\n\t */\n",
    "428": "\t/**\n\t * Returns the board position with the shortest determined solution path length.\n\t *\n     * @return board position with the shortest determined solution path length.\n     */\n",
    "437": "\t/**\n\t * Returns the preceding board position of this board position.\n\t * \n\t * @return preceding board position\n\t */\n",
    "440": "\t/**\n\t * Returns the direction the box has been pushed.\n\t * \n\t * @return Direction of the push\n\t */\n",
    "442": "\t/**\n\t * Returns the number of the pushed box.\n\t * \n\t * @return Number of the pushed box\n\t */\n",
    "445": "\t/**\n\t * Gives the name of this solver as used to tag new solutions.\n\t * @return the name of this solver\n\t */\n",
    "446": "\t/**\n\t * Return the player position of this board position.\n\t * \n\t * @return the player position\n\t */\n",
    "448": "\t/**\n\t * Sets the box- and the player positions.\n\t *     \n\t * @param positions Positions of the boxes and the player\n\t */\n",
    "450": "\t/**\n\t * An absolute board position usually hasn't a preceding board position. This method is\n\t * implemented for easier working with linked lists.\n\t *\n\t * @return always null\n\t */\n",
    "454": "\t/**\n\t * Sets the searchdirection of the solutionsearch this class is created in.\n\t * \n\t * @param searchDirection Direction of the search\n\t */\n",
    "458": "\t/**\n\t * For avoiding some casts this method is implemented here. Actually, this method\n\t * is only needed for relative board positions.\n\t *\n\t * @return always 0\n\t */\n",
    "459": "\t/** \n\t * Returns the number of pushes of this board position.\n\t * \n\t * @return number of pushes\n\t */\n",
    "461": "\t/**\n\t * Absolute board positions are only created when no box has been pushed. This value is interpreted \n\t * during a search for a solution (no box has been pushed so no tunnel check has to be performed).\n\t *\n\t * @return always <code>NO_BOX_PUSHED</code>\n\t */\n",
    "463": "\t/**\n\t * Sets the maximum solution length. \n\t * This is a value representing the iteration depth during the search for a solution.\n\t * (first all board positions are created that have a maximum solution length of x pushes.\n\t * Then all board positions are created with a maximum solution length of x+1, ...\n\t *  \n\t * @param maximumSolutionLength\tthe maximum solution length to be set\n\t */\n",
    "464": "\t/**\n\t * Return the player position of this board position.\n\t * \n\t * @return the player position\n\t */\n",
    "466": "\t/**\n\t * Returns the maximum solution length (= iteration depth).\n\t * \n\t * @return\tthe maximum solution length stored in this board position\n\t */\n",
    "467": "\t/**\n\t * Returns the number of pushes that were made to reach this board position.\n\t * An absolute board position is only created at the beginning, so this is\n\t * always 0.\n\t * This number is used in the solving methods.\n\t * \n\t * @return always 0\n\t */\n",
    "472": "\t/**\n\t * Returns a string to be attached to a solution, which says that this\n\t * solver did create the solution at the passed point in time.\n\t * \n\t * @param date the creation time point, or <code>null</code> for \"now\"\n\t * @return string identifying the solver as solution creator\n\t * @see Solution#name\n\t */\n",
    "476": "\t/**\n\t * Sets the number of moves.\n\t * \n\t * @param movesCount\tNumber of moves the player has done\n\t */\n",
    "487": "\t/**\n\t * Returns the index in the packing sequence that has already been reached.\n\t * \n\t * @return index in the packing sequence\n\t */\n",
    "489": "\t/**\n\t * Sets the index in the packing sequence that has been reached.\n\t * \n\t * @param indexPackingSequence the index in the packing sequence\n\t */\n",
    "494": "\t/**\n\t * Returns, whether a box is inactive, and therefore a position value 0\n\t * has to be assumed.\n\t *\n\t * @param  boxNo number of the box to be checked for being inactive\n\t * @return <code>true</code> if the box is inactive, and\n\t * \t\t  <code>false</code> if the box is active\n\t */\n",
    "496": "\t/**\n\t *  Returns whether the pushed box has been inactive.\n\t *\n\t * @return <code>true</code> the box is inactive\n\t * \t\t\t<code>false</code> the box is active\n\t */\n",
    "497": "\t/**\n\t * Mark this board position to be a deadlock.\n\t */\n",
    "498": "\t/**\n\t * Mark this board position not to be a deadlock.\n\t * <p>\n\t * Attention: this board position is only for the current\n\t * investigated corral assumed not to be a deadlock.\n\t * Nevertheless it can be a deadlock, because not all\n\t * deadlocks are detected.\n\t */\n",
    "499": "\t\t/**\n\t\t * Retrieves the current value of the debug variable\n\t\t * described by this object, by using reflection.\n\t\t * \n\t\t * @return current value of the described debug variable\n\t\t */\n",
    "500": "\t/**\n\t * Returns a string to be attached to a solution, which says that this\n\t * solver did create the solution \"now\".\n\t * \n\t * @return string identifying the solver as solution creator\n\t * @see Solution#name\n\t */\n",
    "501": "\t/**\n\t * Sets the number of the corral this board position belongs to.\n\t * \n\t * @param corralNo the number of the corral\n\t */\n",
    "503": "\t/**\n\t * Sets the status bar text.\n\t * \n\t * @param text\n\t *            the text to be shown in the status bar\n\t */\n",
    "504": "\t/**\n\t * Returns the number of the corral this board position belongs to.\n\t * \n\t * @return the number of the corral\n\t */\n",
    "506": "\t/**\n\t * Returns whether this board position has been proven to be a corral deadlock.\n\t * \n\t * @return <code>true</code> if this board position is a corral deadlock, and\n\t * \t     <code>false</code> if this board position has not been proven to be a deadlock\n\t */\n",
    "507": "\t/**\n\t * Returns whether this board position is classified not to be a corral deadlock.\n\t * <p>\n\t * This board position can be a corral deadlock, anyhow. For example the corral\n\t * detection could be aborted due to a reached time limit. Nevertheless it would\n\t * be classified as not to be a corral deadlock.\n\t * \n\t * @return <code>true</code> this board position has been classified not to be a corral deadlock\n\t * \t\t  <code>false</code> otherwise\n\t */\n",
    "508": "\t/**\n\t * Returns whether this board position has been classified (deadlock or no deadlock).\n\t * <p>\n\t * This method returns the same value as <code>!isBeeingAnalyzed()</code>\n\t * \n\t * @return <code>true</code> this board position has been classified.\n\t * \t\t<code>false</code> this board position has not been classified yet.\n\t */\n",
    "510": "\t/**\n\t * Returns whether is currently beeing analyzed to be a corral deadlock or not.\n\t * <p>\n\t * Every corral (= board position) not classified counts as \"beeingAnalyzed\". Due to every\n\t * board position occured during the corral detection getting a corral number - even if it\n\t * isn't a corral at all - finally there can be board positions still having the status\n\t * \"isBeeingAnalyzed\".\n\t * \n\t * @return <code>true</code> if the deadlock status of this board position\n\t *                           is currently beeing analyzed, and\n\t * \t\t  <code>false</code> otherwise\n\t */\n",
    "513": "\t/**\n\t * Returns a deep clone of the current board.\n\t * \n\t * @return the clone of this board\n\t */\n",
    "514": "\t\t/**\n\t\t * Sets the value of the debug variable described by this object\n\t\t * by using reflection.\n\t\t * \n\t\t * @param value  to be assigned to the described debug variable\n\t\t */\n",
    "517": "\t/**\n\t * Returns whether the two box configurations are equal.\n\t * \n\t * @param boxConfigurationNumber logical index into our flat data array\n\t * @param boxConfiguration the candidate box configuration to compare with\n\t * @return <code>true</code> if both box configurations are equal, and<br>\n\t *        <code>false</code> otherwise\n\t */\n",
    "523": "\t/**\n\t * Returns the maximal capacity of this storage.\n\t * \n\t * @return the maximal capacity of this storage\n\t */\n",
    "524": "\t/**\n\t * Adds data to the queue.\n\t * \n\t * @param boardPositionIndex the board position to be added\n\t * @param boardPositionPredecessor the predecessor to be added\n\t */\n",
    "531": "\t/**\n\t * Logically removes all board positions from the queue\n\t * until a board position different to the passed one occurs in the queue.\n\t * \n\t * @param boardPosition the board position to be over jumped\n\t */\n",
    "535": "\t/**\n\t * Retrieves and removes the last board position of this queue.\n\t * \n\t * @return the previous board position\n\t */\n",
    "538": "\t/**\n\t * Jumps backwards in the queue by the passed number of board positions.\n\t * \n\t * @param jumpCount number of board positions to be skipped backwards\n\t */\n",
    "542": "\t/**\n\t * Returns whether the queue is empty.\n\t * \n\t * @return <code>true</code> when queue is empty, and<br>\n\t *        <code>false</code> otherwise\n\t */\n",
    "547": "\t/**\n\t * Returns whether all box configurations could be generated. \n\t * \n\t * @return <code>true</code> if all box configurations have been generated,\n\t * \t      <code>false</code> if there is insufficient memory available,\n\t *        and not all box configurations have been generated.\n\t */\n",
    "551": "\t/**\n\t * Every object of this class gets passed a pushes depth. This depth holds\n\t * the number of pushes needed to reach the box configuration passed\n\t * to the constructor. This value is unique because there is only one\n\t * generation Runnable for every box configuration of the solution\n\t * to be optimized. By reading this value the optimizer can identify\n\t * each object of this class.\n\t * \n\t * @return the pushes depth that has been passed to the constructor of this object\n\t */\n",
    "561": "\t/**\n\t * Determine, whether this solution is better than the passed solution,\n\t * with respect to moves and then pushes.\n\t * \n\t * @param other the other solution we compare against\n\t * @return whether this solution is better\n\t */\n",
    "563": "\t/**\n\t * Determine, whether this solution is better than the passed solution,\n\t * with respect to pushes and then moves.\n\t * \n\t * @param other the other solution we compare against\n\t * @return whether this solution is better\n\t */\n",
    "568": "\t/**\n\t * Adds the specified board position into this priority queue.\n\t */\n",
    "570": "\t/**\n\t * Returns the number of stored <code>OptimizerBoardPositions</code>.\n\t * \n\t * @return the number of stored <code>OptimizerBoardPositions</code>\n\t */\n",
    "572": "\t/**\n\t * Removes and returns the board position having the lowest metrics (moves, pushes, ...).\n\t * \n\t * @return  board position having the lowest metrics \n\t */\n",
    "576": "\t/**\n\t * Adds the passed <code>String</code> to the log texts of the optimizer\n\t * to inform the user about the progress of the optimizer,\n\t * or to inform the developer about statistical data.\n\t * \n\t * @param text       text to be added to the log\n\t * @param stylename  registered name of style to be used\n\t */\n",
    "577": "\t /**\n\t  *Inserts the passed board position at the passed position.\n\t  * <p>\n\t  * This method moves the passed board position down until \n\t  * it is less than or equal to its children (or is a leaf).\n\t  *\n\t  * @param position the position to start the search for the correct position to insert into\n\t  * @param boardPosition the board position to be inserted\n\t  */\n",
    "580": "\t/**\n\t * Returns the number of board positions stored in this hash table.\n\t *\n\t * @return  the number of board positions stored in this hash table.\n\t */\n",
    "601": "\t/**\n\t * Removes all markings of squares.  \n\t */\n",
    "608": "\t/**\n\t * Debug method: without {@link Settings#isDebugModeActivated} nothing\n\t * visible happens.\n\t * In debug mode we print the current statistics to the optimizer logging.\n\t */\n",
    "610": "\t/**\n\t * Returns the box configuration index of the passed board position.\n\t * \n\t * @param boardPositionIndex  the index of the board position\n\t * @return the index the box configuration is stored at in the box configuration storage\n\t */\n",
    "613": "\t/**\n\t * Returns whether the second passed box configuration is a subset\n\t * of the first passed box configuration.\n\t * \n\t * @param boxConfiguration1\n\t *            box configuration 1\n\t * @param boxConfigurationArray\n\t *            array which contains the box configuration to be checked for\n\t *            being a subset\n\t * @param indexInArray\n\t *            index of the box configuration in the array\n\t * \n\t * @return <code>true</code> if the second passed box configuration is a subset\n\t *         of the first passed box configuration, and <code>false</code> otherwise\n\t */\n",
    "617": "\t/**\n\t * Returns the player position of the passed board position.\n\t * \n\t * @param boardPositionIndex  the index of the board position\n\t * @return the player position of the passed board position\n\t */\n",
    "619": "\t\t/**\n\t\t * Doubles the tree size.\n\t\t */\n",
    "626": "\t\t/**\n\t\t * Fills the sorted list with the box configurations from the tree.\n\t\t * \n\t\t * @param indexInTree index of the box configuration in the tree\n\t\t * @param last\t\n\t\t * @return \"lowest\" boxConfiguration at the moment in the tree\n\t\t */\n",
    "637": "\t/**\n\t * Returns the number of the currently selected object.\n\t * \n\t * @return number of the currently selected obj\n\t */\n",
    "638": "\t\t/**\n\t\t * Transforms the tree to a binary heap.\n\t\t * This method destroys the tree. That means:\n\t\t * only the binary heap can be used after this method has been called.\n\t\t */\n",
    "641": "\t/**\n\t * Using the mouse wheel is interpreted as a move through the selectable objects. \n\t *\n\t * @param evt the <code>MouseWheelEvent</code> fired\n\t */\n",
    "643": "\t/**\n\t * Sets the \"is already processed\" status of the passed board position.\n\t * \n\t * @param boardPositionIndex  index of the board position in this storage\n\t * @param processedStatus processed status to set\n\t */\n",
    "648": "    /**\n\t * This method is called when the user selects another view.\n\t */\n",
    "651": "\t\t/**\n\t\t * Sets all variables to null for the garbage collection.\n\t\t */\n",
    "653": "    /**\n\t * This method is called when the user selects another view.\n\t */\n",
    "656": "\t/**\n\t * Creates all things this panel needs.\n\t */\n",
    "663": "\t/**\n\t * Use the current value of the check box to enable or disable\n\t * the text field and label components.\n\t */\n",
    "666": "\t/**\n\t * Returns the value of the input field as double.\n\t * \n\t * @return the value of the input field, or {@code null}\n\t */\n",
    "669": "\t/**\n\t * Returns the value of the input field as integer.\n\t * \n\t * @return the value of the input field, or {@code null}\n\t */\n",
    "670": "\t/**\n\t * Convenience function: enters this object as the default table cell\n\t * renderer for type {@link java.util.Date}.\n\t * This is the expected usage for this class.\n\t * \n\t * @param table\n\t */\n",
    "672": "\t/**\n\t * Adds a level to be displayed\n\t * @param level level to be displayed\n\t */\n",
    "675": "\t/**\n\t * Returns whether the field is set \"active\".\n\t * \n\t * @return <code>true</code> if the field is active, and\n\t *        <code>false</code> otherwise\n\t */\n",
    "676": "\t/**\n\t * Adds a collection of levels to be displayed\n\t * @param collection collection of levels\n\t * @param startNumber index of the start level in the collection\n\t * @param endNumber index of the end level in the collection\n\t */\n",
    "677": "\t/**\n\t * Sets a new value for the display field.<br>\n\t * If the value is higher than the maximum or lower than the minimum,\n\t * the maximum or minimum value is used, respectively.\n\t * In any case the effectively used value is returned.\n\t * \n\t * @param value the value to be set\n\t * @return the set value\n\t */\n",
    "684": "\t/**\n\t * Method for closing the window after the ok-button has been clicked\n\t * \n\t * @param actionevent the action event to be analyzed\n\t */\n",
    "685": "\t/**\n\t * Informs all listeners using objects generated by the passed generator.\n\t * While calling the listener method for this notification this\n\t * ListenerSet object is not synchronized, any more.\n\t * Only the initial copying of the listener list is synchronized.\n\t * \n\t * @param eventgen generates the events to be passed to the listeners\n\t *                  ({@code null} is taken to generate {@code nulls})\n\t */\n",
    "687": "\t/**\n\t * Sets up the button for the \"start\" version.\n\t */\n",
    "688": "\t/**\n\t * Sets up the button for the \"stop\" version.\n\t */\n",
    "690": "\t/**\n\t * Sets up the button for the indicated version.\n\t * \n\t * @param forStart whether to set up for the \"start\" version\n\t */\n",
    "693": "\t/**\n\t * Partial setup regarding the border.\n\t * \n\t * @param forStart whether to set up for the \"start\" version\n\t */\n",
    "694": "\t/**\n\t * Partial setup regarding the background color.\n\t * \n\t * @param forStart whether to set up for the \"start\" version\n\t */\n",
    "696": "\t/**\n\t * Create the border for the indicated version.\n\t * Does <em>not</em> look at {@link #useBorder}.\n\t * \n\t * @param forStart whether to create it for the \"start\" version\n\t * @return         border for the indicated version\n\t */\n",
    "697": "\t/**\n\t * Creates and returns a border for the \"start\" version.\n\t * Does <em>not</em> look at {@link #useBorder}.\n\t * \n\t * @return border for a \"start\" version\n\t */\n",
    "699": "\t/**\n\t * Creates and returns a border for the \"stop\" version.\n\t * Does <em>not</em> look at {@link #useBorder}.\n\t * \n\t * @return border for a \"stop\" version\n\t */\n",
    "703": "\t/**\n\t * Does not have effect before the next {@link #setToStart()}\n\t * or {@link #setToStop()}.\n\t * @param useBorder the useBorder to set\n\t */\n",
    "706": "\t/**\n\t * Does not have effect before the next {@link #setToStart()}\n\t * or {@link #setToStop()}.\n\t * @param useBgColor the useBgColor to set\n\t */\n",
    "710": "\t/**\n\t * Does not have effect before the next {@link #setToStart()}.\n\t * @param borderColorStart the borderColorStart to set\n\t */\n",
    "715": "\t/**\n\t * Does not have effect before the next {@link #setToStop()}.\n\t * @param borderColorStop the borderColorStop to set\n\t */\n",
    "718": "\t/**\n\t * Does not have effect before the next {@link #setToStart()}.\n\t * @param bgColorStart the bgColorStart to set\n\t */\n",
    "721": "\t/**\n\t * Does not have effect before the next {@link #setToStop()}.\n\t * @param bgColorStop the bgColorStop to set\n\t */\n",
    "722": "\t/**\n\t * Computes and returns whether the rectangle given by the left upper corner\n\t * and both dimensions is completely outside the specified clip rectangle.\n\t * When the clip rectangle is missing, it is considered to be arbitrarily large.\n\t * \n\t * @param x    x of upper left corner\n\t * @param y    y of upper left corner\n\t * @param xlen width\n\t * @param ylen height\n\t * @param clip rectangle we compare against\n\t * @return whether (x,y,xlen,ylen) is completely outside of \"clip\"\n\t */\n",
    "741": "\t/**\n\t * Returns whether this shortcut has an alias.\n\t * \n\t * @return <code>true</code> if this shortcut has an alias,\n\t *        <code>false</code> otherwise\n\t */\n",
    "743": "\t/**\n\t * Returns the alias of this shortcut.\n\t * \n\t * @return the alias of this shortcut\n\t */\n",
    "746": "\t/**\n\t * Sets the alias of this shortcut.\n\t * \n\t * @param newAlias the new alias of this shortcut\n\t */\n",
    "747": "\t/**\n\t * Returns the path stored in this shortcut.\n\t * \n\t * @return the path\n\t */\n",
    "750": "\t/**\n\t * Returns the name of this shortcut.\n\t * <p>\n\t * If there is an alias this alias is returned. Otherwise the path is returned.\n\t * \n\t * @return the name of this shortcut\n\t */\n",
    "752": "\t/**\n\t * Returns formatted shortcut's name for display.\n\t *\n\t * @return the display name of this shortcut\n\t */\n",
    "753": "\t/**\n\t * Extracts the graphic specified by the passed name from the passed graphic\n\t * which contains all graphics of the skin.\n\t * <p>\n\t * This method is only used for reducing the lines of code when extracting\n\t * the graphics from the entire graphic containing all skin graphics.\n\t * This method assumes that the position of the graphic to be extracted\n\t * is stored in the settings as \"x, y\" coordinates.\n\t * \n\t * @param entireGraphic  skin graphic containing all skin graphics\n\t * @param graphicName  the name of the graphic to extract\n\t * @return the extracted <code>BufferedImage</code>\n\t */\n",
    "754": "\t/**\n\t * Returns the color of this shortcut.\n\t * \n\t * @return the color of this shortcut\n\t */\n",
    "755": "\t/**\n\t * Sets the color of this shortcut.\n\t * \n\t * @param color color to be set\n\t */\n",
    "756": "\t/**\n\t * Sets the board this GUI shows.\n\t * \n\t * @param board board to be shown\n\t */\n",
    "758": "\t/**\n\t * Returns the <code>String</code> representation of the shortcut's color.\n\t * \n\t * @return color of this shortcut as <code>String</code>\n\t */\n",
    "759": "\t/**\n\t * Extracts the graphic specified by the passed name from the passed graphic\n\t * which contains all graphics of the skin.\n\t * <p>\n\t * This method is only used for reducing the lines of code when extracting\n\t * the graphics from the entire graphic containing all skin graphics.\n\t * This method assumes that only the x-coordinate is relevant for locating\n\t * a sub graphic in the entire graphic. \n\t * \n\t * @param entireGraphic  skin graphic containing all skin graphics\n\t * @param graphicName  the name of the graphic to extract\n\t * @return the extracted <code>BufferedImage</code>\n\t */\n",
    "764": "\t/**\n\t * Erase any comments of the passed property string.\n\t * A comment starts at the first '#' (hash sign).\n\t * Also, blanks and tabs are trimmed from the (right) end of the result.\n\t * \n\t * @param propertyValue value of a property as a String\n\t * @return trimmed value\n\t */\n",
    "772": "\t/**\n\t * Returns the current transformation as String.\n\t * This String is saved into the file of the level as information.\n\t * Note: this string is NOT influenced by any language settings.\n\t * \n\t * @return the transformation as <code>String</code>\n\t * @see #newlevel()\n\t */\n",
    "774": "\t/**\n\t * This default generator implementation just returns the {@link #base}\n\t * object reference.\n\t * That probably works only for immutable types T.\n\t * <p>\n\t * Most implementations should override this method by something that\n\t * clones the {@link #base} or uses it as basis for a constructor.\n\t * E.g. ActionEvents are neither immutable nor do they support cloning.\n\t * \n\t * @return the next generated object\n\t */\n",
    "779": "\t/**\n\t * Creates a button for the tool bar.\n\t * \n\t * @param iconName\t\tthe name of the icon for the button\n\t * @param actionCommand the action command of the button\n\t * @param toolTipText \tthe tool tip text for the button\n\t * @return the created button\n\t * @see #createToolBarButtonByKey(String, String, String)\n\t */\n",
    "781": "\t/**\n\t * Returns the currently used skin.\n\t * \n\t * @return the <code>Skin</code> currently used\n\t */\n",
    "784": "\t/**\n\t * Returns the string corresponding to the passed property name.\n\t * \n\t * @param name name of property\t\n\t * @param defaultValue value to be set if the property value can't be set\n\t * @return value of the property as string or null, if no property is found\n\t */\n",
    "785": "\t/**\n\t * Creates a button for the tool bar.\n\t * \n\t * @param iconName       the name of the icon for the button\n\t * @param actionCommand  the action command of the button\n\t * @param toolTipTextKey the text key for the tool tip text for the button\n\t * @return the created button\n\t * @see #createToolBarButton(String, String, String)\n\t */\n",
    "787": "\t/**\n\t * Sets a new delay for the animations that are shown.\n\t * <p>\n\t * Depending on the skin there may be an animation for a selected box and\n\t * the selected player.\n\t * \n\t * @param delay\n\t *            the delay in milliseconds\n\t */\n",
    "793": "\t/**\n\t * Sets the view direction of the player to the passed direction.\n\t * <p>\n\t * The view direction is important for some skins in order to be able to\n\t * show the correct graphic.\n\t * \n\t * @param viewDirection\n\t *            the view direction of the player\n\t */\n",
    "800": "\t/**\n\t * Sets the maximum factor for scaling the graphics.\n\t * <p>\n\t * Some skins offer bad quality graphics which shouldn't be scaled too much.\n\t * Hence the user can set a maximum scaling factor. This way the graphics\n\t * aren't scaled beyond this factor even if there is enough space for the\n\t * graphics to be drawn.\n\t * \n\t * @param maximumScalingFactor\n\t *            the new factor to be set\n\t */\n",
    "805": "\t/**\n\t * Sets the flag that a recalculation has to be done.\n\t */\n",
    "806": "\t/**\n\t * Transforms the board (rotation and mirroring)\n\t * \n\t * @param transformationValue  kind of transformation\n\t */\n",
    "808": "\t/**\n\t * Sets the passed level as level to be displayed in this Panel.\n\t * \n\t * @param levelToBeDisplayed  the <code>Level</code> to be displayed\n\t */\n",
    "810": "\t/**\n\t * Sets the passed board to be displayed.\n\t * \n\t * @param boardAsString the board data as <code>String</code>\n\t */\n",
    "813": "\t/**\n\t * Sets the flag specifying whether the infobar is to be shown or not.\n\t * \n\t * @param visibleStatus\n\t *            visibility status of the infobar to set\n\t */\n",
    "814": "\t/**\n\t * Sets the passed board to be displayed.\n\t * \n\t * @param board the board to be displayed\n\t */\n",
    "816": "\t/**\n\t * Returns the <code>Board</code> displayed in this class.\n\t * \n\t * @return the <code>Board</code> of this class\n\t */\n",
    "819": "\t/**\n\t * Returns the <code>Level</code> displayed in this class\n\t * \n\t * @return the <code>Level</code> of this class\n\t */\n",
    "821": "\t/**\n\t * Returns the current width of a square from the current scaled skin.\n\t * @return width of a square\n\t */\n",
    "823": "\t/**\n\t * Returns the current height of a square from the current scaled skin.\n\t * @return height of a square\n\t */\n",
    "824": "\t/**\n\t * Sets the flag indication that the sizes must be recalculated.\n\t * If e.g. we switch into editor mode, we have less space for the board,\n\t * since we have to draw some objects for the editor.\n\t */\n",
    "827": "\t/**\n\t * Resets the <code>board</code> and the player position members\n\t * from the <code>boardInitial</code> member.\n\t */\n",
    "835": "\t/**\n\t * Repaints the GUI immediately.\n\t * This is the sledge-hammer method: everything is painted, again.\n\t */\n",
    "840": "\t/**\n\t * Packs the passed unpacked box configuration into a new packed box configuration.\n\t * \n\t * @param newPackedBoxConfiguration\n\t * @param unpackedBoxConfiguration\n\t */\n",
    "856": "\t/**\n\t * Marks the passed board position as visited.\n\t * \n\t * @param boardPositionIndex\n\t *            index of the board position in the visitedData array\n\t */\n",
    "863": "\t/**\n\t * Sets the cursor image to the specified cursor.\n\t * \n\t * @param cursor The value of the cursor to be set\n\t */\n",
    "865": "\t/**\n\t * If the coordinates of the point aren't located on the board\n\t * they are adjusted so they are on the edge of the board.\n\t * \n\t * @param p  <code>Point</code> containing the data which is adjusted\n\t */\n",
    "866": "\t/**\n\t * Repaints part of the GUI immediately.  Only a rectangle inside the board is\n\t * considered to be changed, specified in external board square coordinates.\n\t * But, the number of moves and pushes has also be considered to be changed,\n\t * which implies some more updates.\n\t * \n\t * @param xmin      upper left X of board square rectangle\n\t * @param ymin      upper left Y of board square rectangle\n\t * @param extWidth  width  of rectangle in board squares\n\t * @param extHeight height of rectangle in board squares\n\t */\n",
    "870": "\t/**\n\t * Returns the influence distance between the start and the target square.\n\t * The higher the distance the less influence the target square has\n\t * on the start square.\n\t * \n\t * @param startSquare  position of the start square\n\t * @param targetSquare position of the target square\n\t * \n\t * @return influence distance from the start square to the target square\n\t */\n",
    "871": "\t/**\n\t * This method sets the currently set language in all menu bar\n\t * and tool bar components.\n\t */\n",
    "872": "\t/**\n\t * Returns whether the board position (box + player positions) is marked as\n\t * visited.\n\t * \n\t * @param boardPositionIndex\n\t *            index of the board position in the visitedData array\n\t * @return <code>true</code>board position has already been visited;\n\t *         <code>false</code>otherwise\n\t */\n",
    "874": "\t/**\n\t * Inserts a move of the player into the history.\n\t * \n\t * @param direction\tinto which the player moved\n\t */\n",
    "876": "\t\t/**\n\t\t * Set the collected values back to the initial values,\n\t\t * indicating an empty range.\n\t\t */\n",
    "877": "\t/**\n\t * Returns the next movement from the history,\n\t * and advances the \"current\" pointer to it.\n\t * \n\t * @return <code>null</code>, or the <code>HistoryElement</code> containing the data\n\t *         for the next movement of the history\n\t */\n",
    "878": "\t/**\n\t * Returns the previously executed movement from the history,\n\t * and moves back the \"current\" pointer before it.\n\t * \n\t * @return <code>null</code>, or the <code>HistoryElement</code> containing the data\n\t *         for the previously executed movement \n\t */\n",
    "881": "\t/**\n\t * Returns the movement with the given number.\n\t * \n\t * @param movementNo number of the movement to be returned\n\t * @return  <code>null</code>, or the <code>HistoryElement</code> of the movement\n\t *          with the given number\n\t */\n",
    "882": "\t/**\n\t * Returns the index of the last executed movement.\n\t * That is also the count of the player moves up to now/here. \n\t * \n\t * @return index of the last executed movement\n\t */\n",
    "883": "\t\t/**\n\t\t * Returns whether the collected area is empty.\n\t\t * \n\t\t * @return whether the area is empty\n\t\t */\n",
    "884": "\t/**\n\t * Returns the total count of the stored movements.\n\t * \n\t * @return total count of movements\n\t */\n",
    "885": "\t/**\n\t * Returns the (total) number of pushes contained in the history.\n\t * \n\t * @return number of pushes in the history\n\t */\n",
    "889": "\t/**\n\t * Returns the LURD string of all movements up to the current movement.\n\t * \n\t * @return LURD string till the current movement (inclusive)\n\t * @see #getLURDString(int, int)\n\t */\n",
    "890": "\t\t/**\n\t\t * Adds a point to the area, given by its components.\n\t\t * \n\t\t * @param x\n\t\t * @param y\n\t\t */\n",
    "891": "\t/**\n\t * Returns the complete LURD string of all movements, independent from the\n\t * current point inside of the history.\n\t * \n\t * @return LURD string till the end (inclusive)\n\t * @see #getLURDString(int, int)\n\t */\n",
    "893": "\t/**\n\t * Sets the history to the first movement.\n\t */\n",
    "895": "\t/**\n\t * Sets the \"current\" pointer to the specified index.\n\t * This changes to reference point for further \"undo\" and \"redo\" operations.\n\t * This is the way to quickly jump to an arbitrary point in the history.\n\t *\n\t * @param movementNo the movement number to be set\n\t */\n",
    "897": "\t/**\n\t * Sets the marker which indicates that the next movement will be the start\n\t * of a combined movement.\n\t */\n",
    "898": "\t\t/**\n\t\t * Collect another external position.\n\t\t * External positions are what is handled in the GUI, they reflect screen\n\t\t * positions after any transformation.\n\t\t * \n\t\t * @param externalPos <code>-1</code>. or external position to collect\n\t\t */\n",
    "900": "\t/**\n\t * Sets back the \"current\" pointer to the previous movement.\n\t * This operation is unchecked / unconditional.\n\t */\n",
    "903": "\t/**\n\t * Sets forward the \"current\" pointer to the next movement.\n\t * This operation is unchecked / unconditional.\n\t */\n",
    "904": "\t\t/**\n\t\t * Collect another internal position (from the model).\n\t\t * Before it is collected, it must be translated to an external position\n\t\t * according to the current transformation.\n\t\t * \n\t\t * @param internalPos <code>-1</code>. or internal position to collect\n\t\t */\n",
    "905": "\t/**\n\t * Returns whether there is a preceding movement.\n\t * \n\t * @return <code>true</code>, if there is a  preceding movement,<br>\n\t *   \t  <code>false</code>, if there is no preceding movement\n\t */\n",
    "908": "\t/**\n\t * Returns whether there is a successor movement.\n\t * \n\t * @return <code>true</code> if there is a  successor movement,<br>\n\t * \t\t  <code>false</code> if there is no successor movement\n\t */\n",
    "910": "\t/**\n\t * Repaints part of the GUI.\n\t * Just the number of moves and the number of pushes is considered changed.\n\t */\n",
    "911": "\t/**\n\t * Return the number of steps to the preceding element one can do,\n\t * until the first movement is reached, or one that is marked to be\n\t * the start of a combined movement.\n\t * \n\t * @return length of the last combined movement\n\t */\n",
    "913": "\t/**\n\t * Return the length of the next combined movement, i.e. how many steps\n\t * forward can we do until we find an element which is marked to be\n\t * the start of a combined movement (excluding the current element).\n\t * \n\t * @return length of the next combined movement\n\t */\n",
    "915": "\t/**\n\t * Starting with the current movement, count the number of combined\n\t * segments.  Even when the first (current) movement is not marked\n\t * to be the start of a combined movement, we count it as start\n\t * of such a segment.\n\t * \n\t * @return count of segments starting at current movement\n\t */\n",
    "918": "\t/**\n\t * Starting with the current movement we scan forward and compute the\n\t * average length of combined segments.\n\t * @return average length of movement segments starting at current movement\n\t */\n",
    "932": "\t/**\n\t * Returns if a box has been pushed.\n\t * \n\t * @return true = A box has been pushed, false = no box has been pushed\n\t */\n",
    "939": "\t/**\n\t * Returns the mouse listener for this class.\n\t * \n\t * @return the mouse listener\n\t */\n",
    "941": "\t/**\n\t * Sets whether the editor menu item is enabled.\n\t * @param enabled\n\t */\n",
    "948": "\t/**\n\t * Returns the menu item for saving a level.\n\t * \n\t * @return the <code>JMenuItem</code> for saving a level\n\t */\n",
    "954": "\t/**\n\t * Returns the button for showing info in the menu bar.\n\t * <p>\n\t * The caller can fully access this button.\n\t * \n\t * @return the <code>JMenuItem</code> for saving a level\n\t */\n",
    "960": "\t/**\n\t * Sets the objects enabled or disabled depending on the current mode\n\t * (play or editor mode). \n\t */\n",
    "966": "\t/**\n\t * Displays the passed board position for debug purposes.\n\t * \n\t * @param storage\n\t *            storage the box configuration is stored in\n\t * @param boardPositionIndex\n\t *            index of the board position in the visited data array\n\t * @param graphicOutput\n\t *            flag, indicating whether there should be a graphical display\n\t *            or not\n\t * @param waitForEnter\n\t *            flag, indicating whether the program has to wait for \"enter\"\n\t *            after displaying the box configuration\n\t */\n",
    "969": "\t/**\n\t * Sets a color for the passed <code>Solution</code> in this GUI.\n\t * <p>\n\t * If \"null\" is passed as color the solution is set back to the default color.\n\t * \n\t * @param solution the <code>Solution</code> to be colored\n\t * @param color the <code>Color</code>\n\t */\n",
    "971": "\t/**\n\t * Sets the status of the solver mode dependent objects.\n\t * \n\t * @param enabledStatus <code>true</code>, if the objects are enabled, and\n\t * \t\t\t\t\t\t<code>false</code> if the objects are disabled\n\t */\n",
    "972": "\t\t/**\n\t\t * Returns whether the the current solution type is a valid\n\t\t * and new solution.\n\t\t * @return <code>true</code> if the solution is a valid new solution,\n\t\t *   or<br><code>false</code> otherwise\n\t\t */\n",
    "973": "\t/**\n\t * Sets the background color for all solutions to the default color.\n\t */\n",
    "974": "\t/**\n\t * Makes a single row \"selected\".\n\t * When the passed view row index is negative (e.g. as result of a\n\t * failed conversion) the current selection remains unchanged.\n\t * \n\t * @param viewrowindex the view index of the row to be selected\n\t */\n",
    "976": "\t/**\n\t * Adds the passed {@code ActionListener} to the listeners being informed\n\t * when an action is fired. \n\t * \n\t * @param actionListener  the {@code ActionListener} to be added\n\t */\n",
    "979": "\t/**\n\t * Shows an information dialog with translated title \"note\" and the message text\n\t * for the text key \"solutionList.noSolutionSelected\".\n\t */\n",
    "980": "\t/**\n\t * Removes the passed {@code ActionListener} from the listeners of this object.\n\t * \n\t * @param actionListener  the {@code ActionListener} to be removed\n\t */\n",
    "982": "\t/**\n\t * Displays the passed board position for debug purposes.\n\t * \n\t * @param storage\n\t *            storage the box configuration is stored in\n\t * @param boxConfigurationIndex\n\t *            index of the box configurtaion in the visited data array\n\t * @param playerPosition\n\t * \t\t      position of the player in internal format\n\t * @param graphicOutput\n\t *            flag, indicating whether there should be a graphical display\n\t *            or not\n\t * @param waitForEnter\n\t *            flag, indicating whether the program has to wait for \"enter\"\n\t *            after displaying the box configuration\n\t */\n",
    "984": "\t/**\n\t * Sets the enabled status of the undo buttons.\n\t * \n\t * @param enabledStatus <code>true</code>, if the objects are enabled, and\n\t * \t\t\t\t\t\t<code>false</code> if the objects are disabled\n\t */\n",
    "985": "\t\t/**\n\t\t * Handles the mouse event \"mouseDragged\".\n\t\t * \n\t\t * @param evt  the event that has been fired\n\t\t */\n",
    "987": "\t/**\n\t * This is the kernel of {@link #informListeners(Solution, String)},\n\t * after that method has decided, in which thread we have to work.\n\t * @param solution\n\t * @param action\n\t */\n",
    "989": "\t/**\n\t * Informs all listeners about a change of the stored solutions.\n\t * <p>\n\t * The listeners must know which actions can be caught from this class\n\t * (this avoids an extra interface containing methods for the different actions).\n\t */\n",
    "993": "\t/**\n\t * Sets the visibility of the \"take solution as history\" menu item.\n\t * \n\t * @param isVisible <code>true</code> sets the \"take solution as history\" menu item visible\n\t * \t\t\t\t   <code>false</code> sets the \"take solution as history\" menu item invisible\n\t */\n",
    "996": "\t/**\n\t * Sets the enabled status of the redo buttons.\n\t * \n\t * @param enabledStatus <code>true</code> if the objects are enabled, and\n\t * \t\t\t\t\t   <code>false</code> if the objects are disabled\n\t */\n",
    "1000": "\t\t/**\n\t\t * Add the passed solution as solution to be highlighted.\n\t\t * \n\t\t * @param solution <code>Solution</code> to be highlighted\n\t\t */\n",
    "1002": "\t\t/**\n\t\t * Removes all solutions to be highlighted.\n\t\t */\n",
    "1006": "\t\t/**\n\t\t * Returns the intensity the passed solution is to be highlighted.\n\t\t *\n\t\t * @param solution the <code>Solution</code> whose highlight intensity is returned\n\t\t * @return the highlight intensity or null if the passed solution isn't to be highlighted\n\t\t */\n",
    "1014": "\t/**\n\t * This methods sets the enabled status of specific GUI elements.\n\t * <p>\n\t * If the current loaded level is invalid then some of the GUI elements\n\t * have to be disabled.\n\t * \n\t * @param enabledStatus  whether the GUI elements are to be enabled\n\t */\n",
    "1015": "\t/**\n\t * Tell whether we currently have a valid {@code lastChanged} data.\n\t * \n\t * @return whether the {@code lastChanged} data is valid\n\t */\n",
    "1025": "\t/**\n\t * Sets the debug menu visible or invisible.\n\t * \n\t * @param isToBeVisible <code>true</code>, if the debug menu shall be visible, and\n\t * \t\t\t\t\t\t<code>false</code> if the debug menu shall be invisible\n\t */\n",
    "1035": "\t/**\n\t * Returns the solutions view.\n\t * <p>\n\t * The solutions are shown in an own JPanel at the left of the main GUI.\n\t * \n\t * @return the <code>solutionsGUI</code> displaying the solutions\n\t */\n",
    "1041": "\t/**\n\t * Method used for the SQL commands CREATE, DROP, INSERT and UPDATE\n\t * \n\t * @param expression the SQL command to be executed\n\t */\n",
    "1046": "\t/**\n\t * Wait for the deadlock identification (detection) to be ready.\n\t * This must be done prior to generation of box configurations,\n\t * since the results of deadlock computation are used there\n\t * without any further checks.\n\t */\n",
    "1049": "\t/**\n\t * Saves the passed level using the passed file name.\n\t *\n\t * @param level the <code>Level</code> to save\n\t * @param fileName the file the level is to be saved to\n\t * @throws IOException thrown when the level couldn't be saved\n\t */\n",
    "1055": "\t/**\n\t * Returns the char code of the square at the specified location.\n\t *  \n\t * @param xPosition X coordinate of the square to return a char for\n\t * @param yPosition Y coordinate of the square to return a char for\n\t * @return\t\t\tchar code for the square, or a blank if the position is outside\n\t *                  the implemented part of the board\n\t */\n",
    "1066": "\t/**\n\t * Reload the data of this view from the database.\n\t */\n",
    "1071": "\t\t/**\n\t\t * Return the ID of the stored string.\n\t\t * \n\t\t * @return the ID\n\t\t */\n",
    "1092": "\t/**\n\t * Adds all author names to the author <code>ComboxBox</code>es.\n\t */\n",
    "1097": "\t/**\n     * Close this dialog and return to the caller of this dialog. \n     */\n",
    "1098": "    \t/**\n    \t * Called from the author view when the user has changed data\n    \t * for the authors that is relevant for the other views.\n    \t */\n",
    "1100": "    \t/**\n    \t * Called from collection view when the user has changed something\n    \t * that is relevant for the other views.\n    \t */\n",
    "1102": "    \t/**\n    \t * Called from level assignment view when the user has changed\n    \t * something that is relevant for the other views. \n    \t */\n",
    "1103": "    \t/**\n    \t * Called from level view when the user has changed something that is\n    \t * relevant for the other views.\n    \t */\n",
    "1107": "    \t/**\n    \t * After a view has been refreshed the data is up-to-date again.\n    \t * Hence all update flags for this view can be reset. \n    \t */\n",
    "1108": "    \t/**\n    \t * Marks the passed view for being refreshed because data have changed. \n    \t */\n",
    "1114": "\t/**\n\t * This method is called whenever the additional information of a selected\n\t * level has changed.\n\t * (For example, when a solution has been deleted)\n\t */\n",
    "1115": "\t/**\n\t * Returns the number of board positions in this hash table.\n\t *\n\t * @return  the number of board positions in this hash table.\n\t */\n",
    "1120": "\t/**\n\t * Clears the storage so that it contains no board positions anymore.\n\t */\n",
    "1123": "\t\t/**\n\t\t * Returns the stored board positions.\n\t\t * \n\t\t * @return\tthe board position that is stored in this entry.\n\t\t */\n",
    "1125": "\t/**\n\t * Returns the selected collection.\n\t * \n\t * @return the currently selected collection item\n\t */\n",
    "1127": "\t/** This class has 4 bytes per atom */\n",
    "1129": "\t/** Any multiple of 4 will do, 72 might be common */\n",
    "1135": "\t\t/**\n\t\t * This method should return, if it knows, the number of bytes\n\t\t * that will be decoded. Many formats such as uuencoding provide\n\t\t * this information. By default we return the maximum bytes that\n\t\t * could have been encoded on the line.\n\t\t */\n",
    "1138": "\t\t/**\n\t\t * This method does an actual decode. It takes the decoded bytes and\n\t\t * writes them to the OutputStream. The integer <i>l</i> tells the\n\t\t * method how many bytes are required. This is always <= bytesPerAtom().\n\t\t */\n",
    "1144": "\t\t/**\n\t\t * Alternate decode interface that takes a String containing the encoded\n\t\t * buffer and returns a byte array containing the data.\n\t\t * @exception CEFormatException An error has occurred while decoding\n\t\t */\n",
    "1146": "\t\t/**\n\t\t * Decode the contents of the inputstream into a buffer.\n\t\t */\n",
    "1150": "\t/**\n\t * Sets the basic delay step to be used, in milliseconds.\n\t * \n\t * @param msStep delay time in milliseconds\n\t */\n",
    "1152": "\t/**\n\t * Returns the current delay time in milliseconds.\n\t * \n\t * @return current delay time in milliseconds\n\t */\n",
    "1153": "\t/**\n\t * Sets the intended sequence length of delay steps.\n\t * Positive values are used to somewhat reduce the total time of the\n\t * sequence by reducing the effective single step delay time.\n\t * \n\t * @param len intended sequence length of delay steps\n\t */\n",
    "1155": "\t/**\n\t * Returns the current intended sequence length of delay steps.\n\t * @return the current intended sequence length of delay steps\n\t */\n",
    "1157": "\t/**\n\t * Construct and return a new object for the standard step delay\n\t * from the Settings.\n\t * \n\t * @return new standard <code>Delays</code> object\n\t */\n",
    "1158": "\t/**\n\t * Construct and return a new object for the standard step delay\n\t * from the Settings, and the indicated intended sequence length.\n\t * \n\t * @param seqLength intended length of the sequence\n\t * @return new standard <code>Delays</code> object\n\t */\n",
    "1159": "\t/**\n\t * Construct and return a new object for the undo/redo step delay\n\t * from the Settings, and the indicated intended sequence length.\n\t * \n\t * @return new undo/redo <code>Delays</code> object\n\t */\n",
    "1161": "\t/**\n\t * Handle save button action.\n\t */\n",
    "1162": "\t/**\n\t * Construct and return a new object for the undo/redo step delay\n\t * from the Settings, and the indicated intended sequence length.\n\t * \n\t * @param seqLength intended length of the sequence\n\t * @return new undo/redo <code>Delays</code> object\n\t */\n",
    "1163": "\t/**\n\t * Start the Delay object.  If not yet started, this determines and\n\t * remembers \"now\" as the base time stamp for the next (first) delay.\n\t */\n",
    "1164": "\t/**\n\t * Stops the Delay object.\n\t * This just invalidates the last remembered wall clock time.\n\t */\n",
    "1169": "\t/**\n\t * Based of the mathematical value from {@link #effStep(boolean)}\n\t * we compute a meaningful approximation,\n\t * and return an <code>int</code> value.\n\t * \n\t * @param slowstep whether this delay shall be extra large\n\t * @return integral approximation of current delay in milliseconds\n\t */\n",
    "1172": "\t\t\t/**\n\t\t\t * Starts a new backward search.\n\t\t\t */\n",
    "1173": "\t/**\n\t * The main method of this application.\n\t * <p>\n\t * \n\t * @param argv passed parameters\n\t */\n",
    "1174": "\t/**\n\t * We are going to wait somewhat to create an observable motion.\n\t * If the wait amount is zero, we do not even call {@link Thread#sleep(long)}.\n\t * \n\t * @param reassertIntr whether a possible <code>InterruptedException</code>\n\t *                      is to be reasserted (<em>not</em> rethrown).\n\t *                      Else it is ignored.\n\t */\n",
    "1177": "\t/**\n\t * Decrypts special character regions of the ascii code.\n\t * \n\t * @param c  <code>Character</code> to be decrypted\n\t * @param start minimum ascii value to be used for decrypting\n\t * @param end   maximum ascii value to be used for decrypting\n\t * @param offset  offset the character has to be shifted by\n\t * @return the decrypted <code>Character</code>\n\t */\n",
    "1179": "\t/**\n\t * Restores the last saved properties.\n\t * \n\t * @param evt\n\t */\n",
    "1183": "\t/**\n\t * Inform every listener about the change of the state.\n\t */\n",
    "1186": "\t/**\n\t * Adds the passed listener.\n\t * \n\t * @param listener  listener to be added\n\t */\n",
    "1188": "\t/**\n\t * Returns the value of the spinner as double.\n\t * \n\t * @return the value\n\t */\n",
    "1189": "\t/**\n\t * Returns the value of the spinner as integer.\n\t * \n\t * @return the value\n\t */\n",
    "1193": "\t/**\n\t * If the available memory (RAM) is less than this bound,\n\t * then we are going to remove the eldest entry whenever we add a new one,\n\t * i.e. we do not expand our memory foot print.\n\t * <p>\n\t * Negative values indicate \"no such limit exists\".\n\t * \n\t * @param minRAMinMiB the minRAMinMiB to set\n\t * @see Utilities#getMaxUsableRAMinMiB()\n\t */\n",
    "1194": "\t/**\n\t * Inside this method (we override it) we implement our deletion strategy.\n\t * Either we return {@code true}, indicating the caller shall delete\n\t * that eldest entry, but in that case we are not allowed to change\n\t * the object ourselves.\n\t * <p>\n\t * Or we decide to take our own steps, return {@code false} to hinder\n\t * the caller to take any action, but may have removed one or more\n\t * elements ourselves.\n\t * \n\t * @param eldest   the currently eldest element, deletion candidate\n\t * @return whether the caller shall really remove that eldest entry\n\t */\n",
    "1197": "\t/**\n\t * This is like {@link LinkedHashMap#get(Object)}, but forces the\n\t * correct type of the key.\n\t * \n\t * @param key the key for which we search the mapped value\n\t * @return the mapped value, or {@code null}.\n\t */\n",
    "1199": "\t/**\n\t * Adds a key/value pair to the cache mapping.\n\t * We expect the key to be new, but we do not enforce (or check) that,\n\t * since the typical cache user will first use {@link #getV(Object)},\n\t * anyhow.\n\t * \n\t * @param key   key of the new cache entry\n\t * @param value value of the new cache entry\n\t */\n",
    "1200": "\t/**\n\t * Trim down the memory usage to the currently needed amount.\n\t * This is a user hint, and we need not really take any action,\n\t * e.g. if the implementation does not know how to do that.\n\t * @see ArrayList#trimToSize()\n\t */\n",
    "1215": "\t/**\n\t * Creation of a box data clone.\n\t *\n\t *@return  the cloned box data object\n\t */\n",
    "1216": "\t/**\n\t * Define the initial location (position) of a box.\n\t *\n\t *@param boxNo       number of the box, the location of which is to be set\n\t *@param boxPosition position of the box\n\t */\n",
    "1218": "\t/**\n\t * Change the location (position) of a box.\n\t *\n\t *@param boxNo\t\t number of the box, the location of which is to be set\n\t *@param boxPosition new position of the box\n\t */\n",
    "1219": "\t/**\n\t * Set / change the position of all boxes at once.\n\t * The passed array often contains an additional player position\n\t * (at the end of the array).  We don't care much, the array is\n\t * just one larger than necessary.\n\t *\n\t *@param  newBoxPositions the new box positions to be set\n\t */\n",
    "1221": "\t/**\n\t * Activate a box.\n\t *\n\t *@param  boxNo number of the box that shall be activated\n\t */\n",
    "1223": "\t/**\n\t * Deactivate a box.\n\t * Implies {@link #removeBoxFromCorral(int)}.\n\t *\n\t *@param  boxNo number of the box that shall be set inactive\n\t */\n",
    "1224": "\t/**\n\t * Tell whether a box is active.\n\t *\n\t *@param  boxNo number of the box we want to investigate\n\t *@return state of the box: <code>true</code> = is active\n\t */\n",
    "1225": "\t/**\n\t * Tell whether a box is inactive.\n\t *\n\t *@param  boxNo number of the box we want to investigate\n\t *@return state of the box: <code>true</code> = is inactive\n\t */\n",
    "1226": "\t/**\n\t * Mark a specified box to be frozen.\n\t * <p>\n\t * Such a box can never again be moved (pushed), regardless all other\n\t * possible changes on the board... except for an \"undo\" action.\n\t * <p>\n\t * Only boxes on goals are to be marked as frozen, as otherwise\n\t * it would constitute a deadlock condition.\n\t *\n\t *@param  boxNo number of the box to be marked \"frozen\"\n\t */\n",
    "1227": "\t/**\n\t * Sets a new level for playing.\n\t * \n\t * @param levelNo\n\t *            number of the level to set (first is 1)\n\t */\n",
    "1228": "\t/**\n\t * Tell whether a box is frozen.\n\t * A box can be frozen on a goal, only, since otherwise it would be\n\t * a deadlock condition.\n\t *\n\t *@param  boxNo number of the box we want to investigate\n\t *@return       whether the box is frozen\n\t */\n",
    "1230": "\t/**\n\t * Mark a specified box to not be frozen, anymore\n\t * This method is used for \"undo\" (on a frozen box).\n\t *\n\t *@param  boxNo number of the box to be unmarked\n\t */\n",
    "1231": "\t/**\n\t * Mark a specified box to be part of a corral.\n\t *\n\t *@param  boxNo number of the box which is part of a corral\n\t */\n",
    "1232": "\t/**\n\t * Mark a specified box to not be part of any corral.\n\t *\n\t *@param  boxNo number of the box which is not part of any corral\n\t */\n",
    "1233": "\t/**\n\t * Tell whether a box is part of a corral.\n\t *\n\t *@param  boxNo number of the box we want to investigate\n\t *@return <code>true</code> = box is part of a corral\n\t */\n",
    "1234": "\t/**\n\t * Tell the location of a box by its number.\n\t *\n\t *@param  boxNo number of the box we want to investigate\n\t *@return       position (location) of the box\n\t */\n",
    "1236": "\t/**\n\t * Tells whether all our boxes are on some goal.\n\t *\n\t *@return <code>true</code> if all boxes are on a goal, and\n\t *       <code>false</code> if at least one box is on a non-goal\n\t */\n",
    "1237": "\t/**\n\t * Returns the number of boxes on a goal.\n\t * \n\t * @return number of boxes on a goal\n\t */\n",
    "1238": "\t/**\n\t * Returns whether all active boxes are located on a backward goal.\n\t * \n\t * @return <code>true</code> if all active boxes are on backward goals, and\n\t * <code>false</code> if at least one active box not on a backward goal.\n\t */\n",
    "1239": "\t/**\n\t * Tell whether all corral boxes are located on goals.\n\t *\n\t *@return <code>true</code> if all corral boxes are on goals, and\n\t *\t\t <code>false</code> if at least one corral box is on a non-goal\n\t */\n",
    "1242": "\t/**\n\t * Mark all boxes as not frozen.\n\t */\n",
    "1243": "\t/**\n\t * Tell the overall size of the large index byte array.\n\t * Corresponds to the member of same name of array objects.\n\t * @return size of the array\n\t */\n",
    "1244": "\t/**\n\t * Reads the element value at the passed large index.\n\t * Models the array read access.\n\t * \n\t * @param lax large index of the array member\n\t * @return value of the array member at the index {@code lax}\n\t */\n",
    "1246": "\t/**\n\t * Writes an element value at the passed large index.\n\t * \n\t * @param lax large index of the array member\n\t * @param val the value to store\n\t * @return the just stored value\n\t */\n",
    "1248": "\t/**\n\t * Modifies the byte at the specified large array index\n\t * by \"oring in\" the passed byte value.\n\t * Models the operation {@code (arr[lax] |= val)}.\n\t * \n\t * @param lax large index of the array member to modify\n\t * @param val the value to \"or in\"\n\t * @return the resulting (stored) byte value\n\t */\n",
    "1253": "\t/**\n\t * Fetch a bit sized fragment of a {@code long} from a contiguous series\n\t * of bits from this \"array\".\n\t * The result is presented in unsigned interpretation (except the\n\t * {@code bitcnt} is 64).\n\t * \n\t * @param bitlax index of the first bit (not byte) to fetch\n\t * @param totbits number of bits to fetch (at most 64)\n\t * @return the indicated bits as unsigned value\n\t */\n",
    "1257": "\t/**\n\t * Shows dialog which informs about missing file.\n\t * <p>\n\t * If error is critical (it is when <code>messageType</code> equals\n\t * <code>JOptionPane.ERROR_MESSAGE</code> then application is closed.\n\t *\n\t * @param filePath\tpath of the missing file\n\t * @param messageType\t<code>JOptionPane.WARNING_MESSAGE</code> if missing file is non-critical;\n\t *\t\t\t\t\t\t<code>JOptionPane.ERROR_MESSAGE</code> if missing file is critical\n\t */\n",
    "1258": "\t/**\n\t * Tells, whether the SparseArray does not contain any non-{@code null}\n\t * element.\n\t * <p>\n\t * This is also part of the {@link Map} interface.\n\t * \n\t * @return whether the SparseArray is empty\n\t */\n",
    "1259": "\t/**\n\t * Removes all entries from the object.\n\t * <p>\n\t * This method is also part of the map interface.\n\t */\n",
    "1264": "\t/**\n\t * Load properties from a file.\n\t *\n\t * @param fileName\tname of the file\n\t * @return\t<code>Properties</code> variable containing loaded properties\n\t */\n",
    "1268": "\t/**\n\t * Load the properties corresponding to the passed language code.\n\t *\n\t * @param languageCode code of the language (example: \"en\")\n\t * @return\t<code>Properties</code> variable containing loaded properties\n\t */\n",
    "1275": "\t/**\n\t * Read the array element at the specified index.\n\t * \n\t * @param inx indexes the (sparse) array\n\t * @return {@code null}, or the element at index {@code inx}\n\t */\n",
    "1277": "\t/**\n\t * This is a helper method for {@link #wr(Node, byte, long, Object)}.\n\t * We store a new reference where we fetched the last {@code Node}\n\t * reference during tree path scanning: at {@code Node pa}\n\t * with index {@code painx}.\n\t * If {@code pa} is {@code null}, we must have fetched from the\n\t * {@link #root} and thus we here store to it.\n\t * \n\t * @param pa    the node to which we store a new reference, or {@code null}\n\t * @param painx the index of the store\n\t * @param nref  the new reference to store\n\t */\n",
    "1278": "\t/**\n\t * Reloads all non-static GUI components.\n\t */\n",
    "1279": "\t/**\n\t * Redraws the screen and waits for \"enter\" if needed.\n\t * \n\t * @param waitForEnter  whether the method is to wait for enter after drawing\n\t */\n",
    "1281": "\t/**\n\t * Stores the specified value into the array slot with the specified index,\n\t * and returns the former value of that array slot.\n\t * <p>\n\t * Storing a {@code null} value means to remove any former value\n\t * from the indexed array slot.\n\t * \n\t * @param inx the index of the array slot to write to\n\t * @param val the value to store at index {@code inx}\n\t * @return the former content of the array slot at index {@code inx}\n\t */\n",
    "1283": "\t/**\n\t * Removes a box from the passed position.\n\t * \n\t * @param position the position a box is to be removed from.\n\t */\n",
    "1287": "\t/**\n\t * Debug: Calculates and displays the lower bound for all levels.\n\t */\n",
    "1290": "\t\t\t/**\n\t\t\t * Starts a new forward search.\n\t\t\t */\n",
    "1291": "\t/**\n\t * Removes the box having the passed number.\n\t * \n\t * @param boxNo the number of the box that is to be removed.\n\t */\n",
    "1296": "\t/**\n\t * Returns whether the game is in play mode, just now.\n\t * \n\t * @return <code>true</code>, if the game is in play mode\n\t */\n",
    "1300": "\t/**\n\t * Removes a box from the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x\tthe x-coordinate of the position the box is to be removed from.\n\t * @param y the y-coordinate of the position the box is to be removed from.\n\t */\n",
    "1304": "\t/**\n\t * Returns whether the game is in editor mode, just now.\n\t * \n\t * @return <code>true</code>, iff the game is in editor mode\n\t */\n",
    "1308": "\t/**\n\t * Removes a wall from the passed position.\n\t * \n\t * @param position the position a wall is to be removed from.\n\t */\n",
    "1313": "\t/**\n\t * Sets the \"invalid level\" mode. The current level is invalid. Therefore\n\t * the user isn't allowed to play it. Furthermore the solver and the optimizer are disabled.\n\t */\n",
    "1319": "\t/**\n\t * Removes a wall from the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x\tthe x-coordinate of the position the wall is to be removed from.\n\t * @param y the y-coordinate of the position the wall is to be removed from.\n\t */\n",
    "1344": "\t/**\n\t * Removes a goal from the passed position.\n\t * \n\t * @param position the position a goal is to be removed from.\n\t */\n",
    "1373": "\t/**\n\t * Removes a goal from the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x\tthe x-coordinate of the position the goal is to be removed from.\n\t * @param y the y-coordinate of the position the goal is to be removed from.\n\t */\n",
    "1378": "\t/**\n\t * Determines the first key associated with a non-{@code null} value.\n\t * Sorting order is native: signed.\n\t * @return the first key in the sparse array\n\t * @see SortedMap#firstKey()\n\t */\n",
    "1384": "\t/**\n\t * Determines the last key associated with a non-{@code null} value.\n\t * Sorting order is native: signed.\n\t * @return the last key in the sparse array\n\t * @see SortedMap#lastKey()\n\t */\n",
    "1393": "\t/**\n\t * Removes the player from the board.\n\t */\n",
    "1453": "\t/**\n\t * Sets a box at the passed position.\n\t * \n\t * @param position the position a box is to be set.\n\t */\n",
    "1496": "    /**\n     * Method that is backed to a submit button of a form.\n     */\n",
    "1503": "\t/**\n\t * Sets a box at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position a box is to be set.\n\t * @param y the y-coordinate of the position a box is to be set.\n\t */\n",
    "1518": "\t/**\n\t * Generate an id for a new lock. Uniqueness per cache instance is very \n\t * desirable but not absolutely critical. Must be called from one of the \n\t * synchronized methods of this class.\n\t */\n",
    "1519": "\t/**\n\t * decrement a lock and put it back in the cache\n\t */\n",
    "1534": "    /**\n     * Gets a value of an element which matches the given key.\n     * @param key the key of the element to return.\n     * @return The value placed into the cache with an earlier put, or null if not found or expired\n     * @throws CacheException\n     */\n",
    "1536": "\t/**\n\t * Sets a box with the passed number at the passed position.\n\t * \n\t * @param position the position a box is to be set.\t \n\t * @param boxNo\tthe number of the box to be set\n\t */\n",
    "1537": "    /**\n     * Puts an object into the cache.\n     * @param key a {@link Serializable} key\n     * @param value a {@link Serializable} value\n     * @throws CacheException if the parameters are not {@link Serializable}, the {@link CacheManager}\n     * is shutdown or another {@link Exception} occurs.\n     */\n",
    "1538": "    /**\n     * Removes the element which matches the key.\n     * <p>\n     * If no element matches, nothing is removed and no Exception is thrown.\n     * @param key the key of the element to remove\n     * @throws CacheException\n     */\n",
    "1540": "    /**\n     * Remove all elements in the cache, but leave the cache\n     * in a useable state.\n     * @throws CacheException\n     */\n",
    "1542": "    /**\n     * Remove the cache and make it unuseable.\n     * @throws CacheException\n     */\n",
    "1543": "    /**\n     * Calls to this method should perform there own synchronization.\n     * It is provided for distributed caches. Because EHCache is not distributed\n     * this method does nothing.\n     */\n",
    "1545": "    /**\n     * Calls to this method should perform there own synchronization.\n     * It is provided for distributed caches. Because EHCache is not distributed\n     * this method does nothing.\n     */\n",
    "1546": "\t/**\n\t * Enables or disables the buttons for \"undo\" and \"redo\" by inspection of\n\t * the history, i.e. whether there is something to undo or redo.\n\t */\n",
    "1547": "\t\t/**\n\t\t * The timestamp on the cached data\n\t\t */\n",
    "1548": "    /**\n     * Gets the next timestamp;\n     */\n",
    "1549": "    /**\n     * Returns the lock timeout for this cache.\n     */\n",
    "1550": "\t\t/**\n\t\t * The actual cached data\n\t\t */\n",
    "1552": "\t\t/**\n\t\t * Lock the item\n\t\t */\n",
    "1554": "\t\t/**\n\t\t * Not a lock!\n\t\t */\n",
    "1555": "\t\t/**\n\t\t * Is this item visible to the timestamped\n\t\t * transaction?\n\t\t */\n",
    "1558": "\t\t/**\n\t\t * Don't overwite already cached items\n\t\t */\n",
    "1561": "\t/**\n\t * Sets a box with the passed number at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position a box is to be set.\n\t * @param y the y-coordinate of the position a box is to be set.\n\t * @param boxNo\tthe number of the box to be set\n\t */\n",
    "1563": "\t/**\n\t * Check if this lock mode is more restrictive than the given lock mode.\n\t *\n\t * @param mode LockMode to check\n\t * @return true if this lock mode is more restrictive than given lock mode\n\t */\n",
    "1564": "\t/**\n\t * Check if this lock mode is less restrictive than the given lock mode.\n\t *\n\t * @param mode LockMode to check\n\t * @return true if this lock mode is less restrictive than given lock mode\n\t */\n",
    "1572": "\t\t/**\n\t\t * Increment the lock, setting the\n\t\t * new lock timeout\n\t\t */\n",
    "1579": "\t\t/**\n\t\t * Decrement the lock, setting the unlock\n\t\t * timestamp if now unlocked\n\t\t * @param currentTimestamp\n\t\t */\n",
    "1587": "\t\t/**\n\t\t * Can the timestamped transaction re-cache this\n\t\t * locked item now?\n\t\t */\n",
    "1592": "\t\t/**\n\t\t * Was this lock held concurrently by multiple\n\t\t * transactions?\n\t\t */\n",
    "1599": "\t\t/**\n\t\t * Yes, this is a lock\n\t\t */\n",
    "1605": "\t\t/**\n\t\t * locks are not returned to the client!\n\t\t */\n",
    "1617": "\t/**\n\t * Sets a box and a goal at the passed position.\n\t * \n\t * @param position the position the objects are to be set.\n\t */\n",
    "1634": "\t/**\n     * Defines the mapper to map source to destination files.\n     */\n",
    "1638": "\t/**\n\t * Copies the data of the current level to the clipboard, optionally\n\t * using run length encoding (RLE).\n\t * \n\t * @param withRLE whether to use RLE\n\t * @see #exportLevelToClipboard(boolean, boolean)\n\t */\n",
    "1647": "\t/**\n\t * Sets a box and a goal at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position the objects are to be set.\n\t * @param y the y-coordinate of the position the objects are to be set.\n\t */\n",
    "1665": "\t/**\n\t * Sets a a goal at the passed position.\n\t * \n\t * @param position the position the goal is to be set.\n\t */\n",
    "1680": "\t/**\n\t * Sets a goal at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position a goal is to be set.\n\t * @param y the y-coordinate of the position a goal is to be set.\n\t */\n",
    "1692": "\t/**\n\t * Sets a wall at the passed position.\n\t * \n\t * @param position the position the wall is to be set.\n\t */\n",
    "1704": "\t/**\n\t * Sets a wall at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position a wall is to be set.\n\t * @param y the y-coordinate of the position a wall is to be set.\n\t */\n",
    "1716": "\t/**\n\t * Sets the number of a box at the passed position.\n\t * \n\t * @param boxNo\tthe box number to be set\n\t * @param position the position the box number is to be set.\n\t */\n",
    "1727": "\t/**\n\t * Sets the number of a box at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param boxNo\tthe box number to be set\n\t * @param x the x-coordinate of the position the box number is to be set.\n\t * @param y the y-coordinate of the position the box number is to be set.\n\t */\n",
    "1738": "\t/**\n\t * Sets the square at the the passed position to be an advanced deadlock\n\t * square.\n\t * \n\t * @param position the position of the square\n\t */\n",
    "1761": "\t/**\n\t * Sets the player to the passed position.\n\t * \n\t * @param position Position the player is to be set at.\n\t */\n",
    "1778": "\t/**\n\t * Sets the player to the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position the player is to be set at.\n\t * @param y the y-coordinate of the position the player is to be set at.\n\t */\n",
    "1808": "\t/**\n\t * Returns whether the square at the the passed position is a corral\n\t * forcer square.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a corral forcer square at the\n\t *                           passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't a corral forcer square at the\n\t *                           passed position\n\t */\n",
    "1837": "\t/**\n\t * Returns whether the square at the the passed position is a corral\n\t * forcer square.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is a corral forcer square at the\n\t *                           passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't a corral forcer square at the\n\t *                           passed position\n\t */\n",
    "1865": "\t/**\n\t * Returns whether there is a box at the passed position.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a box at the passed position,\n\t * or<br> <code>false</code> if there isn't a box at the passed position\n\t */\n",
    "1889": "\t/**\n\t * Returns whether there is a box at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is a box at the passed position,\n\t * or<br> <code>false</code> if there isn't a box at the passed position\n\t */\n",
    "1911": "\t/**\n\t * Returns whether there is a wall at the passed position.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a wall at the passed position,\n\t * or<br> <code>false</code> if there isn't a wall at the passed position\n\t */\n",
    "1916": "\t/**\n\t * Returns if a box has been selected.\n\t * \n\t * @return <code>true</code> a box has been selected <code>false</code> no box\n\t *         has been selected\n\t */\n",
    "1931": "\t/**\n\t * Returns whether there is a wall at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is a wall at the passed position,\n\t * or<br> <code>false</code> if there isn't a wall at the passed position\n\t */\n",
    "1946": "\t/**\n\t * Returns whether the player reachable squares are to be highlighted.\n\t * \n\t * @return <code>true</code> if the player reachable squares are to be highlighted,<br>\n\t * \t      <code>false</code> otherwise\n\t */\n",
    "1956": "\t/**\n\t * The location of ant-installer.jar and sysout.jar and possibly jgoodies-edited-1_2_2.jar\n\t * @param antInstallLib The antInstallLib to set.\n\t */\n",
    "1958": "\t/**\n\t * The location of ant.jar and ant-launcher.jar\n\t * @param antLib The antLib to set.\n\t */\n",
    "1959": "\t/**\n\t * Returns whether there is a goal at the passed position.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a goal at the passed position,\n\t * or<br> <code>false</code> if there isn't a goal at the passed position\n\t */\n",
    "1991": "\t/**\n\t * Returns the position of the selected box.\n\t * \n\t * @return the position of the selected box\n\t */\n",
    "2003": "\t/**\n\t * Returns whether there is a goal at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is a goal at the passed position,\n\t * or<br> <code>false</code> if there isn't a goal at the passed position\n\t */\n",
    "2086": "\t/**\n\t * Returns whether the square at the passed position is either a goal\n\t * or a wall.\n\t * \n\t * @param position  the position of the square\n\t * @return <code>true</code> if the square is a goal or a wall, or<br>\n\t * \t\t  <code>false</code> otherwise\n\t */\t\n",
    "2156": "\t/**\n\t * Plays the next movements from the history movements, in an own thread,\n\t * in order to avoid blocking the event dispatcher thread (EDT).\n\t * \n\t * @param redoAllMovements whether all movements have to be redone\n\t */\n",
    "2159": "\t/**\n\t * Returns whether there is a corral forcer at the passed position.\n\t * A corral forcer divides the board into areas the player can reach\n\t * and can't reach.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a corral forcer at the position,\n\t * or<br> <code>false</code> if there isn't a corral forcer at the position \n\t */\n",
    "2165": "    /**\n     * Returns a list of all elements in the cache. Only keys of non-expired\n     * elements are returned.\n     * <p/>\n     * The returned keys are unique and can be considered a set.\n     * <p/>\n     * The List returned is not live. It is a copy.\n     * <p/>\n     * The time taken is O(n), where n is the number of elements in the cache. On\n     * a 1.8Ghz P4, the time taken is approximately 200ms per 1000 entries. This method\n     * is not syncrhonized, because it relies on a non-live list returned from {@link #getKeys()}\n     * , which is synchronised, and which takes 8ms per 1000 entries. This way\n     * cache liveness is preserved, even if this method is very slow to return.\n     * <p/>\n     * Consider whether your usage requires checking for expired keys. Because\n     * this method takes so long, depending on cache settings, the list could be\n     * quite out of date by the time you get it.\n     *\n     * @return a list of {@link Serializable} keys\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2169": "\t/**\n\t * Returns whether there is a backward search goal at the passed position.\n\t * The backward search goals are the positions of the boxes\n\t * at the beginning of a level.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a backward search goal\n\t *                           at the passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't a backward search goal\n\t *                           at the passed position\n\t */\n",
    "2175": "    /**\n     * Returns the number of elements in the memory store.\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2177": "    /**\n     * Returns the number of elements in the disk store.\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2180": "\t/**\n\t * Returns whether there is a backward search goal at the passed position.\n\t * The backward search goals are the positions of the boxes\n\t * at the beginning of a level.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is a backward search goal\n\t *                           at the passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't a backward search goal\n\t *                           at the passed position\n\t */\n",
    "2181": "    /**\n     * Gets the status attribute of the Cache\n     *\n     * @return The status value from the Status enum class\n     */\n",
    "2186": "\t/**\n\t * Undoes the last movement in an own thread,\n\t * in order to avoid blocking the event dispatcher thread (EDT).\n\t */\n",
    "2187": "    /**\n     * Receive a Locator object for document events.\n     */\n",
    "2191": "    /**\n     * Number of times a requested item was found in the Memory Store\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2193": "\t/**\n\t * Returns whether there is an empty square at the passed position.\n\t * NB: a goal is <em>not</em> considered to be empty.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is an empty square\n\t *                           at the passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't an empty square\n\t *                           at the passed position\n\t */\n",
    "2195": "    /**\n     * Number of times a requested item was found in the Disk Store\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2196": "    /**\n     * Finds a creator method.\n     */\n",
    "2197": "    /**\n     * Builds a method name from an element or attribute name.\n     */\n",
    "2198": "    /**\n     * Number of times a requested element was not found in the cache. This\n     * may be because it expired, in which case this will also be recorded in {@link #getMissCountExpired},\n     * or because it was simply not there.\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2203": "    /**\n     * Number of times a requested element was found but was expired\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2205": "\t/**\n\t * Returns whether there is an empty square at the passed position.\n\t * NB: a goal is <em>not</em> considered to be empty.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is an empty square\n\t *                           at the passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't an empty square\n\t *                           at the passed position\n\t */\n",
    "2207": "    /**\n     * Gets the cache name\n     */\n",
    "2208": "    /**\n     * Formats the current document location.\n     */\n",
    "2209": "    /**\n     * Gets timeToIdleSeconds\n     */\n",
    "2211": "    /**\n     * Gets timeToLiveSeconds\n     */\n",
    "2213": "\t/**\n\t * Returns whether the square at the passed is accessible,\n\t * that means: not a box and not a wall.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is accessible, or<br>\n\t * \t\t  <code>false</code> if the square isn't accessible\n\t */\n",
    "2219": "    /**\n     * Does the overflow go to disk\n     */\n",
    "2221": "    /**\n     * Gets the maximum number of elements to hold in memory\n     */\n",
    "2223": "\t/**\n\t * Returns whether the square at the passed is accessible,\n\t * i.e. not a box and not a wall.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is accessible, or<br>\n\t * \t\t  <code>false</code> if the square isn't accessible\n\t */\n",
    "2224": "    /**\n     * The policy used to evict elements from the {@link net.sf.ehcache.store.MemoryStore}.\n     * This can be one of:\n     * <ol>\n     * <li>LRU - least recently used\n     * <li>LFU - least frequently used\n     * <li>FIFO - first in first out, the oldest element by creation time\n     * </ol>\n     * The default value is LRU\n     *\n     * @since 1.2\n     */\n",
    "2225": "    /**\n     * Gets the disk cache path\n     */\n",
    "2227": "    /**\n     * Gets a Map of caches\n     */\n",
    "2229": "    /**\n     * Checks whether this cache element has expired.\n     * <p/>\n     * The element is expired if:\n     * <ol>\n     * <li> the idle time is non-zero and has elapsed, unless the cache is eternal; or\n     * <li> the time to live is non-zero and has elapsed, unless the cache is eternal; or\n     * <li> the value of the element is null.\n     * </ol>\n     *\n     * @return true if it has expired\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     * @throws NullPointerException  if the element is null\n     */\n",
    "2233": "\t/**\n\t * Returns whether the square at the passed position is accessible for\n\t * a box.  A square is accessible for a box if there is neither a wall\n\t * nor a box at this square AND the square is no simple deadlock square.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is accessible for a box, or<br>\n\t * \t\t  <code>false</code> if the square isn't accessible for a box\n\t */\n",
    "2235": "    /**\n     * Clones a cache. This is only legal if the cache has not been\n     * initialized. At that point only primitives have been set and no\n     * {@link net.sf.ehcache.store.LruMemoryStore} or {@link net.sf.ehcache.store.DiskStore} has been created.\n     *\n     * @return an object of type {@link Cache}\n     * @throws CloneNotSupportedException\n     */\n",
    "2238": "        /**\n         * Sets the class name\n         *\n         * @param fullyQualifiedClassPath\n         */\n",
    "2241": "\t/**\n\t * Returns whether the square at the passed position is accessible for\n\t * a box.  A square is accessible for a box if there is neither a wall\n\t * nor a box at this square AND the square is no simple deadlock square.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is accessible for a box, or<br>\n\t * \t\t  <code>false</code> if the square isn't accessible for a box\n\t */\n",
    "2242": "        /**\n         * Sets the name of the cache. This must be unique\n         */\n",
    "2243": "    /**\n     * Use this to access the service in order to register and unregister listeners\n     *\n     * @return the CacheEventNotificationService instance for this cache.\n     */\n",
    "2244": "        /**\n         * Sets the maximum objects to be held in memory\n         */\n",
    "2247": "    /**\n     * Notifies all registered listeners, in no guaranteed order, that an element was removed\n     * @param element\n     * @see CacheEventListener#notifyElementRemoved\n     */\n",
    "2248": "        /**\n         * Sets the eviction policy. An invalid argument will set it to null\n         */\n",
    "2251": "    /**\n     * Notifies all registered listeners, in no guaranteed order, that an element has expired\n     * @param element\n     * @see CacheEventListener#notifyElementExpired\n     */\n",
    "2252": "    /**\n     * Adds a listener to the notification service. No guarantee is made that listeners will be\n     * notified in the order they were added.\n     * @param cacheEventListener\n     * @return true if the listener is being added and was not already added\n     */\n",
    "2253": "    /**\n     * Removes a listener from the notification service.\n     * @param cacheEventListener\n     * @return true if the listener was present\n     */\n",
    "2254": "    /**\n     * Gets a list of the listeners registered to this class\n     * @return a list of type <code>CacheEventListener</code>\n     */\n",
    "2255": "\t/**\n\t * Returns whether the square at the passed position is a wall\n\t * or a simple deadlock square.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock square, or<br>\n\t * \t\t  <code>false</code> if the square is neither a wall nor a simple\n\t *                           deadlock square\n\t */\n",
    "2261": "        /**\n         * Sets whether elements are eternal. If eternal,  timeouts are ignored and the element\n         * is never expired.\n         */\n",
    "2266": "\t/**\n\t * Returns whether the current level is valid.\n\t * <P>\n\t * If the level is invalid an info message is displayed.\n\t * \n\t * @return <code>true</code> if the level is valid, and<br>\n\t *        <code>false</code> if the level is invalid\n\t */\n",
    "2268": "\t/**\n\t * Uses JavaGroups to broadcast the supplied notification message across the\n\t * cluster.\n\t * \n\t * @param message\n\t *            The cluster nofication message to broadcast.\n\t */\n",
    "2270": "        /**\n         * Sets the time to idle for an element before it expires. Is only used\n         * if the element is not eternal.\n         */\n",
    "2272": "\t/**\n\t * We are not using the caching, so we just return something that identifies\n\t * us. This method should never be called directly.\n\t */\n",
    "2273": "\t/**\n\t * A callback that is fired when a new member joins the cluster. This method\n\t * should never be called directly.\n\t * \n\t * @param address\n\t *            The address of the member who just joined.\n\t */\n",
    "2274": "\t/**\n\t * A callback that is fired when an existing member leaves the cluster. This\n\t * method should never be called directly.\n\t * \n\t * @param address\n\t *            The address of the member who left.\n\t */\n",
    "2278": "        /**\n         * Sets the time to idle for an element before it expires. Is only used\n         * if the element is not eternal.\n         */\n",
    "2280": "\t/**\n\t * Returns whether the square at the passed position is a wall\n\t * or a simple deadlock square.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock square, or<br>\n\t * \t\t  <code>false</code> if the square is neither a wall nor a simple\n\t *                           deadlock square\n\t */\n",
    "2281": "    /**\n     * Shuts down the CacheManager.\n     * <p/>\n     * If the shutdown occurs on the singleton, then the singleton is removed, so that if a singleton access method\n     * is called, a new singleton will be created.\n     */\n",
    "2283": "        /**\n         * Sets whether elements can overflow to disk when the in-memory cache\n         * has reached the set limit.\n         */\n",
    "2285": "        /**\n         * Sets whether, for caches that overflow to disk,\n         * the disk cache persist between CacheManager instances\n         */\n",
    "2288": "        /**\n         * Sets the interval in seconds between runs of the disk expiry thread.\n         * <p/>\n         * 2 minutes is the default.\n         * This is not the same thing as time to live or time to idle. When the thread runs it checks\n         * these things. So this value is how often we check for expiry.\n         */\n",
    "2291": "\t/**\n\t * Returns whether the passed position is an outer square or a wall.\n\t * An outer square is a square which is outside the reachable area\n\t * of the player even if there weren't any boxes on the board.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is an outer square or a wall,\n\t * or<br> <code>false</code> if the square isn't an outer square or a wall \n\t */\n",
    "2311": "\t/**\n\t * Returns whether the square at the passed position is a simple\n\t * deadlock square.\n\t * <p>\n\t * The search direction doesn't matter, because the simple deadlock squares\n\t * of the other direction can never be reached from a specific direction.\n\t * Therefore both the forward and the backward simple deadlock squares\n\t * are checked.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is a simple deadlock square,\n\t * or<br> <code>false</code> if the square isn't a simple deadlock square\n\t */\n",
    "2329": "\t/**\n\t * This method is called upon plug-in activation\n\t */\n",
    "2331": "\t/**\n\t * This method is called when the plug-in is stopped\n\t */\n",
    "2338": "    /**\n     *\tSet the current input focus to self's destination entry field\n     */\n",
    "2351": "\t/**\n\t * Returns whether the square at the passed position is a simple\n\t * deadlock square.\n\t * <p>\n\t * The search direction doesn't matter, because the simple deadlock squares\n\t * of the other direction can never be reached from a specific direction.\n\t * Therefore both the forward and the backward simple deadlock squares\n\t * are checked.\n\t * <p>\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is a simple deadlock square,\n\t * or<br> <code>false</code> if the square isn't a simple deadlock square\n\t */\n",
    "2362": "\t/**\n\t * Sets a new collection for playing.\n\t * \n\t * @param levelCollection\n\t *            the level collection to be set\n\t */\n",
    "2377": "\t/**\n\t * Uses the standard container selection fileDialog to choose the new value\n\t * for the container field.\n\t */\n",
    "2378": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is\n\t * a simple deadlock forward square.\n\t *  \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock forward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a simple\n\t *                           deadlock forward square\n\t */\n",
    "2418": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is\n\t * a simple deadlock forward square.\n\t *  \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock forward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a simple\n\t *                           deadlock forward square\n\t */\n",
    "2441": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is\n\t * a simple deadlock backward square.\n\t *  \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock backward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a simple\n\t *                           deadlock backward square\n\t */\n",
    "2449": "\t/**\n\t * If the current level collection contains the level with the\n\t * specified data base ID, we return the title of that current collection.\n\t * Otherwise we return null.\n\t * <p>\n\t * NOTE: There may be other collections containing that levelID.\n\t * \n\t * @param levelID ID of the level to search for\n\t * @return the title of the collection containing the levelID\n\t */\n",
    "2455": "    /**\n     * Save a transient object.\n     * An id is generated, assigned to the given object and returned.\n     */\n",
    "2463": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is a simple deadlock backward square.\n\t *  \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock backward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a simple\n\t *                           deadlock backward square\n\t */\n",
    "2478": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is\n\t * an advanced simple deadlock forward square.\n\t *  \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is a wall or an advanced\n\t *                           simple deadlock forward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a advanced\n\t *                           simple deadlock forward square\n\t */\n",
    "2488": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is a advanced simple deadlock forward square.\n\t *  \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is a wall or an advanced\n\t *                           simple deadlock forward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a advanced\n\t *                           simple deadlock forward square\n\t */\n",
    "2500": "\t/**\n\t * Returns whether there is a box and a goal at the passed position.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a box and a goal\n\t *                           at the passed position,\n\t * or<br> <code>false</code> if there isn't a box and a goal\n\t *                           at the passed position\n\t */\n",
    "2512": "\t/**\n\t * Returns whether there is a box and a goal at the passed position.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a box and a goal\n\t *                           at the passed position,\n\t * or<br> <code>false</code> if there isn't a box and a goal\n\t *                           at the passed position\n\t */\n",
    "2521": "\t/**\n\t * Returns whether there is a player in the level.\n\t * <p>\n\t * Usually there is a player in every level. This method is just used for\n\t * determining \"special\" squares for displaying them correctly. \n\t * \n\t * @return <code>true</code> if there is a player in the level,\n\t * or<br> <code>false</code> if there isn't a player in the level\n\t */\n",
    "2528": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the passed position is marked.\n\t * <p>\n\t * Marked positions are displayed with a little square.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the passed position is marked,\n\t * or<br> <code>false</code> if the passed position is not marked\n\t */\n",
    "2543": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the passed position is marked.\n\t * <p>\n\t * Marked positions are displayed with a little square graphic.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the passed position is marked,\n\t * or<br> <code>false</code> if the passed position is not marked\n\t */\n",
    "2552": "\t/**\n\t * Removes a marking from the passed position.\n\t * \n\t * @param position the position a marking is to be removed from.\n\t */\n",
    "2561": "\t/**\n\t * Removes a marking from the passed position.\n\t * \n\t * @param x\tthe x-coordinate of the position the marking is to be removed from.\n\t * @param y the y-coordinate of the position the marking is to be removed from.\n\t */\n",
    "2569": "\t/**\n\t * Removes all marking from the board.\n\t */\n",
    "2576": "\t/**\n\t * Sets a marking at the passed position.\n\t * \n\t * @param position the position the marking is to be set.\n\t */\n",
    "2580": "    /**\n     * associate a proxy that was instantiated by another session with this session\n     */\n",
    "2583": "\t/**\n\t * Sets a marking at the passed position.\n\t * \n\t * @param x the x-coordinate of the position a marking is to be set.\n\t * @param y the y-coordinate of the position a marking is to be set.\n\t */\n",
    "2591": "\t/**\n\t * Marks the passed position with the passed value.\n\t * \n\t * @param position  what position is to be marked\n\t * @param markValue with what value the position id to be marked\n\t */\n",
    "2600": "\t/**\n\t * Changes the making status of the passed position.\n\t * \n\t * @param position the position is to be changed\n\t */\n",
    "2608": "\t/**\n\t * Returns the number of the box located at the passed position.\n\t * For positions without a box the return value is undefined.\n\t * \n\t * @param position the position of the square\t \n\t * @return\tthe number of the box\n\t */\n",
    "2616": "\t/**\n\t * Returns the number of the goal located at the passed position.\n\t * For positions without a goal the return value is undefined.\n\t * \n\t * @param position the position of the square\t \n\t * @return\tthe number of the goal\n\t */\n",
    "2625": "\t/**\n\t * Returns the position of the goal with the passed goal number.\n\t * \n\t * @param goalNo the number of the goal\n\t * @return the position of the goal\n\t */\n",
    "2633": "\t/**\n\t * Returns the distance which the player has to walk,\n\t * starting from one square in order to reach a second square.\n\t * \n\t * @param fromSquare player start position\n\t * @param toSquare\t player walk destination\n\t * @return number of steps the player needs to walk\n\t */\n",
    "2641": "\t/**\n\t * Sets a new board position.\n\t * \n\t * @param position Board position to be set.\n\t */\n",
    "2650": "\t/**\n\t * Sets a new board position.\n\t * \n\t * @param positions box and player positions to be set.\n\t */\n",
    "2659": "\t/**\n\t * Removes all boxes from the board.\n\t */\n",
    "2668": "\t/**\n\t * The goals of the backward search are the box positions at search start.\n\t * Here we set the goals for the backward search from the current box\n\t * positions.\n\t */\n",
    "2683": "    /**\n     * Retrieve a list of persistent objects using a hibernate query\n     */\n",
    "2781": "\t\t/**\n\t\t * Returns the push distance of a specific box to a specific goal.\n\t\t * <p>\n\t\t * The distance is calculated under the assumption that:\n\t\t * <ol>\n\t\t *  <li> the box is the only one on the whole board\n\t\t *  <li> the player can reach every side of the box at the moment\n\t\t * </ol>\n\t\t *  \n\t\t * @param boxNo number of the relevant box\n\t\t * @param goalNo number of the relevant goal\n\t\t * @return push distance\n\t\t */\n",
    "2880": "\t/**\n\t * The action has been activated. The argument of the\n\t * method represents the 'real' action sitting\n\t * in the workbench UI.\n\t * @see IWorkbenchWindowActionDelegate#run\n\t */\n",
    "2881": "\t/**\n\t * Selection in the workbench has been changed. We \n\t * can change the state of the 'real' action here\n\t * if we want, but this can only happen after \n\t * the delegate has been created.\n\t * @see IWorkbenchWindowActionDelegate#selectionChanged\n\t */\n",
    "2882": "\t/**\n\t * We can use this method to dispose of any system\n\t * resources we previously allocated.\n\t * @see IWorkbenchWindowActionDelegate#dispose\n\t */\n",
    "2883": "\t/**\n\t * We will cache window object in order to\n\t * be able to provide parent shell for the message dialog.\n\t * @see IWorkbenchWindowActionDelegate#init\n\t */\n",
    "2930": "    /**\n     * The <code>addToHierarchyToCheckedStore</code> implementation of this \n     * <code>WizardDataTransferPage</code> method returns <code>false</code>. \n     * Subclasses may override this method.\n     */\n",
    "2961": "    /**\n     * This method must be called just before this window becomes visible.\n     */\n",
    "2963": "    /**\n     *\tAdd the passed listener to self's collection of clients\n     *\tthat listen for changes to element checked states\n     *\n     *\t@param listener ICheckStateListener\n     */\n",
    "2964": "    /**\n     * Returns a content provider for <code>IResource</code>s that returns \n     * only children of the given resource type.\n     */\n",
    "2965": "    /**\n     *\tReturn a boolean indicating whether all children of the passed tree element\n     *\tare currently white-checked\n     *\n     *\t@return boolean\n     *\t@param treeElement java.lang.Object\n     */\n",
    "2970": "    /**\n     *\tReturn a boolean indicating whether all list elements associated with\n     *\tthe passed tree element are currently checked\n     *\n     *\t@return boolean\n     *\t@param treeElement java.lang.Object\n     */\n",
    "2971": "    /**\n     *\tIterate through the passed elements which are being realized for the first\n     *\ttime and check each one in the tree viewer as appropriate\n     */\n",
    "2972": "    /**\n     * Returns this page's collection of currently-specified resources to be \n     * exported. This is the primary resource selection facility accessor for \n     * subclasses.\n     *\n     * @return an iterator over the collection of resources currently selected \n     * for export (element type: <code>IResource</code>). This will include\n     * white checked folders and individually checked files.\n     */\n",
    "2974": "    /**\n     *\tAn item was checked in one of self's two views.  Determine which\n     *\tview this occurred in and delegate appropriately\n     *\n     *\t@param event CheckStateChangedEvent\n     */\n",
    "2975": "    /**\n     * Returns the resource extensions currently specified to be exported.\n     *\n     * @return the resource extensions currently specified to be exported (element \n     *   type: <code>String</code>)\n     */\n",
    "2980": "    /**\n     * Returns this page's collection of currently-specified resources to be \n     * exported. This returns both folders and files - for just the files use\n     * getSelectedResources.\n     *\n     * @return a collection of resources currently selected \n     * for export (element type: <code>IResource</code>)\n     */\n",
    "2981": "    /**\n     *\tCreate this group's tree viewer.\n     */\n",
    "2986": "    /**\n     * Returns whether the extension of the given resource name is an extension that\n     * has been specified for export by the user.\n     *\n     * @param resourceName the resource name\n     * @return <code>true</code> if the resource name is suitable for export based \n     *   upon its extension\n     */\n",
    "2987": "    /**\n     * Returns a boolean indicating whether the passed tree item should be\n     * white-checked.\n     *\n     * @return boolean\n     * @param treeElement java.lang.Object\n     */\n",
    "2990": "    /**\n     *\tRecursively add appropriate tree elements to the collection of\n     *\tknown white-checked tree elements.\n     *\n     *\t@param treeElement java.lang.Object\n     */\n",
    "2991": "    /**\n     * Persists resource specification control setting that are to be restored\n     * in the next instance of this page. Subclasses wishing to persist additional\n     * setting for their controls should extend hook method \n     * <code>internalSaveWidgetValues</code>.\n     */\n",
    "2992": "    /**\n     * Cause the tree viewer to expand all its items\n     */\n",
    "2993": "    /**\n     * Set the initial selections in the resource group.\n     */\n",
    "2995": "\t\t/**\n\t\t * Returns whether the player can reach the passed position.\n\t\t * \n\t\t * @param position the position to be tested for reachability\n\t\t * \n\t\t * @return <code>true</code> the position is reachable by the player\n\t\t * \t\t\t<code>false</code> the position isn't reachable by the player\n\t\t */\n",
    "3005": "    /**\n     * Save any editors that the user wants to save before export.\n     * @return boolean if the save was successful.\n     */\n",
    "3008": "    /**\n     *\tReturns a flat list of all of the leaf elements which are checked.\n     *\n     *\t@return all of the leaf elements which are checked. This API does not\n     * \treturn null in order to keep backwards compatibility.\n     */\n",
    "3009": "    /**\n     * Check if widgets are enabled or disabled by a change in the dialog.\n     */\n",
    "3010": "\t\t/**\n\t\t * Returns a clone of the current object.\n\t\t * \n\t\t * @return a PlayersReachableSquares object identical to this object\n\t\t */\n",
    "3012": "    /**\n     * give the interceptor an opportunity to override the default instantiation\n     */\n",
    "3013": "    /**\n     *\tAdd the passed value to self's destination widget's history\n     *\n     *\t@param value java.lang.String\n     */\n",
    "3017": "    /**\n     *\tReturns a list of all of the items that are white checked.\n     * \tAny folders that are white checked are added and then any files\n     *  from white checked folders are added. \n     *\n     *\t@return the list of all of the items that are white checked\n     */\n",
    "3018": "    /**\n     *\tAnswer the number of elements that have been checked by the\n     *\tuser.\n     *\n     *\t@return int\n     */\n",
    "3022": "    /**\n     * Create the buttons for the group that determine if the entire or\n     * selected directory structure should be created.\n     * @param optionsGroup\n     * @param font\n     */\n",
    "3024": "\t\t/**\n\t\t * Returns the position reachable of the player that is\n\t\t * the most top left one.\n\t\t * This is a normalization of the player position, used, where the\n\t\t * exact player position is not relevant, but its reachable area is.\n\t\t * \n\t\t * @return the position top left\n\t\t */\n",
    "3028": "    /**\n     *\tSet the checked state of self and all ancestors appropriately. Do not white check anyone - this is\n     *  only done down a hierarchy.\n     */\n",
    "3029": "    /**\n     * Set the initial checked state of the passed element to true,\n     * as well as to all of its children and associated list elements\n     * @param element\n     */\n",
    "3030": "    /**\n     * Attempts to ensure that the specified directory exists on the local file system.\n     * Answers a boolean indicating success.\n     *\n     * @return boolean\n     * @param directory java.io.File\n     */\n",
    "3032": "    /**\n     *\tIf the target for export does not exist then attempt to create it.\n     *\tAnswer a boolean indicating whether the target exists (ie.- if it\n     *\teither pre-existed or this method was able to create it)\n     *\n     *\t@return boolean\n     */\n",
    "3035": "    /**\n     *  Set up and execute the passed Operation.  Answer a boolean indicating success.\n     *\n     *  @return boolean\n     */\n",
    "3038": "\t\t/**\n\t\t * Returns a (deep) clone of this object.\n\t\t * \n\t\t * @return a (deep) clone of this object\n\t\t */\n",
    "3043": "    /**\n     *\tAnswer the string to display in self as the destination type\n     *\n     *\t@return java.lang.String\n     */\n"
}
