{
    "321": "\t/**\n\t * Returns the pushes lowerbound of this board position.\n\t * \n\t * @return the pushes lowerbound\n\t */\n",
    "323": "\t/**\n\t * Sets the pushes lowerbound of this board position.\n\t * \n\t * @param pushesLowerbound\n\t */\n",
    "324": "\t\t/**\n\t\t * Play a sound.\n\t\t */\n",
    "343": "\t/**\n\t * Returns the influence value between the positions of the passed boxes.\n\t * <p>\n\t * The LOWER the influence value the more influence has the box on the other box.\n\t * \n\t * @param boxNo1  the position of the first  box whose position is considered\n\t * @param boxNo2  the position of the second box whose position is considered\n\t * @return the influence value \n\t */\n",
    "351": "\t/**\n\t * Sets the box positions and the player position.\n\t *     \n\t * @param positions positions of the boxes and the player\n\t */\n",
    "352": "\t/**\n\t * Returns the player position of this board position.\n\t * \n\t * @return the player position\n\t */\n",
    "355": "\t/**\n\t * Returns the number of the moved box.\n\t * \n\t * @return the number of the moved box\n\t */\n",
    "357": "\t/**\n\t * Returns the start position of the pulled box.\n\t * \n\t * @return the position of the box before it was pulled.\n\t */\n",
    "359": "\t/**\n\t * Returns the target position of the pulled box.\n\t * \n\t * @return the position of the box after it was pulled.\n\t */\n",
    "361": "    /**\n     * Returns the preceding board position of this board position.\n     *\n     * @return the preceding board position of this board position\n     */\n",
    "364": "\t/**\n\t * Compares both board positions. Note: lower values means high priority\n\t * in the <code>PriorityQueue</code>.\n\t */\n",
    "373": "\t/**\n\t * Returns whether the push is a forced push, that means a box \n\t * must be pushed from the start position to the target position.\n\t */\n",
    "376": "\t/**\n\t * Sets the status bar text.\n\t * \n\t * @param text\n\t *            the text to be shown in the status bar\n\t */\n",
    "412": "\t/**\n\t * Returns whether the solver has been stopped due to insufficient memory.\n\t * \n\t * @return <code>true</code> if the solver stopped due to insufficient memory, and\n\t *        <code>false</code> otherwise\n\t */\n",
    "428": "\t/**\n\t * Returns the board position with the shortest determined solution path length.\n\t *\n     * @return board position with the shortest determined solution path length.\n     */\n",
    "437": "\t/**\n\t * Returns the preceding board position of this board position.\n\t * \n\t * @return preceding board position\n\t */\n",
    "440": "\t/**\n\t * Returns the direction the box has been pushed.\n\t * \n\t * @return Direction of the push\n\t */\n",
    "442": "\t/**\n\t * Returns the number of the pushed box.\n\t * \n\t * @return Number of the pushed box\n\t */\n",
    "445": "\t/**\n\t * Gives the name of this solver as used to tag new solutions.\n\t * @return the name of this solver\n\t */\n",
    "446": "\t/**\n\t * Return the player position of this board position.\n\t * \n\t * @return the player position\n\t */\n",
    "448": "\t/**\n\t * Sets the box- and the player positions.\n\t *     \n\t * @param positions Positions of the boxes and the player\n\t */\n",
    "450": "\t/**\n\t * An absolute board position usually hasn't a preceding board position. This method is\n\t * implemented for easier working with linked lists.\n\t *\n\t * @return always null\n\t */\n",
    "454": "\t/**\n\t * Sets the searchdirection of the solutionsearch this class is created in.\n\t * \n\t * @param searchDirection Direction of the search\n\t */\n",
    "458": "\t/**\n\t * For avoiding some casts this method is implemented here. Actually, this method\n\t * is only needed for relative board positions.\n\t *\n\t * @return always 0\n\t */\n",
    "459": "\t/** \n\t * Returns the number of pushes of this board position.\n\t * \n\t * @return number of pushes\n\t */\n",
    "461": "\t/**\n\t * Absolute board positions are only created when no box has been pushed. This value is interpreted \n\t * during a search for a solution (no box has been pushed so no tunnel check has to be performed).\n\t *\n\t * @return always <code>NO_BOX_PUSHED</code>\n\t */\n",
    "463": "\t/**\n\t * Sets the maximum solution length. \n\t * This is a value representing the iteration depth during the search for a solution.\n\t * (first all board positions are created that have a maximum solution length of x pushes.\n\t * Then all board positions are created with a maximum solution length of x+1, ...\n\t *  \n\t * @param maximumSolutionLength\tthe maximum solution length to be set\n\t */\n",
    "464": "\t/**\n\t * Return the player position of this board position.\n\t * \n\t * @return the player position\n\t */\n",
    "466": "\t/**\n\t * Returns the maximum solution length (= iteration depth).\n\t * \n\t * @return\tthe maximum solution length stored in this board position\n\t */\n",
    "467": "\t/**\n\t * Returns the number of pushes that were made to reach this board position.\n\t * An absolute board position is only created at the beginning, so this is\n\t * always 0.\n\t * This number is used in the solving methods.\n\t * \n\t * @return always 0\n\t */\n",
    "472": "\t/**\n\t * Returns a string to be attached to a solution, which says that this\n\t * solver did create the solution at the passed point in time.\n\t * \n\t * @param date the creation time point, or <code>null</code> for \"now\"\n\t * @return string identifying the solver as solution creator\n\t * @see Solution#name\n\t */\n",
    "476": "\t/**\n\t * Sets the number of moves.\n\t * \n\t * @param movesCount\tNumber of moves the player has done\n\t */\n",
    "487": "\t/**\n\t * Returns the index in the packing sequence that has already been reached.\n\t * \n\t * @return index in the packing sequence\n\t */\n",
    "489": "\t/**\n\t * Sets the index in the packing sequence that has been reached.\n\t * \n\t * @param indexPackingSequence the index in the packing sequence\n\t */\n",
    "494": "\t/**\n\t * Returns, whether a box is inactive, and therefore a position value 0\n\t * has to be assumed.\n\t *\n\t * @param  boxNo number of the box to be checked for being inactive\n\t * @return <code>true</code> if the box is inactive, and\n\t * \t\t  <code>false</code> if the box is active\n\t */\n",
    "496": "\t/**\n\t *  Returns whether the pushed box has been inactive.\n\t *\n\t * @return <code>true</code> the box is inactive\n\t * \t\t\t<code>false</code> the box is active\n\t */\n",
    "497": "\t/**\n\t * Mark this board position to be a deadlock.\n\t */\n",
    "498": "\t/**\n\t * Mark this board position not to be a deadlock.\n\t * <p>\n\t * Attention: this board position is only for the current\n\t * investigated corral assumed not to be a deadlock.\n\t * Nevertheless it can be a deadlock, because not all\n\t * deadlocks are detected.\n\t */\n",
    "499": "\t\t/**\n\t\t * Retrieves the current value of the debug variable\n\t\t * described by this object, by using reflection.\n\t\t * \n\t\t * @return current value of the described debug variable\n\t\t */\n",
    "500": "\t/**\n\t * Returns a string to be attached to a solution, which says that this\n\t * solver did create the solution \"now\".\n\t * \n\t * @return string identifying the solver as solution creator\n\t * @see Solution#name\n\t */\n",
    "501": "\t/**\n\t * Sets the number of the corral this board position belongs to.\n\t * \n\t * @param corralNo the number of the corral\n\t */\n",
    "503": "\t/**\n\t * Sets the status bar text.\n\t * \n\t * @param text\n\t *            the text to be shown in the status bar\n\t */\n",
    "504": "\t/**\n\t * Returns the number of the corral this board position belongs to.\n\t * \n\t * @return the number of the corral\n\t */\n",
    "506": "\t/**\n\t * Returns whether this board position has been proven to be a corral deadlock.\n\t * \n\t * @return <code>true</code> if this board position is a corral deadlock, and\n\t * \t     <code>false</code> if this board position has not been proven to be a deadlock\n\t */\n",
    "507": "\t/**\n\t * Returns whether this board position is classified not to be a corral deadlock.\n\t * <p>\n\t * This board position can be a corral deadlock, anyhow. For example the corral\n\t * detection could be aborted due to a reached time limit. Nevertheless it would\n\t * be classified as not to be a corral deadlock.\n\t * \n\t * @return <code>true</code> this board position has been classified not to be a corral deadlock\n\t * \t\t  <code>false</code> otherwise\n\t */\n",
    "508": "\t/**\n\t * Returns whether this board position has been classified (deadlock or no deadlock).\n\t * <p>\n\t * This method returns the same value as <code>!isBeeingAnalyzed()</code>\n\t * \n\t * @return <code>true</code> this board position has been classified.\n\t * \t\t<code>false</code> this board position has not been classified yet.\n\t */\n",
    "510": "\t/**\n\t * Returns whether is currently beeing analyzed to be a corral deadlock or not.\n\t * <p>\n\t * Every corral (= board position) not classified counts as \"beeingAnalyzed\". Due to every\n\t * board position occured during the corral detection getting a corral number - even if it\n\t * isn't a corral at all - finally there can be board positions still having the status\n\t * \"isBeeingAnalyzed\".\n\t * \n\t * @return <code>true</code> if the deadlock status of this board position\n\t *                           is currently beeing analyzed, and\n\t * \t\t  <code>false</code> otherwise\n\t */\n",
    "513": "\t/**\n\t * Returns a deep clone of the current board.\n\t * \n\t * @return the clone of this board\n\t */\n",
    "514": "\t\t/**\n\t\t * Sets the value of the debug variable described by this object\n\t\t * by using reflection.\n\t\t * \n\t\t * @param value  to be assigned to the described debug variable\n\t\t */\n",
    "517": "\t/**\n\t * Returns whether the two box configurations are equal.\n\t * \n\t * @param boxConfigurationNumber logical index into our flat data array\n\t * @param boxConfiguration the candidate box configuration to compare with\n\t * @return <code>true</code> if both box configurations are equal, and<br>\n\t *        <code>false</code> otherwise\n\t */\n",
    "523": "\t/**\n\t * Returns the maximal capacity of this storage.\n\t * \n\t * @return the maximal capacity of this storage\n\t */\n",
    "524": "\t/**\n\t * Adds data to the queue.\n\t * \n\t * @param boardPositionIndex the board position to be added\n\t * @param boardPositionPredecessor the predecessor to be added\n\t */\n",
    "531": "\t/**\n\t * Logically removes all board positions from the queue\n\t * until a board position different to the passed one occurs in the queue.\n\t * \n\t * @param boardPosition the board position to be over jumped\n\t */\n",
    "535": "\t/**\n\t * Retrieves and removes the last board position of this queue.\n\t * \n\t * @return the previous board position\n\t */\n",
    "538": "\t/**\n\t * Jumps backwards in the queue by the passed number of board positions.\n\t * \n\t * @param jumpCount number of board positions to be skipped backwards\n\t */\n",
    "542": "\t/**\n\t * Returns whether the queue is empty.\n\t * \n\t * @return <code>true</code> when queue is empty, and<br>\n\t *        <code>false</code> otherwise\n\t */\n",
    "547": "\t/**\n\t * Returns whether all box configurations could be generated. \n\t * \n\t * @return <code>true</code> if all box configurations have been generated,\n\t * \t      <code>false</code> if there is insufficient memory available,\n\t *        and not all box configurations have been generated.\n\t */\n",
    "551": "\t/**\n\t * Every object of this class gets passed a pushes depth. This depth holds\n\t * the number of pushes needed to reach the box configuration passed\n\t * to the constructor. This value is unique because there is only one\n\t * generation Runnable for every box configuration of the solution\n\t * to be optimized. By reading this value the optimizer can identify\n\t * each object of this class.\n\t * \n\t * @return the pushes depth that has been passed to the constructor of this object\n\t */\n",
    "561": "\t/**\n\t * Determine, whether this solution is better than the passed solution,\n\t * with respect to moves and then pushes.\n\t * \n\t * @param other the other solution we compare against\n\t * @return whether this solution is better\n\t */\n",
    "563": "\t/**\n\t * Determine, whether this solution is better than the passed solution,\n\t * with respect to pushes and then moves.\n\t * \n\t * @param other the other solution we compare against\n\t * @return whether this solution is better\n\t */\n",
    "568": "\t/**\n\t * Adds the specified board position into this priority queue.\n\t */\n",
    "570": "\t/**\n\t * Returns the number of stored <code>OptimizerBoardPositions</code>.\n\t * \n\t * @return the number of stored <code>OptimizerBoardPositions</code>\n\t */\n",
    "572": "\t/**\n\t * Removes and returns the board position having the lowest metrics (moves, pushes, ...).\n\t * \n\t * @return  board position having the lowest metrics \n\t */\n",
    "576": "\t/**\n\t * Adds the passed <code>String</code> to the log texts of the optimizer\n\t * to inform the user about the progress of the optimizer,\n\t * or to inform the developer about statistical data.\n\t * \n\t * @param text       text to be added to the log\n\t * @param stylename  registered name of style to be used\n\t */\n",
    "577": "\t /**\n\t  *Inserts the passed board position at the passed position.\n\t  * <p>\n\t  * This method moves the passed board position down until \n\t  * it is less than or equal to its children (or is a leaf).\n\t  *\n\t  * @param position the position to start the search for the correct position to insert into\n\t  * @param boardPosition the board position to be inserted\n\t  */\n",
    "580": "\t/**\n\t * Returns the number of board positions stored in this hash table.\n\t *\n\t * @return  the number of board positions stored in this hash table.\n\t */\n",
    "601": "\t/**\n\t * Removes all markings of squares.  \n\t */\n",
    "608": "\t/**\n\t * Debug method: without {@link Settings#isDebugModeActivated} nothing\n\t * visible happens.\n\t * In debug mode we print the current statistics to the optimizer logging.\n\t */\n",
    "610": "\t/**\n\t * Returns the box configuration index of the passed board position.\n\t * \n\t * @param boardPositionIndex  the index of the board position\n\t * @return the index the box configuration is stored at in the box configuration storage\n\t */\n",
    "613": "\t/**\n\t * Returns whether the second passed box configuration is a subset\n\t * of the first passed box configuration.\n\t * \n\t * @param boxConfiguration1\n\t *            box configuration 1\n\t * @param boxConfigurationArray\n\t *            array which contains the box configuration to be checked for\n\t *            being a subset\n\t * @param indexInArray\n\t *            index of the box configuration in the array\n\t * \n\t * @return <code>true</code> if the second passed box configuration is a subset\n\t *         of the first passed box configuration, and <code>false</code> otherwise\n\t */\n",
    "617": "\t/**\n\t * Returns the player position of the passed board position.\n\t * \n\t * @param boardPositionIndex  the index of the board position\n\t * @return the player position of the passed board position\n\t */\n",
    "619": "\t\t/**\n\t\t * Doubles the tree size.\n\t\t */\n",
    "626": "\t\t/**\n\t\t * Fills the sorted list with the box configurations from the tree.\n\t\t * \n\t\t * @param indexInTree index of the box configuration in the tree\n\t\t * @param last\t\n\t\t * @return \"lowest\" boxConfiguration at the moment in the tree\n\t\t */\n",
    "637": "\t/**\n\t * Returns the number of the currently selected object.\n\t * \n\t * @return number of the currently selected obj\n\t */\n",
    "638": "\t\t/**\n\t\t * Transforms the tree to a binary heap.\n\t\t * This method destroys the tree. That means:\n\t\t * only the binary heap can be used after this method has been called.\n\t\t */\n",
    "641": "\t/**\n\t * Using the mouse wheel is interpreted as a move through the selectable objects. \n\t *\n\t * @param evt the <code>MouseWheelEvent</code> fired\n\t */\n",
    "643": "\t/**\n\t * Sets the \"is already processed\" status of the passed board position.\n\t * \n\t * @param boardPositionIndex  index of the board position in this storage\n\t * @param processedStatus processed status to set\n\t */\n",
    "648": "    /**\n\t * This method is called when the user selects another view.\n\t */\n",
    "651": "\t\t/**\n\t\t * Sets all variables to null for the garbage collection.\n\t\t */\n",
    "653": "    /**\n\t * This method is called when the user selects another view.\n\t */\n",
    "656": "\t/**\n\t * Creates all things this panel needs.\n\t */\n",
    "663": "\t/**\n\t * Use the current value of the check box to enable or disable\n\t * the text field and label components.\n\t */\n",
    "666": "\t/**\n\t * Returns the value of the input field as double.\n\t * \n\t * @return the value of the input field, or {@code null}\n\t */\n",
    "669": "\t/**\n\t * Returns the value of the input field as integer.\n\t * \n\t * @return the value of the input field, or {@code null}\n\t */\n",
    "670": "\t/**\n\t * Convenience function: enters this object as the default table cell\n\t * renderer for type {@link java.util.Date}.\n\t * This is the expected usage for this class.\n\t * \n\t * @param table\n\t */\n",
    "672": "\t/**\n\t * Adds a level to be displayed\n\t * @param level level to be displayed\n\t */\n",
    "675": "\t/**\n\t * Returns whether the field is set \"active\".\n\t * \n\t * @return <code>true</code> if the field is active, and\n\t *        <code>false</code> otherwise\n\t */\n",
    "676": "\t/**\n\t * Adds a collection of levels to be displayed\n\t * @param collection collection of levels\n\t * @param startNumber index of the start level in the collection\n\t * @param endNumber index of the end level in the collection\n\t */\n",
    "677": "\t/**\n\t * Sets a new value for the display field.<br>\n\t * If the value is higher than the maximum or lower than the minimum,\n\t * the maximum or minimum value is used, respectively.\n\t * In any case the effectively used value is returned.\n\t * \n\t * @param value the value to be set\n\t * @return the set value\n\t */\n",
    "684": "\t/**\n\t * Method for closing the window after the ok-button has been clicked\n\t * \n\t * @param actionevent the action event to be analyzed\n\t */\n",
    "685": "\t/**\n\t * Informs all listeners using objects generated by the passed generator.\n\t * While calling the listener method for this notification this\n\t * ListenerSet object is not synchronized, any more.\n\t * Only the initial copying of the listener list is synchronized.\n\t * \n\t * @param eventgen generates the events to be passed to the listeners\n\t *                  ({@code null} is taken to generate {@code nulls})\n\t */\n",
    "687": "\t/**\n\t * Sets up the button for the \"start\" version.\n\t */\n",
    "688": "\t/**\n\t * Sets up the button for the \"stop\" version.\n\t */\n",
    "690": "\t/**\n\t * Sets up the button for the indicated version.\n\t * \n\t * @param forStart whether to set up for the \"start\" version\n\t */\n",
    "693": "\t/**\n\t * Partial setup regarding the border.\n\t * \n\t * @param forStart whether to set up for the \"start\" version\n\t */\n",
    "694": "\t/**\n\t * Partial setup regarding the background color.\n\t * \n\t * @param forStart whether to set up for the \"start\" version\n\t */\n",
    "696": "\t/**\n\t * Create the border for the indicated version.\n\t * Does <em>not</em> look at {@link #useBorder}.\n\t * \n\t * @param forStart whether to create it for the \"start\" version\n\t * @return         border for the indicated version\n\t */\n",
    "697": "\t/**\n\t * Creates and returns a border for the \"start\" version.\n\t * Does <em>not</em> look at {@link #useBorder}.\n\t * \n\t * @return border for a \"start\" version\n\t */\n",
    "699": "\t/**\n\t * Creates and returns a border for the \"stop\" version.\n\t * Does <em>not</em> look at {@link #useBorder}.\n\t * \n\t * @return border for a \"stop\" version\n\t */\n",
    "703": "\t/**\n\t * Does not have effect before the next {@link #setToStart()}\n\t * or {@link #setToStop()}.\n\t * @param useBorder the useBorder to set\n\t */\n",
    "706": "\t/**\n\t * Does not have effect before the next {@link #setToStart()}\n\t * or {@link #setToStop()}.\n\t * @param useBgColor the useBgColor to set\n\t */\n",
    "710": "\t/**\n\t * Does not have effect before the next {@link #setToStart()}.\n\t * @param borderColorStart the borderColorStart to set\n\t */\n",
    "715": "\t/**\n\t * Does not have effect before the next {@link #setToStop()}.\n\t * @param borderColorStop the borderColorStop to set\n\t */\n",
    "718": "\t/**\n\t * Does not have effect before the next {@link #setToStart()}.\n\t * @param bgColorStart the bgColorStart to set\n\t */\n",
    "721": "\t/**\n\t * Does not have effect before the next {@link #setToStop()}.\n\t * @param bgColorStop the bgColorStop to set\n\t */\n",
    "722": "\t/**\n\t * Computes and returns whether the rectangle given by the left upper corner\n\t * and both dimensions is completely outside the specified clip rectangle.\n\t * When the clip rectangle is missing, it is considered to be arbitrarily large.\n\t * \n\t * @param x    x of upper left corner\n\t * @param y    y of upper left corner\n\t * @param xlen width\n\t * @param ylen height\n\t * @param clip rectangle we compare against\n\t * @return whether (x,y,xlen,ylen) is completely outside of \"clip\"\n\t */\n",
    "741": "\t/**\n\t * Returns whether this shortcut has an alias.\n\t * \n\t * @return <code>true</code> if this shortcut has an alias,\n\t *        <code>false</code> otherwise\n\t */\n",
    "743": "\t/**\n\t * Returns the alias of this shortcut.\n\t * \n\t * @return the alias of this shortcut\n\t */\n",
    "746": "\t/**\n\t * Sets the alias of this shortcut.\n\t * \n\t * @param newAlias the new alias of this shortcut\n\t */\n",
    "747": "\t/**\n\t * Returns the path stored in this shortcut.\n\t * \n\t * @return the path\n\t */\n",
    "750": "\t/**\n\t * Returns the name of this shortcut.\n\t * <p>\n\t * If there is an alias this alias is returned. Otherwise the path is returned.\n\t * \n\t * @return the name of this shortcut\n\t */\n",
    "752": "\t/**\n\t * Returns formatted shortcut's name for display.\n\t *\n\t * @return the display name of this shortcut\n\t */\n",
    "753": "\t/**\n\t * Extracts the graphic specified by the passed name from the passed graphic\n\t * which contains all graphics of the skin.\n\t * <p>\n\t * This method is only used for reducing the lines of code when extracting\n\t * the graphics from the entire graphic containing all skin graphics.\n\t * This method assumes that the position of the graphic to be extracted\n\t * is stored in the settings as \"x, y\" coordinates.\n\t * \n\t * @param entireGraphic  skin graphic containing all skin graphics\n\t * @param graphicName  the name of the graphic to extract\n\t * @return the extracted <code>BufferedImage</code>\n\t */\n",
    "754": "\t/**\n\t * Returns the color of this shortcut.\n\t * \n\t * @return the color of this shortcut\n\t */\n",
    "755": "\t/**\n\t * Sets the color of this shortcut.\n\t * \n\t * @param color color to be set\n\t */\n",
    "756": "\t/**\n\t * Sets the board this GUI shows.\n\t * \n\t * @param board board to be shown\n\t */\n",
    "758": "\t/**\n\t * Returns the <code>String</code> representation of the shortcut's color.\n\t * \n\t * @return color of this shortcut as <code>String</code>\n\t */\n",
    "759": "\t/**\n\t * Extracts the graphic specified by the passed name from the passed graphic\n\t * which contains all graphics of the skin.\n\t * <p>\n\t * This method is only used for reducing the lines of code when extracting\n\t * the graphics from the entire graphic containing all skin graphics.\n\t * This method assumes that only the x-coordinate is relevant for locating\n\t * a sub graphic in the entire graphic. \n\t * \n\t * @param entireGraphic  skin graphic containing all skin graphics\n\t * @param graphicName  the name of the graphic to extract\n\t * @return the extracted <code>BufferedImage</code>\n\t */\n",
    "764": "\t/**\n\t * Erase any comments of the passed property string.\n\t * A comment starts at the first '#' (hash sign).\n\t * Also, blanks and tabs are trimmed from the (right) end of the result.\n\t * \n\t * @param propertyValue value of a property as a String\n\t * @return trimmed value\n\t */\n",
    "772": "\t/**\n\t * Returns the current transformation as String.\n\t * This String is saved into the file of the level as information.\n\t * Note: this string is NOT influenced by any language settings.\n\t * \n\t * @return the transformation as <code>String</code>\n\t * @see #newlevel()\n\t */\n",
    "774": "\t/**\n\t * This default generator implementation just returns the {@link #base}\n\t * object reference.\n\t * That probably works only for immutable types T.\n\t * <p>\n\t * Most implementations should override this method by something that\n\t * clones the {@link #base} or uses it as basis for a constructor.\n\t * E.g. ActionEvents are neither immutable nor do they support cloning.\n\t * \n\t * @return the next generated object\n\t */\n",
    "779": "\t/**\n\t * Creates a button for the tool bar.\n\t * \n\t * @param iconName\t\tthe name of the icon for the button\n\t * @param actionCommand the action command of the button\n\t * @param toolTipText \tthe tool tip text for the button\n\t * @return the created button\n\t * @see #createToolBarButtonByKey(String, String, String)\n\t */\n",
    "781": "\t/**\n\t * Returns the currently used skin.\n\t * \n\t * @return the <code>Skin</code> currently used\n\t */\n",
    "784": "\t/**\n\t * Returns the string corresponding to the passed property name.\n\t * \n\t * @param name name of property\t\n\t * @param defaultValue value to be set if the property value can't be set\n\t * @return value of the property as string or null, if no property is found\n\t */\n",
    "785": "\t/**\n\t * Creates a button for the tool bar.\n\t * \n\t * @param iconName       the name of the icon for the button\n\t * @param actionCommand  the action command of the button\n\t * @param toolTipTextKey the text key for the tool tip text for the button\n\t * @return the created button\n\t * @see #createToolBarButton(String, String, String)\n\t */\n",
    "787": "\t/**\n\t * Sets a new delay for the animations that are shown.\n\t * <p>\n\t * Depending on the skin there may be an animation for a selected box and\n\t * the selected player.\n\t * \n\t * @param delay\n\t *            the delay in milliseconds\n\t */\n",
    "793": "\t/**\n\t * Sets the view direction of the player to the passed direction.\n\t * <p>\n\t * The view direction is important for some skins in order to be able to\n\t * show the correct graphic.\n\t * \n\t * @param viewDirection\n\t *            the view direction of the player\n\t */\n",
    "800": "\t/**\n\t * Sets the maximum factor for scaling the graphics.\n\t * <p>\n\t * Some skins offer bad quality graphics which shouldn't be scaled too much.\n\t * Hence the user can set a maximum scaling factor. This way the graphics\n\t * aren't scaled beyond this factor even if there is enough space for the\n\t * graphics to be drawn.\n\t * \n\t * @param maximumScalingFactor\n\t *            the new factor to be set\n\t */\n",
    "805": "\t/**\n\t * Sets the flag that a recalculation has to be done.\n\t */\n",
    "806": "\t/**\n\t * Transforms the board (rotation and mirroring)\n\t * \n\t * @param transformationValue  kind of transformation\n\t */\n",
    "808": "\t/**\n\t * Sets the passed level as level to be displayed in this Panel.\n\t * \n\t * @param levelToBeDisplayed  the <code>Level</code> to be displayed\n\t */\n",
    "810": "\t/**\n\t * Sets the passed board to be displayed.\n\t * \n\t * @param boardAsString the board data as <code>String</code>\n\t */\n",
    "813": "\t/**\n\t * Sets the flag specifying whether the infobar is to be shown or not.\n\t * \n\t * @param visibleStatus\n\t *            visibility status of the infobar to set\n\t */\n",
    "814": "\t/**\n\t * Sets the passed board to be displayed.\n\t * \n\t * @param board the board to be displayed\n\t */\n",
    "816": "\t/**\n\t * Returns the <code>Board</code> displayed in this class.\n\t * \n\t * @return the <code>Board</code> of this class\n\t */\n",
    "819": "\t/**\n\t * Returns the <code>Level</code> displayed in this class\n\t * \n\t * @return the <code>Level</code> of this class\n\t */\n",
    "821": "\t/**\n\t * Returns the current width of a square from the current scaled skin.\n\t * @return width of a square\n\t */\n",
    "823": "\t/**\n\t * Returns the current height of a square from the current scaled skin.\n\t * @return height of a square\n\t */\n",
    "824": "\t/**\n\t * Sets the flag indication that the sizes must be recalculated.\n\t * If e.g. we switch into editor mode, we have less space for the board,\n\t * since we have to draw some objects for the editor.\n\t */\n",
    "827": "\t/**\n\t * Resets the <code>board</code> and the player position members\n\t * from the <code>boardInitial</code> member.\n\t */\n",
    "835": "\t/**\n\t * Repaints the GUI immediately.\n\t * This is the sledge-hammer method: everything is painted, again.\n\t */\n",
    "840": "\t/**\n\t * Packs the passed unpacked box configuration into a new packed box configuration.\n\t * \n\t * @param newPackedBoxConfiguration\n\t * @param unpackedBoxConfiguration\n\t */\n",
    "856": "\t/**\n\t * Marks the passed board position as visited.\n\t * \n\t * @param boardPositionIndex\n\t *            index of the board position in the visitedData array\n\t */\n",
    "863": "\t/**\n\t * Sets the cursor image to the specified cursor.\n\t * \n\t * @param cursor The value of the cursor to be set\n\t */\n",
    "865": "\t/**\n\t * If the coordinates of the point aren't located on the board\n\t * they are adjusted so they are on the edge of the board.\n\t * \n\t * @param p  <code>Point</code> containing the data which is adjusted\n\t */\n",
    "866": "\t/**\n\t * Repaints part of the GUI immediately.  Only a rectangle inside the board is\n\t * considered to be changed, specified in external board square coordinates.\n\t * But, the number of moves and pushes has also be considered to be changed,\n\t * which implies some more updates.\n\t * \n\t * @param xmin      upper left X of board square rectangle\n\t * @param ymin      upper left Y of board square rectangle\n\t * @param extWidth  width  of rectangle in board squares\n\t * @param extHeight height of rectangle in board squares\n\t */\n",
    "870": "\t/**\n\t * Returns the influence distance between the start and the target square.\n\t * The higher the distance the less influence the target square has\n\t * on the start square.\n\t * \n\t * @param startSquare  position of the start square\n\t * @param targetSquare position of the target square\n\t * \n\t * @return influence distance from the start square to the target square\n\t */\n",
    "871": "\t/**\n\t * This method sets the currently set language in all menu bar\n\t * and tool bar components.\n\t */\n",
    "872": "\t/**\n\t * Returns whether the board position (box + player positions) is marked as\n\t * visited.\n\t * \n\t * @param boardPositionIndex\n\t *            index of the board position in the visitedData array\n\t * @return <code>true</code>board position has already been visited;\n\t *         <code>false</code>otherwise\n\t */\n",
    "874": "\t/**\n\t * Inserts a move of the player into the history.\n\t * \n\t * @param direction\tinto which the player moved\n\t */\n",
    "876": "\t\t/**\n\t\t * Set the collected values back to the initial values,\n\t\t * indicating an empty range.\n\t\t */\n",
    "877": "\t/**\n\t * Returns the next movement from the history,\n\t * and advances the \"current\" pointer to it.\n\t * \n\t * @return <code>null</code>, or the <code>HistoryElement</code> containing the data\n\t *         for the next movement of the history\n\t */\n",
    "878": "\t/**\n\t * Returns the previously executed movement from the history,\n\t * and moves back the \"current\" pointer before it.\n\t * \n\t * @return <code>null</code>, or the <code>HistoryElement</code> containing the data\n\t *         for the previously executed movement \n\t */\n",
    "881": "\t/**\n\t * Returns the movement with the given number.\n\t * \n\t * @param movementNo number of the movement to be returned\n\t * @return  <code>null</code>, or the <code>HistoryElement</code> of the movement\n\t *          with the given number\n\t */\n",
    "882": "\t/**\n\t * Returns the index of the last executed movement.\n\t * That is also the count of the player moves up to now/here. \n\t * \n\t * @return index of the last executed movement\n\t */\n",
    "883": "\t\t/**\n\t\t * Returns whether the collected area is empty.\n\t\t * \n\t\t * @return whether the area is empty\n\t\t */\n",
    "884": "\t/**\n\t * Returns the total count of the stored movements.\n\t * \n\t * @return total count of movements\n\t */\n",
    "885": "\t/**\n\t * Returns the (total) number of pushes contained in the history.\n\t * \n\t * @return number of pushes in the history\n\t */\n",
    "889": "\t/**\n\t * Returns the LURD string of all movements up to the current movement.\n\t * \n\t * @return LURD string till the current movement (inclusive)\n\t * @see #getLURDString(int, int)\n\t */\n",
    "890": "\t\t/**\n\t\t * Adds a point to the area, given by its components.\n\t\t * \n\t\t * @param x\n\t\t * @param y\n\t\t */\n",
    "891": "\t/**\n\t * Returns the complete LURD string of all movements, independent from the\n\t * current point inside of the history.\n\t * \n\t * @return LURD string till the end (inclusive)\n\t * @see #getLURDString(int, int)\n\t */\n",
    "893": "\t/**\n\t * Sets the history to the first movement.\n\t */\n",
    "895": "\t/**\n\t * Sets the \"current\" pointer to the specified index.\n\t * This changes to reference point for further \"undo\" and \"redo\" operations.\n\t * This is the way to quickly jump to an arbitrary point in the history.\n\t *\n\t * @param movementNo the movement number to be set\n\t */\n",
    "897": "\t/**\n\t * Sets the marker which indicates that the next movement will be the start\n\t * of a combined movement.\n\t */\n",
    "898": "\t\t/**\n\t\t * Collect another external position.\n\t\t * External positions are what is handled in the GUI, they reflect screen\n\t\t * positions after any transformation.\n\t\t * \n\t\t * @param externalPos <code>-1</code>. or external position to collect\n\t\t */\n",
    "900": "\t/**\n\t * Sets back the \"current\" pointer to the previous movement.\n\t * This operation is unchecked / unconditional.\n\t */\n",
    "903": "\t/**\n\t * Sets forward the \"current\" pointer to the next movement.\n\t * This operation is unchecked / unconditional.\n\t */\n",
    "904": "\t\t/**\n\t\t * Collect another internal position (from the model).\n\t\t * Before it is collected, it must be translated to an external position\n\t\t * according to the current transformation.\n\t\t * \n\t\t * @param internalPos <code>-1</code>. or internal position to collect\n\t\t */\n",
    "905": "\t/**\n\t * Returns whether there is a preceding movement.\n\t * \n\t * @return <code>true</code>, if there is a  preceding movement,<br>\n\t *   \t  <code>false</code>, if there is no preceding movement\n\t */\n",
    "908": "\t/**\n\t * Returns whether there is a successor movement.\n\t * \n\t * @return <code>true</code> if there is a  successor movement,<br>\n\t * \t\t  <code>false</code> if there is no successor movement\n\t */\n",
    "910": "\t/**\n\t * Repaints part of the GUI.\n\t * Just the number of moves and the number of pushes is considered changed.\n\t */\n",
    "911": "\t/**\n\t * Return the number of steps to the preceding element one can do,\n\t * until the first movement is reached, or one that is marked to be\n\t * the start of a combined movement.\n\t * \n\t * @return length of the last combined movement\n\t */\n",
    "913": "\t/**\n\t * Return the length of the next combined movement, i.e. how many steps\n\t * forward can we do until we find an element which is marked to be\n\t * the start of a combined movement (excluding the current element).\n\t * \n\t * @return length of the next combined movement\n\t */\n",
    "915": "\t/**\n\t * Starting with the current movement, count the number of combined\n\t * segments.  Even when the first (current) movement is not marked\n\t * to be the start of a combined movement, we count it as start\n\t * of such a segment.\n\t * \n\t * @return count of segments starting at current movement\n\t */\n",
    "918": "\t/**\n\t * Starting with the current movement we scan forward and compute the\n\t * average length of combined segments.\n\t * @return average length of movement segments starting at current movement\n\t */\n",
    "932": "\t/**\n\t * Returns if a box has been pushed.\n\t * \n\t * @return true = A box has been pushed, false = no box has been pushed\n\t */\n",
    "939": "\t/**\n\t * Returns the mouse listener for this class.\n\t * \n\t * @return the mouse listener\n\t */\n",
    "941": "\t/**\n\t * Sets whether the editor menu item is enabled.\n\t * @param enabled\n\t */\n",
    "948": "\t/**\n\t * Returns the menu item for saving a level.\n\t * \n\t * @return the <code>JMenuItem</code> for saving a level\n\t */\n",
    "954": "\t/**\n\t * Returns the button for showing info in the menu bar.\n\t * <p>\n\t * The caller can fully access this button.\n\t * \n\t * @return the <code>JMenuItem</code> for saving a level\n\t */\n",
    "960": "\t/**\n\t * Sets the objects enabled or disabled depending on the current mode\n\t * (play or editor mode). \n\t */\n",
    "966": "\t/**\n\t * Displays the passed board position for debug purposes.\n\t * \n\t * @param storage\n\t *            storage the box configuration is stored in\n\t * @param boardPositionIndex\n\t *            index of the board position in the visited data array\n\t * @param graphicOutput\n\t *            flag, indicating whether there should be a graphical display\n\t *            or not\n\t * @param waitForEnter\n\t *            flag, indicating whether the program has to wait for \"enter\"\n\t *            after displaying the box configuration\n\t */\n",
    "969": "\t/**\n\t * Sets a color for the passed <code>Solution</code> in this GUI.\n\t * <p>\n\t * If \"null\" is passed as color the solution is set back to the default color.\n\t * \n\t * @param solution the <code>Solution</code> to be colored\n\t * @param color the <code>Color</code>\n\t */\n",
    "971": "\t/**\n\t * Sets the status of the solver mode dependent objects.\n\t * \n\t * @param enabledStatus <code>true</code>, if the objects are enabled, and\n\t * \t\t\t\t\t\t<code>false</code> if the objects are disabled\n\t */\n",
    "972": "\t\t/**\n\t\t * Returns whether the the current solution type is a valid\n\t\t * and new solution.\n\t\t * @return <code>true</code> if the solution is a valid new solution,\n\t\t *   or<br><code>false</code> otherwise\n\t\t */\n",
    "973": "\t/**\n\t * Sets the background color for all solutions to the default color.\n\t */\n",
    "974": "\t/**\n\t * Makes a single row \"selected\".\n\t * When the passed view row index is negative (e.g. as result of a\n\t * failed conversion) the current selection remains unchanged.\n\t * \n\t * @param viewrowindex the view index of the row to be selected\n\t */\n",
    "976": "\t/**\n\t * Adds the passed {@code ActionListener} to the listeners being informed\n\t * when an action is fired. \n\t * \n\t * @param actionListener  the {@code ActionListener} to be added\n\t */\n",
    "979": "\t/**\n\t * Shows an information dialog with translated title \"note\" and the message text\n\t * for the text key \"solutionList.noSolutionSelected\".\n\t */\n",
    "980": "\t/**\n\t * Removes the passed {@code ActionListener} from the listeners of this object.\n\t * \n\t * @param actionListener  the {@code ActionListener} to be removed\n\t */\n",
    "982": "\t/**\n\t * Displays the passed board position for debug purposes.\n\t * \n\t * @param storage\n\t *            storage the box configuration is stored in\n\t * @param boxConfigurationIndex\n\t *            index of the box configurtaion in the visited data array\n\t * @param playerPosition\n\t * \t\t      position of the player in internal format\n\t * @param graphicOutput\n\t *            flag, indicating whether there should be a graphical display\n\t *            or not\n\t * @param waitForEnter\n\t *            flag, indicating whether the program has to wait for \"enter\"\n\t *            after displaying the box configuration\n\t */\n",
    "984": "\t/**\n\t * Sets the enabled status of the undo buttons.\n\t * \n\t * @param enabledStatus <code>true</code>, if the objects are enabled, and\n\t * \t\t\t\t\t\t<code>false</code> if the objects are disabled\n\t */\n",
    "985": "\t\t/**\n\t\t * Handles the mouse event \"mouseDragged\".\n\t\t * \n\t\t * @param evt  the event that has been fired\n\t\t */\n",
    "987": "\t/**\n\t * This is the kernel of {@link #informListeners(Solution, String)},\n\t * after that method has decided, in which thread we have to work.\n\t * @param solution\n\t * @param action\n\t */\n",
    "989": "\t/**\n\t * Informs all listeners about a change of the stored solutions.\n\t * <p>\n\t * The listeners must know which actions can be caught from this class\n\t * (this avoids an extra interface containing methods for the different actions).\n\t */\n",
    "993": "\t/**\n\t * Sets the visibility of the \"take solution as history\" menu item.\n\t * \n\t * @param isVisible <code>true</code> sets the \"take solution as history\" menu item visible\n\t * \t\t\t\t   <code>false</code> sets the \"take solution as history\" menu item invisible\n\t */\n",
    "996": "\t/**\n\t * Sets the enabled status of the redo buttons.\n\t * \n\t * @param enabledStatus <code>true</code> if the objects are enabled, and\n\t * \t\t\t\t\t   <code>false</code> if the objects are disabled\n\t */\n",
    "1000": "\t\t/**\n\t\t * Add the passed solution as solution to be highlighted.\n\t\t * \n\t\t * @param solution <code>Solution</code> to be highlighted\n\t\t */\n",
    "1002": "\t\t/**\n\t\t * Removes all solutions to be highlighted.\n\t\t */\n",
    "1006": "\t\t/**\n\t\t * Returns the intensity the passed solution is to be highlighted.\n\t\t *\n\t\t * @param solution the <code>Solution</code> whose highlight intensity is returned\n\t\t * @return the highlight intensity or null if the passed solution isn't to be highlighted\n\t\t */\n"
}
